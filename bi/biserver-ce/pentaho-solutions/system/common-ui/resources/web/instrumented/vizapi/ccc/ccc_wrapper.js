/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['vizapi/ccc/ccc_wrapper.js']) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'] = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][10] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][13] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][16] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][18] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][20] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][21] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][24] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][27] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][28] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][29] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][30] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][33] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][37] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][42] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][43] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][45] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][46] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][47] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][50] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][119] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][123] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][128] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][129] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][131] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][139] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][150] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][167] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][185] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][202] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][220] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][238] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][256] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][292] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][318] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][355] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][382] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][468] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][510] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][527] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][599] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][634] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][729] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][805] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][806] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][809] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][810] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][813] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][814] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][819] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][820] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][824] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][825] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][836] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][837] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][847] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][848] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][859] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][860] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][870] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][871] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][872] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][873] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][876] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][878] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][883] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][891] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][892] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][905] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][906] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][912] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][920] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][921] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][927] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][935] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][936] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][947] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][948] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][960] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][961] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][963] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][964] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][967] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][968] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][971] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][972] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][975] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][976] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][979] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][980] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][983] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][987] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1022] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1025] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1026] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1029] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1030] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1033] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1037] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1039] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1040] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1041] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1043] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1046] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1048] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1049] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1051] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1052] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1053] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1055] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1056] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1059] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1060] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1061] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1063] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1066] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1073] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1074] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1075] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1077] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1082] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1083] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1095] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1098] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1099] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1100] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1101] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1104] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1109] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1110] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1114] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1119] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1120] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1121] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1122] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1125] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1129] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1130] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1131] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1136] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1137] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1140] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1144] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1148] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1157] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1158] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1159] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1161] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1176] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1180] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1187] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1188] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1190] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1191] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1192] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1193] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1194] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1197] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1202] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1206] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1208] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1209] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1211] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1218] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1219] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1224] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1234] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1236] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1239] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1240] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1246] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1250] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1253] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1254] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1264] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1265] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1270] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1274] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1278] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1280] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1281] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1282] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1283] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1286] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1287] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1289] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1291] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1292] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1293] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1298] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1299] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1302] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1304] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1311] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1312] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1315] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1317] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1325] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1326] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1327] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1330] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1331] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1333] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1341] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1342] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1343] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1346] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1348] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1357] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1362] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1363] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1371] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1372] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1373] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1377] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1379] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1382] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1383] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1384] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1385] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1386] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1388] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1389] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1390] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1391] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1392] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1396] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1403] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1404] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1405] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1406] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1409] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1410] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1418] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1419] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1422] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1424] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1428] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1429] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1430] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1431] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1433] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1434] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1435] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1436] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1437] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1441] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1449] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1466] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1467] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1468] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1471] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1474] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1480] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1485] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1488] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1489] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1497] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1501] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1503] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1507] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1510] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1512] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1514] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1523] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1525] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1526] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1535] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1539] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1542] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1545] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1546] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1547] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1551] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1557] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1561] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1564] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1569] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1572] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1574] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1575] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1584] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1588] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1590] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1598] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1602] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1604] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1606] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1607] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1608] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1609] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1610] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1611] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1626] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1628] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1630] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1631] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1634] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1635] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1637] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1641] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1645] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1646] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1648] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1651] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1661] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1662] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1665] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1669] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1670] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1671] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1672] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1674] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1677] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1678] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1681] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1683] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1684] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1685] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1686] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1690] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1696] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1697] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1703] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1704] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1706] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1707] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1710] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1713] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1723] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1725] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1726] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1727] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1748] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1750] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1751] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1752] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1754] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1755] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1760] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1761] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1762] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1763] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1765] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1769] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1770] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1777] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1780] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1781] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1783] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1827] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1828] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1831] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1835] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1837] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1839] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1843] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1844] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1846] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1850] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1854] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1856] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1858] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1860] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1866] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1867] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1870] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1871] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1873] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1879] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1880] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1882] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1884] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1886] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1892] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1894] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1895] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1897] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1898] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1899] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1901] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1910] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1911] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1912] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1918] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1919] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1927] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1935] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1936] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1939] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1941] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1942] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1943] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1944] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1945] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1946] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1947] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1948] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1949] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1950] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1952] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1953] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1954] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1958] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1960] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1964] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1969] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1976] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1980] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1982] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1988] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1990] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2029] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2030] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2032] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2033] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2034] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2039] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2040] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2041] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2046] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2051] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2053] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2054] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2055] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2056] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2057] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2059] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2060] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2066] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2068] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2073] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2076] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2079] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2080] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2081] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2087] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2088] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2089] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2095] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2096] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2097] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2100] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2101] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2102] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2103] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2104] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2107] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2108] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2109] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2113] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2114] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2116] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2119] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2120] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2121] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2122] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2126] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2127] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2149] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2150] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2151] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2152] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2153] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2161] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2162] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2167] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2168] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2170] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2171] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2173] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2174] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2179] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2180] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2181] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2183] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2185] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2189] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2193] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2200] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2205] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2206] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2209] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2210] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2213] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2214] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2219] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2220] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2226] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2227] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2231] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2232] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2233] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2234] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2236] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2245] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2246] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2248] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2258] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2261] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2270] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2275] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2276] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2277] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2278] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2279] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2281] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2282] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2294] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2296] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2299] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2300] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2302] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2312] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2313] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2317] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2318] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2319] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2326] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2327] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2329] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2333] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2334] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2335] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2336] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2346] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2347] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2349] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2350] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2357] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2360] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2362] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2363] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2366] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2368] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2369] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2370] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2371] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2375] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2377] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2379] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2381] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2385] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2386] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2393] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2394] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2397] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2398] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2401] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2402] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2405] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2406] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2412] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2422] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2427] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2430] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2431] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2437] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2438] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2439] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2441] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2442] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2445] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2450] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2455] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2457] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2459] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2460] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2463] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2464] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2467] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2468] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2470] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2471] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2472] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2473] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2474] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2476] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2477] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2480] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2481] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2484] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2489] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2492] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2493] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2494] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2496] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2501] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2502] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2503] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2506] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2510] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2514] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2515] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2520] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2521] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2525] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2526] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2529] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2533] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2534] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2535] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2537] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2538] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2543] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2554] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2555] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2558] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2559] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2560] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2566] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2567] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2570] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2571] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2574] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2577] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2578] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2581] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2585] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2587] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2589] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2592] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2593] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2594] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2596] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2597] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2598] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2599] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2602] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2605] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2608] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2610] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2611] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2613] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2621] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2626] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2628] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2629] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2632] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2633] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2634] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2638] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2639] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2642] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2647] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2649] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2654] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2655] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2658] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2660] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2662] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2663] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2668] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2674] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2676] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2677] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2680] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2682] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2684] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2687] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2688] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2689] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2690] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2695] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2699] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2700] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2701] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2706] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2714] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2715] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2716] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2717] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2721] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2723] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2726] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2732] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2736] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2737] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2738] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2740] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2741] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2742] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2743] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2746] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2747] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2748] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2751] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2754] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2758] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2763] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2764] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2768] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2770] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2771] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2773] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2774] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2775] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2777] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2785] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2787] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2788] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2789] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2791] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2792] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2794] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2800] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2801] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2805] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2806] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2807] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2808] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2810] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2811] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2816] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2819] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2828] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2829] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2830] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2831] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2833] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2834] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2836] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2837] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2838] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2839] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2840] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2841] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2842] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2843] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2845] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2846] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2850] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2851] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2853] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2854] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2855] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2856] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2858] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2861] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2866] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2869] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2871] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2879] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2882] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2887] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2901] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2946] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2948] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2949] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2954] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2955] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2958] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2959] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2962] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2963] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2967] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2968] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2970] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2972] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2975] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2981] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2982] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2984] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2986] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2988] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2989] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2992] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2993] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2996] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2999] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3001] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3005] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3012] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3013] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3014] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3018] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3019] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3020] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3021] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3025] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3026] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3027] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3028] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3031] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3036] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3040] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3044] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3053] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3054] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3061] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3065] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3068] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3077] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3087] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3089] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3090] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3092] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3096] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3102] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3107] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3111] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3112] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3113] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3114] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3115] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3116] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3123] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3124] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3133] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3134] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3135] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3136] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3137] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3138] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3142] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3150] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3152] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3162] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3164] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3194] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3197] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3198] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3201] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3208] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3212] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3213] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3214] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3215] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3219] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3224] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3225] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3227] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3228] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3230] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3233] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3234] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3235] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3238] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3242] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3251] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3252] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3253] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3256] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3257] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3258] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3261] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3268] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3269] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3274] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3279] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3281] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3283] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3284] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3287] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3288] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3299] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3301] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3303] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3304] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3305] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3310] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3312] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3313] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3314] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3315] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3316] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3319] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3320] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3321] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3325] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3326] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3329] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3333] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3336] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3337] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3338] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3339] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3340] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3343] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3344] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3345] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3353] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3357] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3358] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3361] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3362] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3363] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3365] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3369] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3372] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3377] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3381] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3385] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3389] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3393] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3395] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3399] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3401] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3405] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3410] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3412] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3413] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3414] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3415] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3420] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3426] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3428] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3431] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3432] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3434] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3436] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3437] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3441] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3443] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3444] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3445] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3450] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3453] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3454] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3458] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3473] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3475] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3481] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3482] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3483] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3484] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3485] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3487] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3488] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3491] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3493] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3495] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3499] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3500] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3501] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3502] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3507] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3511] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3513] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3515] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3517] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3518] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3523] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3525] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3531] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3532] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3533] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3534] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3535] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3537] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3538] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3541] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3546] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3548] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3549] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3551] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3552] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3553] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3554] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3559] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3565] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3570] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3575] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3581] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3585] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3590] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3591] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3592] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3598] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3600] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3606] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3607] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3610] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3616] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3621] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3626] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3628] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3629] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3631] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3633] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3634] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3635] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3636] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3638] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3640] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3641] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3645] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3646] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3647] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3648] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3661] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3665] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3666] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3668] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3673] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3674] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3677] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3678] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3681] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3683] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3685] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3687] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3689] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3691] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3692] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3694] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3698] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3702] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3705] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3708] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3710] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3712] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3716] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3718] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3723] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3728] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3730] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3740] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3741] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3745] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3753] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3757] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3763] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3764] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3766] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3767] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3769] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3770] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3771] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3772] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3773] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3778] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3779] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3780] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3782] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3784] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3786] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3789] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3792] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3796] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3804] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3806] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3811] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3812] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3813] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3816] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3817] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3820] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3821] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3823] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3825] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3828] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3838] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3840] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3844] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3846] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3847] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3850] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3860] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3862] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3865] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3869] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3873] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3878] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3880] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3881] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3886] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3896] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3899] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3900] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3905] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3909] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3911] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3915] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3917] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3925] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3926] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3927] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3928] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3930] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3934] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3935] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3936] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3937] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3940] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3950] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3954] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3959] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3982] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3984] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3986] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3987] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3988] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3989] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3990] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3991] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3992] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3994] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3995] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3998] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4002] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4003] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4004] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4005] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4007] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4010] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4011] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4012] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4014] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4029] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4030] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4031] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4037] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4039] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4040] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4041] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4042] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4044] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4045] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4046] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4050] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4053] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4055] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4057] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4064] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4065] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4070] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4072] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4085] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4086] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4087] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4088] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4092] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4098] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4100] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4101] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4104] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4111] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4152] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4156] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4157] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4158] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4159] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4162] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4167] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4168] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4172] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4173] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4176] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4184] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4185] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4186] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4189] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4194] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4195] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4197] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4198] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4199] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4200] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4202] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4205] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4209] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4210] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4213] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4214] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4219] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4220] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4221] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4223] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4224] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4225] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4229] = 0;
}
_$jscoverage['vizapi/ccc/ccc_wrapper.js'].source = ["pen<span class=\"k\">.</span>define<span class=\"k\">([</span>","        <span class=\"s\">\"cdf/lib/CCC/def\"</span><span class=\"k\">,</span> ","        <span class=\"s\">\"cdf/lib/CCC/pvc-d1.0\"</span><span class=\"k\">,</span> ","        <span class=\"s\">\"cdf/lib/CCC/protovis\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"common-ui/vizapi/VizController\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"common-ui/vizapi/ccc/ccc_analyzer_plugin\"</span> <span class=\"c\">// TODO: temporary dependency due to debug loading time problems</span>","    <span class=\"k\">],</span>","<span class=\"k\">function</span><span class=\"k\">(</span>def<span class=\"k\">,</span> pvc<span class=\"k\">,</span> pv<span class=\"k\">)</span><span class=\"k\">{</span>","","    <span class=\"k\">var</span> _filterSelectionMaxCount <span class=\"k\">=</span> <span class=\"s\">200</span><span class=\"k\">;</span> <span class=\"c\">// TODO: Selection count limit is hard-coded</span>","    ","    <span class=\"c\">// Declare **global** pentaho namespace variable</span>","    pentaho <span class=\"k\">=</span> <span class=\"k\">typeof</span> pentaho <span class=\"k\">!=</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> pentaho <span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    ","    <span class=\"c\">// This allows def.types below not installing 'pentaho' on the global space...</span>","    def<span class=\"k\">.</span>globalSpace<span class=\"k\">(</span><span class=\"s\">'pentaho'</span><span class=\"k\">,</span> pentaho<span class=\"k\">);</span>","    ","    pentaho<span class=\"k\">.</span>visualizations <span class=\"k\">||</span> <span class=\"k\">(</span>pentaho<span class=\"k\">.</span>visualizations <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","    ","    <span class=\"k\">function</span> defVisualization<span class=\"k\">(</span>viz<span class=\"k\">)</span><span class=\"k\">{</span>","        pentaho<span class=\"k\">.</span>visualizations<span class=\"k\">.</span>push<span class=\"k\">(</span>viz<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    defCCCVisualizations<span class=\"k\">();</span>","    ","    <span class=\"c\">// TODO: temporary call due to debug loading time problems</span>","    <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>document<span class=\"k\">.</span>location<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">try</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">((</span><span class=\"s\">''</span><span class=\"k\">+</span>document<span class=\"k\">.</span>location<span class=\"k\">).</span>indexOf<span class=\"k\">(</span><span class=\"s\">'debug=true'</span><span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                analyzerPlugins<span class=\"k\">[</span>analyzerPlugins<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">].</span>init<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span>ex<span class=\"k\">)</span> <span class=\"k\">{</span>","            pvc<span class=\"k\">.</span>logError<span class=\"k\">(</span><span class=\"s\">\"CCC ANALYZER PLUGIN: \"</span> <span class=\"k\">+</span> ex<span class=\"k\">.</span>message<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">function</span> defCCCVisualizations<span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"c\">/*</span>","<span class=\"c\">         Visualization Metadata</span>","<span class=\"c\">         These objects describe the visualizations provided by this library.</span>","<span class=\"c\">         */</span>","        <span class=\"k\">var</span> ruleStrokeStyle <span class=\"k\">=</span> <span class=\"s\">\"#808285\"</span><span class=\"k\">;</span>  <span class=\"c\">// #D8D8D8',  // #f0f0f0</span>","        <span class=\"k\">var</span> lineStrokeStyle <span class=\"k\">=</span> <span class=\"s\">\"#D1D3D4\"</span><span class=\"k\">;</span>  <span class=\"c\">// \"#D1D3D4\"; //'#A0A0A0'; // #D8D8D8',// #f0f0f0</span>","        ","        <span class=\"k\">function</span> legendShapeColorProp<span class=\"k\">(</span>scene<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> color <span class=\"k\">=</span> scene<span class=\"k\">.</span>color<span class=\"k\">;</span>","            <span class=\"k\">return</span> scene<span class=\"k\">.</span>isOn<span class=\"k\">()</span> <span class=\"k\">?</span> color <span class=\"k\">:</span> pvc<span class=\"k\">.</span>toGrayScale<span class=\"k\">(</span>color<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">var</span> baseChartArgs <span class=\"k\">=</span> <span class=\"k\">{</span>","            groupedLabelSep<span class=\"k\">:</span> <span class=\"s\">\"~\"</span><span class=\"k\">,</span>","            ","            legend<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","            multiRole<span class=\"k\">:</span> <span class=\"s\">'multi'</span><span class=\"k\">,</span>","            legendPosition<span class=\"k\">:</span> <span class=\"s\">'right'</span><span class=\"k\">,</span>","            legendSizeMax<span class=\"k\">:</span>  <span class=\"s\">'60%'</span><span class=\"k\">,</span>","            ","            legendPaddings<span class=\"k\">:</span> <span class=\"s\">10</span><span class=\"k\">,</span>","            ","            <span class=\"c\">// Item padding</span>","            legendPadding<span class=\"k\">:</span> <span class=\"k\">{</span>left<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span> right<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span> top<span class=\"k\">:</span> <span class=\"s\">2</span><span class=\"k\">,</span> bottom<span class=\"k\">:</span> <span class=\"s\">2</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"c\">// width: 2, height: 4</span>","            ","            orthoAxisFullGrid<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","            axisEndLine<span class=\"k\">:</span>  <span class=\"k\">true</span><span class=\"k\">,</span>","            axisSizeMax<span class=\"k\">:</span> <span class=\"s\">'50%'</span><span class=\"k\">,</span>","            ","            <span class=\"c\">/* Continuous axes */</span>","            <span class=\"c\">//axisDesiredTickCount: 10,</span>","            axisLabelSpacingMin<span class=\"k\">:</span> <span class=\"s\">0.6</span><span class=\"k\">,</span> <span class=\"c\">// em</span>","            axisDomainRoundMode<span class=\"k\">:</span> <span class=\"s\">'tick'</span><span class=\"k\">,</span>","            axisTitleSizeMax<span class=\"k\">:</span> <span class=\"s\">'20%'</span><span class=\"k\">,</span>","            ","            showPlotFrame<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","            ","            <span class=\"c\">/* Discrete axes */</span>","            axisOverlappedLabelsHide<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","            axisOverlappedLabelsMaxPct<span class=\"k\">:</span> <span class=\"s\">0.05</span><span class=\"k\">,</span>","","            extensionPoints<span class=\"k\">:</span> <span class=\"k\">{</span>","                xAxisRule_strokeStyle<span class=\"k\">:</span>  ruleStrokeStyle<span class=\"k\">,</span>","                yAxisRule_strokeStyle<span class=\"k\">:</span>  ruleStrokeStyle<span class=\"k\">,</span>","                secondYAxisRule_strokeStyle<span class=\"k\">:</span> ruleStrokeStyle<span class=\"k\">,</span>","                ","                xAxisTicks_strokeStyle<span class=\"k\">:</span>  lineStrokeStyle<span class=\"k\">,</span>","                yAxisTicks_strokeStyle<span class=\"k\">:</span>  lineStrokeStyle<span class=\"k\">,</span>","                secondYAxisTicks_strokeStyle<span class=\"k\">:</span> lineStrokeStyle<span class=\"k\">,</span>","                ","                legendArea_lineWidth<span class=\"k\">:</span>     <span class=\"s\">1</span><span class=\"k\">,</span>","                legendArea_strokeStyle<span class=\"k\">:</span>   <span class=\"s\">\"#c0c0c0\"</span><span class=\"k\">,</span>","                legendLabel_textDecoration<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","                legendDot_fillStyle<span class=\"k\">:</span> legendShapeColorProp<span class=\"k\">,</span>","                legendDot_strokeStyle<span class=\"k\">:</span> legendShapeColorProp<span class=\"k\">,</span>","                legend2Dot_fillStyle<span class=\"k\">:</span> legendShapeColorProp<span class=\"k\">,</span>","                legend2Dot_strokeStyle<span class=\"k\">:</span> legendShapeColorProp","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            tipsySettings<span class=\"k\">:</span> <span class=\"k\">{</span>","                delayIn<span class=\"k\">:</span> <span class=\"s\">200</span><span class=\"k\">,</span>","                delayOut<span class=\"k\">:</span><span class=\"s\">80</span><span class=\"k\">,</span>","                offset<span class=\"k\">:</span>  <span class=\"s\">2</span><span class=\"k\">,</span>","                html<span class=\"k\">:</span>    <span class=\"k\">true</span><span class=\"k\">,</span>","                gravity<span class=\"k\">:</span> <span class=\"s\">\"nw\"</span><span class=\"k\">,</span>","                fade<span class=\"k\">:</span>    <span class=\"k\">false</span><span class=\"k\">,</span>","                followMouse<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                corners<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                arrow<span class=\"k\">:</span>   <span class=\"k\">false</span><span class=\"k\">,</span>","                opacity<span class=\"k\">:</span> <span class=\"s\">1</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"c\">/* Default map */</span>","            rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","                <span class=\"s\">'columns'</span><span class=\"k\">:</span>  <span class=\"s\">'series'</span><span class=\"k\">,</span>","                <span class=\"s\">'rows'</span><span class=\"k\">:</span>     <span class=\"s\">'category'</span><span class=\"k\">,</span>","                <span class=\"s\">'multi'</span><span class=\"k\">:</span>    <span class=\"s\">'multiChart'</span><span class=\"k\">,</span>","                <span class=\"s\">'measures'</span><span class=\"k\">:</span> <span class=\"s\">'value'</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"k\">var</span> mixinVerticalChartArgs <span class=\"k\">=</span> <span class=\"k\">{</span>","            orientation<span class=\"k\">:</span>    <span class=\"s\">'vertical'</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"k\">var</span> mixinHorizontalChartArgs <span class=\"k\">=</span> <span class=\"k\">{</span>","            orientation<span class=\"k\">:</span>    <span class=\"s\">'horizontal'</span><span class=\"k\">,</span>","            xAxisPosition<span class=\"k\">:</span>  <span class=\"s\">'top'</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"k\">var</span> baseVerticalChartArgs   <span class=\"k\">=</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseChartArgs<span class=\"k\">,</span> mixinVerticalChartArgs  <span class=\"k\">);</span>","        <span class=\"k\">var</span> baseHorizontalChartArgs <span class=\"k\">=</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseChartArgs<span class=\"k\">,</span> mixinHorizontalChartArgs<span class=\"k\">);</span>","","        <span class=\"k\">var</span> baseVerticalCategChartArgs <span class=\"k\">=</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseVerticalChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","            extensionPoints<span class=\"k\">:</span> <span class=\"k\">{</span>","                xAxisLabel_textAngle<span class=\"k\">:</span>    <span class=\"k\">-</span>Math<span class=\"k\">.</span>PI<span class=\"k\">/</span><span class=\"s\">4</span><span class=\"k\">,</span>","                xAxisLabel_textAlign<span class=\"k\">:</span>    <span class=\"s\">\"right\"</span><span class=\"k\">,</span>","                xAxisLabel_textBaseline<span class=\"k\">:</span> <span class=\"s\">\"top\"</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"k\">var</span> mixinBarChartArgs <span class=\"k\">=</span> <span class=\"k\">{</span>","            cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.BarChart'</span><span class=\"k\">,</span> <span class=\"c\">// Default</span>","            panelSizeRatio<span class=\"k\">:</span> <span class=\"s\">0.8</span><span class=\"k\">,</span>","            crosstabMode<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","            measuresInColumns<span class=\"k\">:</span> <span class=\"k\">false</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        baseVerticalBarChartArgs   <span class=\"k\">=</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseVerticalCategChartArgs<span class=\"k\">,</span> mixinBarChartArgs<span class=\"k\">),</span>","        baseHorizontalBarChartArgs <span class=\"k\">=</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseHorizontalChartArgs<span class=\"k\">,</span>    mixinBarChartArgs<span class=\"k\">);</span>","","        <span class=\"c\">// ----</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_bar'</span><span class=\"k\">,</span>                          <span class=\"c\">// unique identifier</span>","            type<span class=\"k\">:</span> <span class=\"s\">'barchart'</span><span class=\"k\">,</span>                       <span class=\"c\">// generic type id</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>                          <span class=\"c\">// id of the source library</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'VERTICAL_BAR'</span><span class=\"k\">),</span>        <span class=\"c\">// visible name, this will come from a properties file eventually</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.BarChart'</span><span class=\"k\">,</span>        <span class=\"c\">// type of the Javascript object to instantiate</span>","            args<span class=\"k\">:</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseVerticalBarChartArgs<span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            <span class=\"c\">// dataReqs describes the data requirements of this visualization</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'VERTICAL_BAR'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span>","            <span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">100</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_barstacked'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'barchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'STACKED_VERTICAL_BAR'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.BarChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseVerticalBarChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","                stacked<span class=\"k\">:</span> <span class=\"k\">true</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'STACKED_VERTICAL_BAR'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span>","            <span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">110</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_horzbar'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'horzbarchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'HORIZONTAL_BAR'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.BarChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span>  def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseHorizontalBarChartArgs<span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'HORIZONTAL_BAR'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span>","            <span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">130</span><span class=\"k\">,</span>","            menuSeparator<span class=\"k\">:</span> <span class=\"k\">true</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_horzbarstacked'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'horzbarchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'STACKED_HORIZONTAL_BAR'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.BarChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span>  def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseHorizontalBarChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","                stacked<span class=\"k\">:</span> <span class=\"k\">true</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'STACKED_HORIZONTAL_BAR'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span>","            <span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">140</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_barnormalized'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'barchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'PCT_STACKED_VERTICAL_BAR'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.NormalizeBarChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseVerticalBarChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","                cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.NormalizedBarChart'</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'PCT_STACKED_VERTICAL_BAR'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span>","            <span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">120</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_horzbarnormalized'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'horzbarchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'PCT_STACKED_HORIZONTAL_BAR'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.NormalizeBarChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span>  def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseHorizontalBarChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","                cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.NormalizedBarChart'</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'PCT_STACKED_HORIZONTAL_BAR'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span>","            <span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">150</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_line'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'linechart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'LINE'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.LineChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseVerticalCategChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","                cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.LineChart'</span><span class=\"k\">,</span>","","                <span class=\"c\">// Default value for 'shape' data request</span>","                shape<span class=\"k\">:</span> <span class=\"s\">'circle'</span><span class=\"k\">,</span>","                nullInterpolationMode<span class=\"k\">:</span> <span class=\"s\">'linear'</span><span class=\"k\">,</span>","                orthoAxisOffset<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                baseAxisOffset<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                crosstabMode<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                measuresInColumns<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                tipsySettings<span class=\"k\">:</span> <span class=\"k\">{</span>","                    offset<span class=\"k\">:</span> <span class=\"s\">15</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span> def<span class=\"k\">.</span>array<span class=\"k\">.</span>append<span class=\"k\">(</span>","                    createDataReq<span class=\"k\">(</span><span class=\"s\">'LINE'</span><span class=\"k\">,</span> <span class=\"k\">{</span>options<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">),</span>","                    <span class=\"k\">[</span>","                     createShapeDataReq<span class=\"k\">(),</span>","                     createLineWidthDataReq<span class=\"k\">(),</span>","                     createChartOptionsDataReq<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span>","                    <span class=\"k\">])</span>","            <span class=\"k\">}</span>","            <span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">160</span><span class=\"k\">,</span>","            menuSeparator<span class=\"k\">:</span> <span class=\"k\">true</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_area'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'areachart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'STACKED_AREA'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.StackedAreaChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseVerticalCategChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","                cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.StackedAreaChart'</span><span class=\"k\">,</span>","                crosstabMode<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                measuresInColumns<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                showLines<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                orthoAxisOffset<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                baseAxisOffset<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                tipsySettings<span class=\"k\">:</span> <span class=\"k\">{</span>","                    offset<span class=\"k\">:</span> <span class=\"s\">15</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'STACKED_AREA'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span>","            <span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">180</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_line_hover'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'linechart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'LINE'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.LineChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseVerticalCategChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","                cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.LineChart'</span><span class=\"k\">,</span>","                hoverable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                showTooltips<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                crosstabMode<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                measuresInColumns<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                ","                orthoAxisOffset<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                baseAxisOffset<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                ","                <span class=\"c\">// Default value for 'shape' data request</span>","                shape<span class=\"k\">:</span> <span class=\"s\">'circle'</span><span class=\"k\">,</span>","                nullInterpolationMode<span class=\"k\">:</span> <span class=\"s\">'linear'</span><span class=\"k\">,</span>","                tipsySettings<span class=\"k\">:</span> <span class=\"k\">{</span>","                    offset<span class=\"k\">:</span> <span class=\"s\">15</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span> def<span class=\"k\">.</span>array<span class=\"k\">.</span>append<span class=\"k\">(</span>","                    createDataReq<span class=\"k\">(</span><span class=\"s\">'LINE'</span><span class=\"k\">,</span> <span class=\"k\">{</span>options<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">),</span>","                    <span class=\"k\">[</span>","                     createShapeDataReq<span class=\"k\">(),</span>","                     createLineWidthDataReq<span class=\"k\">(),</span>","                     createChartOptionsDataReq<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span>","                    <span class=\"k\">])</span>","            <span class=\"k\">}</span>","            <span class=\"k\">]</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_area_hover'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'areachart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'STACKED_AREA'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.StackedAreaChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseVerticalCategChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","                cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.StackedAreaChart'</span><span class=\"k\">,</span>","                crosstabMode<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                measuresInColumns<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                showLines<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                orthoAxisOffset<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                baseAxisOffset<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                hoverable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                showTooltips<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                tipsySettings<span class=\"k\">:</span> <span class=\"k\">{</span>","                    offset<span class=\"k\">:</span> <span class=\"s\">15</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'STACKED_AREA'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span>","            <span class=\"k\">]</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_scatter'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'scatter'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'SCATTER'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.MetricDotChart'</span><span class=\"k\">,</span>","            maxValues<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">1000</span><span class=\"k\">,</span> <span class=\"s\">2500</span><span class=\"k\">,</span> <span class=\"s\">5000</span><span class=\"k\">,</span> <span class=\"s\">10000</span><span class=\"k\">],</span>","            args<span class=\"k\">:</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseVerticalChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","                cccClass<span class=\"k\">:</span>   <span class=\"s\">'pvc.MetricDotChart'</span><span class=\"k\">,</span>","                crosstabMode<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                measuresInColumns<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                axisFullGrid<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                dotSizeAbs<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                dotSizeRatio<span class=\"k\">:</span>   <span class=\"s\">1</span><span class=\"k\">/</span><span class=\"s\">5</span><span class=\"k\">,</span>","                dotSizeRatioTo<span class=\"k\">:</span> <span class=\"s\">'height'</span><span class=\"k\">,</span> <span class=\"c\">// plot area client height</span>","                autoDotSizePadding<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                ","                <span class=\"c\">/* Default map */</span>","                rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","                    <span class=\"s\">'columns'</span><span class=\"k\">:</span>  <span class=\"k\">null</span><span class=\"k\">,</span>","                    <span class=\"s\">'color'</span><span class=\"k\">:</span>    <span class=\"s\">'color'</span><span class=\"k\">,</span>","                    <span class=\"c\">//'rows':     'category',</span>","                    <span class=\"s\">'multi'</span><span class=\"k\">:</span>    <span class=\"s\">'multiChart'</span><span class=\"k\">,</span>","                    <span class=\"s\">'measures'</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","                    <span class=\"s\">'x'</span><span class=\"k\">:</span>        <span class=\"s\">'value'</span><span class=\"k\">,</span>","                    <span class=\"s\">'y'</span><span class=\"k\">:</span>        <span class=\"s\">'value2'</span><span class=\"k\">,</span>","                    <span class=\"s\">'size'</span><span class=\"k\">:</span>     <span class=\"s\">'value4'</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span>","            <span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:[</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'x'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'SCATTER_X'</span><span class=\"k\">),</span>","                    required<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                    allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'y'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'SCATTER_Y'</span><span class=\"k\">),</span>","                    required<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                    allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'rows'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'SCATTER_ROW'</span><span class=\"k\">),</span>","                    required<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                    allowMultiple<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'color'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'number, string'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'SCATTER_COL'</span><span class=\"k\">),</span>","                    required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                    allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'size'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'SCATTER_Z'</span><span class=\"k\">),</span>","                    required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                    allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                createMultiDataReq<span class=\"k\">(),</span>","                createPatternDataReq<span class=\"k\">(),</span>","                createColorSetDataReq<span class=\"k\">(),</span>","                createReverseColorsDataReq<span class=\"k\">(),</span>","                createChartOptionsDataReq<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span>","                <span class=\"k\">]</span>","            <span class=\"k\">}</span>","            <span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">190</span><span class=\"k\">,</span>","            menuSeparator<span class=\"k\">:</span> <span class=\"k\">true</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_barline'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'barchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'VERTICAL_BAR_LINE'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.BarLineChart'</span><span class=\"k\">,</span> <span class=\"c\">// </span>","            args<span class=\"k\">:</span>  def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseVerticalBarChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","                <span class=\"c\">// Default value for 'shape' data request</span>","                shape<span class=\"k\">:</span> <span class=\"s\">'circle'</span><span class=\"k\">,</span>","                nullInterpolationMode<span class=\"k\">:</span> <span class=\"s\">'linear'</span><span class=\"k\">,</span>","                secondAxis<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                secondAxisIndependentScale<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                secondAxisSeriesIndexes<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"c\">// prevent default of -1 (which means last series)</span>","                ","                <span class=\"c\">/* Default map */</span>","                rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","                    <span class=\"s\">'measuresLine'</span><span class=\"k\">:</span> <span class=\"s\">'value'</span> <span class=\"c\">// maps to same dim group as 'measures' role</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            <span class=\"c\">// dataReqs describes the data requirements of this visualization</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:</span> <span class=\"k\">[</span>","                    createRowDataReq<span class=\"k\">(</span><span class=\"s\">'VERTICAL_BAR_LINE_ROW'</span><span class=\"k\">),</span>","                    createColDataReq<span class=\"k\">(</span><span class=\"s\">'VERTICAL_BAR_LINE_COL'</span><span class=\"k\">),</span>","                    def<span class=\"k\">.</span>set<span class=\"k\">(</span>","                        createMeaDataReq<span class=\"k\">(</span><span class=\"s\">'VERTICAL_BAR_LINE_NUMCOL'</span><span class=\"k\">),</span> ","                        <span class=\"s\">'required'</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">),</span>","                    def<span class=\"k\">.</span>set<span class=\"k\">(</span>","                         createMeaDataReq<span class=\"k\">(</span><span class=\"s\">'VERTICAL_BAR_LINE_NUMLINE'</span><span class=\"k\">),</span>","                         <span class=\"s\">'id'</span><span class=\"k\">,</span> <span class=\"s\">'measuresLine'</span><span class=\"k\">,</span>","                         <span class=\"s\">'required'</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">),</span>","                    createMultiDataReq<span class=\"k\">(),</span>","                    createShapeDataReq<span class=\"k\">(),</span>","                    createLineWidthDataReq<span class=\"k\">(),</span>","                    createChartOptionsDataReq<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span>","               <span class=\"k\">]</span>","            <span class=\"k\">}</span><span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">125</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        ","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_waterfall'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'waterfallchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'WATERFALL'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.WaterfallChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseVerticalBarChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","                cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.WaterfallChart'</span>","                <span class=\"c\">//waterDirection: 'up'</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'WATERFALL'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span><span class=\"k\">]</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_boxplot'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'boxplotchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'BOXPLOT'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.BoxplotChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseVerticalBarChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","                cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.BoxplotChart'</span><span class=\"k\">,</span>","                extensionPoints<span class=\"k\">:</span> <span class=\"k\">{</span>","                    boxVRule_svg<span class=\"k\">:</span> <span class=\"k\">{</span>","                        <span class=\"s\">'stroke-dasharray'</span><span class=\"k\">:</span> <span class=\"s\">'5, 5'</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","","                rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","                    <span class=\"s\">'columns'</span><span class=\"k\">:</span>     <span class=\"k\">null</span><span class=\"k\">,</span>","                    <span class=\"c\">//'rows':      'category',</span>","                    <span class=\"s\">'multi'</span><span class=\"k\">:</span>       <span class=\"s\">'multiChart'</span><span class=\"k\">,</span>","                    <span class=\"s\">'measures'</span><span class=\"k\">:</span>    <span class=\"s\">'median'</span><span class=\"k\">,</span>","                    <span class=\"s\">'percentil25'</span><span class=\"k\">:</span> <span class=\"s\">'percentil25'</span><span class=\"k\">,</span>","                    <span class=\"s\">'percentil75'</span><span class=\"k\">:</span> <span class=\"s\">'percentil75'</span><span class=\"k\">,</span>","                    <span class=\"s\">'percentil5'</span><span class=\"k\">:</span>  <span class=\"s\">'percentil5'</span><span class=\"k\">,</span>","                    <span class=\"s\">'percentil95'</span><span class=\"k\">:</span> <span class=\"s\">'percentil95'</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span> <span class=\"k\">[</span>","                    createRowDataReq<span class=\"k\">(</span><span class=\"s\">'BOXPLOT_ROW'</span><span class=\"k\">),</span>","                    ","                    def<span class=\"k\">.</span>set<span class=\"k\">(</span>createMeaDataReq<span class=\"k\">(</span><span class=\"s\">'BOXPLOT_PCT50'</span><span class=\"k\">),</span> ","                                <span class=\"s\">'allowMultiple'</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                                <span class=\"s\">'required'</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">),</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'percentil25'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'BOXPLOT_PCT25'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'percentil75'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'BOXPLOT_PCT75'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'percentil5'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'BOXPLOT_PCT05'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'percentil95'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'BOXPLOT_PCT95'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    createMultiDataReq<span class=\"k\">(),</span>","                    createChartOptionsDataReq<span class=\"k\">()</span>","                <span class=\"k\">]</span>","            <span class=\"k\">}</span><span class=\"k\">]</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_pie'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'piechart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'MULTIPLE_PIE'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.PieChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","                multiRole<span class=\"k\">:</span> <span class=\"s\">'columns'</span><span class=\"k\">,</span>","                cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.PieChart'</span><span class=\"k\">,</span>","                crosstabMode<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                measuresInColumns<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                showValues<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                legendShape<span class=\"k\">:</span> <span class=\"s\">'circle'</span><span class=\"k\">,</span>","                <span class=\"c\">//contentPaddings: '5%',</span>","                rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","                    <span class=\"s\">'columns'</span><span class=\"k\">:</span>  <span class=\"s\">'multiChart'</span><span class=\"k\">,</span>","                    <span class=\"c\">//'rows':     'category',</span>","                    <span class=\"s\">'multi'</span><span class=\"k\">:</span>    <span class=\"k\">null</span>","                    <span class=\"c\">//'measures': 'value'</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                titlePosition<span class=\"k\">:</span> <span class=\"s\">'bottom'</span><span class=\"k\">,</span>","                extensionPoints<span class=\"k\">:</span> <span class=\"k\">{</span>","                    pie_strokeStyle<span class=\"k\">:</span><span class=\"s\">'white'</span><span class=\"k\">,</span>","                    pie_lineWidth<span class=\"k\">:</span>   <span class=\"s\">0.8</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">\"MULTIPLE_PIE\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>multi<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">)</span>","                   ","            <span class=\"k\">}</span><span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">180</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_heatgrid'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'heatgrid'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'HEATGRID'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.HeatGridChart'</span><span class=\"k\">,</span>","            maxValues<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">500</span><span class=\"k\">,</span> <span class=\"s\">1000</span><span class=\"k\">,</span> <span class=\"s\">2000</span><span class=\"k\">,</span> <span class=\"s\">5000</span><span class=\"k\">],</span>","            args<span class=\"k\">:</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span>baseChartArgs<span class=\"k\">,</span> <span class=\"k\">{</span>","                cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.HeatGridChart'</span><span class=\"k\">,</span>","","                crosstabMode<span class=\"k\">:</span>      <span class=\"k\">true</span><span class=\"k\">,</span>","                measuresInColumns<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                useCompositeAxis<span class=\"k\">:</span>  <span class=\"k\">true</span><span class=\"k\">,</span>","","                <span class=\"c\">//colorValIdx: 0,</span>","                <span class=\"c\">//sizeValIdx:  1,</span>","                ","                panelSizeRatio<span class=\"k\">:</span> <span class=\"s\">0.8</span><span class=\"k\">,</span>","","                showValues<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                useShapes<span class=\"k\">:</span>  <span class=\"k\">true</span><span class=\"k\">,</span>","                shape<span class=\"k\">:</span>      <span class=\"s\">'square'</span><span class=\"k\">,</span>","                ","                nullShape<span class=\"k\">:</span>  <span class=\"k\">null</span><span class=\"k\">,</span>","                nullColor<span class=\"k\">:</span> <span class=\"s\">\"#efc5ad\"</span><span class=\"k\">,</span>","                ","                orthoAxisSize<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","                baseAxisSize<span class=\"k\">:</span>  <span class=\"k\">null</span><span class=\"k\">,</span>","                xAxisSize<span class=\"k\">:</span>  <span class=\"s\">30</span><span class=\"k\">,</span>","                yAxisSize<span class=\"k\">:</span>  <span class=\"s\">50</span><span class=\"k\">,</span>","                ","                <span class=\"c\">//orthoAxisFullGrid: false,</span>","                axisFullGrid<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                axisEndLine<span class=\"k\">:</span>  <span class=\"k\">false</span><span class=\"k\">,</span>","                ","                colorScaleType<span class=\"k\">:</span> <span class=\"s\">\"linear\"</span><span class=\"k\">,</span>","                normPerBaseCategory<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                numSD<span class=\"k\">:</span> <span class=\"s\">2</span><span class=\"k\">,</span>","                ","                rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","                    <span class=\"s\">'multi'</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","                    <span class=\"c\">//'columns':  'series',</span>","                    <span class=\"c\">//'rows':     'category',</span>","                    <span class=\"s\">'color'</span><span class=\"k\">:</span> <span class=\"s\">'value'</span><span class=\"k\">,</span>","                    <span class=\"s\">'size'</span><span class=\"k\">:</span>  <span class=\"s\">'value2'</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span>","            <span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:[</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'rows'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'row'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span>  dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'HEATGRID_ROW'</span><span class=\"k\">),</span>","                    required<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                    allowMultiple<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'columns'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'HEATGRID_COL'</span><span class=\"k\">),</span>","                    required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                    allowMultiple<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'color'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'HEATGRID_COLOR'</span><span class=\"k\">),</span>","                    required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                    allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'size'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'HEATGRID_SIZE'</span><span class=\"k\">),</span>","                    required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                    allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                createPatternDataReq<span class=\"k\">(),</span>","                createColorSetDataReq<span class=\"k\">(),</span>","                createReverseColorsDataReq<span class=\"k\">(),</span>","                createShapeDataReq<span class=\"k\">(</span><span class=\"k\">{</span><span class=\"s\">\"square\"</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">\"circle\"</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">),</span>","                createChartOptionsDataReq<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span>","                <span class=\"k\">]</span>","            <span class=\"k\">}</span>","            <span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">200</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_bulletchart'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'bulletchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> <span class=\"s\">'Bullet Chart'</span><span class=\"k\">,</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.BulletChart'</span><span class=\"k\">,</span>","","            args<span class=\"k\">:</span> <span class=\"k\">{</span> <span class=\"c\">// TODO: inherit from baseChartArgs</span>","                cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.BulletChart'</span><span class=\"k\">,</span>","","                showValues<span class=\"k\">:</span>   <span class=\"k\">true</span><span class=\"k\">,</span>","                valuesAnchor<span class=\"k\">:</span> <span class=\"s\">\"right\"</span><span class=\"k\">,</span>","","                titlePosition<span class=\"k\">:</span> <span class=\"s\">\"top\"</span><span class=\"k\">,</span>","                titleSize<span class=\"k\">:</span> <span class=\"s\">25</span><span class=\"k\">,</span>","","                legendPosition<span class=\"k\">:</span> <span class=\"s\">\"bottom\"</span><span class=\"k\">,</span>","","                crosstabMode<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                measuresInColumns<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","","                bulletTitle<span class=\"k\">:</span>    <span class=\"s\">'Test for title'</span><span class=\"k\">,</span>","                bulletSubtitle<span class=\"k\">:</span> <span class=\"s\">'Test for subtitle'</span><span class=\"k\">,</span>","                bulletMeasures<span class=\"k\">:</span> <span class=\"k\">[],</span>","                <span class=\"c\">// TODO: Constant bullets markers and ranges?</span>","                bulletMarkers<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"7500\"</span><span class=\"k\">],</span>","                bulletRanges<span class=\"k\">:</span>  <span class=\"k\">[</span><span class=\"s\">\"3000\"</span><span class=\"k\">,</span> <span class=\"s\">\"6500\"</span><span class=\"k\">,</span> <span class=\"s\">\"9000\"</span><span class=\"k\">],</span>","","                bulletMargin<span class=\"k\">:</span> <span class=\"s\">50</span><span class=\"k\">,</span>","                panelSizeRatio<span class=\"k\">:</span> <span class=\"s\">0.8</span><span class=\"k\">,</span>","","                extensionPoints<span class=\"k\">:</span> <span class=\"k\">{</span>","                    <span class=\"s\">\"bulletRuleLabel_font\"</span><span class=\"k\">:</span> <span class=\"s\">\"7pt sans\"</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","","                rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","                    <span class=\"s\">'multi'</span><span class=\"k\">:</span>   <span class=\"k\">null</span><span class=\"k\">,</span>","                    <span class=\"s\">'columns'</span><span class=\"k\">:</span> <span class=\"s\">'subTitle'</span><span class=\"k\">,</span>","                    <span class=\"s\">'rows'</span><span class=\"k\">:</span>    <span class=\"s\">'title'</span>","                <span class=\"c\">// The rest is dynamic...</span>","                <span class=\"c\">// measures:    -&gt; split between value and marker dimensions...</span>","                <span class=\"c\">// bulletRanges -&gt; range*</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span>","            <span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:[</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'rows'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'row'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> <span class=\"s\">'Across'</span><span class=\"k\">,</span>","                    required<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'columns'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> <span class=\"s\">'Down'</span><span class=\"k\">,</span>","                    required<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'measures'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> <span class=\"s\">'Values'</span><span class=\"k\">,</span>","                    required<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                createChartOptionsDataReq<span class=\"k\">()</span>","                <span class=\"k\">]</span>","            <span class=\"k\">}</span>","            <span class=\"k\">]</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        ","        <span class=\"k\">function</span> label<span class=\"k\">(</span>prefix<span class=\"k\">,</span> id<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">(</span>id <span class=\"k\">&amp;&amp;</span> cvCatalog<span class=\"k\">[(</span>prefix <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> id<span class=\"k\">])</span> <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> vizLabel<span class=\"k\">(</span>id<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> label<span class=\"k\">(</span><span class=\"s\">'VIZ_'</span><span class=\"k\">,</span> id<span class=\"k\">)</span> <span class=\"k\">||</span> id<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> dropZoneLabel<span class=\"k\">(</span>id<span class=\"k\">,</span> defaultLabel<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> label<span class=\"k\">(</span><span class=\"s\">\"dropZoneLabels_\"</span><span class=\"k\">,</span> id<span class=\"k\">)</span> <span class=\"k\">||</span>","                   label<span class=\"k\">(</span><span class=\"s\">\"ropZoneLabels_\"</span><span class=\"k\">,</span> id<span class=\"k\">)</span> <span class=\"k\">||</span> ","                   defaultLabel <span class=\"k\">||</span> id<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> chartPropsLabel<span class=\"k\">(</span>id<span class=\"k\">,</span> defaultLabel<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> label<span class=\"k\">(</span><span class=\"s\">\"dlgChartProps\"</span><span class=\"k\">,</span> id<span class=\"k\">)</span> <span class=\"k\">||</span> ","                   defaultLabel <span class=\"k\">||</span> id<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createRowDataReq<span class=\"k\">(</span>rowLabel<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'rows'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span>rowLabel<span class=\"k\">),</span>","                required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                allowMultiple<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                defaultAppend<span class=\"k\">:</span> <span class=\"k\">true</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> createColDataReq<span class=\"k\">(</span>columnLabel<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'columns'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span>columnLabel<span class=\"k\">),</span>","                required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                allowMultiple<span class=\"k\">:</span> <span class=\"k\">true</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> createMeaDataReq<span class=\"k\">(</span>measureLabel<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'measures'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span>measureLabel<span class=\"k\">),</span>","                required<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                allowMultiple<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                defaultAppend<span class=\"k\">:</span> <span class=\"k\">true</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> createMultiDataReq<span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'multi'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'MULTI_CHART'</span><span class=\"k\">),</span>","                allowMultiple<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                required<span class=\"k\">:</span> <span class=\"k\">false</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createShapeDataReq<span class=\"k\">(</span>valuesSet<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> values <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">'circle'</span><span class=\"k\">,</span> <span class=\"s\">'cross'</span><span class=\"k\">,</span> <span class=\"s\">'diamond'</span><span class=\"k\">,</span> <span class=\"s\">'square'</span><span class=\"k\">,</span> <span class=\"s\">'triangle'</span><span class=\"k\">];</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>valuesSet<span class=\"k\">)</span><span class=\"k\">{</span>","                values <span class=\"k\">=</span> values<span class=\"k\">.</span>filter<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span>valuesSet<span class=\"k\">,</span> value<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            values<span class=\"k\">.</span>unshift<span class=\"k\">(</span><span class=\"s\">'none'</span><span class=\"k\">);</span>","            ","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'shape'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                values<span class=\"k\">:</span> values<span class=\"k\">,</span>","                ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                    labels<span class=\"k\">:</span>  values<span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>option<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> dropZoneLabel<span class=\"k\">(</span>option<span class=\"k\">.</span>toUpperCase<span class=\"k\">());</span> <span class=\"k\">}</span><span class=\"k\">),</span>","                    group<span class=\"k\">:</span>   <span class=\"s\">'options'</span><span class=\"k\">,</span>","                    type<span class=\"k\">:</span>    <span class=\"s\">'combo'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'BULLET_STYLE'</span><span class=\"k\">)</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createLineWidthDataReq<span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'lineWidth'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                values<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"1\"</span><span class=\"k\">,</span> <span class=\"s\">\"2\"</span><span class=\"k\">,</span> <span class=\"s\">\"3\"</span><span class=\"k\">,</span> <span class=\"s\">\"4\"</span><span class=\"k\">,</span> <span class=\"s\">\"5\"</span><span class=\"k\">,</span> <span class=\"s\">\"6\"</span><span class=\"k\">,</span> <span class=\"s\">\"7\"</span><span class=\"k\">,</span> <span class=\"s\">\"8\"</span><span class=\"k\">],</span>","                ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                    labels<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"1\"</span><span class=\"k\">,</span> <span class=\"s\">\"2\"</span><span class=\"k\">,</span> <span class=\"s\">\"3\"</span><span class=\"k\">,</span> <span class=\"s\">\"4\"</span><span class=\"k\">,</span> <span class=\"s\">\"5\"</span><span class=\"k\">,</span> <span class=\"s\">\"6\"</span><span class=\"k\">,</span> <span class=\"s\">\"7\"</span><span class=\"k\">,</span> <span class=\"s\">\"8\"</span><span class=\"k\">],</span>","                    group<span class=\"k\">:</span> <span class=\"s\">\"options\"</span><span class=\"k\">,</span>","                    type<span class=\"k\">:</span>  <span class=\"s\">'combo'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> chartPropsLabel<span class=\"k\">(</span><span class=\"s\">'LineWidth'</span><span class=\"k\">)</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createPatternDataReq<span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'pattern'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                values<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"GRADIENT\"</span><span class=\"k\">,</span> <span class=\"s\">\"3-COLOR\"</span><span class=\"k\">,</span> <span class=\"s\">\"5-COLOR\"</span><span class=\"k\">],</span>","                ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                    labels<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"GRADIENT\"</span><span class=\"k\">,</span> <span class=\"s\">\"3_STEP\"</span><span class=\"k\">,</span> <span class=\"s\">\"5_STEP\"</span><span class=\"k\">].</span>","                            map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>option<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> dropZoneLabel<span class=\"k\">(</span>option<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">),</span>","                    group<span class=\"k\">:</span> <span class=\"s\">'options'</span><span class=\"k\">,</span>","                    type<span class=\"k\">:</span>  <span class=\"s\">'combo'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'PATTERN'</span><span class=\"k\">)</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createColorSetDataReq<span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'colorSet'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                values<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"ryg\"</span><span class=\"k\">,</span> <span class=\"s\">\"ryb\"</span><span class=\"k\">,</span> <span class=\"s\">\"blue\"</span><span class=\"k\">,</span> <span class=\"s\">\"gray\"</span><span class=\"k\">],</span>","                ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                    labels<span class=\"k\">:</span>  <span class=\"k\">[</span><span class=\"s\">\"RYG\"</span><span class=\"k\">,</span> <span class=\"s\">\"RYB\"</span><span class=\"k\">,</span> <span class=\"s\">\"BLUE\"</span><span class=\"k\">,</span> <span class=\"s\">\"GRAY\"</span><span class=\"k\">].</span>","                             map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>option<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">\"GRAD_\"</span> <span class=\"k\">+</span> option<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">),</span>","                    group<span class=\"k\">:</span>   <span class=\"s\">'options'</span><span class=\"k\">,</span>","                    type<span class=\"k\">:</span>    <span class=\"s\">'combo'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'COLORSET'</span><span class=\"k\">)</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createReverseColorsDataReq<span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'reverseColors'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'boolean'</span><span class=\"k\">,</span>","                ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                    label<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'COLORSET_REVERSE'</span><span class=\"k\">),</span>","                    group<span class=\"k\">:</span> <span class=\"s\">'options'</span><span class=\"k\">,</span>","                    type<span class=\"k\">:</span>  <span class=\"s\">'checkbox'</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createChartOptionsDataReq<span class=\"k\">(</span>hasSeparator<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">\"optionsBtn\"</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'none'</span><span class=\"k\">,</span>","                ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                    group<span class=\"k\">:</span>     <span class=\"s\">\"options\"</span><span class=\"k\">,</span>","                    type<span class=\"k\">:</span>      <span class=\"s\">\"button\"</span><span class=\"k\">,</span>","                    label<span class=\"k\">:</span>     dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'CHART_OPTIONS'</span><span class=\"k\">),</span>","                    seperator<span class=\"k\">:</span> hasSeparator <span class=\"k\">||</span> <span class=\"k\">false</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createDataReq<span class=\"k\">(</span>chartId<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> json <span class=\"k\">=</span> <span class=\"k\">[];</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span>def<span class=\"k\">.</span>get<span class=\"k\">(</span>options<span class=\"k\">,</span> <span class=\"s\">'row'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">))</span><span class=\"k\">{</span>","                json<span class=\"k\">.</span>push<span class=\"k\">(</span>createRowDataReq<span class=\"k\">(</span>chartId <span class=\"k\">+</span> <span class=\"s\">\"_ROW\"</span><span class=\"k\">));</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>def<span class=\"k\">.</span>get<span class=\"k\">(</span>options<span class=\"k\">,</span> <span class=\"s\">'column'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">))</span><span class=\"k\">{</span>","                json<span class=\"k\">.</span>push<span class=\"k\">(</span>createColDataReq<span class=\"k\">(</span>chartId <span class=\"k\">+</span> <span class=\"s\">\"_COL\"</span><span class=\"k\">));</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span>def<span class=\"k\">.</span>get<span class=\"k\">(</span>options<span class=\"k\">,</span> <span class=\"s\">'measure'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">))</span><span class=\"k\">{</span>","                json<span class=\"k\">.</span>push<span class=\"k\">(</span>createMeaDataReq<span class=\"k\">(</span>chartId <span class=\"k\">+</span> <span class=\"s\">\"_NUM\"</span><span class=\"k\">));</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>def<span class=\"k\">.</span>get<span class=\"k\">(</span>options<span class=\"k\">,</span> <span class=\"s\">'multi'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">))</span><span class=\"k\">{</span>","                json<span class=\"k\">.</span>push<span class=\"k\">(</span>createMultiDataReq<span class=\"k\">());</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>def<span class=\"k\">.</span>get<span class=\"k\">(</span>options<span class=\"k\">,</span> <span class=\"s\">'options'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">))</span><span class=\"k\">{</span>","                json<span class=\"k\">.</span>push<span class=\"k\">(</span>createChartOptionsDataReq<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">));</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> json<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> colorPalete <span class=\"k\">=</span> <span class=\"k\">[</span>","        <span class=\"s\">\"#0000cc\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#0d8ecf\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#b0de09\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#fcd202\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#ff6600\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#cd0d74\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#cc0000\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#00cc00\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#650cd0\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#3a3a3a\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#7272e3\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#79c1e4\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#d3ed77\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#fde673\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#ffaa72\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#e379b2\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#e37272\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#72e372\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#aa79e5\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#929292\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#00007a\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#07547b\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#698405\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#967c01\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#983b00\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#7a0745\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#7a0000\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#007a00\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#3c077b\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"#000000\"</span>","    <span class=\"k\">];</span>","    ","    <span class=\"c\">// -------------</span>","    <span class=\"c\">// Axes are: row, column and measure.</span>","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.Axis'</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>init<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>chart<span class=\"k\">,</span> axisId<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>chart <span class=\"k\">=</span> chart<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>id <span class=\"k\">=</span> axisId<span class=\"k\">;</span>","","        <span class=\"c\">// Every role, bound or not may have an entry here</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>gemsByRole    <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"c\">// roleId -&gt; [gem, ...]</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>indexesByRole <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"c\">// roleId -&gt; [number, ...]</span>","        ","        <span class=\"c\">// Only bound roles will have an entry in this set</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>boundRoles <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"c\">// roleId -&gt; true</span>","","        <span class=\"c\">// Bound roles will have an entry here,</span>","        <span class=\"c\">// in order of appearence in gems.</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>boundRolesIdList <span class=\"k\">=</span> <span class=\"k\">[];</span> <span class=\"c\">// [i] -&gt; roleId</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>gems  <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getGems<span class=\"k\">();</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>depth <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">.</span>length<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>formulas <span class=\"k\">=</span> <span class=\"k\">[];</span>","        ","        <span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">.</span>forEach<span class=\"k\">(</span>initGem<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","        <span class=\"c\">/** @instance */</span>","        <span class=\"k\">function</span> initGem<span class=\"k\">(</span>gem<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// Overwrite axis id with corresponding Axis instance</span>","            gem<span class=\"k\">.</span>axis  <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            gem<span class=\"k\">.</span>index <span class=\"k\">=</span> index<span class=\"k\">;</span>","","            <span class=\"k\">var</span> roleId <span class=\"k\">=</span> gem<span class=\"k\">.</span>role<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>roleId <span class=\"k\">&amp;&amp;</span> roleId <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_ensureRole<span class=\"k\">(</span>roleId<span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"c\">/* New role */</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>boundRoles<span class=\"k\">[</span>roleId<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>boundRolesIdList<span class=\"k\">.</span>push<span class=\"k\">(</span>roleId<span class=\"k\">);</span>","                <span class=\"k\">}</span>","    ","                <span class=\"k\">var</span> roleGems <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span>roleId<span class=\"k\">];</span>","                gem<span class=\"k\">.</span>roleLevel <span class=\"k\">=</span> roleGems<span class=\"k\">.</span>length<span class=\"k\">;</span>","                roleGems<span class=\"k\">.</span>push<span class=\"k\">(</span>gem<span class=\"k\">);</span>","    ","                <span class=\"k\">this</span><span class=\"k\">.</span>indexesByRole<span class=\"k\">[</span>roleId<span class=\"k\">].</span>push<span class=\"k\">(</span>index<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>formulas<span class=\"k\">.</span>push<span class=\"k\">(</span>gem<span class=\"k\">.</span>formula<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        defaultRole<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","","        _ensureRole<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>roleId<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span>roleId<span class=\"k\">])</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span>roleId<span class=\"k\">]</span>    <span class=\"k\">=</span> <span class=\"k\">[];</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>indexesByRole<span class=\"k\">[</span>roleId<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>virtualItemStartIndex<span class=\"k\">,</span> cccDimNamesSet<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>configureDimensionGroups<span class=\"k\">();</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>configureReaders<span class=\"k\">(</span>virtualItemStartIndex<span class=\"k\">,</span> cccDimNamesSet<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        configureDimensionGroups<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">// We need to specify readers with indexes only because of unmapped</span>","        <span class=\"c\">// gems that reach the dataTable.</span>","        <span class=\"c\">// Because this is probably an analyzer bug,</span>","        <span class=\"c\">// we fix this adjusting the readers' indexes,</span>","        <span class=\"c\">// (and not filtering the table columns, which is more difficult to do).</span>","        configureReaders<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>virtualItemStartIndex<span class=\"k\">,</span> cccDimNamesSet<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> readers <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>options<span class=\"k\">.</span>readers<span class=\"k\">,</span>","                index   <span class=\"k\">=</span> virtualItemStartIndex<span class=\"k\">;</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>cccDimList<span class=\"k\">().</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>dimName<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>dimName <span class=\"k\">||</span> <span class=\"k\">!</span>def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span>cccDimNamesSet<span class=\"k\">,</span> dimName<span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>dimName<span class=\"k\">)</span><span class=\"k\">{</span>","                        cccDimNamesSet<span class=\"k\">[</span>dimName<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">var</span> reader <span class=\"k\">=</span> <span class=\"k\">{</span>","                        names<span class=\"k\">:</span>   dimName<span class=\"k\">,</span> <span class=\"c\">// when null, the reader simply consumes the index, and prevents a default reader</span>","                        indexes<span class=\"k\">:</span> index","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                    ","                    readers<span class=\"k\">.</span>push<span class=\"k\">(</span>reader<span class=\"k\">);</span>","                    index<span class=\"k\">++;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","","            <span class=\"k\">return</span> index<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/* Note this is called during base constructor. */</span>","        _getGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> gems <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_axesGemsInfo<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>id<span class=\"k\">];</span>","            <span class=\"k\">var</span> vizHelper <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_vizHelper<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>vizHelper<span class=\"k\">.</span>completeAxisGemsMetadata<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"c\">// available on the client</span>","                vizHelper<span class=\"k\">.</span>completeAxisGemsMetadata<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>id<span class=\"k\">,</span> gems<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> gems<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        getAxisLabel<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> labels <span class=\"k\">=</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_getAxisLabelGems<span class=\"k\">())</span>","                            <span class=\"k\">.</span>where<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> gem<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span>","                            <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> gem<span class=\"k\">.</span>label<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span>","                            <span class=\"k\">.</span>array<span class=\"k\">(),</span>","                last   <span class=\"k\">=</span> labels<span class=\"k\">.</span>pop<span class=\"k\">(),</span>","                first  <span class=\"k\">=</span> labels<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">);</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span>first <span class=\"k\">&amp;&amp;</span> last<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_message<span class=\"k\">(</span><span class=\"s\">'chartAxisTitleMultipleDimText'</span><span class=\"k\">,</span> <span class=\"k\">[</span>first<span class=\"k\">,</span> last<span class=\"k\">]);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> first <span class=\"k\">||</span> last<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getAxisLabelGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        buildHtmlTooltip<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>lines<span class=\"k\">,</span> complex<span class=\"k\">,</span> context<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">.</span>forEach<span class=\"k\">(</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_buildGemHtmlTooltip<span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> lines<span class=\"k\">,</span> complex<span class=\"k\">,</span> context<span class=\"k\">));</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _buildGemHtmlTooltip<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>lines<span class=\"k\">,</span> complex<span class=\"k\">,</span> context<span class=\"k\">,</span> gem<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/*</span>","<span class=\"c\">             * Multi-chart formulas are not shown in the tooltip</span>","<span class=\"c\">             * They're on the small chart's title</span>","<span class=\"c\">             */</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>gem<span class=\"k\">.</span>cccDimName <span class=\"k\">&amp;&amp;</span> gem<span class=\"k\">.</span>role <span class=\"k\">!==</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>multiRole<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> atom <span class=\"k\">=</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">];</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>atom<span class=\"k\">.</span>dimension<span class=\"k\">.</span>type<span class=\"k\">.</span>isHidden<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">// ex: \"Line: Ships\"</span>","                    lines<span class=\"k\">.</span>push<span class=\"k\">(</span>def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span>gem<span class=\"k\">.</span>label<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">': '</span> <span class=\"k\">+</span> def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span>atom<span class=\"k\">.</span>label<span class=\"k\">));</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Obtains the ccc dimensions that this axis uses,</span>","<span class=\"c\">         * in the order they are layed out in</span>","<span class=\"c\">         * the CCC's virtual item.</span>","<span class=\"c\">         */</span>","       cccDimList<span class=\"k\">:</span> def<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"k\">{</span>isAbstract<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">),</span>","","       fillCellSelection<span class=\"k\">:</span> def<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"k\">{</span>isAbstract<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">),</span>","","       getDrillDownInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","       <span class=\"k\">}</span><span class=\"k\">,</span>","","       getDeepestInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","       <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"c\">// --------------------------</span>","","    <span class=\"c\">/* Axis static factory method */</span>","    pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Axis<span class=\"k\">.</span>create <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>chart<span class=\"k\">,</span> axisId<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> funClass<span class=\"k\">;</span>","","        <span class=\"k\">switch</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">case</span> <span class=\"s\">'row'</span><span class=\"k\">:</span>     funClass <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>RowAxis<span class=\"k\">;</span>     <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">'column'</span><span class=\"k\">:</span>  funClass <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>ColumnAxis<span class=\"k\">;</span>  <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">'measure'</span><span class=\"k\">:</span> funClass <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>MeasureAxis<span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">default</span><span class=\"k\">:</span> <span class=\"k\">throw</span> def<span class=\"k\">.</span>error<span class=\"k\">.</span>argumentInvalid<span class=\"k\">(</span><span class=\"s\">\"Undefined axis value '{0}'.\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>axisId<span class=\"k\">]);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">return</span> <span class=\"k\">new</span> funClass<span class=\"k\">(</span>chart<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"c\">// --------------------------</span>","","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.DiscreteAxis'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Axis<span class=\"k\">)</span>","    <span class=\"k\">.</span>init<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>chart<span class=\"k\">,</span> axisId<span class=\"k\">)</span><span class=\"k\">{</span>","        ","        <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>chart<span class=\"k\">,</span> axisId<span class=\"k\">);</span>","        ","        <span class=\"k\">var</span> multiGems <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>multiRole<span class=\"k\">];</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>hasMulti <span class=\"k\">=</span> <span class=\"k\">!!</span>multiGems <span class=\"k\">&amp;&amp;</span> ","                        def<span class=\"k\">.</span>query<span class=\"k\">(</span>multiGems<span class=\"k\">)</span>","                           <span class=\"k\">.</span>any<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">!</span>gem<span class=\"k\">.</span>isMeasureDiscrim<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>postInit<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"c\">// Done here just to allow  more specific roles to be ensured first</span>","        ","        <span class=\"c\">//this.base.apply(this, arguments);</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasMulti<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_ensureRole<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>multiRole<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _nonMultiGemFilter<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> ","            <span class=\"k\">return</span> gem<span class=\"k\">.</span>role <span class=\"k\">!==</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>multiRole<span class=\"k\">;</span> ","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/**</span>","<span class=\"c\">         * The union of the ccc dimensions of the roles of this axis.</span>","<span class=\"c\">         *</span>","<span class=\"c\">         * CCC dimension names are inferred based on the name of the</span>","<span class=\"c\">         * dimension group that is assigned to each role (name, name2, name3, ...).</span>","<span class=\"c\">         */</span>","        cccDimList<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_cccDimList<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">// One dimension per gem</span>","                <span class=\"k\">var</span> cccDimList <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_cccDimList <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">.</span>length<span class=\"k\">);</span>","","                <span class=\"c\">// Unmapped gems may appear</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                    gem<span class=\"k\">.</span>cccDimName <span class=\"k\">=</span>","                    cccDimList<span class=\"k\">[</span>gem<span class=\"k\">.</span>index<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getGemDimName<span class=\"k\">(</span>gem<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                    ","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_cccDimList<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _getGemDimName<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> roleToCccDimMap <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>rolesToCccDimensionsMap<span class=\"k\">,</span>","                cccDimGroup <span class=\"k\">=</span> roleToCccDimMap<span class=\"k\">[</span>gem<span class=\"k\">.</span>role<span class=\"k\">];</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">typeof</span> cccDimGroup <span class=\"k\">===</span> <span class=\"s\">'string'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                 <span class=\"k\">return</span> pvc<span class=\"k\">.</span>data<span class=\"k\">.</span>DimensionType","                           <span class=\"k\">.</span>dimensionGroupLevelName<span class=\"k\">(</span>cccDimGroup<span class=\"k\">,</span> gem<span class=\"k\">.</span>roleLevel<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _buildGemHtmlTooltip<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>lines<span class=\"k\">,</span> complex<span class=\"k\">,</span> context<span class=\"k\">,</span> gem<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/*</span>","<span class=\"c\">             * Multi-chart formulas are not shown in the tooltip</span>","<span class=\"c\">             * They're on the small chart's title</span>","<span class=\"c\">             */</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_nonMultiGemFilter<span class=\"k\">(</span>gem<span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getAxisLabelGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">).</span>where<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_nonMultiGemFilter<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        fillCellSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selection<span class=\"k\">,</span> complex<span class=\"k\">,</span> selectionExcludesMulti<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> forms  <span class=\"k\">=</span> <span class=\"k\">[],</span>","                values <span class=\"k\">=</span> <span class=\"k\">[],</span>","                label<span class=\"k\">;</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>getSelectionGems<span class=\"k\">(</span>selectionExcludesMulti<span class=\"k\">)</span>","                <span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> atom <span class=\"k\">=</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">];</span>","                    forms<span class=\"k\">.</span>push<span class=\"k\">(</span>gem<span class=\"k\">.</span>formula<span class=\"k\">);</span>","                    values<span class=\"k\">.</span>push<span class=\"k\">(</span>atom<span class=\"k\">.</span>value<span class=\"k\">);</span>","                    label <span class=\"k\">=</span> atom<span class=\"k\">.</span>label<span class=\"k\">;</span> <span class=\"c\">// TODO is this ok?</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span>forms<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> axisId <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>id<span class=\"k\">;</span>","                <span class=\"c\">// Dummy property, just to force Analyzer to read the axis info</span>","                selection<span class=\"k\">[</span>axisId<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                ","                selection<span class=\"k\">[</span>axisId <span class=\"k\">+</span> <span class=\"s\">'Id'</span>   <span class=\"k\">]</span> <span class=\"k\">=</span> forms<span class=\"k\">;</span>","                selection<span class=\"k\">[</span>axisId <span class=\"k\">+</span> <span class=\"s\">'Item'</span> <span class=\"k\">]</span> <span class=\"k\">=</span> values<span class=\"k\">;</span>","                selection<span class=\"k\">[</span>axisId <span class=\"k\">+</span> <span class=\"s\">'Label'</span><span class=\"k\">]</span> <span class=\"k\">=</span> label<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        getSelectionGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selectionExcludesMulti<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>selectionExcludesMulti <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                selectionExcludesMulti <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">)</span>","                     <span class=\"k\">.</span>where<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"k\">(!</span>selectionExcludesMulti <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>_nonMultiGemFilter<span class=\"k\">(</span>gem<span class=\"k\">))</span> <span class=\"k\">&amp;&amp;</span> ","                               <span class=\"k\">!</span>gem<span class=\"k\">.</span>isMeasureDiscrim <span class=\"k\">&amp;&amp;</span> ","                               <span class=\"k\">!!</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span>","                     <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        getKeepOrDrillGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>drillGem<span class=\"k\">,</span> selectionExcludesMulti<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>selectionExcludesMulti <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                selectionExcludesMulti <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">)</span>","                     <span class=\"k\">.</span>where<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span> gem <span class=\"k\">===</span> drillGem <span class=\"k\">||</span>","                               <span class=\"k\">((!</span>selectionExcludesMulti <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>_nonMultiGemFilter<span class=\"k\">(</span>gem<span class=\"k\">))</span> <span class=\"k\">&amp;&amp;</span> ","                                <span class=\"k\">!</span>gem<span class=\"k\">.</span>isMeasureDiscrim <span class=\"k\">&amp;&amp;</span> ","                                <span class=\"k\">!!</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">);</span>","                     <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        selectGemsWithLink<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>linkType<span class=\"k\">,</span> complex<span class=\"k\">,</span> reverse<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> gems <span class=\"k\">=</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>reverse<span class=\"k\">)</span><span class=\"k\">{</span>","               gems <span class=\"k\">=</span> gems<span class=\"k\">.</span>reverse<span class=\"k\">();</span> ","            <span class=\"k\">}</span>","            ","            <span class=\"k\">var</span> isObjectLinkType <span class=\"k\">=</span> def<span class=\"k\">.</span>object<span class=\"k\">.</span>is<span class=\"k\">(</span>linkType<span class=\"k\">);</span>","            <span class=\"k\">return</span> gems","                <span class=\"k\">.</span>where<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> ","                   <span class=\"k\">return</span> gem<span class=\"k\">.</span>hasLink <span class=\"k\">&amp;&amp;</span>","                          <span class=\"k\">(!</span>linkType <span class=\"k\">||</span> <span class=\"k\">(</span>isObjectLinkType <span class=\"k\">?</span> def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span>linkType<span class=\"k\">,</span> gem<span class=\"k\">.</span>linkType<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">(</span>gem<span class=\"k\">.</span>linkType <span class=\"k\">===</span> linkType<span class=\"k\">)))</span> <span class=\"k\">&amp;&amp;</span>","                          <span class=\"k\">(!</span>complex  <span class=\"k\">||</span> <span class=\"k\">(</span>gem<span class=\"k\">.</span>cccDimName <span class=\"k\">&amp;&amp;</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">]));</span> ","                <span class=\"k\">}</span><span class=\"k\">)</span>","                <span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        selectBoundGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">,</span> reverse<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> gems <span class=\"k\">=</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>reverse<span class=\"k\">)</span><span class=\"k\">{</span>","               gems <span class=\"k\">=</span> gems<span class=\"k\">.</span>reverse<span class=\"k\">();</span> ","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> gems","                <span class=\"k\">.</span>where<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> ","                    <span class=\"k\">return</span> <span class=\"k\">!</span>gem<span class=\"k\">.</span>isMeasureDiscrim <span class=\"k\">&amp;&amp;</span> ","                           gem<span class=\"k\">.</span>cccDimName <span class=\"k\">&amp;&amp;</span> ","                           complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">];</span> ","                 <span class=\"k\">}</span><span class=\"k\">)</span>","                <span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        getHyperlinkInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// The last formula of this axis that has a defined hyperlink</span>","            <span class=\"k\">var</span> lastGem <span class=\"k\">=</span> <span class=\"k\">this</span>","                <span class=\"k\">.</span>selectGemsWithLink<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_hyperlinkTypes<span class=\"k\">,</span> complex<span class=\"k\">,</span> <span class=\"c\">/* reverse */</span> <span class=\"k\">true</span><span class=\"k\">)</span>","                <span class=\"k\">.</span>first<span class=\"k\">()</span>","                <span class=\"k\">;</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>lastGem<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">{</span>","                    gem<span class=\"k\">:</span>  lastGem<span class=\"k\">,</span>","                    atom<span class=\"k\">:</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>lastGem<span class=\"k\">.</span>cccDimName<span class=\"k\">]</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        getDrillDownInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> deepestInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getDeepestInfo<span class=\"k\">(</span>complex<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>deepestInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">/* Get the child formula, if any, in the same hierarchy */</span>","            <span class=\"k\">var</span> lastForm <span class=\"k\">=</span> deepestInfo<span class=\"k\">.</span>gem<span class=\"k\">.</span>formula<span class=\"k\">,</span>","                childForm <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>getChildFormula<span class=\"k\">(</span>lastForm<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>childForm<span class=\"k\">)</span><span class=\"k\">{</span>","            ","                <span class=\"c\">//Let's try the other gems</span>","                <span class=\"k\">var</span> gemList <span class=\"k\">=</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">).</span>reverse<span class=\"k\">().</span>array<span class=\"k\">();</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> gemList<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> g <span class=\"k\">=</span> gemList<span class=\"k\">[</span>i<span class=\"k\">];</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>g<span class=\"k\">.</span>isMeasureDiscrim<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> deepestGem <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getHierarchyDeepestGem<span class=\"k\">(</span>g<span class=\"k\">.</span>formula<span class=\"k\">),</span>","                        atom<span class=\"k\">;</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>deepestGem<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","                                atom <span class=\"k\">=</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>deepestGem<span class=\"k\">.</span>cccDimName<span class=\"k\">];</span>","                                <span class=\"k\">if</span><span class=\"k\">(!</span>atom <span class=\"k\">||</span> atom<span class=\"k\">.</span>value <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                    deepestInfo <span class=\"k\">=</span>  <span class=\"k\">null</span><span class=\"k\">;</span>","                                <span class=\"k\">}</span>","                            <span class=\"k\">}</span>","","                            deepestInfo <span class=\"k\">=</span>  <span class=\"k\">{</span>","                                gem<span class=\"k\">:</span>  deepestGem<span class=\"k\">,</span>","                                atom<span class=\"k\">:</span> atom","                            <span class=\"k\">}</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>                    ","                    <span class=\"k\">}</span>","                ","                    lastForm <span class=\"k\">=</span> deepestInfo<span class=\"k\">.</span>gem<span class=\"k\">.</span>formula<span class=\"k\">;</span>","                    childForm <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>getChildFormula<span class=\"k\">(</span>lastForm<span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>childForm<span class=\"k\">)</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>                ","                <span class=\"k\">}</span>","    ","                <span class=\"k\">if</span> <span class=\"k\">(!</span>childForm<span class=\"k\">)</span>","                    <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">/*</span>","<span class=\"c\">             * If the formula is already included in the chart</span>","<span class=\"c\">             * (surely in a different axis) then no drilling</span>","<span class=\"c\">             * (in this axis) is possible.</span>","<span class=\"c\">             */</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>gemsMap<span class=\"k\">,</span> childForm<span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            deepestInfo<span class=\"k\">.</span>drillChild <span class=\"k\">=</span> childForm<span class=\"k\">;</span>","            ","            <span class=\"k\">return</span> deepestInfo<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        getDeepestInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">,</span> hierarchy<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>depth<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> lastGem <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getLastProperGem<span class=\"k\">(</span>hierarchy<span class=\"k\">);</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>lastGem<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> deepestGem <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getHierarchyDeepestGem<span class=\"k\">(</span>lastGem<span class=\"k\">.</span>formula<span class=\"k\">),</span>","                        atom<span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>deepestGem<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","                            atom <span class=\"k\">=</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>deepestGem<span class=\"k\">.</span>cccDimName<span class=\"k\">];</span>","                            <span class=\"k\">if</span><span class=\"k\">(!</span>atom <span class=\"k\">||</span> atom<span class=\"k\">.</span>value <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","","                        <span class=\"k\">return</span> <span class=\"k\">{</span>","                            gem<span class=\"k\">:</span>  deepestGem<span class=\"k\">,</span>","                            atom<span class=\"k\">:</span> atom","                        <span class=\"k\">}</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        getLastProperGem<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>hierarchy<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/* Get the last gem that is not a measure discrim.</span>","<span class=\"c\">             * Optionally filter by the given hierarchy argument.</span>","<span class=\"c\">             */</span>","","            <span class=\"c\">/*</span>","<span class=\"c\">             * NOTE: there's a \"problem\" with cv.getFieldHelp().getHierarchy:</span>","<span class=\"c\">             * it must receive a formula of a hierarchy, and not the hierarchy itself.</span>","<span class=\"c\">             *</span>","<span class=\"c\">             * Because of that and the use scenarios of this method,</span>","<span class=\"c\">             * the received argument 'hierarchy' may end up being a formula.</span>","<span class=\"c\">             * We guard against that extracting the hierarchy of it</span>","<span class=\"c\">             * so that the hierarchy comparison  does not fail.</span>","<span class=\"c\">             */</span>","            <span class=\"k\">var</span> realHierarchy<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>hierarchy<span class=\"k\">)</span><span class=\"k\">{</span>","                realHierarchy <span class=\"k\">=</span> hierarchy<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">/^(\\[.*?\\])?.*$/</span><span class=\"k\">)[</span><span class=\"s\">1</span><span class=\"k\">];</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">)</span>","                        <span class=\"k\">.</span>reverse<span class=\"k\">()</span>","                        <span class=\"k\">.</span>first<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">return</span> <span class=\"k\">!</span>gem<span class=\"k\">.</span>isMeasureDiscrim <span class=\"k\">&amp;&amp;</span>","                                   <span class=\"k\">(!</span>realHierarchy <span class=\"k\">||</span> gem<span class=\"k\">.</span>hierarchy <span class=\"k\">===</span> realHierarchy<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        getHierarchyDeepestGem<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>hierarchy<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> hForms <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_getHierarchyFormulas<span class=\"k\">(</span>","                                    hierarchy<span class=\"k\">,</span>","                                    <span class=\"c\">/*includeHidden*/</span><span class=\"k\">false</span><span class=\"k\">,</span>","                                    <span class=\"c\">/*excludeChildren*/</span><span class=\"k\">false</span><span class=\"k\">);</span>","","            <span class=\"k\">return</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span>hForms<span class=\"k\">)</span>","                      <span class=\"k\">.</span>reverse<span class=\"k\">()</span> <span class=\"c\">// deepest first</span>","                      <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>hForm<span class=\"k\">)</span><span class=\"k\">{</span>","                          <span class=\"k\">var</span> gem <span class=\"k\">=</span> def<span class=\"k\">.</span>getOwn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>gemsMap<span class=\"k\">,</span> hForm<span class=\"k\">);</span>","                          <span class=\"k\">return</span> gem <span class=\"k\">&amp;&amp;</span> gem<span class=\"k\">.</span>axis <span class=\"k\">===</span> <span class=\"k\">this</span> <span class=\"k\">&amp;&amp;</span> gem<span class=\"k\">.</span>cccDimName <span class=\"k\">?</span> gem <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                      <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","                      <span class=\"k\">.</span>first<span class=\"k\">(</span>def<span class=\"k\">.</span>notNully<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    <span class=\"c\">// --------------------------</span>","","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.ColumnAxis'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>DiscreteAxis<span class=\"k\">)</span>","    <span class=\"k\">.</span>init<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>chart<span class=\"k\">)</span><span class=\"k\">{</span>","","        <span class=\"k\">var</span> rolesToCccDimMap <span class=\"k\">=</span> chart<span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>rolesToCccDimensionsMap<span class=\"k\">;</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>hasMeasureDiscrim <span class=\"k\">=</span> <span class=\"k\">!</span>chart<span class=\"k\">.</span>options<span class=\"k\">.</span>dataOptions<span class=\"k\">.</span>measuresInColumns <span class=\"k\">&amp;&amp;</span>","                                 <span class=\"k\">!!(</span>rolesToCccDimMap<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>defaultRole<span class=\"k\">]</span> <span class=\"k\">||</span>","                                    rolesToCccDimMap<span class=\"k\">[</span>chart<span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>defaultRole<span class=\"k\">]);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>isHiddenMeasureDiscrim <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>hasMeasureDiscrim <span class=\"k\">&amp;&amp;</span>","                                      <span class=\"k\">!(</span>chart<span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>genericMeasuresCount <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>chart<span class=\"k\">,</span> <span class=\"s\">'column'</span><span class=\"k\">);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>_ensureRole<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>defaultRole<span class=\"k\">);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>realDepth <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>hasMeasureDiscrim <span class=\"k\">?</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>depth <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>depth<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        defaultRole<span class=\"k\">:</span> <span class=\"s\">'columns'</span><span class=\"k\">,</span>","        hiddenMeasureDiscrimDimName<span class=\"k\">:</span> <span class=\"s\">'measureDiscrim'</span><span class=\"k\">,</span>","        measureDiscrimName<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","","        <span class=\"c\">/* Note this is called during base constructor. */</span>","        _getGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> gems <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasMeasureDiscrim<span class=\"k\">)</span><span class=\"k\">{</span>","                gems<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                    isMeasureDiscrim<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                    id<span class=\"k\">:</span>    <span class=\"s\">'__MeasureDiscrim__'</span><span class=\"k\">,</span>","                    label<span class=\"k\">:</span> <span class=\"s\">\"Measure discriminator\"</span><span class=\"k\">,</span>","                    axis<span class=\"k\">:</span>  <span class=\"k\">this</span><span class=\"k\">.</span>id<span class=\"k\">,</span>","                    role<span class=\"k\">:</span>  <span class=\"k\">this</span><span class=\"k\">.</span>defaultRole","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> gems<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _getGemDimName<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>gem<span class=\"k\">.</span>isMeasureDiscrim <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>isHiddenMeasureDiscrim<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">// When the measure discriminator should not be seen</span>","                <span class=\"c\">// it should be mapped to a different and hidden dimension group</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>measureDiscrimName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>hiddenMeasureDiscrimDimName<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> cccDimName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>gem<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>gem<span class=\"k\">.</span>isMeasureDiscrim<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>cccDimName<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">// columns role is not mapped to CCC...</span>","                    <span class=\"c\">// In this case, the discriminator goes as the last *row* dimension.</span>","                    <span class=\"c\">// Is the case, at least, in the PieChart, in which there is no \"series\" concept.</span>","                    <span class=\"k\">var</span> rolesToCccDimMap <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>rolesToCccDimensionsMap<span class=\"k\">,</span>","                        rowAxis          <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">,</span>","                        rowRole          <span class=\"k\">=</span> rowAxis<span class=\"k\">.</span>defaultRole<span class=\"k\">,</span>","                        rowCccDimGroup   <span class=\"k\">=</span> rolesToCccDimMap<span class=\"k\">[</span>rowRole<span class=\"k\">],</span>","                        rowNextLevel     <span class=\"k\">=</span> rowAxis<span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span>rowRole<span class=\"k\">].</span>length<span class=\"k\">;</span>","","                    cccDimName <span class=\"k\">=</span> pvc<span class=\"k\">.</span>data<span class=\"k\">.</span>DimensionType","                                         <span class=\"k\">.</span>dimensionGroupLevelName<span class=\"k\">(</span>rowCccDimGroup<span class=\"k\">,</span> rowNextLevel<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">this</span><span class=\"k\">.</span>measureDiscrimName <span class=\"k\">=</span> cccDimName<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> cccDimName<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        configureDimensionGroups<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"c\">// Ensure measureDiscrimName is determined</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>cccDimList<span class=\"k\">();</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>measureDiscrimName<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>options<span class=\"k\">.</span>dimensions<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>measureDiscrimName<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","                    isHidden<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"c\">// --------------------------</span>","","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.RowAxis'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>DiscreteAxis<span class=\"k\">)</span>","    <span class=\"k\">.</span>init<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>chart<span class=\"k\">)</span><span class=\"k\">{</span>","        ","        <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>chart<span class=\"k\">,</span> <span class=\"s\">'row'</span><span class=\"k\">);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>_ensureRole<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>defaultRole<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        defaultRole<span class=\"k\">:</span> <span class=\"s\">'rows'</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    <span class=\"c\">// --------------------------</span>","","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.MeasureAxis'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Axis<span class=\"k\">)</span>","    <span class=\"k\">.</span>init<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>chart<span class=\"k\">)</span><span class=\"k\">{</span>","        ","        <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>chart<span class=\"k\">,</span> <span class=\"s\">'measure'</span><span class=\"k\">);</span>","        ","        <span class=\"k\">this</span><span class=\"k\">.</span>_ensureRole<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>defaultRole<span class=\"k\">);</span>","        ","        <span class=\"k\">this</span><span class=\"k\">.</span>genericMeasuresCount <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>genericMeasureRoles <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        def<span class=\"k\">.</span>eachOwn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gemsByRole<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>gems<span class=\"k\">,</span> role<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>role<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'measures'</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>genericMeasureRoles<span class=\"k\">[</span>role<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>genericMeasuresCount <span class=\"k\">+=</span> gems<span class=\"k\">.</span>length<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        defaultRole<span class=\"k\">:</span> <span class=\"s\">'measures'</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Filters the report definition formulas</span>","<span class=\"c\">         * excluding those not returned in the data table.</span>","<span class=\"c\">         *</span>","<span class=\"c\">         * Note this is called during base constructor.</span>","<span class=\"c\">         */</span>","        _getGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","            <span class=\"k\">var</span> gems <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">var</span> filtered <span class=\"k\">=</span> <span class=\"k\">[];</span>","            ","            gems<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> meaId <span class=\"k\">=</span> gem<span class=\"k\">.</span>id<span class=\"k\">,</span>","                    measureInfo<span class=\"k\">;</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(</span>meaId <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>measureInfo <span class=\"k\">=</span> def<span class=\"k\">.</span>getOwn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_measuresInfo<span class=\"k\">,</span> meaId<span class=\"k\">)))</span><span class=\"k\">{</span>","                    gem<span class=\"k\">.</span>role <span class=\"k\">=</span> measureInfo<span class=\"k\">.</span>role<span class=\"k\">;</span>","","                    filtered<span class=\"k\">.</span>push<span class=\"k\">(</span>gem<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","            ","            <span class=\"k\">return</span> filtered<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        cccDimList<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_cccDimList<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_cccDimList <span class=\"k\">=</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_measureRolesInfoList","                        <span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>role<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> role<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_cccDimList<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _buildGemHtmlTooltip<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>lines<span class=\"k\">,</span> complex<span class=\"k\">,</span> context<span class=\"k\">,</span> gem<span class=\"c\">/*, index*/</span><span class=\"k\">)</span><span class=\"k\">{</span>","","            <span class=\"c\">/*</span>","<span class=\"c\">             * When using measure discriminator column,</span>","<span class=\"c\">             * only the \"active\" measure in 'complex'</span>","<span class=\"c\">             * is placed in the tooltip.</span>","<span class=\"c\">             */</span>","            <span class=\"k\">var</span> colAxis <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>colAxis<span class=\"k\">.</span>measureDiscrimName    <span class=\"k\">&amp;&amp;</span>","               def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>genericMeasureRoles<span class=\"k\">,</span> gem<span class=\"k\">.</span>role<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","               gem<span class=\"k\">.</span>id <span class=\"k\">!==</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>colAxis<span class=\"k\">.</span>measureDiscrimName<span class=\"k\">].</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","               <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">/* Obtain the dimension assigned to the role */</span>","            <span class=\"k\">var</span> cccDimName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_measureRolesInfo<span class=\"k\">[</span>gem<span class=\"k\">.</span>role<span class=\"k\">].</span>cccDimName<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>cccDimName<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> atom <span class=\"k\">=</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>cccDimName<span class=\"k\">];</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>atom<span class=\"k\">.</span>dimension<span class=\"k\">.</span>type<span class=\"k\">.</span>isHidden<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">// ex: \"GemLabel (RoleDesc): 200 (10%)\"</span>","                    <span class=\"k\">var</span> tooltipLine <span class=\"k\">=</span> gem<span class=\"k\">.</span>label<span class=\"k\">;</span>","","                    <span class=\"c\">// Role description</span>","                    <span class=\"k\">if</span><span class=\"k\">(!</span>def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_noRoleInTooltipMeasureRoles<span class=\"k\">,</span> gem<span class=\"k\">.</span>role<span class=\"k\">))</span> <span class=\"k\">{</span>","                        tooltipLine <span class=\"k\">+=</span> <span class=\"s\">\" (\"</span> <span class=\"k\">+</span> gem<span class=\"k\">.</span>role <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    tooltipLine <span class=\"k\">+=</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> atom<span class=\"k\">.</span>label<span class=\"k\">;</span>","","                    <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_noPercentInTootltipForPercentGems <span class=\"k\">||</span> gem<span class=\"k\">.</span>measureType <span class=\"k\">!==</span> <span class=\"s\">'PCTOF'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> valuePct <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getAtomPercent<span class=\"k\">(</span>atom<span class=\"k\">,</span> context<span class=\"k\">);</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>valuePct <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                            tooltipLine <span class=\"k\">+=</span> <span class=\"s\">\" (\"</span> <span class=\"k\">+</span> valuePct <span class=\"k\">+</span> <span class=\"s\">\"%)\"</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","","                    lines<span class=\"k\">.</span>push<span class=\"k\">(</span>def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span>tooltipLine<span class=\"k\">));</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getAtomPercent<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>atom<span class=\"k\">,</span> context<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>context<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> cccChart <span class=\"k\">=</span> context<span class=\"k\">.</span>chart<span class=\"k\">,</span>","                    data <span class=\"k\">=</span> cccChart<span class=\"k\">.</span>data<span class=\"k\">,</span>","                    playingPercentMap <span class=\"k\">=</span> data<span class=\"k\">.</span>type<span class=\"k\">.</span>getPlayingPercentVisualRoleDimensionMap<span class=\"k\">(),</span>","                    cccDimName <span class=\"k\">=</span> atom<span class=\"k\">.</span>dimension<span class=\"k\">.</span>name","                    <span class=\"k\">;</span>","","                <span class=\"k\">if</span><span class=\"k\">(</span>playingPercentMap<span class=\"k\">.</span>has<span class=\"k\">(</span>cccDimName<span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> group <span class=\"k\">=</span> context<span class=\"k\">.</span>scene<span class=\"k\">.</span>group<span class=\"k\">,</span>","                        pct<span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>group<span class=\"k\">)</span> <span class=\"k\">{</span>","                        pct <span class=\"k\">=</span> group<span class=\"k\">.</span>dimensions<span class=\"k\">(</span>cccDimName<span class=\"k\">)</span>","                                   <span class=\"k\">.</span>percentOverParent<span class=\"k\">(</span><span class=\"k\">{</span> visible<span class=\"k\">:</span> <span class=\"k\">true</span> <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        pct <span class=\"k\">=</span> data<span class=\"k\">.</span>dimensions<span class=\"k\">(</span>cccDimName<span class=\"k\">).</span>percent<span class=\"k\">(</span>atom<span class=\"k\">.</span>value<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","","                    <span class=\"k\">return</span> cccChart<span class=\"k\">.</span>options<span class=\"k\">.</span>valueFormat<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> Math<span class=\"k\">.</span>round<span class=\"k\">(</span>pct <span class=\"k\">*</span> <span class=\"s\">10000</span><span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"s\">100</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        fillCellSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selection<span class=\"k\">,</span> complex<span class=\"c\">/*, selectionExcludesMulti*/</span><span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/*</span>","<span class=\"c\">             * Add a description of the selected values.</span>","<span class=\"c\">             * At the time of writing, analyzer discards selection.value</span>","<span class=\"c\">             */</span>","            selection<span class=\"k\">.</span>value <span class=\"k\">=</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">)</span>","                <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> cccDimName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_measureRolesInfo<span class=\"k\">[</span>gem<span class=\"k\">.</span>role<span class=\"k\">].</span>cccDimName<span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>cccDimName<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>cccDimName<span class=\"k\">].</span>label<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","                <span class=\"k\">.</span>where<span class=\"k\">(</span>def<span class=\"k\">.</span>truthy<span class=\"k\">)</span>","                <span class=\"k\">.</span>array<span class=\"k\">()</span>","                <span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\" ~ \"</span><span class=\"k\">)</span>","                <span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"c\">// ------------------</span>","    ","    <span class=\"c\">/*</span>","<span class=\"c\">     * Unhandled mouse events from protovis</span>","<span class=\"c\">     * bubble up and cause slowing down the UI.</span>","<span class=\"c\">     * So, we stop propagation of mouse events. </span>","<span class=\"c\">     * We can't use dojo or jQuery for this, </span>","<span class=\"c\">     * cause they try to \"fix\" the event object, </span>","<span class=\"c\">     * which is generally an expensive operation</span>","<span class=\"c\">     * that would defeat the initial purpose. </span>","<span class=\"c\">     */</span>","    <span class=\"k\">var</span> _cccEventsShieldEvents <span class=\"k\">=</span>  <span class=\"k\">[</span><span class=\"s\">'mouseover'</span><span class=\"k\">,</span> <span class=\"s\">'mouseout'</span><span class=\"k\">,</span> <span class=\"s\">'mousemove'</span><span class=\"k\">];</span>","    ","    <span class=\"k\">function</span> installCccEventsShield<span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>element<span class=\"k\">.</span>_cccEventsShield<span class=\"k\">)</span><span class=\"k\">{</span>","            element<span class=\"k\">.</span>_cccEventsShield <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            ","            _cccEventsShieldEvents<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>evName<span class=\"k\">)</span><span class=\"k\">{</span>","                addListener<span class=\"k\">(</span>element<span class=\"k\">,</span> evName<span class=\"k\">,</span> stopEventPropagation<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">function</span> stopEventPropagation<span class=\"k\">(</span>ev<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>ev<span class=\"k\">)</span><span class=\"k\">{</span> ev <span class=\"k\">=</span> window<span class=\"k\">.</span>event<span class=\"k\">;</span> <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>ev<span class=\"k\">.</span>stopPropagation<span class=\"k\">)</span> <span class=\"k\">{</span>","            ev<span class=\"k\">.</span>stopPropagation<span class=\"k\">();</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            ev<span class=\"k\">.</span>cancelBubble <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">function</span> addListener<span class=\"k\">(</span>elem<span class=\"k\">,</span> type<span class=\"k\">,</span> listener<span class=\"k\">)</span><span class=\"k\">{</span>","        elem<span class=\"k\">.</span>addEventListener","            <span class=\"k\">?</span> elem<span class=\"k\">.</span>addEventListener<span class=\"k\">(</span>type<span class=\"k\">,</span> listener<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">)</span>","            <span class=\"k\">:</span> elem<span class=\"k\">.</span>attachEvent<span class=\"k\">(</span><span class=\"s\">\"on\"</span> <span class=\"k\">+</span> type<span class=\"k\">,</span> listener<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// ------------------</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.Chart'</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>init<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_element <span class=\"k\">=</span> element<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_elementName <span class=\"k\">=</span> element<span class=\"k\">.</span>id<span class=\"k\">;</span>","        ","        installCccEventsShield<span class=\"k\">(</span>element<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _keyAxesIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'column'</span><span class=\"k\">,</span> <span class=\"s\">'row'</span><span class=\"k\">],</span>","        _axesIds<span class=\"k\">:</span>    <span class=\"k\">[</span><span class=\"s\">'column'</span><span class=\"k\">,</span> <span class=\"s\">'row'</span><span class=\"k\">,</span> <span class=\"s\">'measure'</span><span class=\"k\">],</span>","","        <span class=\"c\">/* This takes creation time dependencies into account.</span>","<span class=\"c\">         * It works right now. If ti doesn't scale,</span>","<span class=\"c\">         * then some parts of axes initialization must me taken out</span>","<span class=\"c\">         * of the axes class or split into more initialization phases.</span>","<span class=\"c\">         */</span>","        _axesCreateOrderIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'row'</span><span class=\"k\">,</span> <span class=\"s\">'measure'</span><span class=\"k\">,</span> <span class=\"s\">'column'</span><span class=\"k\">],</span>","","        <span class=\"c\">// This is the order in which fields</span>","        <span class=\"c\">// are layed out in the CCC's virtual item.</span>","        <span class=\"c\">// Indexes of readers are relative to this layout.</span>","        _cccVirtualItemAxesLayout<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'column'</span><span class=\"k\">,</span> <span class=\"s\">'row'</span><span class=\"k\">,</span> <span class=\"s\">'measure'</span><span class=\"k\">],</span>","      ","        <span class=\"c\">/**</span>","<span class=\"c\">         * The drilling axes.</span>","<span class=\"c\">         *</span>","<span class=\"c\">         * In the order to be tested</span>","<span class=\"c\">         * for being chosen as the drilling axis.</span>","<span class=\"c\">         */</span>","        _drillAxesIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'column'</span><span class=\"k\">,</span> <span class=\"s\">'row'</span><span class=\"k\">],</span>","","        <span class=\"c\">/*</span>","<span class=\"c\">         * Measure roles that do not show the role in the tooltip.</span>","<span class=\"c\">         */</span>","        _noRoleInTooltipMeasureRoles<span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">'measures'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/*</span>","<span class=\"c\">         * Do not show percent in front of an analyzer \"percent measure\" gem.</span>","<span class=\"c\">         */</span>","        _noPercentInTootltipForPercentGems<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/* PLUGIN INTERFACE  */</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Instructs the visualization to draw itself with</span>","<span class=\"c\">         * supplied data and options.</span>","<span class=\"c\">         */</span>","        draw<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>dataTable<span class=\"k\">,</span> vizOptions<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// CDA table</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_metadata  <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_resultset <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","            <span class=\"c\">// Pentaho/Google data table</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable <span class=\"k\">=</span> dataTable<span class=\"k\">;</span>","            ","            <span class=\"c\">// ---------------</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_initOptions<span class=\"k\">(</span>vizOptions<span class=\"k\">);</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_processDataTable<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_initAxes<span class=\"k\">();</span>","","            <span class=\"c\">// ---------------</span>","","            <span class=\"k\">var</span> rowDepth <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>depth<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>dataOptions<span class=\"k\">.</span>categoriesCount <span class=\"k\">=</span> rowDepth<span class=\"k\">;</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_hasMultiChartColumns <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>hasMulti <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>hasMulti<span class=\"k\">;</span>","","            <span class=\"c\">// ---------------</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_readUserOptions<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">,</span> vizOptions<span class=\"k\">);</span>","            ","            <span class=\"c\">// ---------------</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_readData<span class=\"k\">();</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_configure<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_prepareLayout<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">);</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_render<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        resize<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>width<span class=\"k\">,</span> height<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// Resize event throttling</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_lastResizeTimeout <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                clearTimeout<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_lastResizeTimeout<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_lastResizeTimeout <span class=\"k\">=</span> setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_lastResizeTimeout <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                ","                <span class=\"k\">this</span><span class=\"k\">.</span>_doResize<span class=\"k\">(</span>width<span class=\"k\">,</span> height<span class=\"k\">);</span>","                ","            <span class=\"k\">}</span><span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">),</span> <span class=\"s\">50</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _doResize<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>width<span class=\"k\">,</span> height<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>options<span class=\"k\">;</span> ","                ","                def<span class=\"k\">.</span>set<span class=\"k\">(</span>options<span class=\"k\">,</span> <span class=\"s\">'width'</span><span class=\"k\">,</span> width<span class=\"k\">,</span> <span class=\"s\">'height'</span><span class=\"k\">,</span> height<span class=\"k\">);</span>","                ","                <span class=\"k\">this</span><span class=\"k\">.</span>_prepareLayout<span class=\"k\">(</span>options<span class=\"k\">);</span>","                ","                <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>render<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/* Sets the items on the chart that should be highlighted */</span>","        setHighlights<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selections<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_selections <span class=\"k\">=</span> selections<span class=\"k\">;</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_ownChange<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"c\">// reentry control</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>selections <span class=\"k\">||</span> selections<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">// will cause selectionChangedAction being called</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_ownChange <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">try</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>clearSelections<span class=\"k\">();</span>","                    <span class=\"k\">}</span> <span class=\"k\">finally</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_ownChange <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">// TODO: what's this for? Column/Bar?</span>","        <span class=\"c\">/* Returns the output parameters of the chart. */</span>","        getOutputParameters<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> params <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>cccClass <span class=\"k\">==</span> <span class=\"s\">'pvc.PieChart'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                params<span class=\"k\">.</span>push<span class=\"k\">([</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span> <span class=\"s\">0</span> <span class=\"k\">),</span>","                        <span class=\"k\">true</span><span class=\"k\">,</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span> <span class=\"s\">0</span> <span class=\"k\">)</span>","                    <span class=\"k\">]);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> j <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">()</span> <span class=\"k\">;</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    params<span class=\"k\">.</span>push<span class=\"k\">([</span>","                            <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>j<span class=\"k\">),</span>","                            <span class=\"k\">true</span><span class=\"k\">,</span>","                            <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>j<span class=\"k\">)</span>","                        <span class=\"k\">]);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> params<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">// TODO - is the current selection accounting needed?</span>","        <span class=\"c\">/* Returns the colors to use.</span>","<span class=\"c\">         * This needs to take into account selected and unselected items.</span>","<span class=\"c\">         */</span>","        getColors<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_colors<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_colors<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> colors <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","            <span class=\"k\">var</span> paletteMap <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>metrics<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>paletteMap<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>paletteMap<span class=\"k\">)</span> <span class=\"k\">{</span>","                colors <span class=\"k\">=</span> <span class=\"k\">[];</span>","                <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> r <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> r <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getNumberOfRows<span class=\"k\">()</span> <span class=\"k\">;</span> r<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> item <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getTableValue<span class=\"k\">(</span>r<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_selections <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_selections<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> done <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                        <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> selIdx <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> selIdx <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_selections<span class=\"k\">.</span>length <span class=\"k\">;</span> selIdx<span class=\"k\">++)</span> <span class=\"k\">{</span>","                            <span class=\"k\">var</span> selection <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_selections<span class=\"k\">[</span>selIdx<span class=\"k\">];</span>","                            <span class=\"k\">if</span><span class=\"k\">((</span>selection<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'row'</span>    <span class=\"k\">&amp;&amp;</span> selection<span class=\"k\">.</span>rowItem <span class=\"k\">==</span> item<span class=\"k\">)</span> <span class=\"k\">||</span>","                               <span class=\"k\">(</span>selection<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'column'</span> <span class=\"k\">&amp;&amp;</span> selection<span class=\"k\">.</span>colId <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)))</span> <span class=\"k\">{</span>","                                colors<span class=\"k\">.</span>push<span class=\"k\">(</span>paletteMap<span class=\"k\">[</span>item<span class=\"k\">]);</span>","                                done <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                                <span class=\"k\">break</span><span class=\"k\">;</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","","                        <span class=\"k\">if</span><span class=\"k\">(!</span>done<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"c\">// this item is not selected, so make it grey</span>","                            colors<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"s\">\"#bbbbbb\"</span> <span class=\"k\">);</span>","                        <span class=\"k\">}</span>","","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        colors<span class=\"k\">.</span>push<span class=\"k\">(</span>paletteMap<span class=\"k\">[</span>item<span class=\"k\">]);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> colors<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/* HELPERS  */</span>","","        _initOptions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>vizOptions<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// Make a copy</span>","            vizOptions <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions <span class=\"k\">=</span> $<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> vizOptions<span class=\"k\">);</span>","","            <span class=\"c\">// --------------------</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper <span class=\"k\">=</span> cv<span class=\"k\">.</span>pentahoVisualizationHelpers<span class=\"k\">[</span>vizOptions<span class=\"k\">.</span>customChartType<span class=\"k\">];</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_hasContentLink <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>isInteractionEnabled<span class=\"k\">()</span> <span class=\"k\">&amp;&amp;</span> ","                                   <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>hasContentLink<span class=\"k\">();</span>","","            <span class=\"c\">// --------------------</span>","","            <span class=\"c\">// Store the current selections</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_selections <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>selections<span class=\"k\">;</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>options <span class=\"k\">=</span> <span class=\"k\">{</span>","                canvas<span class=\"k\">:</span>     <span class=\"k\">this</span><span class=\"k\">.</span>_elementName<span class=\"k\">,</span>","                showValues<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","","                legend<span class=\"k\">:</span>  <span class=\"k\">true</span><span class=\"k\">,</span>","                legendClickMode<span class=\"k\">:</span>  <span class=\"s\">'toggleSelected'</span><span class=\"k\">,</span>","                legend2ClickMode<span class=\"k\">:</span> <span class=\"s\">'toggleSelected'</span><span class=\"k\">,</span> <span class=\"c\">// for data part 2 (lines in column/line combo)</span>","                titlePosition<span class=\"k\">:</span>    <span class=\"s\">'top'</span><span class=\"k\">,</span>","","                paddings<span class=\"k\">:</span> <span class=\"s\">10</span><span class=\"k\">,</span>","","                animate<span class=\"k\">:</span>      <span class=\"k\">false</span><span class=\"k\">,</span>","                showTooltips<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                clickable<span class=\"k\">:</span>    <span class=\"k\">true</span><span class=\"k\">,</span>","                selectable<span class=\"k\">:</span>   <span class=\"k\">true</span><span class=\"k\">,</span>","                hoverable<span class=\"k\">:</span>    <span class=\"k\">false</span><span class=\"k\">,</span>","          ","                ctrlSelectMode<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                ","                clearSelectionMode<span class=\"k\">:</span> <span class=\"s\">'manual'</span><span class=\"k\">,</span>","                ","                extensionPoints<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","                dimensionGroups<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","                dimensions<span class=\"k\">:</span>      <span class=\"k\">{}</span><span class=\"k\">,</span>","                readers<span class=\"k\">:</span>         <span class=\"k\">[],</span>","                visualRoles<span class=\"k\">:</span>     <span class=\"k\">{}</span><span class=\"k\">,</span>","                ","                ignoreNulls<span class=\"k\">:</span>   <span class=\"k\">false</span><span class=\"k\">,</span>","                crosstabMode<span class=\"k\">:</span> <span class=\"k\">!!</span>vizOptions<span class=\"k\">.</span>crosstabMode<span class=\"k\">,</span>","                isMultiValued<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                seriesInRows<span class=\"k\">:</span>  <span class=\"k\">false</span><span class=\"k\">,</span>","                dataOptions<span class=\"k\">:</span> <span class=\"k\">{</span>","                    categoriesCount<span class=\"k\">:</span>   <span class=\"s\">1</span><span class=\"k\">,</span>","                    measuresInColumns<span class=\"k\">:</span> <span class=\"k\">!!</span>vizOptions<span class=\"k\">.</span>measuresInColumns","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","            ","            <span class=\"c\">/* Copy options */</span>","            <span class=\"c\">// Just in case</span>","            vizOptions<span class=\"k\">.</span>height <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>height <span class=\"k\">||</span> <span class=\"s\">400</span><span class=\"k\">;</span>","            vizOptions<span class=\"k\">.</span>width  <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>width  <span class=\"k\">||</span> <span class=\"s\">400</span><span class=\"k\">;</span>","            ","            <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> x <span class=\"k\">in</span> vizOptions<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_shouldSkipVizOption<span class=\"k\">(</span>x<span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_configureOption<span class=\"k\">(</span>x<span class=\"k\">,</span> vizOptions<span class=\"k\">[</span>x<span class=\"k\">]);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">/* Copy extension points */</span>","            <span class=\"k\">var</span> vizExtPoints <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>extensionPoints<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>vizExtPoints<span class=\"k\">)</span><span class=\"k\">{</span>","                def<span class=\"k\">.</span>copy<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>extensionPoints<span class=\"k\">,</span> vizExtPoints<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _message<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>msgId<span class=\"k\">,</span> args<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>message<span class=\"k\">(</span>msgId<span class=\"k\">,</span> args<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _readUserOptions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">,</span> vizOptions<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// Apply vizOptions to extension points and others</span>","            <span class=\"k\">var</span> extPoints <span class=\"k\">=</span> options<span class=\"k\">.</span>extensionPoints<span class=\"k\">;</span>","            ","            <span class=\"k\">var</span> value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>backgroundFill<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">&amp;&amp;</span> value <span class=\"k\">!==</span> <span class=\"s\">'NONE'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> fillStyle<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">===</span> <span class=\"s\">'GRADIENT'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasMultiChartColumns<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"c\">// Use the first color with half of the saturation</span>","                        <span class=\"k\">var</span> bgColor <span class=\"k\">=</span> pv<span class=\"k\">.</span>color<span class=\"k\">(</span>vizOptions<span class=\"k\">.</span>backgroundColor<span class=\"k\">).</span>rgb<span class=\"k\">();</span>","                        bgColor <span class=\"k\">=</span> pv<span class=\"k\">.</span>rgb<span class=\"k\">(</span>","                                <span class=\"k\">~~((</span><span class=\"s\">255</span> <span class=\"k\">+</span> bgColor<span class=\"k\">.</span>r<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"s\">2</span><span class=\"k\">),</span> <span class=\"c\">// ~~ &lt;=&gt; Math.floor</span>","                                <span class=\"k\">~~((</span><span class=\"s\">255</span> <span class=\"k\">+</span> bgColor<span class=\"k\">.</span>g<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"s\">2</span><span class=\"k\">),</span>","                                <span class=\"k\">~~((</span><span class=\"s\">255</span> <span class=\"k\">+</span> bgColor<span class=\"k\">.</span>b<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"s\">2</span><span class=\"k\">),</span>","                                bgColor<span class=\"k\">.</span>a<span class=\"k\">);</span>","                        ","                        fillStyle <span class=\"k\">=</span> bgColor<span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        fillStyle <span class=\"k\">=</span> <span class=\"s\">'linear-gradient(to top, '</span> <span class=\"k\">+</span> ","                                    vizOptions<span class=\"k\">.</span>backgroundColor <span class=\"k\">+</span> <span class=\"s\">', '</span> <span class=\"k\">+</span> ","                                    vizOptions<span class=\"k\">.</span>backgroundColorEnd <span class=\"k\">+</span> <span class=\"s\">')'</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    fillStyle <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>backgroundColor<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                extPoints<span class=\"k\">.</span>base_fillStyle <span class=\"k\">=</span> fillStyle<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>labelColor<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">!==</span> undefined<span class=\"k\">)</span><span class=\"k\">{</span>","                extPoints<span class=\"k\">.</span>xAxisLabel_textStyle <span class=\"k\">=</span> ","                extPoints<span class=\"k\">.</span>yAxisLabel_textStyle <span class=\"k\">=</span> ","                extPoints<span class=\"k\">.</span>xAxisTitleLabel_textStyle <span class=\"k\">=</span>","                extPoints<span class=\"k\">.</span>yAxisTitleLabel_textStyle <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>legendColor<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">!==</span> undefined<span class=\"k\">)</span><span class=\"k\">{</span>","                extPoints<span class=\"k\">.</span>legendLabel_textStyle <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// TODO: ignoring white color cause analyzer has no on-off for the legend bg color</span>","            <span class=\"c\">// and always send white. When the chart bg color is active it</span>","            <span class=\"c\">// would not show through the legend.</span>","            value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>legendBackgroundColor<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">&amp;&amp;</span> value<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">!==</span> <span class=\"s\">\"#ffffff\"</span><span class=\"k\">)</span><span class=\"k\">{</span>","                extPoints<span class=\"k\">.</span>legendArea_fillStyle <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>lineWidth<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">!==</span> undefined<span class=\"k\">)</span><span class=\"k\">{</span>","                extPoints<span class=\"k\">.</span>line_lineWidth  <span class=\"k\">=</span> <span class=\"k\">+</span>value<span class=\"k\">;</span>      <span class=\"c\">// + -&gt; to number</span>","                <span class=\"k\">var</span> radius <span class=\"k\">=</span> <span class=\"s\">3</span> <span class=\"k\">+</span> <span class=\"s\">6</span> <span class=\"k\">*</span> <span class=\"k\">((+</span>value<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"s\">8</span><span class=\"k\">);</span> <span class=\"c\">// 1 -&gt; 8 =&gt; 3 -&gt; 9,</span>","                extPoints<span class=\"k\">.</span>dot_shapeSize <span class=\"k\">=</span> radius <span class=\"k\">*</span> radius<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>maxChartsPerRow<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">!==</span> undefined<span class=\"k\">)</span><span class=\"k\">{</span>","                options<span class=\"k\">.</span>multiChartMaxColumns <span class=\"k\">=</span> <span class=\"k\">+</span>value<span class=\"k\">;</span> <span class=\"c\">// + -&gt; to number</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// build style for pv</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>vizOptions<span class=\"k\">.</span>labelSize<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> labelFont <span class=\"k\">=</span> readFont<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> <span class=\"s\">'label'</span><span class=\"k\">);</span>","                ","                options<span class=\"k\">.</span>axisTitleFont <span class=\"k\">=</span> ","                options<span class=\"k\">.</span>axisFont <span class=\"k\">=</span> labelFont<span class=\"k\">;</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasMultiChartColumns<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> labelFontSize  <span class=\"k\">=</span> readFontSize<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> <span class=\"s\">'label'</span><span class=\"k\">);</span>","                    <span class=\"k\">var</span> labelFontFamily <span class=\"k\">=</span> readFontFamily<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> <span class=\"s\">'label'</span><span class=\"k\">);</span>","                    options<span class=\"k\">.</span>titleFont <span class=\"k\">=</span> <span class=\"k\">(</span>labelFontSize <span class=\"k\">+</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"px \"</span> <span class=\"k\">+</span> labelFontFamily<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">if</span> <span class=\"k\">(</span>vizOptions<span class=\"k\">.</span>legendSize<span class=\"k\">)</span> <span class=\"k\">{</span>","                options<span class=\"k\">.</span>legendFont <span class=\"k\">=</span> readFont<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> <span class=\"s\">'legend'</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _processDataTable<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"c\">// Data truncation can affect also the structure of data.</span>","            <span class=\"c\">// If the query returns more than 100x100 rowsxcols,</span>","            <span class=\"c\">// requested measure formulas may be suppressed.</span>","            <span class=\"c\">// Filter measures not returned in this._dataTable</span>","            <span class=\"c\">//</span>","            <span class=\"c\">// Note that there is no guarantee that</span>","            <span class=\"c\">// when a given measure is not present with a given col value</span>","            <span class=\"c\">// it will not show up in the next col value</span>","            <span class=\"c\">// When no row has a value in a given column, the column is omitted...</span>","            <span class=\"c\">//</span>","            <span class=\"c\">// Note that measure gems that are in no *chart* gem bar (not mapped)</span>","            <span class=\"c\">// and that do not have hideInChart=true may appear here as columns.</span>","            <span class=\"c\">// These are ignored (meaRole === 'undefined').</span>","            <span class=\"c\">// </span>","            <span class=\"c\">// Measure columns of the same col values group may come in any order...</span>","            <span class=\"c\">// and even in different orders across column groups.</span>","","            <span class=\"k\">var</span> dataTable <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">;</span>","            <span class=\"k\">var</span> dtColCount <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">();</span>","            <span class=\"k\">var</span> roleToCccDimMap <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>rolesToCccDimensionsMap<span class=\"k\">;</span>","            <span class=\"k\">var</span> colGroups <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">var</span> colGroupsByColValues <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","            <span class=\"c\">/* </span>","<span class=\"c\">             * meaRoleId -&gt; {</span>","<span class=\"c\">             *   groupIndex: 0, // Global order of measure roles within a column group</span>","<span class=\"c\">             *   index: 0       // Column index of a measure role's first appearance</span>","<span class=\"c\">             * }</span>","<span class=\"c\">             */</span>","            <span class=\"k\">var</span> measureRolesInfo     <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> measureRolesInfoList <span class=\"k\">=</span> <span class=\"k\">[];</span>","            ","            <span class=\"c\">/*</span>","<span class=\"c\">             * id -&gt; { gem info }</span>","<span class=\"c\">             */</span>","            <span class=\"k\">var</span> measuresInfo <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> measuresInfoList <span class=\"k\">=</span> <span class=\"k\">[];</span>","                        ","            <span class=\"k\">var</span> rowsInfoList <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">var</span> columnsInfoList <span class=\"k\">=</span> <span class=\"k\">[];</span>","            ","            <span class=\"k\">var</span> tc <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> colId<span class=\"k\">,</span> splitColId<span class=\"k\">;</span>","            ","            <span class=\"c\">/*</span>","<span class=\"c\">             * I - Row gems</span>","<span class=\"c\">             */</span>","            <span class=\"k\">while</span><span class=\"k\">(</span>tc <span class=\"k\">&lt;</span> dtColCount<span class=\"k\">)</span><span class=\"k\">{</span>","                colId <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>tc<span class=\"k\">);</span>","                splitColId <span class=\"k\">=</span> splitColGroupAndMeasure<span class=\"k\">(</span>colId<span class=\"k\">);</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(!</span>processRowColumn<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> splitColId<span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"c\">// Found first measure column</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                <span class=\"c\">// next</span>","                tc<span class=\"k\">++;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// First measure column</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>tc <span class=\"k\">&lt;</span> dtColCount<span class=\"k\">)</span><span class=\"k\">{</span>","                ","                <span class=\"c\">/*</span>","<span class=\"c\">                 * II - Column gems</span>","<span class=\"c\">                 * </span>","<span class=\"c\">                 * Collects column gems' roles from the first col~mea column.</span>","<span class=\"c\">                 */</span>","                processColumnsInfo<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> splitColId<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]);</span>","                ","                <span class=\"c\">/*</span>","<span class=\"c\">                 * III - Row gems</span>","<span class=\"c\">                 */</span>","                <span class=\"k\">while</span><span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    processMeasureColumn<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> splitColId<span class=\"k\">);</span>","                    ","                    <span class=\"c\">// next</span>","                    <span class=\"k\">if</span><span class=\"k\">(++</span>tc <span class=\"k\">&gt;=</span> dtColCount<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    ","                    colId <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>tc<span class=\"k\">);</span>","                    splitColId <span class=\"k\">=</span> splitColGroupAndMeasure<span class=\"k\">(</span>colId<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// Sort measure roles</span>","            measureRolesInfoList<span class=\"k\">.</span>sort<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>infoa<span class=\"k\">,</span> infob<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> def<span class=\"k\">.</span>compare<span class=\"k\">(</span>infoa<span class=\"k\">.</span>groupIndex<span class=\"k\">,</span> infob<span class=\"k\">.</span>groupIndex<span class=\"k\">)</span> <span class=\"k\">||</span>","                       def<span class=\"k\">.</span>compare<span class=\"k\">(</span>infoa<span class=\"k\">.</span>index<span class=\"k\">,</span>      infob<span class=\"k\">.</span>index<span class=\"k\">)</span> <span class=\"c\">// tie breaker</span>","                <span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","","            <span class=\"c\">// Reassign role group indexes</span>","            measureRolesInfoList<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>roleInfo<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","                roleInfo<span class=\"k\">.</span>groupIndex <span class=\"k\">=</span> index<span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","","            <span class=\"c\">// Publish</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_measureRolesInfo <span class=\"k\">=</span> measureRolesInfo<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_measureRolesInfoList <span class=\"k\">=</span> measureRolesInfoList<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_colGroups <span class=\"k\">=</span> colGroups<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_measuresInfo <span class=\"k\">=</span> measuresInfo<span class=\"k\">;</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_axesGemsInfo <span class=\"k\">=</span> <span class=\"k\">{</span>","                <span class=\"s\">'measure'</span><span class=\"k\">:</span> measuresInfoList<span class=\"k\">,</span>","                <span class=\"s\">'row'</span><span class=\"k\">:</span>     rowsInfoList<span class=\"k\">,</span>","                <span class=\"s\">'column'</span><span class=\"k\">:</span>  columnsInfoList","            <span class=\"k\">}</span><span class=\"k\">;</span>","            ","            ","            <span class=\"c\">/* HELPER functions */</span>","            ","            <span class=\"k\">function</span> processRowColumn<span class=\"k\">(</span>colGroupValues<span class=\"k\">,</span> meaId<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"s\">/\\[MEASURE:(\\d+)\\]$/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>meaId<span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"c\">// Found the first measure column</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"c\">// It isn't a \"row\" column</span>","                <span class=\"k\">}</span>","                ","                <span class=\"c\">// When \"Member properties\" are shown in a member gem,</span>","                <span class=\"c\">// additional columns are added to the data table, </span>","                <span class=\"c\">// that are to be ignored.</span>","                <span class=\"c\">// These columns have no column role.</span>","                <span class=\"c\">// We transform them to 'undefined' role</span>","                <span class=\"c\">// which is the role value that unmapped measure columns</span>","                <span class=\"c\">// already have.</span>","                <span class=\"k\">var</span> roles <span class=\"k\">=</span> getColumnRoles<span class=\"k\">(</span>dataTable<span class=\"k\">,</span> tc<span class=\"k\">);</span>","                ","                <span class=\"c\">// A row gem</span>","                rowsInfoList<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                    id<span class=\"k\">:</span>      colId<span class=\"k\">,</span>","                    formula<span class=\"k\">:</span> colId<span class=\"k\">,</span>","                    label<span class=\"k\">:</span>   dataTable<span class=\"k\">.</span>getColumnLabel<span class=\"k\">(</span>tc<span class=\"k\">),</span>","                    axis<span class=\"k\">:</span>    <span class=\"s\">'row'</span><span class=\"k\">,</span>","                    role<span class=\"k\">:</span>    roles <span class=\"k\">?</span> roles<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"s\">'undefined'</span><span class=\"k\">,</span>","                    index<span class=\"k\">:</span>   rowsInfoList<span class=\"k\">.</span>length","                <span class=\"k\">}</span><span class=\"k\">);</span>","                ","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"c\">// It is a \"row\" column</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// Column Roles are the same in every col~measure column.</span>","            <span class=\"c\">// So we collect them from the first one.</span>","            <span class=\"k\">function</span> processColumnsInfo<span class=\"k\">(</span>colGroupValues<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>colGroupValues<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> colRoles  <span class=\"k\">=</span> getColumnRoles<span class=\"k\">(</span>dataTable<span class=\"k\">,</span> tc<span class=\"k\">);</span>","                    <span class=\"k\">var</span> colValues <span class=\"k\">=</span> colGroupValues<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">'~'</span><span class=\"k\">);</span>","                    <span class=\"k\">var</span> meaIndex  <span class=\"k\">=</span> colValues<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                    ","                    colValues<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>colValue<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","                        columnsInfoList<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                            id<span class=\"k\">:</span>      undefined<span class=\"k\">,</span> <span class=\"c\">// not in data table</span>","                            formula<span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// not in data table</span>","                            label<span class=\"k\">:</span>   undefined<span class=\"k\">,</span> <span class=\"c\">// not in data table</span>","                            axis<span class=\"k\">:</span>    <span class=\"s\">'column'</span><span class=\"k\">,</span>","                            role<span class=\"k\">:</span>    colRoles<span class=\"k\">[</span>index<span class=\"k\">],</span>","                            index<span class=\"k\">:</span>   index","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">function</span> processMeasureColumn<span class=\"k\">(</span>colGroupValues<span class=\"k\">,</span> id<span class=\"k\">)</span><span class=\"k\">{</span>","                ","                <span class=\"k\">var</span> meaInfo <span class=\"k\">=</span> def<span class=\"k\">.</span>getOwn<span class=\"k\">(</span>measuresInfo<span class=\"k\">,</span> id<span class=\"k\">);</span>","                ","                <span class=\"c\">/* New measure? */</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>meaInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> role <span class=\"k\">=</span> getColumnRoles<span class=\"k\">(</span>dataTable<span class=\"k\">,</span> tc<span class=\"k\">).</span>pop<span class=\"k\">();</span> <span class=\"c\">// TODO - last()</span>","","                    meaInfo <span class=\"k\">=</span> <span class=\"k\">{</span>  ","                        id<span class=\"k\">:</span>      id<span class=\"k\">,</span>","                        formula<span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// not in data table</span>","                        label<span class=\"k\">:</span>   splitColGroupAndMeasure<span class=\"k\">(</span>dataTable<span class=\"k\">.</span>getColumnLabel<span class=\"k\">(</span>tc<span class=\"k\">))[</span><span class=\"s\">1</span><span class=\"k\">],</span>","                        axis<span class=\"k\">:</span>    <span class=\"s\">'measure'</span><span class=\"k\">,</span>","                        role<span class=\"k\">:</span>    role<span class=\"k\">,</span>","                        index<span class=\"k\">:</span>   measuresInfoList<span class=\"k\">.</span>length<span class=\"k\">,</span>","                        isUnmapped<span class=\"k\">:</span> role <span class=\"k\">===</span> <span class=\"s\">'undefined'</span>","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                    ","                    measuresInfo<span class=\"k\">[</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> meaInfo<span class=\"k\">;</span>","                    measuresInfoList<span class=\"k\">.</span>push<span class=\"k\">(</span>meaInfo<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                ","                <span class=\"c\">/* New column group? */</span>","                <span class=\"k\">var</span> colGroup <span class=\"k\">=</span> def<span class=\"k\">.</span>getOwn<span class=\"k\">(</span>colGroupsByColValues<span class=\"k\">,</span> colGroupValues<span class=\"k\">);</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>colGroup<span class=\"k\">)</span><span class=\"k\">{</span>","                    colGroup <span class=\"k\">=</span> <span class=\"k\">{</span>","                        index<span class=\"k\">:</span>      tc<span class=\"k\">,</span>","                        encValues<span class=\"k\">:</span>  colGroupValues<span class=\"k\">,</span>","                        values<span class=\"k\">:</span>     colGroupValues <span class=\"k\">?</span> colGroupValues<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">'~'</span><span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">[],</span>","                        measureIds<span class=\"k\">:</span> <span class=\"k\">[</span>id<span class=\"k\">]</span>","                    <span class=\"k\">}</span><span class=\"k\">;</span>","","                    colGroupsByColValues<span class=\"k\">[</span>colGroupValues<span class=\"k\">]</span> <span class=\"k\">=</span> colGroup<span class=\"k\">;</span>","                    colGroups<span class=\"k\">.</span>push<span class=\"k\">(</span>colGroup<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    colGroup<span class=\"k\">.</span>measureIds<span class=\"k\">.</span>push<span class=\"k\">(</span>id<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                ","                <span class=\"c\">/* Role */</span>","                <span class=\"k\">var</span> currMeaIndex <span class=\"k\">=</span> <span class=\"k\">(</span>tc <span class=\"k\">-</span> colGroup<span class=\"k\">.</span>index<span class=\"k\">);</span>","                <span class=\"k\">var</span> meaRoleInfo  <span class=\"k\">=</span> def<span class=\"k\">.</span>getOwn<span class=\"k\">(</span>measureRolesInfo<span class=\"k\">,</span> meaInfo<span class=\"k\">.</span>role<span class=\"k\">);</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>meaRoleInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                    meaRoleInfo <span class=\"k\">=</span> <span class=\"k\">{</span>","                        id<span class=\"k\">:</span>         role<span class=\"k\">,</span>","                        cccDimName<span class=\"k\">:</span> meaInfo<span class=\"k\">.</span>isUnmapped <span class=\"k\">?</span>","                                        <span class=\"k\">null</span> <span class=\"k\">:</span>","                                        <span class=\"k\">(</span>roleToCccDimMap<span class=\"k\">[</span>role<span class=\"k\">]</span> <span class=\"k\">||</span>","                                         def<span class=\"k\">.</span>assert<span class=\"k\">(</span><span class=\"s\">\"Must map to CCC all measure roles that the data table contains.\"</span><span class=\"k\">)),</span>","                        groupIndex<span class=\"k\">:</span> currMeaIndex<span class=\"k\">,</span>","                        index<span class=\"k\">:</span>      tc <span class=\"c\">// first index where role appears (for tie break, see .sort above)</span>","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                    ","                    measureRolesInfo<span class=\"k\">[</span>meaInfo<span class=\"k\">.</span>role<span class=\"k\">]</span> <span class=\"k\">=</span> meaRoleInfo<span class=\"k\">;</span>","                    measureRolesInfoList<span class=\"k\">.</span>push<span class=\"k\">(</span>meaRoleInfo<span class=\"k\">);</span>","","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>currMeaIndex <span class=\"k\">&gt;</span> meaRoleInfo<span class=\"k\">.</span>groupIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                    meaRoleInfo<span class=\"k\">.</span>groupIndex <span class=\"k\">=</span> currMeaIndex<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _initAxes<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"c\">/* formula, id -&gt; gem */</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>gemsMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        ","            <span class=\"c\">/* axisId -&gt; Axis */</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>axes <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_gemCountColumnReportAxis <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_measureDiscrimGem <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            ","            <span class=\"c\">/* Create and configure Axis's */</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_axesCreateOrderIds<span class=\"k\">.</span>forEach<span class=\"k\">(</span>createAxis<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","            <span class=\"k\">var</span> virtualItemIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> cccDimNamesSet <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_cccVirtualItemAxesLayout<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                virtualItemIndex <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">].</span>configure<span class=\"k\">(</span>virtualItemIndex<span class=\"k\">,</span> cccDimNamesSet<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","            ","            <span class=\"c\">/* @instance */</span>","            <span class=\"k\">function</span> createAxis<span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","","                <span class=\"k\">var</span> axis <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Axis<span class=\"k\">.</span>create<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> axisId<span class=\"k\">);</span>","","                axis<span class=\"k\">.</span>gems<span class=\"k\">.</span>forEach<span class=\"k\">(</span>indexGem<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","                <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">]</span> <span class=\"k\">=</span> axis<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">/* @instance */</span>","            <span class=\"k\">function</span> indexGem<span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> form <span class=\"k\">=</span> gem<span class=\"k\">.</span>formula<span class=\"k\">,</span>","                    id   <span class=\"k\">=</span> gem<span class=\"k\">.</span>id<span class=\"k\">;</span>","","                <span class=\"c\">// NOTE: when interaction is disabled...</span>","                <span class=\"c\">// formula and id aren't available in every axis type...</span>","          ","                <span class=\"c\">// Index by formula</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>form<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>gemsMap<span class=\"k\">[</span>form<span class=\"k\">]</span> <span class=\"k\">=</span> gem<span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">if</span><span class=\"k\">(</span>id <span class=\"k\">&amp;&amp;</span> form <span class=\"k\">!==</span> id<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>gemsMap<span class=\"k\">[</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> gem<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(</span>gem<span class=\"k\">.</span>reportAxis <span class=\"k\">===</span> <span class=\"s\">'column'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_gemCountColumnReportAxis<span class=\"k\">++;</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(</span>gem<span class=\"k\">.</span>isMeasureDiscrim<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_measureDiscrimGem <span class=\"k\">=</span> gem<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _readData<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_readDataCrosstab<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Creates a CCC resultset in CROSSTAB format.</span>","<span class=\"c\">         *</span>","<span class=\"c\">         * Data passes through mostly as it comes;</span>","<span class=\"c\">         * it's simply translated to CDA format.</span>","<span class=\"c\">         */</span>","        _readDataCrosstab<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> dataTable <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">,</span>","                colCount <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">(),</span>","                rowCount <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span>","","            <span class=\"c\">// Take the first seriesCount colors from the palette</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_colors <span class=\"k\">=</span> colorPalete<span class=\"k\">;</span><span class=\"c\">//this._vizOptions.palette.colors.slice(0, seriesCount);</span>","            ","            <span class=\"c\">// Direct translation</span>","            <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> tc <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> tc <span class=\"k\">&lt;</span> colCount <span class=\"k\">;</span> tc<span class=\"k\">++)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_addCdaMetadata<span class=\"k\">(</span>","                    dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>tc<span class=\"k\">),</span>","                    dataTable<span class=\"k\">.</span>getColumnLabel<span class=\"k\">(</span>tc<span class=\"k\">),</span>","                    writeCccColumnDataType<span class=\"k\">(</span>dataTable<span class=\"k\">.</span>getColumnType<span class=\"k\">(</span>tc<span class=\"k\">)));</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> table <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_resultset <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>rowCount<span class=\"k\">);</span>","            <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> tr <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> tr <span class=\"k\">&lt;</span> rowCount<span class=\"k\">;</span> tr<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> row <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>colCount<span class=\"k\">);</span>","","                <span class=\"k\">for</span><span class=\"k\">(</span>tc <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> tc <span class=\"k\">&lt;</span> colCount <span class=\"k\">;</span> tc<span class=\"k\">++)</span><span class=\"k\">{</span>","                    row<span class=\"k\">[</span>tc<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getTableCell<span class=\"k\">(</span>tr<span class=\"k\">,</span> tc<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                table<span class=\"k\">[</span>tr<span class=\"k\">]</span> <span class=\"k\">=</span> row<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","            ","            <span class=\"c\">// By default hide overflow, otherwise, </span>","            <span class=\"c\">// resizing the window frequently ends up needlessly showing scrollbars. </span>","            <span class=\"c\">// TODO: is it ok to access \"vizOptions.controller.domNode\" ?</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>controller<span class=\"k\">.</span>domNode<span class=\"k\">.</span>style<span class=\"k\">.</span>overflow <span class=\"k\">=</span> <span class=\"s\">'hidden'</span><span class=\"k\">;</span> <span class=\"c\">// Hide overflow</span>","            ","            options<span class=\"k\">.</span>colors <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getColors<span class=\"k\">();</span>","","            <span class=\"k\">if</span><span class=\"k\">((</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>legend <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_showLegend<span class=\"k\">()))</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_configureLegend<span class=\"k\">();</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasMultiChartColumns<span class=\"k\">)</span> <span class=\"k\">{</span>","               <span class=\"k\">this</span><span class=\"k\">.</span>_configureMultiChart<span class=\"k\">();</span>","            <span class=\"k\">}</span>","","            options<span class=\"k\">.</span>axisFont <span class=\"k\">=</span> defaultFont<span class=\"k\">(</span>options<span class=\"k\">.</span>axisFont<span class=\"k\">,</span> <span class=\"s\">12</span><span class=\"k\">);</span>","            options<span class=\"k\">.</span>axisTitleFont <span class=\"k\">=</span> defaultFont<span class=\"k\">(</span>options<span class=\"k\">.</span>axisTitleFont<span class=\"k\">,</span> <span class=\"s\">12</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>isInteractionEnabled<span class=\"k\">())</span><span class=\"k\">{</span>","                options<span class=\"k\">.</span>showTooltips <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>clickable    <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>selectable   <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>hoverable    <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>options<span class=\"k\">.</span>showTooltips<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_configureTooltip<span class=\"k\">();</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">if</span><span class=\"k\">((</span>options<span class=\"k\">.</span>selectable <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_canSelect<span class=\"k\">()))</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_configureSelection<span class=\"k\">();</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">this</span><span class=\"k\">.</span>_configureDoubleClick<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configureMultiChart<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","","            <span class=\"c\">// Let the vertical scrollbar show up if necessary</span>","            <span class=\"k\">var</span> containerStyle <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>controller<span class=\"k\">.</span>domNode<span class=\"k\">.</span>style<span class=\"k\">;</span>","            containerStyle<span class=\"k\">.</span>overflowX <span class=\"k\">=</span> <span class=\"s\">'hidden'</span><span class=\"k\">;</span>","            containerStyle<span class=\"k\">.</span>overflowY <span class=\"k\">=</span> <span class=\"s\">'auto'</span><span class=\"k\">;</span>","            ","            options<span class=\"k\">.</span>multiChartMax <span class=\"k\">=</span> <span class=\"s\">50</span><span class=\"k\">;</span> <span class=\"c\">// TODO: hardcoded multichart items limit</span>","            ","            <span class=\"c\">// Very small charts can't be dominated by text...</span>","            <span class=\"c\">//options.axisSizeMax = '30%';</span>","            ","            <span class=\"k\">var</span> titleFont <span class=\"k\">=</span> defaultFont<span class=\"k\">(</span>options<span class=\"k\">.</span>titleFont<span class=\"k\">,</span> <span class=\"s\">12</span><span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>titleFont <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!(</span><span class=\"s\">/black|(\\bbold\\b)/i</span><span class=\"k\">).</span>test<span class=\"k\">(</span>titleFont<span class=\"k\">))</span><span class=\"k\">{</span>","                titleFont <span class=\"k\">=</span> <span class=\"s\">\"bold \"</span> <span class=\"k\">+</span> titleFont<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            options<span class=\"k\">.</span>titleFont <span class=\"k\">=</span> titleFont<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configureTooltip<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"c\">//            this.options.tooltipFormat = function(scene){</span>","<span class=\"c\">//                return me._getTooltipText(scene.datum, this);</span>","<span class=\"c\">//            };</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>tooltipFormat <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>s<span class=\"k\">,</span> c<span class=\"k\">,</span> v<span class=\"k\">,</span> datum<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> me<span class=\"k\">.</span>_getTooltipText<span class=\"k\">(</span>datum<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _canSelect<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>selectable<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// Selection is disabled if 2 or more reportAxis='column' gems exist</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_gemCountColumnReportAxis <span class=\"k\">&gt;=</span> <span class=\"s\">2</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configureSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>userSelectionAction <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>cccSelections<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> me<span class=\"k\">.</span>_onUserSelection<span class=\"k\">(</span>cccSelections<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>selectionChangedAction <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>cccSelections<span class=\"k\">)</span><span class=\"k\">{</span>","                me<span class=\"k\">.</span>_onSelectionChanged<span class=\"k\">(</span>cccSelections<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configureDoubleClick<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"c\">//            this.options.doubleClickAction = function(scene){</span>","<span class=\"c\">//                me._onDoubleClick(scene.datum);</span>","<span class=\"c\">//            };</span>","<span class=\"c\">//</span>","<span class=\"c\">//            this.options.axisDoubleClickAction = function(scene) {</span>","<span class=\"c\">//                var group = scene.group;</span>","<span class=\"c\">//                if(group){</span>","<span class=\"c\">//                    return me._onDoubleClick(group);</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//            };</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>doubleClickAction <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>s<span class=\"k\">,</span> c<span class=\"k\">,</span> v<span class=\"k\">,</span> ev<span class=\"k\">)</span><span class=\"k\">{</span>","                me<span class=\"k\">.</span>_onDoubleClick<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>scene<span class=\"k\">.</span>datum<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>axisDoubleClickAction <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>group<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>group <span class=\"k\">instanceof</span> pvc<span class=\"k\">.</span>data<span class=\"k\">.</span>Complex<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> me<span class=\"k\">.</span>_onDoubleClick<span class=\"k\">(</span>group<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _showLegend<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>legend<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>genericMeasuresCount <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> colAxis <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">,</span>","                cccColDimGroup <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>rolesToCccDimensionsMap<span class=\"k\">[</span>colAxis<span class=\"k\">.</span>defaultRole<span class=\"k\">];</span>","","            <span class=\"k\">if</span><span class=\"k\">(!</span>cccColDimGroup <span class=\"k\">||</span> colAxis<span class=\"k\">.</span>realDepth <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configureLegend<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","","            options<span class=\"k\">.</span>legendFont <span class=\"k\">=</span> defaultFont<span class=\"k\">(</span>options<span class=\"k\">.</span>legendFont<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">);</span>","            ","            <span class=\"k\">var</span> legendPosition <span class=\"k\">=</span> options<span class=\"k\">.</span>legendPosition<span class=\"k\">,</span>","                isTopOrBottom <span class=\"k\">=</span> legendPosition <span class=\"k\">===</span> <span class=\"s\">'top'</span> <span class=\"k\">||</span> legendPosition <span class=\"k\">===</span> <span class=\"s\">'bottom'</span><span class=\"k\">;</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasMultiChartColumns <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>isTopOrBottom<span class=\"k\">)</span><span class=\"k\">{</span>","                options<span class=\"k\">.</span>legendAlignTo  <span class=\"k\">=</span> <span class=\"s\">'page-middle'</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>legendInBounds <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"c\">// ensure it is not placed off-page</span>","                ","                <span class=\"k\">var</span> legendMargins <span class=\"k\">=</span> options<span class=\"k\">.</span>legendMargins<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>legendMargins<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>legendMargins<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">'object'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        legendMargins <span class=\"k\">=</span> options<span class=\"k\">.</span>legendMargins <span class=\"k\">=</span> <span class=\"k\">{</span>all<span class=\"k\">:</span> legendMargins<span class=\"k\">}</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    legendMargins <span class=\"k\">=</span> options<span class=\"k\">.</span>legendMargins <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                legendMargins<span class=\"k\">.</span>top <span class=\"k\">=</span> <span class=\"s\">20</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> ","            ","            <span class=\"k\">if</span><span class=\"k\">(!(</span><span class=\"s\">'legendAlign'</span> <span class=\"k\">in</span> options<span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"c\">// Calculate 'legendAlign' default value</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>isTopOrBottom<span class=\"k\">)</span><span class=\"k\">{</span>","                    options<span class=\"k\">.</span>legendAlign <span class=\"k\">=</span> <span class=\"s\">'center'</span><span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    options<span class=\"k\">.</span>legendAlign <span class=\"k\">=</span> <span class=\"s\">'middle'</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        <span class=\"c\">// TODO - probably the skip logic should be inverted,</span>","        <span class=\"c\">// this would be specified in terms of inclusion of CCC options.</span>","        _shouldSkipVizOption<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>option<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">(</span>option <span class=\"k\">in</span> _skipVizOptions<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configureOption<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>x<span class=\"k\">,</span> v<span class=\"k\">)</span><span class=\"k\">{</span>","             <span class=\"c\">// Change 'x' and/or 'v'</span>","            <span class=\"k\">switch</span><span class=\"k\">(</span>x<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">case</span> <span class=\"s\">'legendPosition'</span><span class=\"k\">:</span>","                    v <span class=\"k\">=</span> v <span class=\"k\">&amp;&amp;</span> v<span class=\"k\">.</span>toLowerCase<span class=\"k\">();</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","","                <span class=\"k\">case</span> <span class=\"s\">'showLegend'</span><span class=\"k\">:</span>","                    x <span class=\"k\">=</span> <span class=\"s\">'legend'</span><span class=\"k\">;</span>","                    v <span class=\"k\">=</span> <span class=\"k\">((</span><span class=\"s\">''</span> <span class=\"k\">+</span> v<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">'true'</span><span class=\"k\">);</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","","                <span class=\"k\">case</span> <span class=\"s\">'legendSize'</span><span class=\"k\">:</span>","                <span class=\"k\">case</span> <span class=\"s\">'lineWidth'</span><span class=\"k\">:</span>","                    v <span class=\"k\">=</span> parseFloat<span class=\"k\">(</span>v<span class=\"k\">);</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">[</span>x<span class=\"k\">]</span> <span class=\"k\">=</span> v<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        <span class=\"c\">// Logic that depends on width and height</span>","        _prepareLayout<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasMultiChartColumns <span class=\"k\">&amp;&amp;</span> pv<span class=\"k\">.</span>renderer<span class=\"k\">()</span> <span class=\"k\">!==</span> <span class=\"s\">'batik'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">// Account for the *possible* toolbar width</span>","                options<span class=\"k\">.</span>width <span class=\"k\">-=</span> <span class=\"s\">17</span><span class=\"k\">;</span> <span class=\"c\">// assuming 18px is the minimum value (slight chart overlap)</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","    ","        _render<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">while</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_element<span class=\"k\">.</span>firstChild<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_element<span class=\"k\">.</span>removeChild<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_element<span class=\"k\">.</span>firstChild<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_currentChartType <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>cccClass<span class=\"k\">;</span>","","            <span class=\"k\">var</span> chartClass <span class=\"k\">=</span> def<span class=\"k\">.</span>getPath<span class=\"k\">(</span><span class=\"k\">{</span>pvc<span class=\"k\">:</span> pvc<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_currentChartType<span class=\"k\">);</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_chart <span class=\"k\">=</span> <span class=\"k\">new</span> chartClass<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>setData<span class=\"k\">(</span><span class=\"k\">{</span>","                metadata<span class=\"k\">:</span>  <span class=\"k\">this</span><span class=\"k\">.</span>_metadata<span class=\"k\">,</span>","                resultset<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>_resultset","            <span class=\"k\">}</span><span class=\"k\">);</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>render<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/* INTERACTIVE - TOOLTIPS */</span>","","        _getTooltipText<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">,</span> context<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> tooltipLines <span class=\"k\">=</span> <span class=\"k\">[];</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_axesIds<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">].</span>buildHtmlTooltip<span class=\"k\">(</span>tooltipLines<span class=\"k\">,</span> complex<span class=\"k\">,</span> context<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasContentLink<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">/* Add content link information to the tooltip. */</span>","                msg <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_message<span class=\"k\">(</span><span class=\"s\">'chartTooltipFooterContentlink'</span><span class=\"k\">);</span>","                ","                tooltipLines<span class=\"k\">.</span>push<span class=\"k\">(</span>msg<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"c\">/* Add hyperlink information to the tooltip. */</span>","                <span class=\"k\">var</span> hyperlinkInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getHyperlinkInfo<span class=\"k\">(</span>complex<span class=\"k\">);</span>","                <span class=\"k\">var</span> msg<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>hyperlinkInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                    msg <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_message<span class=\"k\">(</span>","                            <span class=\"s\">'chartTooltipFooterHyperlink'</span><span class=\"k\">,</span> <span class=\"k\">[</span>","                                def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span>hyperlinkInfo<span class=\"k\">.</span>gem<span class=\"k\">.</span>linkLabel <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>_message<span class=\"k\">(</span><span class=\"s\">'chartTooltipHyperlinkDefaultTitle'</span><span class=\"k\">))</span>","                            <span class=\"k\">]);</span>","                    ","                    tooltipLines<span class=\"k\">.</span>push<span class=\"k\">(</span>msg<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    ","                    <span class=\"c\">/* Add drill-down information to the tooltip. */</span>","                    <span class=\"k\">var</span> drillDownInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getDrillDownInfo<span class=\"k\">(</span>complex<span class=\"k\">);</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>drillDownInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                        msg <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_message<span class=\"k\">(</span>","                                    <span class=\"s\">'chartTooltipFooterDrillDown'</span><span class=\"k\">,</span> <span class=\"k\">[</span>","                                        def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>getFormulaLabel<span class=\"k\">(</span>drillDownInfo<span class=\"k\">.</span>drillChild<span class=\"k\">))</span>","                                     <span class=\"k\">]);</span>","                        ","                        tooltipLines<span class=\"k\">.</span>push<span class=\"k\">(</span>msg<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">/* Add selection information */</span>","            <span class=\"c\">// Not the data point count, but the selection count (a single column selection may select many data points).</span>","            <span class=\"c\">//var selectedCount = this._chart &amp;&amp; this._chart.data.selectedCount();</span>","            <span class=\"k\">var</span> selections <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>controller<span class=\"k\">.</span>highlights<span class=\"k\">;</span>","            <span class=\"k\">var</span> selectedCount <span class=\"k\">=</span> selections <span class=\"k\">&amp;&amp;</span> selections<span class=\"k\">.</span>length<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>selectedCount<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> msgId <span class=\"k\">=</span> selectedCount <span class=\"k\">===</span> <span class=\"s\">1</span> <span class=\"k\">?</span> ","                            <span class=\"s\">'chartTooltipFooterSelectedSingle'</span> <span class=\"k\">:</span> ","                            <span class=\"s\">'chartTooltipFooterSelectedMany'</span><span class=\"k\">;</span>","                ","                msg <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_message<span class=\"k\">(</span>msgId<span class=\"k\">,</span> <span class=\"k\">[</span>selectedCount<span class=\"k\">]);</span>","                ","                tooltipLines<span class=\"k\">.</span>push<span class=\"k\">(</span>msg<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> tooltipLines<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">'&lt;br /&gt;'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/* INTERACTIVE - SELECTION */</span>","        ","        _onUserSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selectingDatums<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_processSelection<span class=\"k\">(</span>selectingDatums<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getSelectionKey<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selection<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> key <span class=\"k\">=</span> selection<span class=\"k\">.</span>__cccKey<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>key<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> keys <span class=\"k\">=</span> <span class=\"k\">[</span>selection<span class=\"k\">.</span>type<span class=\"k\">];</span>","                ","                <span class=\"k\">var</span> ap <span class=\"k\">=</span> def<span class=\"k\">.</span>array<span class=\"k\">.</span>append<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>selection<span class=\"k\">.</span>columnId<span class=\"k\">)</span><span class=\"k\">{</span>","                    ap<span class=\"k\">(</span>keys<span class=\"k\">,</span> selection<span class=\"k\">.</span>columnId<span class=\"k\">);</span>","                    ap<span class=\"k\">(</span>keys<span class=\"k\">,</span> selection<span class=\"k\">.</span>columnItem<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(</span>selection<span class=\"k\">.</span>rowId<span class=\"k\">)</span><span class=\"k\">{</span>","                    ap<span class=\"k\">(</span>keys<span class=\"k\">,</span> selection<span class=\"k\">.</span>rowId<span class=\"k\">);</span>","                    ap<span class=\"k\">(</span>keys<span class=\"k\">,</span> selection<span class=\"k\">.</span>rowItem<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                ","                key <span class=\"k\">=</span> selection<span class=\"k\">.</span>__cccKey <span class=\"k\">=</span> keys<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">'||'</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> key<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _doesSharedSeriesSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_gemCountColumnReportAxis <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _onSelectionChanged<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selectedDatums<span class=\"k\">)</span><span class=\"k\">{</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>selectable<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// Convert to array of analyzer cell or column selection objects</span>","            <span class=\"k\">var</span> selectionExcludesMulti <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_selectionExcludesMultiGems<span class=\"k\">();</span>","            ","            <span class=\"k\">var</span> selections <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">var</span> selectionsByKey <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_doesSharedSeriesSelection<span class=\"k\">())</span><span class=\"k\">{</span>","                selectedDatums<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>datum<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> selection <span class=\"k\">=</span> <span class=\"k\">{</span> type<span class=\"k\">:</span> <span class=\"s\">'column'</span> <span class=\"k\">}</span><span class=\"k\">;</span>","                    ","                    <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>fillCellSelection<span class=\"k\">(</span>selection<span class=\"k\">,</span> datum<span class=\"k\">,</span> selectionExcludesMulti<span class=\"k\">);</span>","                    ","                    <span class=\"c\">// Check if there's already a selection with the same key.</span>","                    <span class=\"c\">// If not, add a new selection to the selections list.</span>","                    <span class=\"c\">// In the case where the selection max count limit is reached, </span>","                    <span class=\"c\">// the datums included in each selection must be known (by its index).</span>","                    <span class=\"c\">// So, add the datum to the new or existing selection's datums list.</span>","                    ","                    <span class=\"k\">var</span> key <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getSelectionKey<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                    ","                    <span class=\"k\">var</span> existingSelection <span class=\"k\">=</span> selectionsByKey<span class=\"k\">[</span>key<span class=\"k\">];</span>","                    <span class=\"k\">if</span><span class=\"k\">(!</span>existingSelection<span class=\"k\">)</span><span class=\"k\">{</span>","                        selection<span class=\"k\">.</span>__cccDatums <span class=\"k\">=</span> <span class=\"k\">[</span>datum<span class=\"k\">];</span>","                        ","                        selectionsByKey<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> selection<span class=\"k\">;</span>","                        selections<span class=\"k\">.</span>push<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        existingSelection<span class=\"k\">.</span>__cccDatums<span class=\"k\">.</span>push<span class=\"k\">(</span>datum<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","                ","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"c\">// Duplicates may occur due to excluded dimensions like the discriminator</span>","                selectedDatums<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>datum<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> selection <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_complexToCellSelection<span class=\"k\">(</span>datum<span class=\"k\">,</span> selectionExcludesMulti<span class=\"k\">);</span>","                    ","                    <span class=\"c\">// Check if there's already a selection with the same key.</span>","                    <span class=\"c\">// If not, add a new selection to the selections list.</span>","                    <span class=\"k\">var</span> key <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getSelectionKey<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                    <span class=\"k\">var</span> existingSelection <span class=\"k\">=</span> selectionsByKey<span class=\"k\">[</span>key<span class=\"k\">];</span>","                    <span class=\"k\">if</span><span class=\"k\">(!</span>existingSelection<span class=\"k\">)</span><span class=\"k\">{</span>","                        selection<span class=\"k\">.</span>__cccDatums <span class=\"k\">=</span> datum<span class=\"k\">;</span>","                        ","                        selectionsByKey<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> selection<span class=\"k\">;</span>","                        selections<span class=\"k\">.</span>push<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            selections <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_limitSelection<span class=\"k\">(</span>selections<span class=\"k\">);</span>","            ","            <span class=\"c\">// Launch analyzer select event, even if selection is empty (to clear it)</span>","            pentaho<span class=\"k\">.</span>events<span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">\"select\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","                source<span class=\"k\">:</span>        <span class=\"k\">this</span><span class=\"k\">,</span>","                selections<span class=\"k\">:</span>    selections<span class=\"k\">,</span>","                selectionMode<span class=\"k\">:</span> <span class=\"s\">\"REPLACE\"</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _limitSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selections<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// limit selection</span>","            <span class=\"k\">var</span> selections2 <span class=\"k\">=</span> selections<span class=\"k\">;</span>","            <span class=\"k\">var</span> L <span class=\"k\">=</span> selections<span class=\"k\">.</span>length<span class=\"k\">;</span>","            <span class=\"k\">var</span> deselectCount <span class=\"k\">=</span> L <span class=\"k\">-</span> _filterSelectionMaxCount<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>deselectCount <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// Build a list of datums to deselect</span>","                <span class=\"k\">var</span> deselectDatums <span class=\"k\">=</span> <span class=\"k\">[];</span>","                selections2 <span class=\"k\">=</span> <span class=\"k\">[];</span>","                ","                <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> i <span class=\"k\">&lt;</span> L <span class=\"k\">;</span> i<span class=\"k\">++)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> selection <span class=\"k\">=</span> selections<span class=\"k\">[</span>i<span class=\"k\">];</span>","                    <span class=\"k\">var</span> keep <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>deselectCount<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_previousSelectionKeys<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">var</span> key <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getSelectionKey<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_previousSelectionKeys<span class=\"k\">[</span>key<span class=\"k\">])</span><span class=\"k\">{</span>","                                keep <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>i <span class=\"k\">&gt;=</span> _filterSelectionMaxCount<span class=\"k\">)</span> <span class=\"k\">{</span>","                            keep <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">if</span><span class=\"k\">(</span>keep<span class=\"k\">)</span><span class=\"k\">{</span>","                        selections2<span class=\"k\">.</span>push<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> datums <span class=\"k\">=</span> selection<span class=\"k\">.</span>__cccDatums<span class=\"k\">;</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>datums<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>def<span class=\"k\">.</span>array<span class=\"k\">.</span>is<span class=\"k\">(</span>datums<span class=\"k\">))</span><span class=\"k\">{</span>","                                def<span class=\"k\">.</span>array<span class=\"k\">.</span>append<span class=\"k\">(</span>deselectDatums<span class=\"k\">,</span> datums<span class=\"k\">);</span>","                            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                                deselectDatums<span class=\"k\">.</span>push<span class=\"k\">(</span>datums<span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                        deselectCount<span class=\"k\">--;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                ","                <span class=\"c\">// Deselect datums beyond the max count</span>","                pvc<span class=\"k\">.</span>data<span class=\"k\">.</span>Data<span class=\"k\">.</span>setSelected<span class=\"k\">(</span>deselectDatums<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","                ","                <span class=\"c\">// Mark for update UI ASAP</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>updateSelections<span class=\"k\">();</span>","                ","                <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>showConfirm<span class=\"k\">([</span>","                                 <span class=\"s\">'infoExceededMaxSelectionItems'</span><span class=\"k\">,</span> ","                                 _filterSelectionMaxCount","                             <span class=\"k\">],</span> ","                             <span class=\"s\">'SELECT_ITEM_LIMIT_REACHED'</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// Index with the keys of previous selections</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_previousSelectionKeys <span class=\"k\">=</span> ","                    def<span class=\"k\">.</span>query<span class=\"k\">(</span>selections2<span class=\"k\">)</span>","                        <span class=\"k\">.</span>object<span class=\"k\">(</span><span class=\"k\">{</span>","                            name<span class=\"k\">:</span>    <span class=\"k\">function</span><span class=\"k\">(</span>selection<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getSelectionKey<span class=\"k\">(</span>selection<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                            value<span class=\"k\">:</span>   def<span class=\"k\">.</span>retTrue<span class=\"k\">,</span>","                            context<span class=\"k\">:</span> <span class=\"k\">this</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","            ","            <span class=\"k\">return</span> selections2<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/**</span>","<span class=\"c\">         * By default, the keep only or the exclude menu operations</span>","<span class=\"c\">         * do not select level gems playing a multi role.</span>","<span class=\"c\">         * </span>","<span class=\"c\">         * The same applies to the the drill down operation,</span>","<span class=\"c\">         * that, by default, does not KEEP level gems playing</span>","<span class=\"c\">         * a multi role.</span>","<span class=\"c\">         * Note that a gem playing a multi role</span>","<span class=\"c\">         * can itself be drilled on.</span>","<span class=\"c\">         */</span>","        _selectionExcludesMultiGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _processSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selectedDatums<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/**</span>","<span class=\"c\">             * Selection rules.</span>","<span class=\"c\">             * </span>","<span class=\"c\">             * -&gt; gems with (chart)axis=\"measure\" are excluded</span>","<span class=\"c\">             * </span>","<span class=\"c\">             * -&gt; gems playing a \"multi\" role are excluded (!except in the pie chart!)</span>","<span class=\"c\">             *    -&gt; this way, points with common category data in </span>","<span class=\"c\">             *       different small charts are simultaneously selected</span>","<span class=\"c\">             * </span>","<span class=\"c\">             * -&gt; measure discriminator gems are excluded</span>","<span class=\"c\">             *    this way, selection is always expanded to other series of different measures</span>","<span class=\"c\">             * </span>","<span class=\"c\">             * this._gemCountColumnReportAxis :</span>","<span class=\"c\">             * </span>","<span class=\"c\">             * -&gt; if there are no gems with reportAxis='column':</span>","<span class=\"c\">             *    -&gt; that's it. (most granular selection s available)</span>","<span class=\"c\">             * </span>","<span class=\"c\">             * -&gt; if there is a single gem with reportAxis='column': (!except in the HG chart!)</span>","<span class=\"c\">             *    -&gt; gems with (chart)axis=\"row\" are excluded</span>","<span class=\"c\">             *       (selecting one point selects every other point of the same \"series\")</span>","<span class=\"c\">             *     </span>","<span class=\"c\">             * -&gt; if there is more that one gem with reportAxis='column':</span>","<span class=\"c\">             *    -&gt; selection is disabled as a whole </span>","<span class=\"c\">             *       (in this case, code doesn't even enter here)</span>","<span class=\"c\">             * </span>","<span class=\"c\">             */</span>","            <span class=\"c\">/**</span>","<span class=\"c\">             * Example CCC \"where\" specification:</span>","<span class=\"c\">             * &lt;pre&gt;</span>","<span class=\"c\">             * whereSpec = [</span>","<span class=\"c\">             *     // Datums whose series is 'Europe' or 'Australia',</span>","<span class=\"c\">             *     // and whose category is 2001 or 2002</span>","<span class=\"c\">             *     {series: ['Europe', 'Australia'], category: [2001, 2002]},</span>","<span class=\"c\">             *</span>","<span class=\"c\">             *     // Union'ed with</span>","<span class=\"c\">             *</span>","<span class=\"c\">             *     // Datums whose series is 'America'</span>","<span class=\"c\">             *     {series: 'America'},</span>","<span class=\"c\">             * ];</span>","<span class=\"c\">             * &lt;/pre&gt;</span>","<span class=\"c\">             */</span>","            <span class=\"k\">var</span> whereSpec<span class=\"k\">;</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span>selectedDatums<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> selectionExcludesMulti <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_selectionExcludesMultiGems<span class=\"k\">();</span>","                ","                <span class=\"c\">// Include axis=\"column\" dimensions</span>","                <span class=\"c\">// * Excludes measure discrim dimensions</span>","                <span class=\"c\">// * Excludes \"multi\" role dimensions</span>","                <span class=\"k\">var</span> colDimNames <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>getSelectionGems<span class=\"k\">(</span>selectionExcludesMulti<span class=\"k\">)</span>","                                  <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> gem<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span>","                                  <span class=\"k\">.</span>array<span class=\"k\">();</span>","                ","                <span class=\"k\">var</span> rowDimNames<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_gemCountColumnReportAxis<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">// Include axis=\"row\" dimensions</span>","                    <span class=\"c\">// * Excludes \"multi\" role dimensions</span>","                    rowDimNames <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>getSelectionGems<span class=\"k\">(</span>selectionExcludesMulti<span class=\"k\">)</span>","                                      <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> gem<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span>","                                      <span class=\"k\">.</span>array<span class=\"k\">();</span> ","                <span class=\"k\">}</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(!</span>colDimNames<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>rowDimNames <span class=\"k\">||</span> <span class=\"k\">!</span>rowDimNames<span class=\"k\">.</span>length<span class=\"k\">))</span><span class=\"k\">{</span>","                    selectedDatums <span class=\"k\">=</span> <span class=\"k\">[];</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    whereSpec <span class=\"k\">=</span> <span class=\"k\">[];</span>","                    ","                    selectedDatums<span class=\"k\">.</span>forEach<span class=\"k\">(</span>addDatum<span class=\"k\">);</span>","                    ","                    <span class=\"c\">// Replace</span>","                    selectedDatums <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>data","                                         <span class=\"k\">.</span>datums<span class=\"k\">(</span>whereSpec<span class=\"k\">,</span> <span class=\"k\">{</span>visible<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">)</span>","                                         <span class=\"k\">.</span>array<span class=\"k\">();</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">function</span> addDatum<span class=\"k\">(</span>datum<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>datum<span class=\"k\">.</span>isNull<span class=\"k\">)</span><span class=\"k\">{</span>","                        ","                    <span class=\"k\">var</span> datumFilter <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","                    <span class=\"k\">var</span> atoms <span class=\"k\">=</span> datum<span class=\"k\">.</span>atoms<span class=\"k\">;</span>","                    ","                    <span class=\"k\">if</span><span class=\"k\">(</span>colDimNames<span class=\"k\">)</span><span class=\"k\">{</span>","                        colDimNames<span class=\"k\">.</span>forEach<span class=\"k\">(</span>addDim<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">if</span><span class=\"k\">(</span>rowDimNames<span class=\"k\">)</span><span class=\"k\">{</span>","                        rowDimNames<span class=\"k\">.</span>forEach<span class=\"k\">(</span>addDim<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    ","                    whereSpec<span class=\"k\">.</span>push<span class=\"k\">(</span>datumFilter<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">function</span> addDim<span class=\"k\">(</span>dimName<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">// The atom itself may be used as a value condition</span>","                    datumFilter<span class=\"k\">[</span>dimName<span class=\"k\">]</span> <span class=\"k\">=</span> atoms<span class=\"k\">[</span>dimName<span class=\"k\">];</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> selectedDatums<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/* INTERACTIVE - DOUBLE-CLICK */</span>","","        _onDoubleClick<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/* A double-click is triggered to support \"content linking\" */</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasContentLink<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_followContentlink<span class=\"k\">(</span>complex<span class=\"k\">);</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">/* Information about the axis and formula to follow hyperlink. */</span>","            <span class=\"k\">var</span> hyperlinkInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getHyperlinkInfo<span class=\"k\">(</span>complex<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>hyperlinkInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_followHyperlink<span class=\"k\">(</span>hyperlinkInfo<span class=\"k\">,</span> complex<span class=\"k\">);</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">/* Information about the axis and formula to drill on. */</span>","            <span class=\"k\">var</span> drillInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getDrillDownInfo<span class=\"k\">(</span>complex<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>drillInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_drillDown<span class=\"k\">(</span>drillInfo<span class=\"k\">,</span> complex<span class=\"k\">);</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _followContentlink<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// Add every level gem with content link to the action context</span>","            <span class=\"k\">var</span> actionContext <span class=\"k\">=</span> ","                def","                <span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_drillAxesIds<span class=\"k\">)</span>","                <span class=\"k\">.</span>selectMany<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">]</span>","                        <span class=\"k\">.</span>selectGemsWithLink<span class=\"k\">(</span><span class=\"s\">'DASHBOARD'</span><span class=\"k\">,</span> complex<span class=\"k\">,</span> <span class=\"c\">/* reverse */</span> <span class=\"k\">false</span><span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","                <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">{</span>","                        clickLevel<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                        formula<span class=\"k\">:</span>    gem<span class=\"k\">.</span>formula<span class=\"k\">,</span>","                        member<span class=\"k\">:</span>     complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">].</span>value","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">)</span>","                <span class=\"k\">.</span>array<span class=\"k\">()</span>","                <span class=\"k\">;</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span>actionContext<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"c\">// J.I.C.</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>link<span class=\"k\">(</span>actionContext<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _hyperlinkTypes<span class=\"k\">:</span> <span class=\"k\">{</span>FILE<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span> URL<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _followHyperlink<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>hyperlinkInfo<span class=\"k\">,</span> complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> actionContext <span class=\"k\">=</span> ","                def","                <span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_drillAxesIds<span class=\"k\">)</span>","                <span class=\"k\">.</span>selectMany<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">].</span>selectBoundGems<span class=\"k\">(</span>complex<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","                <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">{</span>","                        clickLevel<span class=\"k\">:</span> <span class=\"k\">(</span>hyperlinkInfo<span class=\"k\">.</span>gem <span class=\"k\">===</span> gem<span class=\"k\">),</span>","                        formula<span class=\"k\">:</span>    gem<span class=\"k\">.</span>formula<span class=\"k\">,</span>","                        member<span class=\"k\">:</span>     complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">].</span>value","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">)</span>","                <span class=\"k\">.</span>array<span class=\"k\">()</span>","                <span class=\"k\">;</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>link<span class=\"k\">(</span>actionContext<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _drillDown<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>drillInfo<span class=\"k\">,</span> complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/**</span>","<span class=\"c\">             * The context for the click action.</span>","<span class=\"c\">             * Stores 'KEEP' and 'KEEP_AND_DRILL' instructions.</span>","<span class=\"c\">             *</span>","<span class=\"c\">             * @see useGem</span>","<span class=\"c\">             */</span>","            <span class=\"k\">var</span> actionContext <span class=\"k\">=</span> <span class=\"k\">[];</span>","            ","            <span class=\"k\">var</span> drillGem <span class=\"k\">=</span> drillInfo<span class=\"k\">.</span>gem<span class=\"k\">;</span>","            <span class=\"k\">var</span> selectionExcludesMulti <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_selectionExcludesMultiGems<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_keyAxesIds<span class=\"k\">.</span>forEach<span class=\"k\">(</span>keepAxisHierarchies<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","            <span class=\"c\">// --------------</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>click<span class=\"k\">(</span>actionContext<span class=\"k\">,</span> <span class=\"c\">/* keepGem */</span> <span class=\"k\">true</span><span class=\"k\">);</span>","","            <span class=\"c\">// ----------------</span>","            <span class=\"c\">// Helper methods</span>","            ","            <span class=\"c\">/** @instance */</span>","            <span class=\"k\">function</span> keepAxisHierarchies<span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">// It is possible to KEEP_AND_DRILL on a multi level.</span>","                <span class=\"c\">// But, otherwise, a multi level is not KEPT.</span>","                <span class=\"c\">// The exception to the previous rule are </span>","                <span class=\"c\">// the levels of the special multi-pie role. </span>","                <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">]</span>","                    <span class=\"k\">.</span>getKeepOrDrillGems<span class=\"k\">(</span>drillGem<span class=\"k\">,</span> selectionExcludesMulti<span class=\"k\">)</span>","                    <span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"c\">// KEEP or KEEP_AND_DRILL</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>gem <span class=\"k\">===</span> drillGem<span class=\"k\">)</span><span class=\"k\">{</span>","                            useGem<span class=\"k\">(</span>gem<span class=\"k\">,</span> drillInfo<span class=\"k\">.</span>atom<span class=\"k\">,</span> <span class=\"s\">'KEEP_AND_DRILL'</span><span class=\"k\">);</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(!</span>gem<span class=\"k\">.</span>isMeasureDiscrim<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">var</span> atom <span class=\"k\">=</span> getGemAtom<span class=\"k\">(</span>gem<span class=\"k\">,</span> complex<span class=\"k\">);</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>atom<span class=\"k\">)</span><span class=\"k\">{</span>","                                useGem<span class=\"k\">(</span>gem<span class=\"k\">,</span> atom<span class=\"k\">,</span> <span class=\"s\">'KEEP'</span><span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">/** @static */</span>","            <span class=\"k\">function</span> useGem<span class=\"k\">(</span>gem<span class=\"k\">,</span> atom<span class=\"k\">,</span> action<span class=\"k\">)</span><span class=\"k\">{</span>","                actionContext<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                    action<span class=\"k\">:</span>  action<span class=\"k\">,</span>","                    formula<span class=\"k\">:</span> gem<span class=\"k\">.</span>formula<span class=\"k\">,</span>","                    member<span class=\"k\">:</span>  atom<span class=\"k\">.</span>value<span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span>atom<span class=\"k\">.</span>label<span class=\"k\">)</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">/** @static */</span>","            <span class=\"k\">function</span> getGemAtom<span class=\"k\">(</span>gem<span class=\"k\">,</span> complex<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> cccDimName<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>complex <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>cccDimName <span class=\"k\">=</span> gem<span class=\"k\">.</span>cccDimName<span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> atom <span class=\"k\">=</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>cccDimName<span class=\"k\">];</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>atom <span class=\"k\">&amp;&amp;</span> atom<span class=\"k\">.</span>value <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span> atom<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getHyperlinkInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/* Find an axis to hyperlink on.</span>","<span class=\"c\">             * The order of search is that of #_drillAxesIds.</span>","<span class=\"c\">             */</span>","            <span class=\"k\">return</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_drillAxesIds<span class=\"k\">)</span>","                        <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">].</span>getHyperlinkInfo<span class=\"k\">(</span>complex<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","                        <span class=\"k\">.</span>where<span class=\"k\">(</span>def<span class=\"k\">.</span>notNully<span class=\"k\">)</span>","                        <span class=\"k\">.</span>first<span class=\"k\">()</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getDrillDownInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/* Find an axis to drill on.</span>","<span class=\"c\">             * The order of search is that of #_drillAxesIds.</span>","<span class=\"c\">             */</span>","            <span class=\"k\">return</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_drillAxesIds<span class=\"k\">)</span>","                        <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">].</span>getDrillDownInfo<span class=\"k\">(</span>complex<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","                        <span class=\"k\">.</span>where<span class=\"k\">(</span>def<span class=\"k\">.</span>notNully<span class=\"k\">)</span>","                        <span class=\"k\">.</span>first<span class=\"k\">()</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/* UTILITY */</span>","        ","        <span class=\"c\">/**</span>","<span class=\"c\">         * Converts a complex to an analyzer cell selection.</span>","<span class=\"c\">         *</span>","<span class=\"c\">         * An analyzer cell selection has the following structure:</span>","<span class=\"c\">         * {</span>","<span class=\"c\">         *    type:     'cell',</span>","<span class=\"c\">         *</span>","<span class=\"c\">         *    column:      table column index ??</span>","<span class=\"c\">         *    columnId:    [\"[Time].[Years]\", \"[Time].[Quarters]\"   ], // formulas</span>","<span class=\"c\">         *    columnItem:  [\"[Time].[2003]\",  \"[Time].[2003].[QTR4]\"], // values</span>","<span class=\"c\">         *    columnLabel: \"2003~QTR4~Sales\",</span>","<span class=\"c\">         *</span>","<span class=\"c\">         *    row:          table row index ??</span>","<span class=\"c\">         *    rowId:       [\"[Markets].[Territory]\", \"[Order Status].[Type]\"    ]  // formulas</span>","<span class=\"c\">         *    rowItem:     [\"[Markets].[EMEA]\",      \"[Order Status].[Resolved]\"], // values</span>","<span class=\"c\">         *    rowLabel:    \"Type\",</span>","<span class=\"c\">         *</span>","<span class=\"c\">         *    value:       28550.59 // formatted joined by ~ ?</span>","<span class=\"c\">         * }</span>","<span class=\"c\">         */</span>","        _complexToCellSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">,</span> selectionExcludesMulti<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/* The analyzer cell-selection object */</span>","            <span class=\"k\">var</span> selection <span class=\"k\">=</span> <span class=\"k\">{</span> type<span class=\"k\">:</span> <span class=\"s\">'cell'</span> <span class=\"k\">}</span><span class=\"k\">;</span>","            ","            <span class=\"c\">/* Add each axis' formulas to the selection */</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_axesIds<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">].</span>fillCellSelection<span class=\"k\">(</span>selection<span class=\"k\">,</span> complex<span class=\"k\">,</span> selectionExcludesMulti<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","            <span class=\"k\">return</span> selection<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Gets the child formula in the given formula's hierarchy.</span>","<span class=\"c\">         */</span>","        getChildFormula<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>hForm<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> hForms <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getHierarchyFormulas<span class=\"k\">(</span>hForm<span class=\"k\">,</span>","                                <span class=\"c\">/* includeHidden:   */</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                                <span class=\"c\">/* excludeChildren: */</span> <span class=\"k\">false</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>hForms<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> index <span class=\"k\">=</span> hForms<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>hForm<span class=\"k\">);</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>index <span class=\"k\">&gt;=</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> hForms<span class=\"k\">[</span>index <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _getHierarchyFormulas<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>formula<span class=\"k\">,</span> includeHidden<span class=\"k\">,</span> excludeChildren<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// This was very slow when not cached</span>","            <span class=\"k\">var</span> hForms<span class=\"k\">;</span>","            <span class=\"k\">var</span> key <span class=\"k\">=</span> formula <span class=\"k\">+</span> <span class=\"s\">\"|\"</span> <span class=\"k\">+</span> <span class=\"k\">(!!</span>includeHidden<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"|\"</span> <span class=\"k\">+</span> <span class=\"k\">(!!</span>excludeChildren<span class=\"k\">);</span>","","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyFormulaCache<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyFormulaCache <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                hForms <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyFormulaCache<span class=\"k\">[</span>key<span class=\"k\">];</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span><span class=\"k\">(!</span>hForms<span class=\"k\">)</span> <span class=\"k\">{</span>","                hForms <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>getHierarchyFormulas<span class=\"k\">(</span>formula<span class=\"k\">,</span> includeHidden<span class=\"k\">,</span> excludeChildren<span class=\"k\">);</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyFormulaCache<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> hForms<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> hForms<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _addCdaMetadata<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>colName<span class=\"k\">,</span> colLabel<span class=\"k\">,</span> colType<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_metadata<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                colIndex<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>_metadata<span class=\"k\">.</span>length<span class=\"k\">,</span>","                colName<span class=\"k\">:</span>  colName<span class=\"k\">,</span>","                colLabel<span class=\"k\">:</span> colLabel<span class=\"k\">,</span>","                colType<span class=\"k\">:</span>  colType","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _getTableCell<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>tr<span class=\"k\">,</span> tc<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>_getCell<span class=\"k\">(</span>tr<span class=\"k\">,</span> tc<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>cell<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">var</span> value <span class=\"k\">=</span> cell<span class=\"k\">.</span>v<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">||</span> value <span class=\"k\">===</span> <span class=\"s\">'-'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                v<span class=\"k\">:</span> value<span class=\"k\">,</span>","                f<span class=\"k\">:</span> cell<span class=\"k\">.</span>f","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getTableValue<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>tr<span class=\"k\">,</span> tc<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getTableCell<span class=\"k\">(</span>tr<span class=\"k\">,</span> tc<span class=\"k\">);</span>","            <span class=\"k\">return</span> cell <span class=\"k\">?</span> cell<span class=\"k\">.</span>v <span class=\"k\">:</span> ceff<span class=\"k\">.</span>f<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"c\">// Cartesian</span>","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.CartesianChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Chart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxesDisplayUnits<span class=\"k\">();</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_showAxisTitle<span class=\"k\">(</span><span class=\"s\">'base'</span><span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisTitle<span class=\"k\">(</span><span class=\"s\">'base'</span><span class=\"k\">,</span>  <span class=\"k\">this</span><span class=\"k\">.</span>_getBaseAxisTitle <span class=\"k\">());</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_showAxisTitle<span class=\"k\">(</span><span class=\"s\">'ortho'</span><span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisTitle<span class=\"k\">(</span><span class=\"s\">'ortho'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getOrthoAxisTitle<span class=\"k\">());</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _showAxisTitle<span class=\"k\">:</span> def<span class=\"k\">.</span>fun<span class=\"k\">.</span>constant<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">),</span>","        ","        _getOrthoAxisTitle<span class=\"k\">:</span> def<span class=\"k\">.</span>noop<span class=\"k\">,</span>","","        _getBaseAxisTitle<span class=\"k\">:</span>  def<span class=\"k\">.</span>noop<span class=\"k\">,</span>","","        _configureAxisTitle<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>axisType<span class=\"k\">,</span> title<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> unitsSuffix <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_cartesianAxesDisplayUnitsText<span class=\"k\">[</span>axisType<span class=\"k\">];</span>","","            title <span class=\"k\">=</span> def<span class=\"k\">.</span>string<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\" - \"</span><span class=\"k\">,</span> title<span class=\"k\">,</span> unitsSuffix<span class=\"k\">);</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>title<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","                options<span class=\"k\">[</span>axisType <span class=\"k\">+</span> <span class=\"s\">'AxisTitle'</span><span class=\"k\">]</span> <span class=\"k\">=</span> title<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","         _getMeasureRoleTitle<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>measureRole<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> title <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","            <span class=\"k\">var</span> measureAxis <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">;</span>","            <span class=\"k\">var</span> singleAxisGem<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>measureRole<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>genericMeasuresCount <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    singleAxisGem <span class=\"k\">=</span> measureAxis<span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span>measureAxis<span class=\"k\">.</span>defaultRole<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">];</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> roleGems <span class=\"k\">=</span> measureAxis<span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span>measureRole<span class=\"k\">];</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>roleGems<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    singleAxisGem <span class=\"k\">=</span> roleGems<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","                ","            <span class=\"k\">if</span><span class=\"k\">(</span>singleAxisGem<span class=\"k\">)</span><span class=\"k\">{</span>","                title <span class=\"k\">+=</span> singleAxisGem<span class=\"k\">.</span>label<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> title<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configureAxisRange<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>primary<span class=\"k\">,</span> axisType<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> vizOptions <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">,</span>","                suffix <span class=\"k\">=</span> primary <span class=\"k\">?</span> <span class=\"s\">''</span> <span class=\"k\">:</span> <span class=\"s\">'Secondary'</span><span class=\"k\">;</span>","                ","            <span class=\"k\">if</span><span class=\"k\">(</span>vizOptions<span class=\"k\">[</span><span class=\"s\">'autoRange'</span> <span class=\"k\">+</span> suffix<span class=\"k\">]</span> <span class=\"k\">!==</span> <span class=\"s\">'true'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> limit <span class=\"k\">=</span> vizOptions<span class=\"k\">[</span><span class=\"s\">'valueAxisLowerLimit'</span> <span class=\"k\">+</span> suffix<span class=\"k\">];</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>limit <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">[</span>axisType <span class=\"k\">+</span> <span class=\"s\">'AxisFixedMin'</span><span class=\"k\">]</span> <span class=\"k\">=</span> limit<span class=\"k\">;</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">[</span>axisType <span class=\"k\">+</span> <span class=\"s\">'AxisOriginIsZero'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                limit <span class=\"k\">=</span> vizOptions<span class=\"k\">[</span><span class=\"s\">'valueAxisUpperLimit'</span> <span class=\"k\">+</span> suffix<span class=\"k\">];</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>limit <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">[</span>axisType <span class=\"k\">+</span> <span class=\"s\">'AxisFixedMax'</span><span class=\"k\">]</span> <span class=\"k\">=</span> limit<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _cartesianAxesDisplayUnitsText<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","        ","        _configureAxesDisplayUnits<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_cartesianAxesDisplayUnitsText <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configureAxisDisplayUnits<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>primary<span class=\"k\">,</span> axisType<span class=\"k\">,</span> allowFractional<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>allowFractional<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">[</span>axisType <span class=\"k\">+</span> <span class=\"s\">'AxisTickExponentMin'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> <span class=\"c\">// 10^0 =&gt; 1</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">var</span> text<span class=\"k\">;</span>","            <span class=\"k\">var</span> displayUnits <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">[</span><span class=\"s\">'displayUnits'</span> <span class=\"k\">+</span> <span class=\"k\">(</span>primary <span class=\"k\">?</span> <span class=\"s\">''</span> <span class=\"k\">:</span> <span class=\"s\">'Secondary'</span><span class=\"k\">)];</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>displayUnits <span class=\"k\">&amp;&amp;</span> displayUnits <span class=\"k\">!==</span> <span class=\"s\">'UNITS_0'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                ","                <span class=\"k\">var</span> match <span class=\"k\">=</span> displayUnits<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">/^UNITS_(\\d+)$/</span><span class=\"k\">)</span> <span class=\"k\">||</span>","                            def<span class=\"k\">.</span>fail<span class=\"k\">.</span>argumentInvalid<span class=\"k\">(</span><span class=\"s\">'displayUnits'</span><span class=\"k\">);</span>","                <span class=\"c\">//var exponent = +match[1]; // + -&gt; to number</span>","                ","                text <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_message<span class=\"k\">(</span><span class=\"s\">'dlgChartOption_'</span> <span class=\"k\">+</span> displayUnits<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_cartesianAxesDisplayUnitsText<span class=\"k\">[</span>axisType<span class=\"k\">]</span> <span class=\"k\">=</span> text <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"c\">// Categorical</span>","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.CategoricalContinuousChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CartesianChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _showAxisTitle<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>type<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasMultiChartColumns <span class=\"k\">||</span> type <span class=\"k\">===</span> <span class=\"s\">'ortho'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getOrthoAxisTitle<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getMeasureRoleTitle<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _getBaseAxisTitle<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>getAxisLabel<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisRange<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">'ortho'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configureAxesDisplayUnits<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisDisplayUnits<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">'ortho'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.BarChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CategoricalContinuousChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","            <span class=\"k\">var</span> isVertical <span class=\"k\">=</span> options<span class=\"k\">.</span>orientation <span class=\"k\">===</span> <span class=\"s\">'vertical'</span><span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>isVertical<span class=\"k\">)</span><span class=\"k\">{</span>","                options<span class=\"k\">.</span>visualRoles<span class=\"k\">.</span>category <span class=\"k\">=</span> <span class=\"k\">{</span> isReversed<span class=\"k\">:</span> <span class=\"k\">true</span> <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.BarLineChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>BarChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _noRoleInTooltipMeasureRoles<span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">'measures'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">'measuresLine'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _initAxes<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_measureDiscrimGem <span class=\"k\">||</span> def<span class=\"k\">.</span>assert<span class=\"k\">(</span><span class=\"s\">\"Must exist to distinguish measures.\"</span><span class=\"k\">);</span>","            ","            <span class=\"c\">// Find the index in which it goes in the CCC virtual item</span>","            <span class=\"k\">var</span> readers <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>readers<span class=\"k\">;</span>","            <span class=\"k\">var</span> measureDiscrimCccDimName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_measureDiscrimGem<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span>","            ","            <span class=\"k\">var</span> virtualItemIndex <span class=\"k\">=</span> ","                def<span class=\"k\">.</span>query<span class=\"k\">(</span>readers<span class=\"k\">)</span>","                   <span class=\"k\">.</span>where <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>reader<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> reader<span class=\"k\">.</span>names <span class=\"k\">===</span> measureDiscrimCccDimName<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span>","                   <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>reader<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> reader<span class=\"k\">.</span>indexes<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span>","                   <span class=\"k\">.</span>first<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","                   <span class=\"k\">;</span>","            ","            virtualItemIndex <span class=\"k\">&gt;=</span> <span class=\"s\">0</span> <span class=\"k\">||</span> def<span class=\"k\">.</span>assert<span class=\"k\">(</span><span class=\"s\">\"Must be present in virtual item.\"</span><span class=\"k\">);</span>","            ","            <span class=\"k\">var</span> barMeaRole <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>defaultRole<span class=\"k\">;</span>","            <span class=\"k\">var</span> gemsMap    <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>gemsMap<span class=\"k\">;</span>","            <span class=\"k\">var</span> dataPartDimension<span class=\"k\">,</span>","                part0Atom<span class=\"k\">,</span>","                part1Atom<span class=\"k\">;</span>","            ","            <span class=\"c\">/* Create the dataPart dimension reader */</span>","            readers<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                names<span class=\"k\">:</span>  <span class=\"s\">'dataPart'</span><span class=\"k\">,</span>","                reader<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>vitem<span class=\"k\">,</span> dataPartDim<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> measureId  <span class=\"k\">=</span> vitem<span class=\"k\">[</span>virtualItemIndex<span class=\"k\">].</span>v<span class=\"k\">;</span> <span class=\"c\">// v/f cell</span>","                    <span class=\"k\">var</span> measureGem <span class=\"k\">=</span> gemsMap<span class=\"k\">[</span>measureId<span class=\"k\">]</span> <span class=\"k\">||</span> def<span class=\"k\">.</span>assert<span class=\"k\">(</span><span class=\"s\">\"Measure must be defined.\"</span><span class=\"k\">);</span>","                    <span class=\"c\">// Data part codes</span>","                    <span class=\"c\">// 0 -&gt; bars</span>","                    <span class=\"c\">// 1 -&gt; lines</span>","                    <span class=\"k\">return</span> measureGem<span class=\"k\">.</span>role <span class=\"k\">===</span> barMeaRole <span class=\"k\">?</span>","                            <span class=\"c\">/* First time initializations.</span>","<span class=\"c\">                             * Done here because *data* isn't available before.</span>","<span class=\"c\">                             * Also, cannot intern non-existing data part (when lines not configured for example)</span>","<span class=\"c\">                             */</span>","                            <span class=\"k\">(</span>part0Atom <span class=\"k\">||</span> <span class=\"k\">(</span>part0Atom <span class=\"k\">=</span> dataPartDim<span class=\"k\">.</span>intern<span class=\"k\">(</span><span class=\"s\">\"0\"</span><span class=\"k\">)))</span> <span class=\"k\">:</span>","                            <span class=\"k\">(</span>part1Atom <span class=\"k\">||</span> <span class=\"k\">(</span>part1Atom <span class=\"k\">=</span> dataPartDim<span class=\"k\">.</span>intern<span class=\"k\">(</span><span class=\"s\">\"1\"</span><span class=\"k\">)))</span>","                            <span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        ","       _configureAxesDisplayUnits<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisDisplayUnits<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">'ortho2'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        ","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            ","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","            <span class=\"k\">var</span> extPoints <span class=\"k\">=</span> options<span class=\"k\">.</span>extensionPoints<span class=\"k\">;</span>","            <span class=\"k\">var</span> shape <span class=\"k\">=</span> options<span class=\"k\">.</span>shape<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>shape <span class=\"k\">&amp;&amp;</span> shape <span class=\"k\">===</span> <span class=\"s\">'none'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                options<span class=\"k\">.</span>showDots <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                options<span class=\"k\">.</span>showDots <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>extensionPoints<span class=\"k\">.</span>dot_shape <span class=\"k\">=</span> shape<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisRange<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">'ortho2'</span><span class=\"k\">);</span>","","             <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisTitle<span class=\"k\">(</span><span class=\"s\">'ortho2'</span><span class=\"k\">,</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","            ","            <span class=\"c\">// If it is not desired to use the same colors as the bars </span>","            <span class=\"c\">// (and still want names of measures being shown in the legend)</span>","            options<span class=\"k\">.</span>secondAxisIndependentScale <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            options<span class=\"k\">.</span>secondAxisOwnColors <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            options<span class=\"k\">.</span>secondAxisColor <span class=\"k\">=</span> options<span class=\"k\">.</span>colors<span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>color<span class=\"k\">)</span><span class=\"k\">{</span> ","                <span class=\"k\">return</span> pv<span class=\"k\">.</span>color<span class=\"k\">(</span>color<span class=\"k\">).</span>brighter<span class=\"k\">(</span><span class=\"s\">0.5</span><span class=\"k\">);</span> ","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.NormalizeBarChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>BarChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","            ","            <span class=\"k\">var</span> axisOrient <span class=\"k\">=</span> pvc<span class=\"k\">.</span>visual<span class=\"k\">.</span>CartesianAxis<span class=\"k\">.</span>getOrientation<span class=\"k\">(</span><span class=\"s\">'ortho'</span><span class=\"k\">,</span> options<span class=\"k\">.</span>orientation<span class=\"k\">);</span>","            ","            options<span class=\"k\">.</span>extensionPoints<span class=\"k\">[</span>axisOrient <span class=\"k\">+</span> <span class=\"s\">'AxisScale_tickFormatter'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>v<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> v <span class=\"k\">+</span> <span class=\"s\">\"%\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def<span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.WaterfallChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CategoricalContinuousChart<span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.LineChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CategoricalContinuousChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _drillAxesIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'row'</span><span class=\"c\">/*, 'column'*/</span><span class=\"k\">],</span>","        ","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","            <span class=\"k\">var</span> extPoints <span class=\"k\">=</span> options<span class=\"k\">.</span>extensionPoints<span class=\"k\">;</span>","            <span class=\"k\">var</span> shape <span class=\"k\">=</span> options<span class=\"k\">.</span>shape<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>shape <span class=\"k\">&amp;&amp;</span> shape <span class=\"k\">===</span> <span class=\"s\">'none'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                options<span class=\"k\">.</span>showDots <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                options<span class=\"k\">.</span>showDots <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>extensionPoints<span class=\"k\">.</span>dot_shape <span class=\"k\">=</span> shape<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configureLegend<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","            <span class=\"k\">var</span> extPoints <span class=\"k\">=</span> options<span class=\"k\">.</span>extensionPoints<span class=\"k\">;</span>","            ","            <span class=\"k\">var</span> dotSize <span class=\"k\">=</span> extPoints<span class=\"k\">.</span>dot_shapeSize<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>dotSize <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> dotRadius <span class=\"k\">=</span> Math<span class=\"k\">.</span>sqrt<span class=\"k\">(</span>dotSize<span class=\"k\">);</span>","                    options<span class=\"k\">.</span>legendMarkerSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span><span class=\"s\">15</span><span class=\"k\">,</span> <span class=\"s\">2</span> <span class=\"k\">*</span> <span class=\"k\">(</span>dotRadius <span class=\"k\">+</span> <span class=\"s\">3</span><span class=\"k\">));</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.StackedAreaChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CategoricalContinuousChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","       _drillAxesIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'row'</span><span class=\"c\">/*, 'column'*/</span><span class=\"k\">]</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.BoxplotChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CategoricalContinuousChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _readData<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"c\">// The boxplot data passes-trough, as is.</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"c\">// In CCC, it is read as a custom format (more relational-like)</span>","            <span class=\"c\">// Where categoriesCount is the number of \"category\" dimensions,</span>","            <span class=\"c\">// not including multichart columns...</span>","            def<span class=\"k\">.</span>set<span class=\"k\">(</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>dataOptions<span class=\"k\">,</span>","                <span class=\"s\">'categoriesCount'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>gemsByRole<span class=\"k\">.</span>rows<span class=\"k\">.</span>length<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.HeatGridChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CartesianChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"c\">// NULL COLOR</span>","            <span class=\"c\">// Set the nullColor option to the first of the colorRange</span>","            <span class=\"c\">// for the case that no color dimension is mapped</span>","            <span class=\"k\">var</span> nullColor <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>colorRange <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>colorRange<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>nullColor<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>nullColor <span class=\"k\">=</span> nullColor<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _prepareLayout<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>options<span class=\"k\">);</span>","            ","            <span class=\"k\">var</span> measureCount <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>depth<span class=\"k\">,</span>","                catsDepth    <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>depth<span class=\"k\">,</span>","                sersDepth    <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>depth<span class=\"k\">,</span>","                catsBreadth  <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getNumberOfRows<span class=\"k\">()</span> <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">),</span>","                sersBreadth  <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">()</span> <span class=\"k\">-</span> catsDepth<span class=\"k\">;</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>measureCount <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                sersBreadth <span class=\"k\">/=</span> measureCount<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> width  <span class=\"k\">=</span> options<span class=\"k\">.</span>width<span class=\"k\">,</span>","                height <span class=\"k\">=</span> options<span class=\"k\">.</span>height<span class=\"k\">,</span>","                currRatio <span class=\"k\">=</span> width <span class=\"k\">/</span> height<span class=\"k\">,</span>","                xyChartRatio <span class=\"k\">=</span> catsBreadth <span class=\"k\">/</span> sersBreadth<span class=\"k\">;</span>","","            <span class=\"c\">// Min desirable sizes according to depth</span>","            <span class=\"k\">var</span> MAX_AXIS_SIZE    <span class=\"k\">=</span> <span class=\"s\">300</span><span class=\"k\">,</span>","                MIN_LEVEL_HEIGHT <span class=\"k\">=</span> <span class=\"s\">70</span><span class=\"k\">,</span>","                MAX_LEVEL_HEIGHT <span class=\"k\">=</span> <span class=\"s\">200</span><span class=\"k\">,</span>","                MAX_AXIS_RATIO   <span class=\"k\">=</span> <span class=\"s\">0.35</span><span class=\"k\">;</span>","","            <span class=\"k\">var</span> minXAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>MAX_AXIS_SIZE<span class=\"k\">,</span> catsDepth <span class=\"k\">*</span> MIN_LEVEL_HEIGHT<span class=\"k\">),</span>","                minYAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>MAX_AXIS_SIZE<span class=\"k\">,</span> sersDepth <span class=\"k\">*</span> MIN_LEVEL_HEIGHT<span class=\"k\">),</span>","                maxXAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>MAX_AXIS_SIZE<span class=\"k\">,</span> catsDepth <span class=\"k\">*</span> MAX_LEVEL_HEIGHT<span class=\"k\">,</span> height <span class=\"k\">*</span> MAX_AXIS_RATIO<span class=\"k\">),</span>","                maxYAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>MAX_AXIS_SIZE<span class=\"k\">,</span> sersDepth <span class=\"k\">*</span> MAX_LEVEL_HEIGHT<span class=\"k\">,</span> width  <span class=\"k\">*</span> MAX_AXIS_RATIO<span class=\"k\">);</span>","","            <span class=\"k\">var</span> xAxisSize<span class=\"k\">,</span>","                yAxisSize<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>xyChartRatio <span class=\"k\">&gt;</span> currRatio<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"c\">// lock width</span>","                <span class=\"k\">var</span> extraHeight <span class=\"k\">=</span> height <span class=\"k\">-</span> width <span class=\"k\">/</span> xyChartRatio<span class=\"k\">;</span>","","                yAxisSize <span class=\"k\">=</span> minYAxisSize<span class=\"k\">;</span>","","                xAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>extraHeight<span class=\"k\">,</span> maxXAxisSize<span class=\"k\">);</span>","                xAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>xAxisSize<span class=\"k\">,</span>   minXAxisSize<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>xyChartRatio <span class=\"k\">&lt;</span> currRatio<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"c\">// lock height</span>","                <span class=\"k\">var</span> extraWidth <span class=\"k\">=</span> width <span class=\"k\">-</span> height <span class=\"k\">*</span> xyChartRatio<span class=\"k\">;</span>","","                xAxisSize <span class=\"k\">=</span> minXAxisSize<span class=\"k\">;</span>","","                yAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>extraWidth<span class=\"k\">,</span> maxYAxisSize<span class=\"k\">);</span>","                yAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>yAxisSize<span class=\"k\">,</span>  minYAxisSize<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// ------------------</span>","            options<span class=\"k\">.</span>orthoAxisSize <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","            options<span class=\"k\">.</span>baseAxisSize  <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","            options<span class=\"k\">.</span>xAxisSize <span class=\"k\">=</span> xAxisSize<span class=\"k\">;</span>","            options<span class=\"k\">.</span>yAxisSize <span class=\"k\">=</span> yAxisSize<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">// Ortho axis title is not available on the server, so never show</span>","<span class=\"c\">//        _getOrthoAxisTitle: function(){</span>","<span class=\"c\">//            return this.axes.column.getAxisLabel();</span>","<span class=\"c\">//        },</span>","<span class=\"c\">//</span>","<span class=\"c\">//        _getBaseAxisTitle: function(){</span>","<span class=\"c\">//            return this.axes.row.getAxisLabel();</span>","<span class=\"c\">//        },</span>","        ","        _doesSharedSeriesSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _processSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selectedDatums<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>selectedDatums<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> data <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>data<span class=\"k\">;</span>","                ","                <span class=\"k\">var</span> atomsByDim <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                ","                <span class=\"c\">// Select Cols OR Rows</span>","                ","                <span class=\"c\">// These are optional in the HG</span>","                <span class=\"k\">var</span> colDimNames <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>getSelectionGems<span class=\"k\">()</span>","                                      <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> gem<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span>","                                      <span class=\"k\">.</span>array<span class=\"k\">();</span>","                ","                <span class=\"k\">var</span> rowDimNames <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>getSelectionGems<span class=\"k\">()</span>","                                      <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> gem<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span>","                                      <span class=\"k\">.</span>array<span class=\"k\">();</span>","                ","                <span class=\"k\">var</span> nonAdditive <span class=\"k\">=</span> selectedDatums<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> selectedDatums<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>isSelected<span class=\"k\">;</span>","                ","                <span class=\"k\">var</span> whereSpec<span class=\"k\">;</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(!</span>nonAdditive<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">// Now-selecting datums + Already selected datums</span>","                    <span class=\"k\">var</span> selectDatumsById <span class=\"k\">=</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span>selectedDatums<span class=\"k\">)</span>","                            <span class=\"k\">.</span>union<span class=\"k\">(</span>data<span class=\"k\">.</span>selectedDatums<span class=\"k\">())</span>","                            <span class=\"k\">.</span>uniqueIndex<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>datum<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> datum<span class=\"k\">.</span>id<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">);</span>","                    ","                    <span class=\"k\">var</span> rowGrouping <span class=\"k\">=</span> pvc<span class=\"k\">.</span>data<span class=\"k\">.</span>GroupingSpec<span class=\"k\">.</span>parse<span class=\"k\">(</span>rowDimNames<span class=\"k\">,</span> data<span class=\"k\">.</span>type<span class=\"k\">);</span>","                    <span class=\"k\">var</span> rowGroupedData <span class=\"k\">=</span> data<span class=\"k\">.</span>groupBy<span class=\"k\">(</span>rowGrouping<span class=\"k\">,</span> <span class=\"k\">{</span>","                        visible<span class=\"k\">:</span>  <span class=\"k\">true</span><span class=\"k\">,</span>","                        where<span class=\"k\">:</span>    <span class=\"k\">function</span><span class=\"k\">(</span>datum<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span>selectDatumsById<span class=\"k\">,</span> datum<span class=\"k\">.</span>id<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                        whereKey<span class=\"k\">:</span> <span class=\"k\">null</span> <span class=\"c\">// prevent caching of groupedData</span>","                    <span class=\"k\">}</span><span class=\"k\">);</span>","                    ","                    <span class=\"k\">var</span> datumFilters <span class=\"k\">=</span> rowGroupedData","                        <span class=\"k\">.</span>leafs<span class=\"k\">()</span>","                        <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>leafData<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"c\">// rowDatumFilter</span>","                            <span class=\"k\">return</span> def<span class=\"k\">.</span>copyProps<span class=\"k\">(</span>leafData<span class=\"k\">.</span>atoms<span class=\"k\">,</span> rowDimNames<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                    ","                    <span class=\"k\">if</span><span class=\"k\">(</span>colDimNames<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"c\">// Make all combinations of row leafs with col leafs</span>","                        ","                        <span class=\"k\">var</span> colGrouping <span class=\"k\">=</span> pvc<span class=\"k\">.</span>data<span class=\"k\">.</span>GroupingSpec<span class=\"k\">.</span>parse<span class=\"k\">(</span>colDimNames<span class=\"k\">,</span> data<span class=\"k\">.</span>type<span class=\"k\">);</span>","                        ","                        <span class=\"k\">var</span> colGroupedData <span class=\"k\">=</span> data<span class=\"k\">.</span>groupBy<span class=\"k\">(</span>colGrouping<span class=\"k\">,</span> <span class=\"k\">{</span>","                            visible<span class=\"k\">:</span>  <span class=\"k\">true</span><span class=\"k\">,</span>","                            where<span class=\"k\">:</span>    <span class=\"k\">function</span><span class=\"k\">(</span>datum<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span>selectDatumsById<span class=\"k\">,</span> datum<span class=\"k\">.</span>id<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                            whereKey<span class=\"k\">:</span> <span class=\"k\">null</span> <span class=\"c\">// prevent caching of groupedData</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                        ","                        datumFilters <span class=\"k\">=</span> datumFilters","                            <span class=\"k\">.</span>selectMany<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>rowDatumFilter<span class=\"k\">)</span><span class=\"k\">{</span>","                                <span class=\"k\">return</span> colGroupedData","                                    <span class=\"k\">.</span>leafs<span class=\"k\">()</span>","                                    <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>leafData<span class=\"k\">)</span><span class=\"k\">{</span>","                                        <span class=\"c\">// Share the rowDatumFilter object by inheriting from it.</span>","                                        <span class=\"c\">// combined datumFilter</span>","                                        <span class=\"k\">return</span> def<span class=\"k\">.</span>copyProps<span class=\"k\">(</span>Object<span class=\"k\">.</span>create<span class=\"k\">(</span>rowDatumFilter<span class=\"k\">),</span> leafData<span class=\"k\">.</span>atoms<span class=\"k\">,</span> colDimNames<span class=\"k\">);</span>","                                    <span class=\"k\">}</span><span class=\"k\">);</span>","                            <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    ","                    whereSpec <span class=\"k\">=</span> datumFilters<span class=\"k\">.</span>array<span class=\"k\">();</span>","                    ","                    selectedDatums <span class=\"k\">=</span> data","                        <span class=\"k\">.</span>datums<span class=\"k\">(</span>whereSpec<span class=\"k\">,</span> <span class=\"k\">{</span>visible<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">)</span>","                        <span class=\"k\">.</span>array<span class=\"k\">();</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"c\">// The only clicked datum is selected and</span>","                    <span class=\"c\">//  thus the user pretends to de-select.</span>","                    <span class=\"c\">// Expand to the selected datums that have the same series or </span>","                    <span class=\"c\">// the same categories as the clicked one</span>","                    <span class=\"c\">// (a cross whose center is the clicked one)</span>","                    <span class=\"c\">// The result is that all these will be de-selected. </span>","                    <span class=\"k\">var</span> singleDatum <span class=\"k\">=</span> selectedDatums<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","                    whereSpec <span class=\"k\">=</span> <span class=\"k\">[</span>","                        <span class=\"c\">// Column dimensions datum filter</span>","                        def<span class=\"k\">.</span>query<span class=\"k\">(</span>colDimNames<span class=\"k\">)</span>","                           <span class=\"k\">.</span>object<span class=\"k\">(</span><span class=\"k\">{</span>","                               value<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>cccDimName<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> singleDatum<span class=\"k\">.</span>atoms<span class=\"k\">[</span>cccDimName<span class=\"k\">];</span> <span class=\"k\">}</span>","                           <span class=\"k\">}</span><span class=\"k\">),</span>","                        ","                        <span class=\"c\">// OR</span>","                        ","                        <span class=\"c\">// Row dimensions datum filter</span>","                        def<span class=\"k\">.</span>query<span class=\"k\">(</span>rowDimNames<span class=\"k\">)</span>","                            <span class=\"k\">.</span>object<span class=\"k\">(</span><span class=\"k\">{</span>","                                value<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>cccDimName<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> singleDatum<span class=\"k\">.</span>atoms<span class=\"k\">[</span>cccDimName<span class=\"k\">];</span> <span class=\"k\">}</span>","                            <span class=\"k\">}</span><span class=\"k\">)</span>","                    <span class=\"k\">];</span>","                    ","                    selectedDatums <span class=\"k\">=</span> data","                                        <span class=\"k\">.</span>datums<span class=\"k\">(</span>whereSpec<span class=\"k\">,</span> <span class=\"k\">{</span>visible<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span> selected<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">)</span>","                                        <span class=\"k\">.</span>array<span class=\"k\">();</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">function</span> addDatum<span class=\"k\">(</span>datum<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> atoms <span class=\"k\">=</span> datum<span class=\"k\">.</span>atoms<span class=\"k\">;</span>","                ","                colDimNames<span class=\"k\">.</span>forEach<span class=\"k\">(</span>addDim<span class=\"k\">);</span>","                rowDimNames<span class=\"k\">.</span>forEach<span class=\"k\">(</span>addDim<span class=\"k\">);</span>","","                <span class=\"k\">function</span> addDim<span class=\"k\">(</span>dimName<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> dimAtomsById <span class=\"k\">=</span> <span class=\"k\">(</span>atomsByDim<span class=\"k\">[</span>dimName<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">(</span>atomsByDim<span class=\"k\">[</span>dimName<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">));</span>","                    <span class=\"k\">var</span> atom <span class=\"k\">=</span> atoms<span class=\"k\">[</span>dimName<span class=\"k\">];</span>","                    <span class=\"k\">if</span><span class=\"k\">(!</span>def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span>dimAtomsById<span class=\"k\">,</span> atom<span class=\"k\">.</span>id<span class=\"k\">))</span><span class=\"k\">{</span>","                        dimAtomsById<span class=\"k\">[</span>atom<span class=\"k\">.</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> atom<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">function</span> buildWhereSpec<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> datumFilter <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                <span class=\"k\">var</span> whereSpec   <span class=\"k\">=</span> <span class=\"k\">[</span>datumFilter<span class=\"k\">];</span>","                ","                def<span class=\"k\">.</span>eachOwn<span class=\"k\">(</span>atomsByDim<span class=\"k\">,</span> addDim<span class=\"k\">);</span>","                ","                <span class=\"k\">function</span> addDim<span class=\"k\">(</span>dimAtomsById<span class=\"k\">,</span> dimName<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">// The atom itself may be used as a value condition</span>","                    datumFilter<span class=\"k\">[</span>dimName<span class=\"k\">]</span> <span class=\"k\">=</span> def<span class=\"k\">.</span>own<span class=\"k\">(</span>dimAtomsById<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">return</span> whereSpec<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> selectedDatums<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.MetricDotChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CartesianChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        <span class=\"c\">// Roles already in the axis' titles</span>","        _noRoleInTooltipMeasureRoles<span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">'x'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">'y'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span>","","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","            ","            <span class=\"c\">// NULL COLOR</span>","            <span class=\"c\">// Set the nullColor option to the first of the colorRange</span>","            <span class=\"c\">// for the case that no color dimension is mapped</span>","            <span class=\"k\">var</span> nullColor <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>colorRange <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>colorRange<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>nullColor<span class=\"k\">)</span><span class=\"k\">{</span>","                options<span class=\"k\">.</span>nullColor <span class=\"k\">=</span> nullColor<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisRange<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">true</span><span class=\"k\">,</span>  <span class=\"s\">'base'</span><span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisRange<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">'ortho'</span><span class=\"k\">);</span>","            ","            <span class=\"c\">// DOT SIZE</span>","            <span class=\"k\">var</span> axisOffset<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>boundRoles<span class=\"k\">.</span>size<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">/* Axis offset like legacy analyzer */</span>","                axisOffset <span class=\"k\">=</span> <span class=\"s\">1.1</span> <span class=\"k\">*</span> options<span class=\"k\">.</span>dotSizeRatio <span class=\"k\">/</span> <span class=\"s\">2</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                axisOffset <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            options<span class=\"k\">.</span>xAxisOffset <span class=\"k\">=</span> ","            options<span class=\"k\">.</span>yAxisOffset <span class=\"k\">=</span> axisOffset<span class=\"k\">;</span>","","            <span class=\"c\">/*</span>","<span class=\"c\">             * The 'color' role is special in that</span>","<span class=\"c\">             * it can be discrete or continuous.</span>","<span class=\"c\">             * </span>","<span class=\"c\">             * The CCC dimension must be configured accordingly.</span>","<span class=\"c\">             * Also, the visual role must be mapped to a non-default dimension.</span>","<span class=\"c\">             */</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>boundRoles<span class=\"k\">.</span>color<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">// Color is a single continuous dimension</span>","                options<span class=\"k\">.</span>dimensionGroups<span class=\"k\">.</span>color <span class=\"k\">=</span> <span class=\"k\">{</span>","                    valueType<span class=\"k\">:</span> Number","                <span class=\"k\">}</span><span class=\"k\">;</span>","                ","                options<span class=\"k\">.</span>visualRoles<span class=\"k\">.</span>color <span class=\"k\">=</span> <span class=\"s\">'color'</span><span class=\"k\">;</span> ","                ","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>boundRoles<span class=\"k\">.</span>color<span class=\"k\">)</span><span class=\"k\">{</span>","                options<span class=\"k\">.</span>visualRoles<span class=\"k\">.</span>color <span class=\"k\">=</span> ","                    <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>gemsByRole<span class=\"k\">.</span>color","                         <span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span> ","                            <span class=\"k\">return</span> pvc<span class=\"k\">.</span>data<span class=\"k\">.</span>DimensionType<span class=\"k\">.</span>dimensionGroupLevelName<span class=\"k\">(</span><span class=\"s\">'color'</span><span class=\"k\">,</span> index<span class=\"k\">);</span>","                         <span class=\"k\">}</span><span class=\"k\">)</span>","                         <span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">', '</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _showLegend<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            ","            <span class=\"c\">// prevent default behavior that hides the legend when no series</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>legend <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>boundRoles<span class=\"k\">.</span>color<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">// Hide the legend if there is only one \"series\"</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_colGroups<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>legend<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _getOrthoAxisTitle<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getMeasureRoleTitle<span class=\"k\">(</span><span class=\"s\">'y'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _getBaseAxisTitle<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getMeasureRoleTitle<span class=\"k\">(</span><span class=\"s\">'x'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configureAxesDisplayUnits<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisDisplayUnits<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">true</span><span class=\"k\">,</span>  <span class=\"s\">'base'</span> <span class=\"k\">,</span> <span class=\"c\">/*allowFractional*/</span><span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisDisplayUnits<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">'ortho'</span><span class=\"k\">,</span> <span class=\"c\">/*allowFractional*/</span><span class=\"k\">true</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    <span class=\"c\">// Custom</span>","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.PieChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Chart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _noPercentInTootltipForPercentGems<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","        ","        <span class=\"c\">// Only 'multi' is on column axis, and drilling down on multi is undesired</span>","        _drillAxesIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'row'</span><span class=\"k\">,</span> <span class=\"s\">'column'</span><span class=\"k\">],</span>","        ","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"c\">// configure value label</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>showValues<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_configureValuesMask<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _showLegend<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>legend <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>depth <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _readUserOptions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">,</span> vizOptions<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>options<span class=\"k\">,</span> vizOptions<span class=\"k\">);</span>","            ","            options<span class=\"k\">.</span>valuesLabelFont <span class=\"k\">=</span> defaultFont<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> readFontSize<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> <span class=\"s\">'label'</span><span class=\"k\">));</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configureMultiChart<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>legendSizeMax <span class=\"k\">=</span> <span class=\"s\">'50%'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configureValuesMask<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"c\">/* </span>","<span class=\"c\">             * Change values mask accoring to each category's</span>","<span class=\"c\">             * discriminated measure being PCTOF or not</span>","<span class=\"c\">             */</span>","            <span class=\"k\">var</span> colAxis <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">;</span>","            <span class=\"k\">var</span> meaDiscrimName <span class=\"k\">=</span> colAxis<span class=\"k\">.</span>measureDiscrimName<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>meaDiscrimName<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> gemsMap <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>gemsMap<span class=\"k\">;</span>","                ","                <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>pie <span class=\"k\">=</span> <span class=\"k\">{</span>","                    scenes<span class=\"k\">:</span> <span class=\"k\">{</span>","                        category<span class=\"k\">:</span> <span class=\"k\">{</span>","                            sliceLabelMask<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                                <span class=\"k\">var</span> meaAtom <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>atoms<span class=\"k\">[</span>meaDiscrimName<span class=\"k\">];</span>","                                <span class=\"k\">var</span> meaGemId<span class=\"k\">,</span> meaGem<span class=\"k\">;</span>","                                <span class=\"k\">if</span><span class=\"k\">(</span>meaAtom <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>meaGemId <span class=\"k\">=</span> meaAtom<span class=\"k\">.</span>value<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>meaGem <span class=\"k\">=</span> gemsMap<span class=\"k\">[</span>meaGemId<span class=\"k\">])</span> <span class=\"k\">&amp;&amp;</span> meaGem<span class=\"k\">.</span>measureType <span class=\"k\">===</span> <span class=\"s\">'PCTOF'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                    <span class=\"k\">return</span> <span class=\"s\">\"{value}\"</span><span class=\"k\">;</span> <span class=\"c\">// the value is the percentage itself;</span>","                                <span class=\"k\">}</span>","                                ","                                <span class=\"k\">return</span> <span class=\"s\">\"{value} ({value.percent})\"</span><span class=\"k\">;</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _selectionExcludesMultiGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"c\">// // When row selection is enabled it's ok</span>","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span><span class=\"c\">//(this._gemCountColumnReportAxis === 0);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.BulletChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Chart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"c\">/*</span>","<span class=\"c\">            var myself = this,</span>","<span class=\"c\">                options = this.options;</span>","","<span class=\"c\">            // Drill down on shapes</span>","<span class=\"c\">            options.axisDoubleClickAction = function(d){</span>","<span class=\"c\">                var c = d.title,</span>","<span class=\"c\">                s = d.subtitle;</span>","","<span class=\"c\">                myself._drillDown(myself._readCccAxesValues(s, c));</span>","<span class=\"c\">            };</span>","","<span class=\"c\">            options.clickAction = function (c, s) {</span>","<span class=\"c\">                myself._notifySelectionChanged(</span>","<span class=\"c\">                    [ myself._convertKeysSelectionCccToAnalyzer(s, c) ]);</span>","<span class=\"c\">            };</span>","<span class=\"c\">            */</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _prepareLayout<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>options<span class=\"k\">);</span>","            ","            <span class=\"k\">var</span> vizOptions <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">;</span>","","            <span class=\"k\">var</span> isVertical <span class=\"k\">=</span> options<span class=\"k\">.</span>orientation <span class=\"k\">===</span> <span class=\"s\">'vertical'</span><span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_resultset<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">20</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                options<span class=\"k\">.</span>bulletSize <span class=\"k\">=</span> <span class=\"s\">10</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>bulletSpacing <span class=\"k\">=</span> isVertical <span class=\"k\">?</span> <span class=\"s\">60</span> <span class=\"k\">:</span> <span class=\"s\">20</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_resultset<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">10</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                options<span class=\"k\">.</span>bulletSize <span class=\"k\">=</span> <span class=\"s\">15</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>bulletSpacing <span class=\"k\">=</span> isVertical <span class=\"k\">?</span> <span class=\"s\">80</span> <span class=\"k\">:</span> <span class=\"s\">30</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                options<span class=\"k\">.</span>bulletSize <span class=\"k\">=</span> <span class=\"s\">20</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>bulletSpacing <span class=\"k\">=</span> isVertical <span class=\"k\">?</span> <span class=\"s\">120</span> <span class=\"k\">:</span> <span class=\"s\">50</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> totalSpace <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"s\">2</span> <span class=\"k\">+</span> options<span class=\"k\">.</span>bulletSize <span class=\"k\">+</span> options<span class=\"k\">.</span>bulletSpacing<span class=\"k\">)</span> <span class=\"k\">*</span>","                             <span class=\"k\">this</span><span class=\"k\">.</span>_resultset<span class=\"k\">.</span>length<span class=\"k\">;</span>","","            <span class=\"c\">// TODO: vizOptions.controller.domNode</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>isVertical<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>totalSpace <span class=\"k\">&gt;</span> options<span class=\"k\">.</span>width<span class=\"k\">)</span> <span class=\"k\">{</span>","                    vizOptions<span class=\"k\">.</span>controller<span class=\"k\">.</span>domNode<span class=\"k\">.</span>style<span class=\"k\">.</span>overflowX <span class=\"k\">=</span> <span class=\"s\">'auto'</span><span class=\"k\">;</span>","                    vizOptions<span class=\"k\">.</span>controller<span class=\"k\">.</span>domNode<span class=\"k\">.</span>style<span class=\"k\">.</span>overflowY <span class=\"k\">=</span> <span class=\"s\">'hidden'</span><span class=\"k\">;</span>","","                    options<span class=\"k\">.</span>width <span class=\"k\">=</span> totalSpace<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>totalSpace <span class=\"k\">&gt;</span> options<span class=\"k\">.</span>height<span class=\"k\">)</span> <span class=\"k\">{</span>","                    vizOptions<span class=\"k\">.</span>controller<span class=\"k\">.</span>domNode<span class=\"k\">.</span>style<span class=\"k\">.</span>overflowY <span class=\"k\">=</span> <span class=\"s\">'auto'</span><span class=\"k\">;</span>","                    vizOptions<span class=\"k\">.</span>controller<span class=\"k\">.</span>domNode<span class=\"k\">.</span>style<span class=\"k\">.</span>overflowX <span class=\"k\">=</span> <span class=\"s\">'hidden'</span><span class=\"k\">;</span>","","                    options<span class=\"k\">.</span>height <span class=\"k\">=</span> totalSpace<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Creates a CDA resultset in a custom RELATIONAL format.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * 1    - Category - aggregated row axis columns</span>","<span class=\"c\">     * 2    - Series   - label of 'other' DataTable columns</span>","<span class=\"c\">     * 3    - Value    - numeric value of corresponding 'other' DataTable column</span>","<span class=\"c\">     * 4    - Marker   - marker numeric value of corresponding 'other' DataTable column</span>","<span class=\"c\">     * 5..R - Range r  - range numeric value, taken from vizOptions.bulletRanges</span>","<span class=\"c\">     */</span>","    <span class=\"k\">var</span> oldCccChart <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    oldCccChart<span class=\"k\">.</span>_readDataBullet <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> dataTable   <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">,</span>","            rowCount    <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getNumberOfRows<span class=\"k\">(),</span>","            measureCols <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_otherDtColIndexes<span class=\"k\">,</span>","            seriesCount <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_otherDtColIndexes<span class=\"k\">.</span>length<span class=\"k\">,</span>","            vizOptions  <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">;</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>seriesInRows <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        ","        <span class=\"k\">this</span><span class=\"k\">.</span>_addCdaMetadata<span class=\"k\">(</span><span class=\"s\">'Category'</span><span class=\"k\">,</span> <span class=\"s\">'Category'</span><span class=\"k\">,</span> <span class=\"s\">'STRING'</span> <span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_addCdaMetadata<span class=\"k\">(</span><span class=\"s\">'Series'</span><span class=\"k\">,</span>   <span class=\"s\">'Series'</span><span class=\"k\">,</span>   <span class=\"s\">'STRING'</span> <span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_addCdaMetadata<span class=\"k\">(</span><span class=\"s\">'Value'</span><span class=\"k\">,</span>    <span class=\"s\">'Value'</span><span class=\"k\">,</span>    <span class=\"s\">'NUMERIC'</span><span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_addCdaMetadata<span class=\"k\">(</span><span class=\"s\">'Marker'</span><span class=\"k\">,</span>   <span class=\"s\">'Marker'</span><span class=\"k\">,</span>   <span class=\"s\">'NUMERIC'</span><span class=\"k\">);</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>vizOptions<span class=\"k\">.</span>bulletRanges<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> R <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>bulletRanges<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> R <span class=\"k\">;</span> i<span class=\"k\">++)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_addCdaMetadata<span class=\"k\">(</span><span class=\"s\">'Range'</span>  <span class=\"k\">+</span> i<span class=\"k\">,</span> <span class=\"s\">'Range '</span> <span class=\"k\">+</span> i<span class=\"k\">,</span> <span class=\"s\">'NUMERIC'</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> measuresCount <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>depth<span class=\"k\">;</span>","","        <span class=\"c\">// Process the rows</span>","        <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> tr <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> tr <span class=\"k\">&lt;</span> rowCount <span class=\"k\">;</span> tr<span class=\"k\">++)</span><span class=\"k\">{</span>","","            <span class=\"k\">var</span> category <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_aggregateRowAxisForTableRow<span class=\"k\">(</span>tr<span class=\"k\">);</span>","","            <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> s <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> s <span class=\"k\">&lt;</span> seriesCount <span class=\"k\">;</span> s <span class=\"k\">+=</span> measuresCount<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// Measures should be defined in pairs</span>","                <span class=\"c\">// Each Value measure followed by a Marker measure:</span>","                <span class=\"c\">//  &lt;ValueMeasure1, MarkerMeasure1&gt;,</span>","                <span class=\"c\">//  &lt;ValueMeasure2, MarkerMeasure2&gt;,</span>","                <span class=\"c\">//  ...</span>","                <span class=\"c\">//  &lt;ValueMeasureN [, MarkerMeasureN]&gt;</span>","                <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> m <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> m <span class=\"k\">&lt;</span> measuresCount <span class=\"k\">;</span> m <span class=\"k\">+=</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> valueColIndex  <span class=\"k\">=</span> s <span class=\"k\">+</span> m<span class=\"k\">,</span>","                        markerColIndex <span class=\"k\">=</span> valueColIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">,</span>","                        tc <span class=\"k\">=</span> measureCols<span class=\"k\">[</span>valueColIndex<span class=\"k\">],</span>","                        dtColParts <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>tc<span class=\"k\">).</span>split<span class=\"k\">(</span><span class=\"s\">'~'</span><span class=\"k\">);</span>","","                    dtColParts<span class=\"k\">.</span>pop<span class=\"k\">();</span>","","                    <span class=\"k\">var</span> row <span class=\"k\">=</span> <span class=\"k\">[</span>","                    <span class=\"c\">// Normal relational part</span>","                        category<span class=\"k\">,</span> <span class=\"c\">// aggregated category</span>","                        dtColParts<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">'~'</span><span class=\"k\">),</span> <span class=\"c\">// series label</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_getTableValue<span class=\"k\">(</span>tr<span class=\"k\">,</span> tc<span class=\"k\">),</span>  <span class=\"c\">// series value - may be null...is it ok?</span>","","                        <span class=\"c\">// Marker - may be missing on the last measure pair</span>","                        m <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">&lt;</span> measuresCount <span class=\"k\">?</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_getTableValue<span class=\"k\">(</span>tr<span class=\"k\">,</span> measureCols<span class=\"k\">[</span>markerColIndex<span class=\"k\">])</span> <span class=\"k\">:</span>","                        vizOptions<span class=\"k\">.</span>bulletMarkers<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"c\">// TODO: 7500</span>","                    <span class=\"k\">];</span>","","                    <span class=\"c\">// Dynamic columns</span>","                    <span class=\"k\">var</span> bulletRanges <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>bulletRanges<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>bulletRanges<span class=\"k\">)</span><span class=\"k\">{</span>","                        bulletRanges<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>rangeValue<span class=\"k\">)</span><span class=\"k\">{</span>","                            row<span class=\"k\">.</span>push<span class=\"k\">(</span>rangeValue<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","","                    <span class=\"k\">this</span><span class=\"k\">.</span>_resultset<span class=\"k\">.</span>push<span class=\"k\">(</span>row<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    oldCccChart<span class=\"k\">.</span>_aggregateRowAxisForTableRow <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>tr<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// Concat all of the string columns</span>","        <span class=\"k\">var</span> values <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_rowNormalDtColIndexes<span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>tc<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getTableValue<span class=\"k\">(</span>tr<span class=\"k\">,</span> tc<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","        <span class=\"k\">return</span> values<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">'~'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    ","    <span class=\"c\">/**</span>","<span class=\"c\">     * Set of visualization options that</span>","<span class=\"c\">     * should not be copied to the CCC options.</span>","<span class=\"c\">     */</span>","    <span class=\"k\">var</span> _skipVizOptions <span class=\"k\">=</span> pv<span class=\"k\">.</span>dict<span class=\"k\">([</span>","        <span class=\"s\">'cccClass'</span><span class=\"k\">,</span>","        <span class=\"s\">'rolesToCccDimensionsMap'</span><span class=\"k\">,</span>","        <span class=\"s\">'crosstabMode'</span><span class=\"k\">,</span>","        <span class=\"s\">'measuresInColumns'</span><span class=\"k\">,</span>","        <span class=\"s\">'extensionPoints'</span><span class=\"k\">,</span>","        <span class=\"s\">'dimensionGroups'</span><span class=\"k\">,</span>","        <span class=\"s\">'readers'</span><span class=\"k\">,</span>","        <span class=\"s\">'dataOptions'</span><span class=\"k\">,</span>","        <span class=\"s\">'action'</span><span class=\"k\">,</span>","        <span class=\"s\">'autoRange'</span><span class=\"k\">,</span>","        <span class=\"s\">'backgroundColor'</span><span class=\"k\">,</span>","        <span class=\"s\">'backgroundColorEnd'</span><span class=\"k\">,</span>","        <span class=\"s\">'backgroundFill'</span><span class=\"k\">,</span>","        <span class=\"s\">'chartType'</span><span class=\"k\">,</span>","        <span class=\"s\">'controller'</span><span class=\"k\">,</span>","        <span class=\"s\">'customChartType'</span><span class=\"k\">,</span>","        <span class=\"s\">'displayUnits'</span><span class=\"k\">,</span>","        <span class=\"s\">'maxChartsPerRow'</span><span class=\"k\">,</span>","        ","        <span class=\"s\">'labelSize'</span><span class=\"k\">,</span>","        <span class=\"s\">'labelStyle'</span><span class=\"k\">,</span>","        <span class=\"s\">'labelFontFamily'</span><span class=\"k\">,</span>","        <span class=\"s\">'labelColor'</span><span class=\"k\">,</span>","        ","        <span class=\"s\">'legendBackgroundColor'</span><span class=\"k\">,</span>","        <span class=\"s\">'legendColor'</span><span class=\"k\">,</span>","        <span class=\"s\">'legendFontFamily'</span><span class=\"k\">,</span>","        <span class=\"s\">'legendStyle'</span><span class=\"k\">,</span>","","        <span class=\"c\">// NOTE: analyzer's legendSize is more like a \"legentFontSize\",</span>","        <span class=\"c\">// while CCC's is the legend panel's size (width or height)</span>","        <span class=\"s\">'legendSize'</span><span class=\"k\">,</span>","","        <span class=\"s\">'lineShape'</span><span class=\"k\">,</span>","        <span class=\"s\">'maxChartsPerRow'</span><span class=\"k\">,</span>","        <span class=\"s\">'maxValues'</span><span class=\"k\">,</span>","        <span class=\"s\">'metrics'</span><span class=\"k\">,</span>","        <span class=\"s\">'palette'</span><span class=\"k\">,</span>","        <span class=\"s\">'selections'</span>","    <span class=\"k\">],</span>","    <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"c\">// @private</span>","    <span class=\"c\">// @static</span>","    <span class=\"k\">function</span> writeCccColumnDataType<span class=\"k\">(</span>colType<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">switch</span><span class=\"k\">(</span>colType<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">case</span> <span class=\"s\">'string'</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">'STRING'</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">'number'</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">'NUMERIC'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Unsupported data type\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// @private</span>","    <span class=\"c\">// @static</span>","    <span class=\"k\">function</span> splitColGroupAndMeasure<span class=\"k\">(</span>colGroupAndMeasure<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> sepIndex <span class=\"k\">=</span> colGroupAndMeasure<span class=\"k\">.</span>lastIndexOf<span class=\"k\">(</span><span class=\"s\">'~'</span><span class=\"k\">);</span>","","        <span class=\"c\">// MeasureName has precedence,</span>","        <span class=\"c\">// so we may end up with no column group value (and C = 0).</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>sepIndex <span class=\"k\">&lt;</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">[</span><span class=\"s\">''</span><span class=\"k\">,</span> colGroupAndMeasure<span class=\"k\">];</span>","        <span class=\"k\">}</span>","      ","        <span class=\"k\">return</span> <span class=\"k\">[</span>","            colGroupAndMeasure<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span>  sepIndex<span class=\"k\">),</span>","            colGroupAndMeasure<span class=\"k\">.</span>substring<span class=\"k\">(</span>sepIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">)</span>","        <span class=\"k\">];</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// @private</span>","    <span class=\"c\">// @static</span>","    <span class=\"k\">function</span> defaultFont<span class=\"k\">(</span>font<span class=\"k\">,</span> defaultSize<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>font<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">(</span>defaultSize <span class=\"k\">||</span> <span class=\"s\">10</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'px sans-serif'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> font<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/\\bdefault\\s*$/i</span><span class=\"k\">,</span> <span class=\"s\">'sans-serif'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// @private</span>","    <span class=\"c\">// @static</span>","    <span class=\"k\">function</span> readFont<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> prefix<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> size <span class=\"k\">=</span> vizOptions<span class=\"k\">[</span>prefix <span class=\"k\">+</span> <span class=\"s\">\"Size\"</span><span class=\"k\">];</span>","        ","        <span class=\"k\">if</span> <span class=\"k\">(</span>size<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> style <span class=\"k\">=</span> vizOptions<span class=\"k\">[</span>prefix <span class=\"k\">+</span> <span class=\"s\">\"Style\"</span><span class=\"k\">];</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>style <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">||</span> style <span class=\"k\">==</span> <span class=\"s\">'PLAIN'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                style <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                style <span class=\"k\">+=</span> <span class=\"s\">' '</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> style <span class=\"k\">+</span> size <span class=\"k\">+</span> <span class=\"s\">'px '</span> <span class=\"k\">+</span> vizOptions<span class=\"k\">[</span>prefix <span class=\"k\">+</span> <span class=\"s\">\"FontFamily\"</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">function</span> readFontSize<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> prefix<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">+</span>vizOptions<span class=\"k\">[</span>prefix <span class=\"k\">+</span> <span class=\"s\">\"Size\"</span><span class=\"k\">];</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">function</span> readFontFamily<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> prefix<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> vizOptions<span class=\"k\">[</span>prefix <span class=\"k\">+</span> <span class=\"s\">\"FontFamily\"</span><span class=\"k\">];</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// @private</span>","    <span class=\"c\">// @static</span>","    <span class=\"k\">function</span> getColumnRoles<span class=\"k\">(</span>dataTable<span class=\"k\">,</span> tc<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> dataReq <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getColumnProperty<span class=\"k\">(</span>tc<span class=\"k\">,</span> <span class=\"s\">'dataReq'</span><span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>dataReq<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// NOTE: in IE, unbound columns do not come with an \"undefined\" role id ??</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>dataReq <span class=\"k\">instanceof</span> Array<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> dataReq<span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>item<span class=\"k\">)</span><span class=\"k\">{</span> ","                    <span class=\"k\">return</span> item<span class=\"k\">.</span>id <span class=\"k\">||</span> <span class=\"s\">'undefined'</span><span class=\"k\">;</span> ","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> <span class=\"k\">[</span>dataReq<span class=\"k\">.</span>id <span class=\"k\">||</span> <span class=\"s\">'undefined'</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['vizapi/ccc/ccc_wrapper.js'][1]++;
pen.define(["cdf/lib/CCC/def", "cdf/lib/CCC/pvc-d1.0", "cdf/lib/CCC/protovis", "common-ui/vizapi/VizController", "common-ui/vizapi/ccc/ccc_analyzer_plugin"], (function (def, pvc, pv) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][10]++;
  var _filterSelectionMaxCount = 200;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][13]++;
  pentaho = (((typeof pentaho) != "undefined")? pentaho: {});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][16]++;
  def.globalSpace("pentaho", pentaho);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][18]++;
  (pentaho.visualizations || (pentaho.visualizations = {}));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][20]++;
  function defVisualization(viz) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][21]++;
    pentaho.visualizations.push(viz);
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][24]++;
  defCCCVisualizations();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][27]++;
  if (((typeof document.location) !== "undefined")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][28]++;
    try {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][29]++;
      if ((("" + document.location).indexOf("debug=true") > -1)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][30]++;
        analyzerPlugins[(analyzerPlugins.length - 1)].init();
      }
    }
    catch (ex) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][33]++;
      pvc.logError(("CCC ANALYZER PLUGIN: " + ex.message));
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][37]++;
  function defCCCVisualizations() {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][42]++;
    var ruleStrokeStyle = "#808285";
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][43]++;
    var lineStrokeStyle = "#D1D3D4";
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][45]++;
    function legendShapeColorProp(scene) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][46]++;
      var color = scene.color;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][47]++;
      return (scene.isOn()? color: pvc.toGrayScale(color));
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][50]++;
    var baseChartArgs = {groupedLabelSep: "~", legend: true, multiRole: "multi", legendPosition: "right", legendSizeMax: "60%", legendPaddings: 10, legendPadding: {left: 1, right: 1, top: 2, bottom: 2}, orthoAxisFullGrid: true, axisEndLine: true, axisSizeMax: "50%", axisLabelSpacingMin: 0.59999999999999998, axisDomainRoundMode: "tick", axisTitleSizeMax: "20%", showPlotFrame: false, axisOverlappedLabelsHide: true, axisOverlappedLabelsMaxPct: 0.050000000000000003, extensionPoints: {xAxisRule_strokeStyle: ruleStrokeStyle, yAxisRule_strokeStyle: ruleStrokeStyle, secondYAxisRule_strokeStyle: ruleStrokeStyle, xAxisTicks_strokeStyle: lineStrokeStyle, yAxisTicks_strokeStyle: lineStrokeStyle, secondYAxisTicks_strokeStyle: lineStrokeStyle, legendArea_lineWidth: 1, legendArea_strokeStyle: "#c0c0c0", legendLabel_textDecoration: null, legendDot_fillStyle: legendShapeColorProp, legendDot_strokeStyle: legendShapeColorProp, legend2Dot_fillStyle: legendShapeColorProp, legend2Dot_strokeStyle: legendShapeColorProp}, tipsySettings: {delayIn: 200, delayOut: 80, offset: 2, html: true, gravity: "nw", fade: false, followMouse: true, corners: true, arrow: false, opacity: 1}, rolesToCccDimensionsMap: {"columns": "series", "rows": "category", "multi": "multiChart", "measures": "value"}};
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][119]++;
    var mixinVerticalChartArgs = {orientation: "vertical"};
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][123]++;
    var mixinHorizontalChartArgs = {orientation: "horizontal", xAxisPosition: "top"};
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][128]++;
    var baseVerticalChartArgs = def.create(baseChartArgs, mixinVerticalChartArgs);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][129]++;
    var baseHorizontalChartArgs = def.create(baseChartArgs, mixinHorizontalChartArgs);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][131]++;
    var baseVerticalCategChartArgs = def.create(baseVerticalChartArgs, {extensionPoints: {xAxisLabel_textAngle: ((- Math.PI) / 4), xAxisLabel_textAlign: "right", xAxisLabel_textBaseline: "top"}});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][139]++;
    var mixinBarChartArgs = {cccClass: "pvc.BarChart", panelSizeRatio: 0.80000000000000004, crosstabMode: true, measuresInColumns: false}, baseVerticalBarChartArgs = def.create(baseVerticalCategChartArgs, mixinBarChartArgs), baseHorizontalBarChartArgs = def.create(baseHorizontalChartArgs, mixinBarChartArgs);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][150]++;
    defVisualization({id: "ccc_bar", type: "barchart", source: "CCC", name: vizLabel("VERTICAL_BAR"), "class": "pentaho.ccc.BarChart", args: def.create(baseVerticalBarChartArgs), propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("VERTICAL_BAR")}], menuOrdinal: 100});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][167]++;
    defVisualization({id: "ccc_barstacked", type: "barchart", source: "CCC", name: vizLabel("STACKED_VERTICAL_BAR"), "class": "pentaho.ccc.BarChart", args: def.create(baseVerticalBarChartArgs, {stacked: true}), propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("STACKED_VERTICAL_BAR")}], menuOrdinal: 110});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][185]++;
    defVisualization({id: "ccc_horzbar", type: "horzbarchart", source: "CCC", name: vizLabel("HORIZONTAL_BAR"), "class": "pentaho.ccc.BarChart", args: def.create(baseHorizontalBarChartArgs), propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("HORIZONTAL_BAR")}], menuOrdinal: 130, menuSeparator: true});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][202]++;
    defVisualization({id: "ccc_horzbarstacked", type: "horzbarchart", source: "CCC", name: vizLabel("STACKED_HORIZONTAL_BAR"), "class": "pentaho.ccc.BarChart", args: def.create(baseHorizontalBarChartArgs, {stacked: true}), propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("STACKED_HORIZONTAL_BAR")}], menuOrdinal: 140});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][220]++;
    defVisualization({id: "ccc_barnormalized", type: "barchart", source: "CCC", name: vizLabel("PCT_STACKED_VERTICAL_BAR"), "class": "pentaho.ccc.NormalizeBarChart", args: def.create(baseVerticalBarChartArgs, {cccClass: "pvc.NormalizedBarChart"}), propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("PCT_STACKED_VERTICAL_BAR")}], menuOrdinal: 120});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][238]++;
    defVisualization({id: "ccc_horzbarnormalized", type: "horzbarchart", source: "CCC", name: vizLabel("PCT_STACKED_HORIZONTAL_BAR"), "class": "pentaho.ccc.NormalizeBarChart", args: def.create(baseHorizontalBarChartArgs, {cccClass: "pvc.NormalizedBarChart"}), propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("PCT_STACKED_HORIZONTAL_BAR")}], menuOrdinal: 150});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][256]++;
    defVisualization({id: "ccc_line", type: "linechart", source: "CCC", name: vizLabel("LINE"), "class": "pentaho.ccc.LineChart", args: def.create(baseVerticalCategChartArgs, {cccClass: "pvc.LineChart", shape: "circle", nullInterpolationMode: "linear", orthoAxisOffset: 0, baseAxisOffset: 0, crosstabMode: true, measuresInColumns: false, tipsySettings: {offset: 15}}), propMap: [], dataReqs: [{name: "Default", reqs: def.array.append(createDataReq("LINE", {options: false}), [createShapeDataReq(), createLineWidthDataReq(), createChartOptionsDataReq(true)])}], menuOrdinal: 160, menuSeparator: true});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][292]++;
    defVisualization({id: "ccc_area", type: "areachart", source: "CCC", name: vizLabel("STACKED_AREA"), "class": "pentaho.ccc.StackedAreaChart", args: def.create(baseVerticalCategChartArgs, {cccClass: "pvc.StackedAreaChart", crosstabMode: true, measuresInColumns: false, showLines: true, orthoAxisOffset: 0, baseAxisOffset: 0, tipsySettings: {offset: 15}}), propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("STACKED_AREA")}], menuOrdinal: 180});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][318]++;
    defVisualization({id: "ccc_line_hover", type: "linechart", source: "CCC", name: vizLabel("LINE"), "class": "pentaho.ccc.LineChart", args: def.create(baseVerticalCategChartArgs, {cccClass: "pvc.LineChart", hoverable: true, showTooltips: false, crosstabMode: true, measuresInColumns: false, orthoAxisOffset: 0, baseAxisOffset: 0, shape: "circle", nullInterpolationMode: "linear", tipsySettings: {offset: 15}}), propMap: [], dataReqs: [{name: "Default", reqs: def.array.append(createDataReq("LINE", {options: false}), [createShapeDataReq(), createLineWidthDataReq(), createChartOptionsDataReq(true)])}]});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][355]++;
    defVisualization({id: "ccc_area_hover", type: "areachart", source: "CCC", name: vizLabel("STACKED_AREA"), "class": "pentaho.ccc.StackedAreaChart", args: def.create(baseVerticalCategChartArgs, {cccClass: "pvc.StackedAreaChart", crosstabMode: true, measuresInColumns: false, showLines: true, orthoAxisOffset: 0, baseAxisOffset: 0, hoverable: true, showTooltips: false, tipsySettings: {offset: 15}}), propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("STACKED_AREA")}]});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][382]++;
    defVisualization({id: "ccc_scatter", type: "scatter", source: "CCC", name: vizLabel("SCATTER"), "class": "pentaho.ccc.MetricDotChart", maxValues: [1000, 2500, 5000, 10000], args: def.create(baseVerticalChartArgs, {cccClass: "pvc.MetricDotChart", crosstabMode: true, measuresInColumns: true, axisFullGrid: true, dotSizeAbs: true, dotSizeRatio: 0.20000000000000001, dotSizeRatioTo: "height", autoDotSizePadding: false, rolesToCccDimensionsMap: {"columns": null, "color": "color", "multi": "multiChart", "measures": null, "x": "value", "y": "value2", "size": "value4"}}), propMap: [], dataReqs: [{name: "Default", reqs: [{id: "x", dataType: "number", dataStructure: "column", caption: dropZoneLabel("SCATTER_X"), required: true, allowMultiple: false}, {id: "y", dataType: "number", dataStructure: "column", caption: dropZoneLabel("SCATTER_Y"), required: true, allowMultiple: false}, {id: "rows", dataType: "string", dataStructure: "column", caption: dropZoneLabel("SCATTER_ROW"), required: true, allowMultiple: true}, {id: "color", dataType: "number, string", dataStructure: "column", caption: dropZoneLabel("SCATTER_COL"), required: false, allowMultiple: false}, {id: "size", dataType: "number", dataStructure: "column", caption: dropZoneLabel("SCATTER_Z"), required: false, allowMultiple: false}, createMultiDataReq(), createPatternDataReq(), createColorSetDataReq(), createReverseColorsDataReq(), createChartOptionsDataReq(true)]}], menuOrdinal: 190, menuSeparator: true});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][468]++;
    defVisualization({id: "ccc_barline", type: "barchart", source: "CCC", name: vizLabel("VERTICAL_BAR_LINE"), "class": "pentaho.ccc.BarLineChart", args: def.create(baseVerticalBarChartArgs, {shape: "circle", nullInterpolationMode: "linear", secondAxis: true, secondAxisIndependentScale: false, secondAxisSeriesIndexes: null, rolesToCccDimensionsMap: {"measuresLine": "value"}}), propMap: [], dataReqs: [{name: "Default", reqs: [createRowDataReq("VERTICAL_BAR_LINE_ROW"), createColDataReq("VERTICAL_BAR_LINE_COL"), def.set(createMeaDataReq("VERTICAL_BAR_LINE_NUMCOL"), "required", false), def.set(createMeaDataReq("VERTICAL_BAR_LINE_NUMLINE"), "id", "measuresLine", "required", false), createMultiDataReq(), createShapeDataReq(), createLineWidthDataReq(), createChartOptionsDataReq(true)]}], menuOrdinal: 125});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][510]++;
    defVisualization({id: "ccc_waterfall", type: "waterfallchart", source: "CCC", name: vizLabel("WATERFALL"), "class": "pentaho.ccc.WaterfallChart", args: def.create(baseVerticalBarChartArgs, {cccClass: "pvc.WaterfallChart"}), propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("WATERFALL")}]});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][527]++;
    defVisualization({id: "ccc_boxplot", type: "boxplotchart", source: "CCC", name: vizLabel("BOXPLOT"), "class": "pentaho.ccc.BoxplotChart", args: def.create(baseVerticalBarChartArgs, {cccClass: "pvc.BoxplotChart", extensionPoints: {boxVRule_svg: {"stroke-dasharray": "5, 5"}}, rolesToCccDimensionsMap: {"columns": null, "multi": "multiChart", "measures": "median", "percentil25": "percentil25", "percentil75": "percentil75", "percentil5": "percentil5", "percentil95": "percentil95"}}), propMap: [], dataReqs: [{name: "Default", reqs: [createRowDataReq("BOXPLOT_ROW"), def.set(createMeaDataReq("BOXPLOT_PCT50"), "allowMultiple", false, "required", false), {id: "percentil25", dataType: "number", dataStructure: "column", caption: dropZoneLabel("BOXPLOT_PCT25"), required: false, allowMultiple: false}, {id: "percentil75", dataType: "number", dataStructure: "column", caption: dropZoneLabel("BOXPLOT_PCT75"), required: false, allowMultiple: false}, {id: "percentil5", dataType: "number", dataStructure: "column", caption: dropZoneLabel("BOXPLOT_PCT05"), required: false, allowMultiple: false}, {id: "percentil95", dataType: "number", dataStructure: "column", caption: dropZoneLabel("BOXPLOT_PCT95"), required: false, allowMultiple: false}, createMultiDataReq(), createChartOptionsDataReq()]}]});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][599]++;
    defVisualization({id: "ccc_pie", type: "piechart", source: "CCC", name: vizLabel("MULTIPLE_PIE"), "class": "pentaho.ccc.PieChart", args: def.create(baseChartArgs, {multiRole: "columns", cccClass: "pvc.PieChart", crosstabMode: true, measuresInColumns: false, showValues: true, legendShape: "circle", rolesToCccDimensionsMap: {"columns": "multiChart", "multi": null}, titlePosition: "bottom", extensionPoints: {pie_strokeStyle: "white", pie_lineWidth: 0.80000000000000004}}), propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("MULTIPLE_PIE", {multi: false})}], menuOrdinal: 180});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][634]++;
    defVisualization({id: "ccc_heatgrid", type: "heatgrid", source: "CCC", name: vizLabel("HEATGRID"), "class": "pentaho.ccc.HeatGridChart", maxValues: [500, 1000, 2000, 5000], args: def.create(baseChartArgs, {cccClass: "pvc.HeatGridChart", crosstabMode: true, measuresInColumns: true, useCompositeAxis: true, panelSizeRatio: 0.80000000000000004, showValues: false, useShapes: true, shape: "square", nullShape: null, nullColor: "#efc5ad", orthoAxisSize: null, baseAxisSize: null, xAxisSize: 30, yAxisSize: 50, axisFullGrid: false, axisEndLine: false, colorScaleType: "linear", normPerBaseCategory: false, numSD: 2, rolesToCccDimensionsMap: {"multi": null, "color": "value", "size": "value2"}}), propMap: [], dataReqs: [{name: "Default", reqs: [{id: "rows", dataType: "string", dataStructure: "row", caption: dropZoneLabel("HEATGRID_ROW"), required: true, allowMultiple: true}, {id: "columns", dataType: "string", dataStructure: "column", caption: dropZoneLabel("HEATGRID_COL"), required: false, allowMultiple: true}, {id: "color", dataType: "number", dataStructure: "column", caption: dropZoneLabel("HEATGRID_COLOR"), required: false, allowMultiple: false}, {id: "size", dataType: "number", dataStructure: "column", caption: dropZoneLabel("HEATGRID_SIZE"), required: false, allowMultiple: false}, createPatternDataReq(), createColorSetDataReq(), createReverseColorsDataReq(), createShapeDataReq({"square": true, "circle": true}), createChartOptionsDataReq(true)]}], menuOrdinal: 200});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][729]++;
    defVisualization({id: "ccc_bulletchart", type: "bulletchart", source: "CCC", name: "Bullet Chart", "class": "pentaho.ccc.BulletChart", args: {cccClass: "pvc.BulletChart", showValues: true, valuesAnchor: "right", titlePosition: "top", titleSize: 25, legendPosition: "bottom", crosstabMode: true, measuresInColumns: true, bulletTitle: "Test for title", bulletSubtitle: "Test for subtitle", bulletMeasures: [], bulletMarkers: ["7500"], bulletRanges: ["3000", "6500", "9000"], bulletMargin: 50, panelSizeRatio: 0.80000000000000004, extensionPoints: {"bulletRuleLabel_font": "7pt sans"}, rolesToCccDimensionsMap: {"multi": null, "columns": "subTitle", "rows": "title"}}, propMap: [], dataReqs: [{name: "Default", reqs: [{id: "rows", dataType: "string", dataStructure: "row", caption: "Across", required: true}, {id: "columns", dataType: "string", dataStructure: "column", caption: "Down", required: true}, {id: "measures", dataType: "number", dataStructure: "column", caption: "Values", required: true}, createChartOptionsDataReq()]}]});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][805]++;
    function label(prefix, id) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][806]++;
      return ((id && cvCatalog[((prefix || "") + id)]) || "");
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][809]++;
    function vizLabel(id) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][810]++;
      return (label("VIZ_", id) || id);
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][813]++;
    function dropZoneLabel(id, defaultLabel) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][814]++;
      return (label("dropZoneLabels_", id) || label("ropZoneLabels_", id) || defaultLabel || id);
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][819]++;
    function chartPropsLabel(id, defaultLabel) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][820]++;
      return (label("dlgChartProps", id) || defaultLabel || id);
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][824]++;
    function createRowDataReq(rowLabel) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][825]++;
      return ({id: "rows", dataType: "string", dataStructure: "column", caption: dropZoneLabel(rowLabel), required: false, allowMultiple: true, defaultAppend: true});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][836]++;
    function createColDataReq(columnLabel) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][837]++;
      return ({id: "columns", dataType: "string", dataStructure: "column", caption: dropZoneLabel(columnLabel), required: false, allowMultiple: true});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][847]++;
    function createMeaDataReq(measureLabel) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][848]++;
      return ({id: "measures", dataType: "number", dataStructure: "column", caption: dropZoneLabel(measureLabel), required: true, allowMultiple: true, defaultAppend: true});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][859]++;
    function createMultiDataReq() {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][860]++;
      return ({id: "multi", dataType: "string", dataStructure: "column", caption: dropZoneLabel("MULTI_CHART"), allowMultiple: true, required: false});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][870]++;
    function createShapeDataReq(valuesSet) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][871]++;
      var values = ["circle", "cross", "diamond", "square", "triangle"];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][872]++;
      if (valuesSet) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][873]++;
        values = values.filter((function (value) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][873]++;
  return def.hasOwn(valuesSet, value);
}));
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][876]++;
      values.unshift("none");
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][878]++;
      return ({id: "shape", dataType: "string", values: values, ui: {labels: values.map((function (option) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][883]++;
  return dropZoneLabel(option.toUpperCase());
})), group: "options", type: "combo", caption: dropZoneLabel("BULLET_STYLE")}});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][891]++;
    function createLineWidthDataReq() {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][892]++;
      return ({id: "lineWidth", dataType: "string", values: ["1", "2", "3", "4", "5", "6", "7", "8"], ui: {labels: ["1", "2", "3", "4", "5", "6", "7", "8"], group: "options", type: "combo", caption: chartPropsLabel("LineWidth")}});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][905]++;
    function createPatternDataReq() {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][906]++;
      return ({id: "pattern", dataType: "string", values: ["GRADIENT", "3-COLOR", "5-COLOR"], ui: {labels: ["GRADIENT", "3_STEP", "5_STEP"].map((function (option) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][912]++;
  return dropZoneLabel(option);
})), group: "options", type: "combo", caption: dropZoneLabel("PATTERN")}});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][920]++;
    function createColorSetDataReq() {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][921]++;
      return ({id: "colorSet", dataType: "string", values: ["ryg", "ryb", "blue", "gray"], ui: {labels: ["RYG", "RYB", "BLUE", "GRAY"].map((function (option) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][927]++;
  return dropZoneLabel(("GRAD_" + option));
})), group: "options", type: "combo", caption: dropZoneLabel("COLORSET")}});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][935]++;
    function createReverseColorsDataReq() {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][936]++;
      return ({id: "reverseColors", dataType: "boolean", ui: {label: dropZoneLabel("COLORSET_REVERSE"), group: "options", type: "checkbox"}});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][947]++;
    function createChartOptionsDataReq(hasSeparator) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][948]++;
      return ({id: "optionsBtn", dataType: "none", ui: {group: "options", type: "button", label: dropZoneLabel("CHART_OPTIONS"), seperator: (hasSeparator || false)}});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][960]++;
    function createDataReq(chartId, options) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][961]++;
      var json = [];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][963]++;
      if (def.get(options, "row", true)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][964]++;
        json.push(createRowDataReq((chartId + "_ROW")));
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][967]++;
      if (def.get(options, "column", true)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][968]++;
        json.push(createColDataReq((chartId + "_COL")));
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][971]++;
      if (def.get(options, "measure", true)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][972]++;
        json.push(createMeaDataReq((chartId + "_NUM")));
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][975]++;
      if (def.get(options, "multi", true)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][976]++;
        json.push(createMultiDataReq());
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][979]++;
      if (def.get(options, "options", true)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][980]++;
        json.push(createChartOptionsDataReq(false));
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][983]++;
      return json;
}
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][987]++;
  var colorPalete = ["#0000cc", "#0d8ecf", "#b0de09", "#fcd202", "#ff6600", "#cd0d74", "#cc0000", "#00cc00", "#650cd0", "#3a3a3a", "#7272e3", "#79c1e4", "#d3ed77", "#fde673", "#ffaa72", "#e379b2", "#e37272", "#72e372", "#aa79e5", "#929292", "#00007a", "#07547b", "#698405", "#967c01", "#983b00", "#7a0745", "#7a0000", "#007a00", "#3c077b", "#000000"];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1022]++;
  def.type("pentaho.ccc.Axis").init((function (chart, axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1025]++;
  this.chart = chart;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1026]++;
  this.id = axisId;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1029]++;
  this.gemsByRole = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1030]++;
  this.indexesByRole = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1033]++;
  this.boundRoles = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1037]++;
  this.boundRolesIdList = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1039]++;
  this.gems = this._getGems();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1040]++;
  this.depth = this.gems.length;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1041]++;
  this.formulas = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1043]++;
  this.gems.forEach(initGem, this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1046]++;
  function initGem(gem, index) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1048]++;
    gem.axis = this;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1049]++;
    gem.index = index;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1051]++;
    var roleId = gem.role;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1052]++;
    if ((roleId && (roleId !== "undefined"))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1053]++;
      if (this._ensureRole(roleId)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1055]++;
        this.boundRoles[roleId] = true;
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1056]++;
        this.boundRolesIdList.push(roleId);
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1059]++;
      var roleGems = this.gemsByRole[roleId];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1060]++;
      gem.roleLevel = roleGems.length;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1061]++;
      roleGems.push(gem);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1063]++;
      this.indexesByRole[roleId].push(index);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1066]++;
    this.formulas.push(gem.formula);
}
})).add({defaultRole: null, _ensureRole: (function (roleId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1073]++;
  if ((! this.gemsByRole[roleId])) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1074]++;
    this.gemsByRole[roleId] = [];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1075]++;
    this.indexesByRole[roleId] = [];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1077]++;
    return true;
  }
}), configure: (function (virtualItemStartIndex, cccDimNamesSet) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1082]++;
  this.configureDimensionGroups();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1083]++;
  return this.configureReaders(virtualItemStartIndex, cccDimNamesSet);
}), configureDimensionGroups: (function () {
}), configureReaders: (function (virtualItemStartIndex, cccDimNamesSet) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1095]++;
  var readers = this.chart.options.readers, index = virtualItemStartIndex;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1098]++;
  this.cccDimList().forEach((function (dimName) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1099]++;
  if (((! dimName) || (! def.hasOwn(cccDimNamesSet, dimName)))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1100]++;
    if (dimName) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1101]++;
      cccDimNamesSet[dimName] = true;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1104]++;
    var reader = {names: dimName, indexes: index};
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1109]++;
    readers.push(reader);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1110]++;
    (index++);
  }
}));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1114]++;
  return index;
}), _getGems: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1119]++;
  var gems = this.chart._axesGemsInfo[this.id];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1120]++;
  var vizHelper = this.chart._vizHelper;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1121]++;
  if (vizHelper.completeAxisGemsMetadata) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1122]++;
    vizHelper.completeAxisGemsMetadata(this.id, gems);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1125]++;
  return gems;
}), getAxisLabel: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1129]++;
  var labels = def.query(this._getAxisLabelGems()).where((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1130]++;
  return gem.cccDimName;
})).select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1131]++;
  return gem.label;
})).array(), last = labels.pop(), first = labels.join(", ");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1136]++;
  if ((first && last)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1137]++;
    return this.chart._message("chartAxisTitleMultipleDimText", [first, last]);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1140]++;
  return (first || last);
}), _getAxisLabelGems: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1144]++;
  return this.gems;
}), buildHtmlTooltip: (function (lines, complex, context) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1148]++;
  this.gems.forEach(this._buildGemHtmlTooltip.bind(this, lines, complex, context));
}), _buildGemHtmlTooltip: (function (lines, complex, context, gem, index) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1157]++;
  if ((gem.cccDimName && (gem.role !== this.chart._vizOptions.multiRole))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1158]++;
    var atom = complex.atoms[gem.cccDimName];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1159]++;
    if ((! atom.dimension.type.isHidden)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1161]++;
      lines.push((def.html.escape(gem.label) + ": " + def.html.escape(atom.label)));
    }
  }
}), cccDimList: def.method({isAbstract: true}), fillCellSelection: def.method({isAbstract: true}), getDrillDownInfo: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1176]++;
  return null;
}), getDeepestInfo: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1180]++;
  return null;
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1187]++;
  pentaho.ccc.Axis.create = (function (chart, axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1188]++;
  var funClass;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1190]++;
  switch (axisId) {
  case "row":
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1191]++;
    funClass = pentaho.ccc.RowAxis;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1191]++;
    break;
  case "column":
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1192]++;
    funClass = pentaho.ccc.ColumnAxis;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1192]++;
    break;
  case "measure":
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1193]++;
    funClass = pentaho.ccc.MeasureAxis;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1193]++;
    break;
  default:
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1194]++;
    throw def.error.argumentInvalid("Undefined axis value '{0}'.", [axisId]);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1197]++;
  return new funClass(chart);
});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1202]++;
  def.type("pentaho.ccc.DiscreteAxis", pentaho.ccc.Axis).init((function (chart, axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1206]++;
  this.base(chart, axisId);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1208]++;
  var multiGems = this.gemsByRole[this.chart._vizOptions.multiRole];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1209]++;
  this.hasMulti = ((! (! multiGems)) && def.query(multiGems).any((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1211]++;
  return (! gem.isMeasureDiscrim);
})));
})).postInit((function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1218]++;
  if (this.hasMulti) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1219]++;
    this._ensureRole(this.chart._vizOptions.multiRole);
  }
})).add({_nonMultiGemFilter: (function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1224]++;
  return (gem.role !== this.chart._vizOptions.multiRole);
}), cccDimList: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1234]++;
  if ((! this._cccDimList)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1236]++;
    var cccDimList = (this._cccDimList = new Array(this.gems.length));
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1239]++;
    this.gems.forEach((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1240]++;
  gem.cccDimName = (cccDimList[gem.index] = (this._getGemDimName(gem) || null));
}), this);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1246]++;
  return this._cccDimList;
}), _getGemDimName: (function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1250]++;
  var roleToCccDimMap = this.chart._vizOptions.rolesToCccDimensionsMap, cccDimGroup = roleToCccDimMap[gem.role];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1253]++;
  if (((typeof cccDimGroup) === "string")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1254]++;
    return pvc.data.DimensionType.dimensionGroupLevelName(cccDimGroup, gem.roleLevel);
  }
}), _buildGemHtmlTooltip: (function (lines, complex, context, gem, index) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1264]++;
  if (this._nonMultiGemFilter(gem)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1265]++;
    this.base.apply(this, arguments);
  }
}), _getAxisLabelGems: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1270]++;
  return def.query(this.gems).where(this._nonMultiGemFilter, this);
}), fillCellSelection: (function (selection, complex, selectionExcludesMulti) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1274]++;
  var forms = [], values = [], label;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1278]++;
  this.getSelectionGems(selectionExcludesMulti).each((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1280]++;
  var atom = complex.atoms[gem.cccDimName];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1281]++;
  forms.push(gem.formula);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1282]++;
  values.push(atom.value);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1283]++;
  label = atom.label;
}));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1286]++;
  if (forms.length) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1287]++;
    var axisId = this.id;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1289]++;
    selection[axisId] = true;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1291]++;
    selection[(axisId + "Id")] = forms;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1292]++;
    selection[(axisId + "Item")] = values;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1293]++;
    selection[(axisId + "Label")] = label;
  }
}), getSelectionGems: (function (selectionExcludesMulti) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1298]++;
  if ((selectionExcludesMulti == null)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1299]++;
    selectionExcludesMulti = true;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1302]++;
  return def.query(this.gems).where((function (gem, index) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1304]++;
  return (((! selectionExcludesMulti) || this._nonMultiGemFilter(gem)) && (! gem.isMeasureDiscrim) && (! (! gem.cccDimName)));
}), this);
}), getKeepOrDrillGems: (function (drillGem, selectionExcludesMulti) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1311]++;
  if ((selectionExcludesMulti == null)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1312]++;
    selectionExcludesMulti = true;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1315]++;
  return def.query(this.gems).where((function (gem, index) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1317]++;
  return ((gem === drillGem) || (((! selectionExcludesMulti) || this._nonMultiGemFilter(gem)) && (! gem.isMeasureDiscrim) && (! (! gem.cccDimName))));
}), this);
}), selectGemsWithLink: (function (linkType, complex, reverse) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1325]++;
  var gems = def.query(this.gems);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1326]++;
  if (reverse) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1327]++;
    gems = gems.reverse();
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1330]++;
  var isObjectLinkType = def.object.is(linkType);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1331]++;
  return gems.where((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1333]++;
  return (gem.hasLink && ((! linkType) || (isObjectLinkType? def.hasOwn(linkType, gem.linkType): (gem.linkType === linkType))) && ((! complex) || (gem.cccDimName && complex.atoms[gem.cccDimName])));
}));
}), selectBoundGems: (function (complex, reverse) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1341]++;
  var gems = def.query(this.gems);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1342]++;
  if (reverse) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1343]++;
    gems = gems.reverse();
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1346]++;
  return gems.where((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1348]++;
  return ((! gem.isMeasureDiscrim) && gem.cccDimName && complex.atoms[gem.cccDimName]);
}));
}), getHyperlinkInfo: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1357]++;
  var lastGem = this.selectGemsWithLink(this.chart._hyperlinkTypes, complex, true).first();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1362]++;
  if (lastGem) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1363]++;
    return ({gem: lastGem, atom: complex.atoms[lastGem.cccDimName]});
  }
}), getDrillDownInfo: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1371]++;
  var deepestInfo = this.getDeepestInfo(complex);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1372]++;
  if ((! deepestInfo)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1373]++;
    return null;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1377]++;
  var lastForm = deepestInfo.gem.formula, childForm = this.chart.getChildFormula(lastForm);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1379]++;
  if ((! childForm)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1382]++;
    var gemList = def.query(this.gems).reverse().array();
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1383]++;
    for (var i = 1; (i < gemList.length); (i++)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1384]++;
      var g = gemList[i];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1385]++;
      if ((! g.isMeasureDiscrim)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1386]++;
        var deepestGem = this.getHierarchyDeepestGem(g.formula), atom;
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1388]++;
        if (deepestGem) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1389]++;
          if (complex) {
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1390]++;
            atom = complex.atoms[deepestGem.cccDimName];
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1391]++;
            if (((! atom) || (atom.value == null))) {
              _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1392]++;
              deepestInfo = null;
            }
          }
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1396]++;
          deepestInfo = {gem: deepestGem, atom: atom};
        }
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1403]++;
      lastForm = deepestInfo.gem.formula;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1404]++;
      childForm = this.chart.getChildFormula(lastForm);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1405]++;
      if (childForm) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1406]++;
        break;
      }
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1409]++;
    if ((! childForm)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1410]++;
      return null;
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1418]++;
  if (def.hasOwn(this.chart.gemsMap, childForm)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1419]++;
    return null;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1422]++;
  deepestInfo.drillChild = childForm;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1424]++;
  return deepestInfo;
}), getDeepestInfo: (function (complex, hierarchy) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1428]++;
  if (this.depth) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1429]++;
    var lastGem = this.getLastProperGem(hierarchy);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1430]++;
    if (lastGem) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1431]++;
      var deepestGem = this.getHierarchyDeepestGem(lastGem.formula), atom;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1433]++;
      if (deepestGem) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1434]++;
        if (complex) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1435]++;
          atom = complex.atoms[deepestGem.cccDimName];
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1436]++;
          if (((! atom) || (atom.value == null))) {
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1437]++;
            return null;
          }
        }
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1441]++;
        return ({gem: deepestGem, atom: atom});
      }
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1449]++;
  return null;
}), getLastProperGem: (function (hierarchy) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1466]++;
  var realHierarchy;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1467]++;
  if (hierarchy) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1468]++;
    realHierarchy = hierarchy.match(/^(\[.*?\])?.*$/)[1];
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1471]++;
  return def.query(this.gems).reverse().first((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1474]++;
  return ((! gem.isMeasureDiscrim) && ((! realHierarchy) || (gem.hierarchy === realHierarchy)));
}));
}), getHierarchyDeepestGem: (function (hierarchy) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1480]++;
  var hForms = this.chart._getHierarchyFormulas(hierarchy, false, false);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1485]++;
  return (def.query(hForms).reverse().select((function (hForm) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1488]++;
  var gem = def.getOwn(this.chart.gemsMap, hForm);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1489]++;
  return ((gem && (gem.axis === this) && gem.cccDimName)? gem: null);
}), this).first(def.notNully) || null);
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1497]++;
  def.type("pentaho.ccc.ColumnAxis", pentaho.ccc.DiscreteAxis).init((function (chart) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1501]++;
  var rolesToCccDimMap = chart._vizOptions.rolesToCccDimensionsMap;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1503]++;
  this.hasMeasureDiscrim = ((! chart.options.dataOptions.measuresInColumns) && (! (! (rolesToCccDimMap[this.defaultRole] || rolesToCccDimMap[chart.axes.row.defaultRole]))));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1507]++;
  this.isHiddenMeasureDiscrim = (this.hasMeasureDiscrim && (! (chart.axes.measure.genericMeasuresCount > 1)));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1510]++;
  this.base(chart, "column");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1512]++;
  this._ensureRole(this.defaultRole);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1514]++;
  this.realDepth = (this.hasMeasureDiscrim? (this.depth - 1): this.depth);
})).add({defaultRole: "columns", hiddenMeasureDiscrimDimName: "measureDiscrim", measureDiscrimName: null, _getGems: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1523]++;
  var gems = this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1525]++;
  if (this.hasMeasureDiscrim) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1526]++;
    gems.push({isMeasureDiscrim: true, id: "__MeasureDiscrim__", label: "Measure discriminator", axis: this.id, role: this.defaultRole});
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1535]++;
  return gems;
}), _getGemDimName: (function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1539]++;
  if ((gem.isMeasureDiscrim && this.isHiddenMeasureDiscrim)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1542]++;
    return (this.measureDiscrimName = this.hiddenMeasureDiscrimDimName);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1545]++;
  var cccDimName = this.base(gem);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1546]++;
  if (gem.isMeasureDiscrim) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1547]++;
    if ((! cccDimName)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1551]++;
      var rolesToCccDimMap = this.chart._vizOptions.rolesToCccDimensionsMap, rowAxis = this.chart.axes.row, rowRole = rowAxis.defaultRole, rowCccDimGroup = rolesToCccDimMap[rowRole], rowNextLevel = rowAxis.gemsByRole[rowRole].length;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1557]++;
      cccDimName = pvc.data.DimensionType.dimensionGroupLevelName(rowCccDimGroup, rowNextLevel);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1561]++;
    this.measureDiscrimName = cccDimName;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1564]++;
  return cccDimName;
}), configureDimensionGroups: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1569]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1572]++;
  this.cccDimList();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1574]++;
  if (this.measureDiscrimName) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1575]++;
    this.chart.options.dimensions[this.measureDiscrimName] = {isHidden: true};
  }
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1584]++;
  def.type("pentaho.ccc.RowAxis", pentaho.ccc.DiscreteAxis).init((function (chart) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1588]++;
  this.base(chart, "row");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1590]++;
  this._ensureRole(this.defaultRole);
})).add({defaultRole: "rows"});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1598]++;
  def.type("pentaho.ccc.MeasureAxis", pentaho.ccc.Axis).init((function (chart) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1602]++;
  this.base(chart, "measure");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1604]++;
  this._ensureRole(this.defaultRole);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1606]++;
  this.genericMeasuresCount = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1607]++;
  this.genericMeasureRoles = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1608]++;
  def.eachOwn(this.gemsByRole, (function (gems, role) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1609]++;
  if ((role.indexOf("measures") === 0)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1610]++;
    this.genericMeasureRoles[role] = true;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1611]++;
    this.genericMeasuresCount += gems.length;
  }
}), this);
})).add({defaultRole: "measures", _getGems: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1626]++;
  var gems = this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1628]++;
  var filtered = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1630]++;
  gems.forEach((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1631]++;
  var meaId = gem.id, measureInfo;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1634]++;
  if ((meaId && (measureInfo = def.getOwn(this.chart._measuresInfo, meaId)))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1635]++;
    gem.role = measureInfo.role;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1637]++;
    filtered.push(gem);
  }
}), this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1641]++;
  return filtered;
}), cccDimList: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1645]++;
  if ((! this._cccDimList)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1646]++;
    this._cccDimList = this.chart._measureRolesInfoList.map((function (role) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1648]++;
  return role.cccDimName;
}));
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1651]++;
  return this._cccDimList;
}), _buildGemHtmlTooltip: (function (lines, complex, context, gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1661]++;
  var colAxis = this.chart.axes.column;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1662]++;
  if ((colAxis.measureDiscrimName && def.hasOwn(this.genericMeasureRoles, gem.role) && (gem.id !== complex.atoms[colAxis.measureDiscrimName].value))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1665]++;
    return;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1669]++;
  var cccDimName = this.chart._measureRolesInfo[gem.role].cccDimName;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1670]++;
  if (cccDimName) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1671]++;
    var atom = complex.atoms[cccDimName];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1672]++;
    if ((! atom.dimension.type.isHidden)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1674]++;
      var tooltipLine = gem.label;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1677]++;
      if ((! def.hasOwn(this.chart._noRoleInTooltipMeasureRoles, gem.role))) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1678]++;
        tooltipLine += (" (" + gem.role + ")");
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1681]++;
      tooltipLine += (": " + atom.label);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1683]++;
      if (((! this.chart._noPercentInTootltipForPercentGems) || (gem.measureType !== "PCTOF"))) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1684]++;
        var valuePct = this._getAtomPercent(atom, context);
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1685]++;
        if ((valuePct != null)) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1686]++;
          tooltipLine += (" (" + valuePct + "%)");
        }
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1690]++;
      lines.push(def.html.escape(tooltipLine));
    }
  }
}), _getAtomPercent: (function (atom, context) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1696]++;
  if (context) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1697]++;
    var cccChart = context.chart, data = cccChart.data, playingPercentMap = data.type.getPlayingPercentVisualRoleDimensionMap(), cccDimName = atom.dimension.name;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1703]++;
    if (playingPercentMap.has(cccDimName)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1704]++;
      var group = context.scene.group, pct;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1706]++;
      if (group) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1707]++;
        pct = group.dimensions(cccDimName).percentOverParent({visible: true});
      }
      else {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1710]++;
        pct = data.dimensions(cccDimName).percent(atom.value);
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1713]++;
      return cccChart.options.valueFormat.call(null, (Math.round((pct * 10000)) / 100));
    }
  }
}), fillCellSelection: (function (selection, complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1723]++;
  selection.value = def.query(this.gems).select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1725]++;
  var cccDimName = this.chart._measureRolesInfo[gem.role].cccDimName;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1726]++;
  if (cccDimName) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1727]++;
    return complex.atoms[cccDimName].label;
  }
}), this).where(def.truthy).array().join(" ~ ");
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1748]++;
  var _cccEventsShieldEvents = ["mouseover", "mouseout", "mousemove"];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1750]++;
  function installCccEventsShield(element) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1751]++;
    if ((! element._cccEventsShield)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1752]++;
      element._cccEventsShield = true;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1754]++;
      _cccEventsShieldEvents.forEach((function (evName) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1755]++;
  addListener(element, evName, stopEventPropagation);
}));
    }
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1760]++;
  function stopEventPropagation(ev) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1761]++;
    if ((! ev)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1761]++;
      ev = window.event;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1762]++;
    if (ev.stopPropagation) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1763]++;
      ev.stopPropagation();
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1765]++;
      ev.cancelBubble = true;
    }
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1769]++;
  function addListener(elem, type, listener) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1770]++;
    (elem.addEventListener? elem.addEventListener(type, listener, false): elem.attachEvent(("on" + type), listener));
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1777]++;
  def.type("pentaho.ccc.Chart").init((function (element) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1780]++;
  this._element = element;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1781]++;
  this._elementName = element.id;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1783]++;
  installCccEventsShield(element);
})).add({_keyAxesIds: ["column", "row"], _axesIds: ["column", "row", "measure"], _axesCreateOrderIds: ["row", "measure", "column"], _cccVirtualItemAxesLayout: ["column", "row", "measure"], _drillAxesIds: ["column", "row"], _noRoleInTooltipMeasureRoles: {"measures": true}, _noPercentInTootltipForPercentGems: false, draw: (function (dataTable, vizOptions) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1827]++;
  this._metadata = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1828]++;
  this._resultset = null;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1831]++;
  this._dataTable = dataTable;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1835]++;
  this._initOptions(vizOptions);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1837]++;
  this._processDataTable();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1839]++;
  this._initAxes();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1843]++;
  var rowDepth = this.axes.row.depth;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1844]++;
  this.options.dataOptions.categoriesCount = rowDepth;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1846]++;
  this._hasMultiChartColumns = (this.axes.row.hasMulti || this.axes.column.hasMulti);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1850]++;
  this._readUserOptions(this.options, vizOptions);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1854]++;
  this._readData();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1856]++;
  this._configure();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1858]++;
  this._prepareLayout(this.options);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1860]++;
  this._render();
}), resize: (function (width, height) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1866]++;
  if ((this._lastResizeTimeout != null)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1867]++;
    clearTimeout(this._lastResizeTimeout);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1870]++;
  this._lastResizeTimeout = setTimeout((function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1871]++;
  this._lastResizeTimeout = null;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1873]++;
  this._doResize(width, height);
}).bind(this), 50);
}), _doResize: (function (width, height) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1879]++;
  if (this._chart) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1880]++;
    var options = this._chart.options;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1882]++;
    def.set(options, "width", width, "height", height);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1884]++;
    this._prepareLayout(options);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1886]++;
    this._chart.render(true, true, false);
  }
}), setHighlights: (function (selections) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1892]++;
  this._selections = selections;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1894]++;
  if ((! this._ownChange)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1895]++;
    if (((! selections) || (selections.length == 0))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1897]++;
      this._ownChange = true;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1898]++;
      try {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1899]++;
        this._chart.clearSelections();
      }
      finally {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1901]++;
        this._ownChange = false;
      }
    }
  }
}), getOutputParameters: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1910]++;
  var params = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1911]++;
  if ((this._vizOptions.cccClass == "pvc.PieChart")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1912]++;
    params.push([this._dataTable.getColumnId(0), true, this._dataTable.getColumnId(0)]);
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1918]++;
    for (var j = 0; (j < this._dataTable.getNumberOfColumns()); (j++)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1919]++;
      params.push([this._dataTable.getColumnId(j), true, this._dataTable.getColumnId(j)]);
}
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1927]++;
  return params;
}), getColors: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1935]++;
  if (this._colors) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1936]++;
    return this._colors;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1939]++;
  var colors = null;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1941]++;
  var paletteMap = this._vizOptions.metrics[0].paletteMap;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1942]++;
  if (paletteMap) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1943]++;
    colors = [];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1944]++;
    for (var r = 0; (r < this._dataTable.getNumberOfRows()); (r++)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1945]++;
      var item = this._getTableValue(r, 0);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1946]++;
      if ((this._selections && (this._selections.length > 0))) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1947]++;
        var done = false;
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1948]++;
        for (var selIdx = 0; (selIdx < this._selections.length); (selIdx++)) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1949]++;
          var selection = this._selections[selIdx];
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1950]++;
          if ((((selection.type == "row") && (selection.rowItem == item)) || ((selection.type == "column") && (selection.colId == this._dataTable.getColumnId(1))))) {
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1952]++;
            colors.push(paletteMap[item]);
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1953]++;
            done = true;
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1954]++;
            break;
          }
}
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1958]++;
        if ((! done)) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1960]++;
          colors.push("#bbbbbb");
        }
      }
      else {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1964]++;
        colors.push(paletteMap[item]);
      }
}
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1969]++;
  return colors;
}), _initOptions: (function (vizOptions) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1976]++;
  vizOptions = (this._vizOptions = $.extend({}, vizOptions));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1980]++;
  this._vizHelper = cv.pentahoVisualizationHelpers[vizOptions.customChartType];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1982]++;
  this._hasContentLink = (this._vizHelper.isInteractionEnabled() && this._vizHelper.hasContentLink());
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1988]++;
  this._selections = vizOptions.selections;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1990]++;
  this.options = {canvas: this._elementName, showValues: false, legend: true, legendClickMode: "toggleSelected", legend2ClickMode: "toggleSelected", titlePosition: "top", paddings: 10, animate: false, showTooltips: true, clickable: true, selectable: true, hoverable: false, ctrlSelectMode: false, clearSelectionMode: "manual", extensionPoints: {}, dimensionGroups: {}, dimensions: {}, readers: [], visualRoles: {}, ignoreNulls: false, crosstabMode: (! (! vizOptions.crosstabMode)), isMultiValued: true, seriesInRows: false, dataOptions: {categoriesCount: 1, measuresInColumns: (! (! vizOptions.measuresInColumns))}};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2029]++;
  vizOptions.height = (vizOptions.height || 400);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2030]++;
  vizOptions.width = (vizOptions.width || 400);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2032]++;
  for (var x in vizOptions) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2033]++;
    if ((! this._shouldSkipVizOption(x))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2034]++;
      this._configureOption(x, vizOptions[x]);
    }
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2039]++;
  var vizExtPoints = vizOptions.extensionPoints;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2040]++;
  if (vizExtPoints) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2041]++;
    def.copy(this.options.extensionPoints, vizExtPoints);
  }
}), _message: (function (msgId, args) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2046]++;
  return this._vizHelper.message(msgId, args);
}), _readUserOptions: (function (options, vizOptions) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2051]++;
  var extPoints = options.extensionPoints;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2053]++;
  var value = vizOptions.backgroundFill;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2054]++;
  if ((value && (value !== "NONE"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2055]++;
    var fillStyle;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2056]++;
    if ((value === "GRADIENT")) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2057]++;
      if (this._hasMultiChartColumns) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2059]++;
        var bgColor = pv.color(vizOptions.backgroundColor).rgb();
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2060]++;
        bgColor = pv.rgb((~ (~ ((255 + bgColor.r) / 2))), (~ (~ ((255 + bgColor.g) / 2))), (~ (~ ((255 + bgColor.b) / 2))), bgColor.a);
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2066]++;
        fillStyle = bgColor;
      }
      else {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2068]++;
        fillStyle = ("linear-gradient(to top, " + vizOptions.backgroundColor + ", " + vizOptions.backgroundColorEnd + ")");
      }
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2073]++;
      fillStyle = vizOptions.backgroundColor;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2076]++;
    extPoints.base_fillStyle = fillStyle;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2079]++;
  value = vizOptions.labelColor;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2080]++;
  if ((value !== undefined)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2081]++;
    extPoints.xAxisLabel_textStyle = (extPoints.yAxisLabel_textStyle = (extPoints.xAxisTitleLabel_textStyle = (extPoints.yAxisTitleLabel_textStyle = value)));
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2087]++;
  value = vizOptions.legendColor;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2088]++;
  if ((value !== undefined)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2089]++;
    extPoints.legendLabel_textStyle = value;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2095]++;
  value = vizOptions.legendBackgroundColor;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2096]++;
  if ((value && (value.toLowerCase() !== "#ffffff"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2097]++;
    extPoints.legendArea_fillStyle = value;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2100]++;
  value = vizOptions.lineWidth;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2101]++;
  if ((value !== undefined)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2102]++;
    extPoints.line_lineWidth = (+ value);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2103]++;
    var radius = (3 + (6 * ((+ value) / 8)));
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2104]++;
    extPoints.dot_shapeSize = (radius * radius);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2107]++;
  value = vizOptions.maxChartsPerRow;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2108]++;
  if ((value !== undefined)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2109]++;
    options.multiChartMaxColumns = (+ value);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2113]++;
  if (vizOptions.labelSize) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2114]++;
    var labelFont = readFont(vizOptions, "label");
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2116]++;
    options.axisTitleFont = (options.axisFont = labelFont);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2119]++;
    if (this._hasMultiChartColumns) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2120]++;
      var labelFontSize = readFontSize(vizOptions, "label");
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2121]++;
      var labelFontFamily = readFontFamily(vizOptions, "label");
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2122]++;
      options.titleFont = (labelFontSize + 2 + "px " + labelFontFamily);
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2126]++;
  if (vizOptions.legendSize) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2127]++;
    options.legendFont = readFont(vizOptions, "legend");
  }
}), _processDataTable: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2149]++;
  var dataTable = this._dataTable;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2150]++;
  var dtColCount = dataTable.getNumberOfColumns();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2151]++;
  var roleToCccDimMap = this._vizOptions.rolesToCccDimensionsMap;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2152]++;
  var colGroups = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2153]++;
  var colGroupsByColValues = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2161]++;
  var measureRolesInfo = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2162]++;
  var measureRolesInfoList = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2167]++;
  var measuresInfo = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2168]++;
  var measuresInfoList = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2170]++;
  var rowsInfoList = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2171]++;
  var columnsInfoList = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2173]++;
  var tc = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2174]++;
  var colId, splitColId;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2179]++;
  while ((tc < dtColCount)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2180]++;
    colId = dataTable.getColumnId(tc);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2181]++;
    splitColId = splitColGroupAndMeasure(colId);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2183]++;
    if ((! processRowColumn.apply(this, splitColId))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2185]++;
      break;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2189]++;
    (tc++);
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2193]++;
  if ((tc < dtColCount)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2200]++;
    processColumnsInfo.call(this, splitColId[0]);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2205]++;
    while (true) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2206]++;
      processMeasureColumn.apply(this, splitColId);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2209]++;
      if (((++tc) >= dtColCount)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2210]++;
        break;
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2213]++;
      colId = dataTable.getColumnId(tc);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2214]++;
      splitColId = splitColGroupAndMeasure(colId);
}
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2219]++;
  measureRolesInfoList.sort((function (infoa, infob) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2220]++;
  return (def.compare(infoa.groupIndex, infob.groupIndex) || def.compare(infoa.index, infob.index));
}));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2226]++;
  measureRolesInfoList.forEach((function (roleInfo, index) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2227]++;
  roleInfo.groupIndex = index;
}));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2231]++;
  this._measureRolesInfo = measureRolesInfo;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2232]++;
  this._measureRolesInfoList = measureRolesInfoList;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2233]++;
  this._colGroups = colGroups;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2234]++;
  this._measuresInfo = measuresInfo;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2236]++;
  this._axesGemsInfo = {"measure": measuresInfoList, "row": rowsInfoList, "column": columnsInfoList};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2245]++;
  function processRowColumn(colGroupValues, meaId) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2246]++;
    if (/\[MEASURE:(\d+)\]$/.test(meaId)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2248]++;
      return false;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2258]++;
    var roles = getColumnRoles(dataTable, tc);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2261]++;
    rowsInfoList.push({id: colId, formula: colId, label: dataTable.getColumnLabel(tc), axis: "row", role: (roles? roles[0]: "undefined"), index: rowsInfoList.length});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2270]++;
    return true;
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2275]++;
  function processColumnsInfo(colGroupValues) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2276]++;
    if (colGroupValues) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2277]++;
      var colRoles = getColumnRoles(dataTable, tc);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2278]++;
      var colValues = colGroupValues.split("~");
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2279]++;
      var meaIndex = (colValues.length - 1);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2281]++;
      colValues.forEach((function (colValue, index) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2282]++;
  columnsInfoList.push({id: undefined, formula: undefined, label: undefined, axis: "column", role: colRoles[index], index: index});
}));
    }
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2294]++;
  function processMeasureColumn(colGroupValues, id) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2296]++;
    var meaInfo = def.getOwn(measuresInfo, id);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2299]++;
    if ((! meaInfo)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2300]++;
      var role = getColumnRoles(dataTable, tc).pop();
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2302]++;
      meaInfo = {id: id, formula: undefined, label: splitColGroupAndMeasure(dataTable.getColumnLabel(tc))[1], axis: "measure", role: role, index: measuresInfoList.length, isUnmapped: (role === "undefined")};
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2312]++;
      measuresInfo[id] = meaInfo;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2313]++;
      measuresInfoList.push(meaInfo);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2317]++;
    var colGroup = def.getOwn(colGroupsByColValues, colGroupValues);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2318]++;
    if ((! colGroup)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2319]++;
      colGroup = {index: tc, encValues: colGroupValues, values: (colGroupValues? colGroupValues.split("~"): []), measureIds: [id]};
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2326]++;
      colGroupsByColValues[colGroupValues] = colGroup;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2327]++;
      colGroups.push(colGroup);
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2329]++;
      colGroup.measureIds.push(id);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2333]++;
    var currMeaIndex = (tc - colGroup.index);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2334]++;
    var meaRoleInfo = def.getOwn(measureRolesInfo, meaInfo.role);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2335]++;
    if ((! meaRoleInfo)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2336]++;
      meaRoleInfo = {id: role, cccDimName: (meaInfo.isUnmapped? null: (roleToCccDimMap[role] || def.assert("Must map to CCC all measure roles that the data table contains."))), groupIndex: currMeaIndex, index: tc};
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2346]++;
      measureRolesInfo[meaInfo.role] = meaRoleInfo;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2347]++;
      measureRolesInfoList.push(meaRoleInfo);
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2349]++;
      if ((currMeaIndex > meaRoleInfo.groupIndex)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2350]++;
        meaRoleInfo.groupIndex = currMeaIndex;
      }
    }
}
}), _initAxes: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2357]++;
  this.gemsMap = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2360]++;
  this.axes = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2362]++;
  this._gemCountColumnReportAxis = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2363]++;
  this._measureDiscrimGem = null;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2366]++;
  this._axesCreateOrderIds.forEach(createAxis, this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2368]++;
  var virtualItemIndex = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2369]++;
  var cccDimNamesSet = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2370]++;
  this._cccVirtualItemAxesLayout.forEach((function (axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2371]++;
  virtualItemIndex = this.axes[axisId].configure(virtualItemIndex, cccDimNamesSet);
}), this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2375]++;
  function createAxis(axisId) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2377]++;
    var axis = pentaho.ccc.Axis.create(this, axisId);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2379]++;
    axis.gems.forEach(indexGem, this);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2381]++;
    this.axes[axisId] = axis;
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2385]++;
  function indexGem(gem) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2386]++;
    var form = gem.formula, id = gem.id;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2393]++;
    if (form) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2394]++;
      this.gemsMap[form] = gem;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2397]++;
    if ((id && (form !== id))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2398]++;
      this.gemsMap[id] = gem;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2401]++;
    if ((gem.reportAxis === "column")) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2402]++;
      (this._gemCountColumnReportAxis++);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2405]++;
    if (gem.isMeasureDiscrim) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2406]++;
      this._measureDiscrimGem = gem;
    }
}
}), _readData: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2412]++;
  this._readDataCrosstab();
}), _readDataCrosstab: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2422]++;
  var dataTable = this._dataTable, colCount = dataTable.getNumberOfColumns(), rowCount = dataTable.getNumberOfRows();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2427]++;
  this._colors = colorPalete;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2430]++;
  for (var tc = 0; (tc < colCount); (tc++)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2431]++;
    this._addCdaMetadata(dataTable.getColumnId(tc), dataTable.getColumnLabel(tc), writeCccColumnDataType(dataTable.getColumnType(tc)));
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2437]++;
  var table = (this._resultset = new Array(rowCount));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2438]++;
  for (var tr = 0; (tr < rowCount); (tr++)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2439]++;
    var row = new Array(colCount);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2441]++;
    for (tc = 0; (tc < colCount); (tc++)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2442]++;
      row[tc] = this._getTableCell(tr, tc);
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2445]++;
    table[tr] = row;
}
}), _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2450]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2455]++;
  this._vizOptions.controller.domNode.style.overflow = "hidden";
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2457]++;
  options.colors = this.getColors();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2459]++;
  if ((this.options.legend = this._showLegend())) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2460]++;
    this._configureLegend();
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2463]++;
  if (this._hasMultiChartColumns) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2464]++;
    this._configureMultiChart();
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2467]++;
  options.axisFont = defaultFont(options.axisFont, 12);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2468]++;
  options.axisTitleFont = defaultFont(options.axisTitleFont, 12);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2470]++;
  if ((! this._vizHelper.isInteractionEnabled())) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2471]++;
    options.showTooltips = false;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2472]++;
    options.clickable = false;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2473]++;
    options.selectable = false;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2474]++;
    options.hoverable = false;
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2476]++;
    if (options.showTooltips) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2477]++;
      this._configureTooltip();
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2480]++;
    if ((options.selectable = this._canSelect())) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2481]++;
      this._configureSelection();
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2484]++;
    this._configureDoubleClick();
  }
}), _configureMultiChart: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2489]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2492]++;
  var containerStyle = this._vizOptions.controller.domNode.style;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2493]++;
  containerStyle.overflowX = "hidden";
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2494]++;
  containerStyle.overflowY = "auto";
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2496]++;
  options.multiChartMax = 50;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2501]++;
  var titleFont = defaultFont(options.titleFont, 12);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2502]++;
  if ((titleFont && (! /black|(\bbold\b)/i.test(titleFont)))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2503]++;
    titleFont = ("bold " + titleFont);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2506]++;
  options.titleFont = titleFont;
}), _configureTooltip: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2510]++;
  var me = this;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2514]++;
  this.options.tooltipFormat = (function (s, c, v, datum) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2515]++;
  return me._getTooltipText(datum, this);
});
}), _canSelect: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2520]++;
  if ((! this.options.selectable)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2521]++;
    return false;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2525]++;
  if ((this._gemCountColumnReportAxis >= 2)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2526]++;
    return false;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2529]++;
  return true;
}), _configureSelection: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2533]++;
  var me = this;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2534]++;
  this.options.userSelectionAction = (function (cccSelections) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2535]++;
  return me._onUserSelection(cccSelections);
});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2537]++;
  this.options.selectionChangedAction = (function (cccSelections) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2538]++;
  me._onSelectionChanged(cccSelections);
});
}), _configureDoubleClick: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2543]++;
  var me = this;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2554]++;
  this.options.doubleClickAction = (function (s, c, v, ev) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2555]++;
  me._onDoubleClick(this.scene.datum, this);
});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2558]++;
  this.options.axisDoubleClickAction = (function (group) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2559]++;
  if ((group instanceof pvc.data.Complex)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2560]++;
    return me._onDoubleClick(group);
  }
});
}), _showLegend: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2566]++;
  if ((! this.options.legend)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2567]++;
    return false;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2570]++;
  if ((this.axes.measure.genericMeasuresCount > 1)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2571]++;
    return true;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2574]++;
  var colAxis = this.axes.column, cccColDimGroup = this._vizOptions.rolesToCccDimensionsMap[colAxis.defaultRole];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2577]++;
  if (((! cccColDimGroup) || (colAxis.realDepth > 0))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2578]++;
    return true;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2581]++;
  return false;
}), _configureLegend: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2585]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2587]++;
  options.legendFont = defaultFont(options.legendFont, 10);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2589]++;
  var legendPosition = options.legendPosition, isTopOrBottom = ((legendPosition === "top") || (legendPosition === "bottom"));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2592]++;
  if ((this._hasMultiChartColumns && (! isTopOrBottom))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2593]++;
    options.legendAlignTo = "page-middle";
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2594]++;
    options.legendInBounds = true;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2596]++;
    var legendMargins = options.legendMargins;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2597]++;
    if (legendMargins) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2598]++;
      if (((typeof legendMargins) !== "object")) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2599]++;
        legendMargins = (options.legendMargins = {all: legendMargins});
      }
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2602]++;
      legendMargins = (options.legendMargins = {});
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2605]++;
    legendMargins.top = 20;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2608]++;
  if ((! ("legendAlign" in options))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2610]++;
    if (isTopOrBottom) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2611]++;
      options.legendAlign = "center";
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2613]++;
      options.legendAlign = "middle";
    }
  }
}), _shouldSkipVizOption: (function (option) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2621]++;
  return (option in _skipVizOptions);
}), _configureOption: (function (x, v) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2626]++;
  switch (x) {
  case "legendPosition":
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2628]++;
    v = (v && v.toLowerCase());
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2629]++;
    break;
  case "showLegend":
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2632]++;
    x = "legend";
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2633]++;
    v = (("" + v) === "true");
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2634]++;
    break;
  case "legendSize":
  case "lineWidth":
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2638]++;
    v = parseFloat(v);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2639]++;
    break;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2642]++;
  this.options[x] = v;
}), _prepareLayout: (function (options) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2647]++;
  if ((this._hasMultiChartColumns && (pv.renderer() !== "batik"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2649]++;
    options.width -= 17;
  }
}), _render: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2654]++;
  while (this._element.firstChild) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2655]++;
    this._element.removeChild(this._element.firstChild);
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2658]++;
  this._currentChartType = this._vizOptions.cccClass;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2660]++;
  var chartClass = def.getPath({pvc: pvc}, this._currentChartType);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2662]++;
  this._chart = new chartClass(this.options);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2663]++;
  this._chart.setData({metadata: this._metadata, resultset: this._resultset});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2668]++;
  this._chart.render();
}), _getTooltipText: (function (complex, context) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2674]++;
  var tooltipLines = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2676]++;
  this._axesIds.forEach((function (axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2677]++;
  this.axes[axisId].buildHtmlTooltip(tooltipLines, complex, context);
}), this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2680]++;
  if (this._hasContentLink) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2682]++;
    msg = this._message("chartTooltipFooterContentlink");
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2684]++;
    tooltipLines.push(msg);
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2687]++;
    var hyperlinkInfo = this._getHyperlinkInfo(complex);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2688]++;
    var msg;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2689]++;
    if (hyperlinkInfo) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2690]++;
      msg = this._message("chartTooltipFooterHyperlink", [def.html.escape((hyperlinkInfo.gem.linkLabel || this._message("chartTooltipHyperlinkDefaultTitle")))]);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2695]++;
      tooltipLines.push(msg);
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2699]++;
      var drillDownInfo = this._getDrillDownInfo(complex);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2700]++;
      if (drillDownInfo) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2701]++;
        msg = this._message("chartTooltipFooterDrillDown", [def.html.escape(this._vizHelper.getFormulaLabel(drillDownInfo.drillChild))]);
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2706]++;
        tooltipLines.push(msg);
      }
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2714]++;
  var selections = this._vizOptions.controller.highlights;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2715]++;
  var selectedCount = (selections && selections.length);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2716]++;
  if (selectedCount) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2717]++;
    var msgId = ((selectedCount === 1)? "chartTooltipFooterSelectedSingle": "chartTooltipFooterSelectedMany");
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2721]++;
    msg = this._message(msgId, [selectedCount]);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2723]++;
    tooltipLines.push(msg);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2726]++;
  return tooltipLines.join("<br />");
}), _onUserSelection: (function (selectingDatums) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2732]++;
  return this._processSelection(selectingDatums);
}), _getSelectionKey: (function (selection) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2736]++;
  var key = selection.__cccKey;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2737]++;
  if ((! key)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2738]++;
    var keys = [selection.type];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2740]++;
    var ap = def.array.append;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2741]++;
    if (selection.columnId) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2742]++;
      ap(keys, selection.columnId);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2743]++;
      ap(keys, selection.columnItem);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2746]++;
    if (selection.rowId) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2747]++;
      ap(keys, selection.rowId);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2748]++;
      ap(keys, selection.rowItem);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2751]++;
    key = (selection.__cccKey = keys.join("||"));
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2754]++;
  return key;
}), _doesSharedSeriesSelection: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2758]++;
  return (this._gemCountColumnReportAxis === 1);
}), _onSelectionChanged: (function (selectedDatums) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2763]++;
  if ((! this.options.selectable)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2764]++;
    return;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2768]++;
  var selectionExcludesMulti = this._selectionExcludesMultiGems();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2770]++;
  var selections = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2771]++;
  var selectionsByKey = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2773]++;
  if (this._doesSharedSeriesSelection()) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2774]++;
    selectedDatums.forEach((function (datum) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2775]++;
  var selection = {type: "column"};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2777]++;
  this.axes.column.fillCellSelection(selection, datum, selectionExcludesMulti);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2785]++;
  var key = this._getSelectionKey(selection);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2787]++;
  var existingSelection = selectionsByKey[key];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2788]++;
  if ((! existingSelection)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2789]++;
    selection.__cccDatums = [datum];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2791]++;
    selectionsByKey[key] = selection;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2792]++;
    selections.push(selection);
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2794]++;
    existingSelection.__cccDatums.push(datum);
  }
}), this);
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2800]++;
    selectedDatums.forEach((function (datum) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2801]++;
  var selection = this._complexToCellSelection(datum, selectionExcludesMulti);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2805]++;
  var key = this._getSelectionKey(selection);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2806]++;
  var existingSelection = selectionsByKey[key];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2807]++;
  if ((! existingSelection)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2808]++;
    selection.__cccDatums = datum;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2810]++;
    selectionsByKey[key] = selection;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2811]++;
    selections.push(selection);
  }
}), this);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2816]++;
  selections = this._limitSelection(selections);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2819]++;
  pentaho.events.trigger(this, "select", {source: this, selections: selections, selectionMode: "REPLACE"});
}), _limitSelection: (function (selections) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2828]++;
  var selections2 = selections;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2829]++;
  var L = selections.length;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2830]++;
  var deselectCount = (L - _filterSelectionMaxCount);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2831]++;
  if ((deselectCount > 0)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2833]++;
    var deselectDatums = [];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2834]++;
    selections2 = [];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2836]++;
    for (var i = 0; (i < L); (i++)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2837]++;
      var selection = selections[i];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2838]++;
      var keep = true;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2839]++;
      if (deselectCount) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2840]++;
        if (this._previousSelectionKeys) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2841]++;
          var key = this._getSelectionKey(selection);
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2842]++;
          if ((! this._previousSelectionKeys[key])) {
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2843]++;
            keep = false;
          }
        }
        else {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2845]++;
          if ((i >= _filterSelectionMaxCount)) {
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2846]++;
            keep = false;
          }
        }
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2850]++;
      if (keep) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2851]++;
        selections2.push(selection);
      }
      else {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2853]++;
        var datums = selection.__cccDatums;
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2854]++;
        if (datums) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2855]++;
          if (def.array.is(datums)) {
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2856]++;
            def.array.append(deselectDatums, datums);
          }
          else {
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2858]++;
            deselectDatums.push(datums);
          }
        }
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2861]++;
        (deselectCount--);
      }
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2866]++;
    pvc.data.Data.setSelected(deselectDatums, false);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2869]++;
    this._chart.updateSelections();
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2871]++;
    this._vizHelper.showConfirm(["infoExceededMaxSelectionItems", _filterSelectionMaxCount], "SELECT_ITEM_LIMIT_REACHED");
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2879]++;
  this._previousSelectionKeys = def.query(selections2).object({name: (function (selection) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2882]++;
  return this._getSelectionKey(selection);
}), value: def.retTrue, context: this});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2887]++;
  return selections2;
}), _selectionExcludesMultiGems: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2901]++;
  return true;
}), _processSelection: (function (selectedDatums) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2946]++;
  var whereSpec;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2948]++;
  if (selectedDatums.length) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2949]++;
    var selectionExcludesMulti = this._selectionExcludesMultiGems();
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2954]++;
    var colDimNames = this.axes.column.getSelectionGems(selectionExcludesMulti).select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2955]++;
  return gem.cccDimName;
})).array();
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2958]++;
    var rowDimNames;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2959]++;
    if ((! this._gemCountColumnReportAxis)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2962]++;
      rowDimNames = this.axes.row.getSelectionGems(selectionExcludesMulti).select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2963]++;
  return gem.cccDimName;
})).array();
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2967]++;
    if (((! colDimNames.length) && ((! rowDimNames) || (! rowDimNames.length)))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2968]++;
      selectedDatums = [];
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2970]++;
      whereSpec = [];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2972]++;
      selectedDatums.forEach(addDatum);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2975]++;
      selectedDatums = this._chart.data.datums(whereSpec, {visible: true}).array();
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2981]++;
  function addDatum(datum) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2982]++;
    if ((! datum.isNull)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2984]++;
      var datumFilter = {};
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2986]++;
      var atoms = datum.atoms;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2988]++;
      if (colDimNames) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2989]++;
        colDimNames.forEach(addDim);
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2992]++;
      if (rowDimNames) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2993]++;
        rowDimNames.forEach(addDim);
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2996]++;
      whereSpec.push(datumFilter);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2999]++;
    function addDim(dimName) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3001]++;
      datumFilter[dimName] = atoms[dimName];
}
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3005]++;
  return selectedDatums;
}), _onDoubleClick: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3012]++;
  if (this._hasContentLink) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3013]++;
    this._followContentlink(complex);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3014]++;
    return true;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3018]++;
  var hyperlinkInfo = this._getHyperlinkInfo(complex);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3019]++;
  if (hyperlinkInfo) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3020]++;
    this._followHyperlink(hyperlinkInfo, complex);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3021]++;
    return true;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3025]++;
  var drillInfo = this._getDrillDownInfo(complex);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3026]++;
  if (drillInfo) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3027]++;
    this._drillDown(drillInfo, complex);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3028]++;
    return true;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3031]++;
  return false;
}), _followContentlink: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3036]++;
  var actionContext = def.query(this._drillAxesIds).selectMany((function (axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3040]++;
  return this.axes[axisId].selectGemsWithLink("DASHBOARD", complex, false);
}), this).select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3044]++;
  return ({clickLevel: true, formula: gem.formula, member: complex.atoms[gem.cccDimName].value});
})).array();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3053]++;
  if (actionContext.length) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3054]++;
    this._vizHelper.link(actionContext);
  }
}), _hyperlinkTypes: {FILE: 1, URL: 1}, _followHyperlink: (function (hyperlinkInfo, complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3061]++;
  var actionContext = def.query(this._drillAxesIds).selectMany((function (axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3065]++;
  return this.axes[axisId].selectBoundGems(complex);
}), this).select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3068]++;
  return ({clickLevel: (hyperlinkInfo.gem === gem), formula: gem.formula, member: complex.atoms[gem.cccDimName].value});
})).array();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3077]++;
  this._vizHelper.link(actionContext);
}), _drillDown: (function (drillInfo, complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3087]++;
  var actionContext = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3089]++;
  var drillGem = drillInfo.gem;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3090]++;
  var selectionExcludesMulti = this._selectionExcludesMultiGems();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3092]++;
  this._keyAxesIds.forEach(keepAxisHierarchies, this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3096]++;
  this._vizHelper.click(actionContext, true);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3102]++;
  function keepAxisHierarchies(axisId) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3107]++;
    this.axes[axisId].getKeepOrDrillGems(drillGem, selectionExcludesMulti).each((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3111]++;
  if ((gem === drillGem)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3112]++;
    useGem(gem, drillInfo.atom, "KEEP_AND_DRILL");
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3113]++;
    if ((! gem.isMeasureDiscrim)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3114]++;
      var atom = getGemAtom(gem, complex);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3115]++;
      if (atom) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3116]++;
        useGem(gem, atom, "KEEP");
      }
    }
  }
}));
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3123]++;
  function useGem(gem, atom, action) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3124]++;
    actionContext.push({action: action, formula: gem.formula, member: atom.value, caption: def.html.escape(atom.label)});
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3133]++;
  function getGemAtom(gem, complex) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3134]++;
    var cccDimName;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3135]++;
    if ((complex && (cccDimName = gem.cccDimName))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3136]++;
      var atom = complex.atoms[cccDimName];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3137]++;
      if ((atom && (atom.value != null))) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3138]++;
        return atom;
      }
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3142]++;
    return null;
}
}), _getHyperlinkInfo: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3150]++;
  return (def.query(this._drillAxesIds).select((function (axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3152]++;
  return this.axes[axisId].getHyperlinkInfo(complex);
}), this).where(def.notNully).first() || null);
}), _getDrillDownInfo: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3162]++;
  return (def.query(this._drillAxesIds).select((function (axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3164]++;
  return this.axes[axisId].getDrillDownInfo(complex);
}), this).where(def.notNully).first() || null);
}), _complexToCellSelection: (function (complex, selectionExcludesMulti) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3194]++;
  var selection = {type: "cell"};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3197]++;
  this._axesIds.forEach((function (axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3198]++;
  this.axes[axisId].fillCellSelection(selection, complex, selectionExcludesMulti);
}), this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3201]++;
  return selection;
}), getChildFormula: (function (hForm) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3208]++;
  var hForms = this._getHierarchyFormulas(hForm, false, false);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3212]++;
  if (hForms) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3213]++;
    var index = hForms.indexOf(hForm);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3214]++;
    if ((index >= 0)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3215]++;
      return (hForms[(index + 1)] || null);
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3219]++;
  return null;
}), _getHierarchyFormulas: (function (formula, includeHidden, excludeChildren) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3224]++;
  var hForms;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3225]++;
  var key = (formula + "|" + (! (! includeHidden)) + "|" + (! (! excludeChildren)));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3227]++;
  if ((! this._hierarchyFormulaCache)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3228]++;
    this._hierarchyFormulaCache = {};
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3230]++;
    hForms = this._hierarchyFormulaCache[key];
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3233]++;
  if ((! hForms)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3234]++;
    hForms = this._vizHelper.getHierarchyFormulas(formula, includeHidden, excludeChildren);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3235]++;
    this._hierarchyFormulaCache[key] = hForms;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3238]++;
  return hForms;
}), _addCdaMetadata: (function (colName, colLabel, colType) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3242]++;
  this._metadata.push({colIndex: this._metadata.length, colName: colName, colLabel: colLabel, colType: colType});
}), _getTableCell: (function (tr, tc) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3251]++;
  var cell = this._dataTable._getCell(tr, tc);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3252]++;
  if ((! cell)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3253]++;
    return null;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3256]++;
  var value = cell.v;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3257]++;
  if (((value == null) || (value === "-"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3258]++;
    return null;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3261]++;
  return ({v: value, f: cell.f});
}), _getTableValue: (function (tr, tc) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3268]++;
  var cell = this._getTableCell(tr, tc);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3269]++;
  return (cell? cell.v: ceff.f);
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3274]++;
  def.type("pentaho.ccc.CartesianChart", pentaho.ccc.Chart).add({_configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3279]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3281]++;
  this._configureAxesDisplayUnits();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3283]++;
  if (this._showAxisTitle("base")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3284]++;
    this._configureAxisTitle("base", this._getBaseAxisTitle());
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3287]++;
  if (this._showAxisTitle("ortho")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3288]++;
    this._configureAxisTitle("ortho", this._getOrthoAxisTitle());
  }
}), _showAxisTitle: def.fun.constant(true), _getOrthoAxisTitle: def.noop, _getBaseAxisTitle: def.noop, _configureAxisTitle: (function (axisType, title) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3299]++;
  var unitsSuffix = this._cartesianAxesDisplayUnitsText[axisType];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3301]++;
  title = def.string.join(" - ", title, unitsSuffix);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3303]++;
  if (title) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3304]++;
    var options = this.options;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3305]++;
    options[(axisType + "AxisTitle")] = title;
  }
}), _getMeasureRoleTitle: (function (measureRole) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3310]++;
  var title = "";
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3312]++;
  var measureAxis = this.axes.measure;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3313]++;
  var singleAxisGem;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3314]++;
  if ((! measureRole)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3315]++;
    if ((this.axes.measure.genericMeasuresCount === 1)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3316]++;
      singleAxisGem = measureAxis.gemsByRole[measureAxis.defaultRole][0];
    }
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3319]++;
    var roleGems = measureAxis.gemsByRole[measureRole];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3320]++;
    if ((roleGems.length === 1)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3321]++;
      singleAxisGem = roleGems[0];
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3325]++;
  if (singleAxisGem) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3326]++;
    title += singleAxisGem.label;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3329]++;
  return title;
}), _configureAxisRange: (function (primary, axisType) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3333]++;
  var vizOptions = this._vizOptions, suffix = (primary? "": "Secondary");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3336]++;
  if ((vizOptions[("autoRange" + suffix)] !== "true")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3337]++;
    var limit = vizOptions[("valueAxisLowerLimit" + suffix)];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3338]++;
    if ((limit != null)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3339]++;
      this.options[(axisType + "AxisFixedMin")] = limit;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3340]++;
      this.options[(axisType + "AxisOriginIsZero")] = false;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3343]++;
    limit = vizOptions[("valueAxisUpperLimit" + suffix)];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3344]++;
    if ((limit != null)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3345]++;
      this.options[(axisType + "AxisFixedMax")] = limit;
    }
  }
}), _cartesianAxesDisplayUnitsText: null, _configureAxesDisplayUnits: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3353]++;
  this._cartesianAxesDisplayUnitsText = {};
}), _configureAxisDisplayUnits: (function (primary, axisType, allowFractional) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3357]++;
  if ((! allowFractional)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3358]++;
    this.options[(axisType + "AxisTickExponentMin")] = 0;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3361]++;
  var text;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3362]++;
  var displayUnits = this._vizOptions[("displayUnits" + (primary? "": "Secondary"))];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3363]++;
  if ((displayUnits && (displayUnits !== "UNITS_0"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3365]++;
    var match = (displayUnits.match(/^UNITS_(\d+)$/) || def.fail.argumentInvalid("displayUnits"));
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3369]++;
    text = this._message(("dlgChartOption_" + displayUnits));
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3372]++;
  this._cartesianAxesDisplayUnitsText[axisType] = (text || "");
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3377]++;
  def.type("pentaho.ccc.CategoricalContinuousChart", pentaho.ccc.CartesianChart).add({_showAxisTitle: (function (type) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3381]++;
  return ((! this._hasMultiChartColumns) || (type === "ortho"));
}), _getOrthoAxisTitle: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3385]++;
  return this._getMeasureRoleTitle();
}), _getBaseAxisTitle: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3389]++;
  return this.axes.row.getAxisLabel();
}), _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3393]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3395]++;
  this._configureAxisRange(true, "ortho");
}), _configureAxesDisplayUnits: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3399]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3401]++;
  this._configureAxisDisplayUnits(true, "ortho");
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3405]++;
  def.type("pentaho.ccc.BarChart", pentaho.ccc.CategoricalContinuousChart).add({_configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3410]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3412]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3413]++;
  var isVertical = (options.orientation === "vertical");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3414]++;
  if ((! isVertical)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3415]++;
    options.visualRoles.category = {isReversed: true};
  }
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3420]++;
  def.type("pentaho.ccc.BarLineChart", pentaho.ccc.BarChart).add({_noRoleInTooltipMeasureRoles: {"measures": true, "measuresLine": true}, _initAxes: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3426]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3428]++;
  (this._measureDiscrimGem || def.assert("Must exist to distinguish measures."));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3431]++;
  var readers = this.options.readers;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3432]++;
  var measureDiscrimCccDimName = this._measureDiscrimGem.cccDimName;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3434]++;
  var virtualItemIndex = def.query(readers).where((function (reader) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3436]++;
  return (reader.names === measureDiscrimCccDimName);
})).select((function (reader) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3437]++;
  return reader.indexes;
})).first(null, null, -1);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3441]++;
  ((virtualItemIndex >= 0) || def.assert("Must be present in virtual item."));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3443]++;
  var barMeaRole = this.axes.measure.defaultRole;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3444]++;
  var gemsMap = this.gemsMap;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3445]++;
  var dataPartDimension, part0Atom, part1Atom;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3450]++;
  readers.push({names: "dataPart", reader: (function (vitem, dataPartDim) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3453]++;
  var measureId = vitem[virtualItemIndex].v;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3454]++;
  var measureGem = (gemsMap[measureId] || def.assert("Measure must be defined."));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3458]++;
  return ((measureGem.role === barMeaRole)? (part0Atom || (part0Atom = dataPartDim.intern("0"))): (part1Atom || (part1Atom = dataPartDim.intern("1"))));
})});
}), _configureAxesDisplayUnits: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3473]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3475]++;
  this._configureAxisDisplayUnits(false, "ortho2");
}), _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3481]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3482]++;
  var extPoints = options.extensionPoints;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3483]++;
  var shape = options.shape;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3484]++;
  if ((shape && (shape === "none"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3485]++;
    options.showDots = false;
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3487]++;
    options.showDots = true;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3488]++;
    options.extensionPoints.dot_shape = shape;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3491]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3493]++;
  this._configureAxisRange(false, "ortho2");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3495]++;
  this._configureAxisTitle("ortho2", "");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3499]++;
  options.secondAxisIndependentScale = true;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3500]++;
  options.secondAxisOwnColors = false;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3501]++;
  options.secondAxisColor = options.colors.map((function (color) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3502]++;
  return pv.color(color).brighter(0.5);
}));
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3507]++;
  def.type("pentaho.ccc.NormalizeBarChart", pentaho.ccc.BarChart).add({_configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3511]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3513]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3515]++;
  var axisOrient = pvc.visual.CartesianAxis.getOrientation("ortho", options.orientation);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3517]++;
  options.extensionPoints[(axisOrient + "AxisScale_tickFormatter")] = (function (v) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3518]++;
  return (v + "%");
});
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3523]++;
  def.type("pentaho.ccc.WaterfallChart", pentaho.ccc.CategoricalContinuousChart);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3525]++;
  def.type("pentaho.ccc.LineChart", pentaho.ccc.CategoricalContinuousChart).add({_drillAxesIds: ["row"], _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3531]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3532]++;
  var extPoints = options.extensionPoints;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3533]++;
  var shape = options.shape;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3534]++;
  if ((shape && (shape === "none"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3535]++;
    options.showDots = false;
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3537]++;
    options.showDots = true;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3538]++;
    options.extensionPoints.dot_shape = shape;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3541]++;
  this.base();
}), _configureLegend: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3546]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3548]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3549]++;
  var extPoints = options.extensionPoints;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3551]++;
  var dotSize = extPoints.dot_shapeSize;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3552]++;
  if ((dotSize != null)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3553]++;
    var dotRadius = Math.sqrt(dotSize);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3554]++;
    options.legendMarkerSize = Math.max(15, (2 * (dotRadius + 3)));
  }
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3559]++;
  def.type("pentaho.ccc.StackedAreaChart", pentaho.ccc.CategoricalContinuousChart).add({_drillAxesIds: ["row"]});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3565]++;
  def.type("pentaho.ccc.BoxplotChart", pentaho.ccc.CategoricalContinuousChart).add({_readData: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3570]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3575]++;
  def.set(this.options.dataOptions, "categoriesCount", this.axes.row.gemsByRole.rows.length);
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3581]++;
  def.type("pentaho.ccc.HeatGridChart", pentaho.ccc.CartesianChart).add({_configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3585]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3590]++;
  var nullColor = (this._vizOptions.colorRange && this._vizOptions.colorRange[0]);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3591]++;
  if (nullColor) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3592]++;
    this.options.nullColor = nullColor;
  }
}), _prepareLayout: (function (options) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3598]++;
  this.base(options);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3600]++;
  var measureCount = this.axes.measure.depth, catsDepth = this.axes.row.depth, sersDepth = this.axes.column.depth, catsBreadth = Math.max(1, (this._dataTable.getNumberOfRows() - 1)), sersBreadth = (this._dataTable.getNumberOfColumns() - catsDepth);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3606]++;
  if ((measureCount > 0)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3607]++;
    sersBreadth /= measureCount;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3610]++;
  var width = options.width, height = options.height, currRatio = (width / height), xyChartRatio = (catsBreadth / sersBreadth);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3616]++;
  var MAX_AXIS_SIZE = 300, MIN_LEVEL_HEIGHT = 70, MAX_LEVEL_HEIGHT = 200, MAX_AXIS_RATIO = 0.34999999999999998;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3621]++;
  var minXAxisSize = Math.min(MAX_AXIS_SIZE, (catsDepth * MIN_LEVEL_HEIGHT)), minYAxisSize = Math.min(MAX_AXIS_SIZE, (sersDepth * MIN_LEVEL_HEIGHT)), maxXAxisSize = Math.min(MAX_AXIS_SIZE, (catsDepth * MAX_LEVEL_HEIGHT), (height * MAX_AXIS_RATIO)), maxYAxisSize = Math.min(MAX_AXIS_SIZE, (sersDepth * MAX_LEVEL_HEIGHT), (width * MAX_AXIS_RATIO));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3626]++;
  var xAxisSize, yAxisSize;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3628]++;
  if ((xyChartRatio > currRatio)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3629]++;
    var extraHeight = (height - (width / xyChartRatio));
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3631]++;
    yAxisSize = minYAxisSize;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3633]++;
    xAxisSize = Math.min(extraHeight, maxXAxisSize);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3634]++;
    xAxisSize = Math.max(xAxisSize, minXAxisSize);
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3635]++;
    if ((xyChartRatio < currRatio)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3636]++;
      var extraWidth = (width - (height * xyChartRatio));
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3638]++;
      xAxisSize = minXAxisSize;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3640]++;
      yAxisSize = Math.min(extraWidth, maxYAxisSize);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3641]++;
      yAxisSize = Math.max(yAxisSize, minYAxisSize);
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3645]++;
  options.orthoAxisSize = undefined;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3646]++;
  options.baseAxisSize = undefined;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3647]++;
  options.xAxisSize = xAxisSize;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3648]++;
  options.yAxisSize = yAxisSize;
}), _doesSharedSeriesSelection: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3661]++;
  return false;
}), _processSelection: (function (selectedDatums) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3665]++;
  if (selectedDatums.length) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3666]++;
    var data = this._chart.data;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3668]++;
    var atomsByDim = {};
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3673]++;
    var colDimNames = this.axes.column.getSelectionGems().select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3674]++;
  return gem.cccDimName;
})).array();
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3677]++;
    var rowDimNames = this.axes.row.getSelectionGems().select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3678]++;
  return gem.cccDimName;
})).array();
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3681]++;
    var nonAdditive = ((selectedDatums.length === 1) && selectedDatums[0].isSelected);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3683]++;
    var whereSpec;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3685]++;
    if ((! nonAdditive)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3687]++;
      var selectDatumsById = def.query(selectedDatums).union(data.selectedDatums()).uniqueIndex((function (datum) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3689]++;
  return datum.id;
}));
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3691]++;
      var rowGrouping = pvc.data.GroupingSpec.parse(rowDimNames, data.type);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3692]++;
      var rowGroupedData = data.groupBy(rowGrouping, {visible: true, where: (function (datum) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3694]++;
  return def.hasOwn(selectDatumsById, datum.id);
}), whereKey: null});
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3698]++;
      var datumFilters = rowGroupedData.leafs().select((function (leafData) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3702]++;
  return def.copyProps(leafData.atoms, rowDimNames);
}));
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3705]++;
      if (colDimNames.length) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3708]++;
        var colGrouping = pvc.data.GroupingSpec.parse(colDimNames, data.type);
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3710]++;
        var colGroupedData = data.groupBy(colGrouping, {visible: true, where: (function (datum) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3712]++;
  return def.hasOwn(selectDatumsById, datum.id);
}), whereKey: null});
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3716]++;
        datumFilters = datumFilters.selectMany((function (rowDatumFilter) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3718]++;
  return colGroupedData.leafs().select((function (leafData) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3723]++;
  return def.copyProps(Object.create(rowDatumFilter), leafData.atoms, colDimNames);
}));
}));
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3728]++;
      whereSpec = datumFilters.array();
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3730]++;
      selectedDatums = data.datums(whereSpec, {visible: true}).array();
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3740]++;
      var singleDatum = selectedDatums[0];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3741]++;
      whereSpec = [def.query(colDimNames).object({value: (function (cccDimName) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3745]++;
  return singleDatum.atoms[cccDimName];
})}), def.query(rowDimNames).object({value: (function (cccDimName) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3753]++;
  return singleDatum.atoms[cccDimName];
})})];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3757]++;
      selectedDatums = data.datums(whereSpec, {visible: true, selected: true}).array();
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3763]++;
  function addDatum(datum) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3764]++;
    var atoms = datum.atoms;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3766]++;
    colDimNames.forEach(addDim);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3767]++;
    rowDimNames.forEach(addDim);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3769]++;
    function addDim(dimName) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3770]++;
      var dimAtomsById = (atomsByDim[dimName] || (atomsByDim[dimName] = {}));
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3771]++;
      var atom = atoms[dimName];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3772]++;
      if ((! def.hasOwn(dimAtomsById, atom.id))) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3773]++;
        dimAtomsById[atom.id] = atom;
      }
}
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3778]++;
  function buildWhereSpec() {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3779]++;
    var datumFilter = {};
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3780]++;
    var whereSpec = [datumFilter];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3782]++;
    def.eachOwn(atomsByDim, addDim);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3784]++;
    function addDim(dimAtomsById, dimName) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3786]++;
      datumFilter[dimName] = def.own(dimAtomsById);
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3789]++;
    return whereSpec;
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3792]++;
  return selectedDatums;
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3796]++;
  def.type("pentaho.ccc.MetricDotChart", pentaho.ccc.CartesianChart).add({_noRoleInTooltipMeasureRoles: {"x": true, "y": true}, _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3804]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3806]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3811]++;
  var nullColor = (this._vizOptions.colorRange && this._vizOptions.colorRange[0]);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3812]++;
  if (nullColor) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3813]++;
    options.nullColor = nullColor;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3816]++;
  this._configureAxisRange(true, "base");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3817]++;
  this._configureAxisRange(false, "ortho");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3820]++;
  var axisOffset;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3821]++;
  if (this.axes.measure.boundRoles.size) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3823]++;
    axisOffset = ((1.1000000000000001 * options.dotSizeRatio) / 2);
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3825]++;
    axisOffset = 0;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3828]++;
  options.xAxisOffset = (options.yAxisOffset = axisOffset);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3838]++;
  if (this.axes.measure.boundRoles.color) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3840]++;
    options.dimensionGroups.color = {valueType: Number};
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3844]++;
    options.visualRoles.color = "color";
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3846]++;
    if (this.axes.column.boundRoles.color) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3847]++;
      options.visualRoles.color = this.axes.column.gemsByRole.color.map((function (gem, index) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3850]++;
  return pvc.data.DimensionType.dimensionGroupLevelName("color", index);
})).join(", ");
    }
  }
}), _showLegend: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3860]++;
  if ((this.options.legend && this.axes.column.boundRoles.color)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3862]++;
    return (this._colGroups.length > 1);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3865]++;
  return this.options.legend;
}), _getOrthoAxisTitle: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3869]++;
  return this._getMeasureRoleTitle("y");
}), _getBaseAxisTitle: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3873]++;
  return this._getMeasureRoleTitle("x");
}), _configureAxesDisplayUnits: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3878]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3880]++;
  this._configureAxisDisplayUnits(true, "base", true);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3881]++;
  this._configureAxisDisplayUnits(false, "ortho", true);
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3886]++;
  def.type("pentaho.ccc.PieChart", pentaho.ccc.Chart).add({_noPercentInTootltipForPercentGems: true, _drillAxesIds: ["row", "column"], _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3896]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3899]++;
  if (this.options.showValues) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3900]++;
    this._configureValuesMask();
  }
}), _showLegend: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3905]++;
  return (this.options.legend && (this.axes.row.depth > 0));
}), _readUserOptions: (function (options, vizOptions) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3909]++;
  this.base(options, vizOptions);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3911]++;
  options.valuesLabelFont = defaultFont(null, readFontSize(vizOptions, "label"));
}), _configureMultiChart: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3915]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3917]++;
  this.options.legendSizeMax = "50%";
}), _configureValuesMask: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3925]++;
  var colAxis = this.axes.column;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3926]++;
  var meaDiscrimName = colAxis.measureDiscrimName;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3927]++;
  if (meaDiscrimName) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3928]++;
    var gemsMap = this.gemsMap;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3930]++;
    this.options.pie = {scenes: {category: {sliceLabelMask: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3934]++;
  var meaAtom = this.atoms[meaDiscrimName];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3935]++;
  var meaGemId, meaGem;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3936]++;
  if ((meaAtom && (meaGemId = meaAtom.value) && (meaGem = gemsMap[meaGemId]) && (meaGem.measureType === "PCTOF"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3937]++;
    return "{value}";
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3940]++;
  return "{value} ({value.percent})";
})}}};
  }
}), _selectionExcludesMultiGems: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3950]++;
  return false;
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3954]++;
  def.type("pentaho.ccc.BulletChart", pentaho.ccc.Chart).add({_configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3959]++;
  this.base();
}), _prepareLayout: (function (options) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3982]++;
  this.base(options);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3984]++;
  var vizOptions = this._vizOptions;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3986]++;
  var isVertical = (options.orientation === "vertical");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3987]++;
  if ((this._resultset.length > 20)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3988]++;
    options.bulletSize = 10;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3989]++;
    options.bulletSpacing = (isVertical? 60: 20);
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3990]++;
    if ((this._resultset.length > 10)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3991]++;
      options.bulletSize = 15;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3992]++;
      options.bulletSpacing = (isVertical? 80: 30);
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3994]++;
      options.bulletSize = 20;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3995]++;
      options.bulletSpacing = (isVertical? 120: 50);
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3998]++;
  var totalSpace = ((2 + options.bulletSize + options.bulletSpacing) * this._resultset.length);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4002]++;
  if (isVertical) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4003]++;
    if ((totalSpace > options.width)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4004]++;
      vizOptions.controller.domNode.style.overflowX = "auto";
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4005]++;
      vizOptions.controller.domNode.style.overflowY = "hidden";
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4007]++;
      options.width = totalSpace;
    }
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4010]++;
    if ((totalSpace > options.height)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4011]++;
      vizOptions.controller.domNode.style.overflowY = "auto";
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4012]++;
      vizOptions.controller.domNode.style.overflowX = "hidden";
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4014]++;
      options.height = totalSpace;
    }
  }
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4029]++;
  var oldCccChart = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4030]++;
  oldCccChart._readDataBullet = (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4031]++;
  var dataTable = this._dataTable, rowCount = dataTable.getNumberOfRows(), measureCols = this._otherDtColIndexes, seriesCount = this._otherDtColIndexes.length, vizOptions = this._vizOptions;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4037]++;
  this.options.seriesInRows = true;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4039]++;
  this._addCdaMetadata("Category", "Category", "STRING");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4040]++;
  this._addCdaMetadata("Series", "Series", "STRING");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4041]++;
  this._addCdaMetadata("Value", "Value", "NUMERIC");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4042]++;
  this._addCdaMetadata("Marker", "Marker", "NUMERIC");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4044]++;
  if (vizOptions.bulletRanges) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4045]++;
    for (var i = 0, R = vizOptions.bulletRanges.length; (i < R); (i++)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4046]++;
      this._addCdaMetadata(("Range" + i), ("Range " + i), "NUMERIC");
}
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4050]++;
  var measuresCount = this.axes.measure.depth;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4053]++;
  for (var tr = 0; (tr < rowCount); (tr++)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4055]++;
    var category = this._aggregateRowAxisForTableRow(tr);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4057]++;
    for (var s = 0; (s < seriesCount); (s += measuresCount)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4064]++;
      for (var m = 0; (m < measuresCount); (m += 2)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4065]++;
        var valueColIndex = (s + m), markerColIndex = (valueColIndex + 1), tc = measureCols[valueColIndex], dtColParts = dataTable.getColumnId(tc).split("~");
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4070]++;
        dtColParts.pop();
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4072]++;
        var row = [category, dtColParts.join("~"), this._getTableValue(tr, tc), (((m + 1) < measuresCount)? this._getTableValue(tr, measureCols[markerColIndex]): vizOptions.bulletMarkers[0])];
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4085]++;
        var bulletRanges = vizOptions.bulletRanges;
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4086]++;
        if (bulletRanges) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4087]++;
          bulletRanges.forEach((function (rangeValue) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4088]++;
  row.push(rangeValue);
}));
        }
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4092]++;
        this._resultset.push(row);
}
}
}
});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4098]++;
  oldCccChart._aggregateRowAxisForTableRow = (function (tr) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4100]++;
  var values = this._rowNormalDtColIndexes.map((function (tc) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4101]++;
  return this._getTableValue(tr, tc);
}), this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4104]++;
  return values.join("~");
});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4111]++;
  var _skipVizOptions = pv.dict(["cccClass", "rolesToCccDimensionsMap", "crosstabMode", "measuresInColumns", "extensionPoints", "dimensionGroups", "readers", "dataOptions", "action", "autoRange", "backgroundColor", "backgroundColorEnd", "backgroundFill", "chartType", "controller", "customChartType", "displayUnits", "maxChartsPerRow", "labelSize", "labelStyle", "labelFontFamily", "labelColor", "legendBackgroundColor", "legendColor", "legendFontFamily", "legendStyle", "legendSize", "lineShape", "maxChartsPerRow", "maxValues", "metrics", "palette", "selections"], (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4152]++;
  return true;
}));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4156]++;
  function writeCccColumnDataType(colType) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4157]++;
    switch (colType) {
    case "string":
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4158]++;
      return "STRING";
    case "number":
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4159]++;
      return "NUMERIC";
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4162]++;
    throw new Error("Unsupported data type");
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4167]++;
  function splitColGroupAndMeasure(colGroupAndMeasure) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4168]++;
    var sepIndex = colGroupAndMeasure.lastIndexOf("~");
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4172]++;
    if ((sepIndex < 0)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4173]++;
      return ["", colGroupAndMeasure];
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4176]++;
    return [colGroupAndMeasure.substring(0, sepIndex), colGroupAndMeasure.substring((sepIndex + 1))];
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4184]++;
  function defaultFont(font, defaultSize) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4185]++;
    if ((! font)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4186]++;
      return ((defaultSize || 10) + "px sans-serif");
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4189]++;
    return font.replace(/\bdefault\s*$/i, "sans-serif");
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4194]++;
  function readFont(vizOptions, prefix) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4195]++;
    var size = vizOptions[(prefix + "Size")];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4197]++;
    if (size) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4198]++;
      var style = vizOptions[(prefix + "Style")];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4199]++;
      if (((style == null) || (style == "PLAIN"))) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4200]++;
        style = "";
      }
      else {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4202]++;
        style += " ";
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4205]++;
      return (style + size + "px " + vizOptions[(prefix + "FontFamily")]);
    }
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4209]++;
  function readFontSize(vizOptions, prefix) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4210]++;
    return (+ vizOptions[(prefix + "Size")]);
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4213]++;
  function readFontFamily(vizOptions, prefix) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4214]++;
    return vizOptions[(prefix + "FontFamily")];
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4219]++;
  function getColumnRoles(dataTable, tc) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4220]++;
    var dataReq = dataTable.getColumnProperty(tc, "dataReq");
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4221]++;
    if (dataReq) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4223]++;
      if ((dataReq instanceof Array)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4224]++;
        return dataReq.map((function (item) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4225]++;
  return (item.id || "undefined");
}));
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4229]++;
      return [(dataReq.id || "undefined")];
    }
}
}));
