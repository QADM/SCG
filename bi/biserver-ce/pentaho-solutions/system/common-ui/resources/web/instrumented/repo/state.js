/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['repo/state.js']) {
  _$jscoverage['repo/state.js'] = [];
  _$jscoverage['repo/state.js'][2] = 0;
  _$jscoverage['repo/state.js'][4] = 0;
  _$jscoverage['repo/state.js'][6] = 0;
  _$jscoverage['repo/state.js'][8] = 0;
  _$jscoverage['repo/state.js'][10] = 0;
  _$jscoverage['repo/state.js'][12] = 0;
  _$jscoverage['repo/state.js'][14] = 0;
  _$jscoverage['repo/state.js'][16] = 0;
  _$jscoverage['repo/state.js'][18] = 0;
  _$jscoverage['repo/state.js'][19] = 0;
  _$jscoverage['repo/state.js'][20] = 0;
  _$jscoverage['repo/state.js'][22] = 0;
  _$jscoverage['repo/state.js'][25] = 0;
  _$jscoverage['repo/state.js'][27] = 0;
  _$jscoverage['repo/state.js'][29] = 0;
  _$jscoverage['repo/state.js'][31] = 0;
  _$jscoverage['repo/state.js'][32] = 0;
  _$jscoverage['repo/state.js'][33] = 0;
  _$jscoverage['repo/state.js'][35] = 0;
  _$jscoverage['repo/state.js'][38] = 0;
  _$jscoverage['repo/state.js'][39] = 0;
  _$jscoverage['repo/state.js'][40] = 0;
  _$jscoverage['repo/state.js'][41] = 0;
  _$jscoverage['repo/state.js'][42] = 0;
  _$jscoverage['repo/state.js'][43] = 0;
  _$jscoverage['repo/state.js'][45] = 0;
  _$jscoverage['repo/state.js'][46] = 0;
  _$jscoverage['repo/state.js'][47] = 0;
  _$jscoverage['repo/state.js'][48] = 0;
  _$jscoverage['repo/state.js'][50] = 0;
  _$jscoverage['repo/state.js'][51] = 0;
  _$jscoverage['repo/state.js'][53] = 0;
  _$jscoverage['repo/state.js'][56] = 0;
  _$jscoverage['repo/state.js'][59] = 0;
  _$jscoverage['repo/state.js'][60] = 0;
  _$jscoverage['repo/state.js'][61] = 0;
  _$jscoverage['repo/state.js'][62] = 0;
  _$jscoverage['repo/state.js'][63] = 0;
  _$jscoverage['repo/state.js'][66] = 0;
  _$jscoverage['repo/state.js'][69] = 0;
  _$jscoverage['repo/state.js'][71] = 0;
  _$jscoverage['repo/state.js'][73] = 0;
  _$jscoverage['repo/state.js'][74] = 0;
  _$jscoverage['repo/state.js'][76] = 0;
  _$jscoverage['repo/state.js'][77] = 0;
  _$jscoverage['repo/state.js'][78] = 0;
  _$jscoverage['repo/state.js'][80] = 0;
  _$jscoverage['repo/state.js'][82] = 0;
  _$jscoverage['repo/state.js'][85] = 0;
  _$jscoverage['repo/state.js'][86] = 0;
  _$jscoverage['repo/state.js'][88] = 0;
  _$jscoverage['repo/state.js'][89] = 0;
  _$jscoverage['repo/state.js'][93] = 0;
  _$jscoverage['repo/state.js'][94] = 0;
  _$jscoverage['repo/state.js'][96] = 0;
  _$jscoverage['repo/state.js'][98] = 0;
  _$jscoverage['repo/state.js'][99] = 0;
  _$jscoverage['repo/state.js'][100] = 0;
  _$jscoverage['repo/state.js'][103] = 0;
  _$jscoverage['repo/state.js'][104] = 0;
  _$jscoverage['repo/state.js'][105] = 0;
  _$jscoverage['repo/state.js'][108] = 0;
  _$jscoverage['repo/state.js'][109] = 0;
  _$jscoverage['repo/state.js'][110] = 0;
  _$jscoverage['repo/state.js'][113] = 0;
  _$jscoverage['repo/state.js'][117] = 0;
  _$jscoverage['repo/state.js'][118] = 0;
  _$jscoverage['repo/state.js'][119] = 0;
  _$jscoverage['repo/state.js'][121] = 0;
  _$jscoverage['repo/state.js'][122] = 0;
  _$jscoverage['repo/state.js'][123] = 0;
  _$jscoverage['repo/state.js'][124] = 0;
  _$jscoverage['repo/state.js'][125] = 0;
  _$jscoverage['repo/state.js'][127] = 0;
  _$jscoverage['repo/state.js'][128] = 0;
  _$jscoverage['repo/state.js'][129] = 0;
  _$jscoverage['repo/state.js'][130] = 0;
  _$jscoverage['repo/state.js'][131] = 0;
  _$jscoverage['repo/state.js'][135] = 0;
  _$jscoverage['repo/state.js'][136] = 0;
  _$jscoverage['repo/state.js'][139] = 0;
  _$jscoverage['repo/state.js'][141] = 0;
  _$jscoverage['repo/state.js'][142] = 0;
  _$jscoverage['repo/state.js'][144] = 0;
  _$jscoverage['repo/state.js'][145] = 0;
  _$jscoverage['repo/state.js'][148] = 0;
  _$jscoverage['repo/state.js'][150] = 0;
  _$jscoverage['repo/state.js'][151] = 0;
  _$jscoverage['repo/state.js'][153] = 0;
  _$jscoverage['repo/state.js'][155] = 0;
  _$jscoverage['repo/state.js'][156] = 0;
  _$jscoverage['repo/state.js'][159] = 0;
  _$jscoverage['repo/state.js'][161] = 0;
  _$jscoverage['repo/state.js'][164] = 0;
  _$jscoverage['repo/state.js'][170] = 0;
  _$jscoverage['repo/state.js'][171] = 0;
  _$jscoverage['repo/state.js'][173] = 0;
  _$jscoverage['repo/state.js'][175] = 0;
  _$jscoverage['repo/state.js'][177] = 0;
  _$jscoverage['repo/state.js'][178] = 0;
  _$jscoverage['repo/state.js'][179] = 0;
  _$jscoverage['repo/state.js'][183] = 0;
  _$jscoverage['repo/state.js'][187] = 0;
  _$jscoverage['repo/state.js'][188] = 0;
  _$jscoverage['repo/state.js'][189] = 0;
  _$jscoverage['repo/state.js'][196] = 0;
  _$jscoverage['repo/state.js'][198] = 0;
  _$jscoverage['repo/state.js'][202] = 0;
  _$jscoverage['repo/state.js'][203] = 0;
  _$jscoverage['repo/state.js'][204] = 0;
  _$jscoverage['repo/state.js'][205] = 0;
  _$jscoverage['repo/state.js'][208] = 0;
  _$jscoverage['repo/state.js'][210] = 0;
  _$jscoverage['repo/state.js'][215] = 0;
  _$jscoverage['repo/state.js'][218] = 0;
  _$jscoverage['repo/state.js'][221] = 0;
  _$jscoverage['repo/state.js'][222] = 0;
  _$jscoverage['repo/state.js'][228] = 0;
  _$jscoverage['repo/state.js'][230] = 0;
  _$jscoverage['repo/state.js'][235] = 0;
  _$jscoverage['repo/state.js'][236] = 0;
  _$jscoverage['repo/state.js'][243] = 0;
  _$jscoverage['repo/state.js'][245] = 0;
  _$jscoverage['repo/state.js'][252] = 0;
  _$jscoverage['repo/state.js'][254] = 0;
  _$jscoverage['repo/state.js'][258] = 0;
}
_$jscoverage['repo/state.js'].source = ["","<span class=\"k\">function</span> PentahoRepositoryClient<span class=\"k\">()</span> <span class=\"k\">{</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>SERVICE_URL <span class=\"k\">=</span> CONTEXT_PATH <span class=\"k\">+</span> <span class=\"s\">'content/ws-run/RepositoryClientService'</span><span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>fileType <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>getStateAsXmlCallback <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>getStateAsJsonCallback <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>"," ","    <span class=\"k\">this</span><span class=\"k\">.</span>shouldLoad <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"c\">// see if we have any parameters on the URL that tell us to load state from the server</span>","    <span class=\"k\">var</span> url <span class=\"k\">=</span> document<span class=\"k\">.</span>location<span class=\"k\">.</span>href<span class=\"k\">;</span>","","    <span class=\"k\">if</span><span class=\"k\">(</span> url<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> <span class=\"s\">'?'</span> <span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// we have parameters</span>","        <span class=\"k\">var</span> command <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>findUrlParam<span class=\"k\">(</span> <span class=\"s\">'command'</span><span class=\"k\">,</span> url <span class=\"k\">);</span>","        <span class=\"k\">var</span> doLoad <span class=\"k\">=</span> command <span class=\"k\">==</span> <span class=\"s\">'edit'</span> <span class=\"k\">||</span> command<span class=\"k\">==</span><span class=\"s\">'load'</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> doLoad<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">this</span><span class=\"k\">.</span>shouldEdit <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"c\">// see if we have any parameters on the URL that tell us to load state from the server</span>","    <span class=\"k\">var</span> url <span class=\"k\">=</span> document<span class=\"k\">.</span>location<span class=\"k\">.</span>href<span class=\"k\">;</span>","","    <span class=\"k\">if</span><span class=\"k\">(</span> url<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> <span class=\"s\">'?'</span> <span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// we have parameters</span>","        <span class=\"k\">var</span> command <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>findUrlParam<span class=\"k\">(</span> <span class=\"s\">'command'</span><span class=\"k\">,</span> url <span class=\"k\">);</span>","        <span class=\"k\">var</span> doLoad <span class=\"k\">=</span> command <span class=\"k\">==</span> <span class=\"s\">'edit'</span> <span class=\"k\">||</span> command<span class=\"k\">==</span><span class=\"s\">'new'</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> doLoad<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">this</span><span class=\"k\">.</span>findUrlParam <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> name<span class=\"k\">,</span> url <span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> pos <span class=\"k\">=</span> url<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> <span class=\"s\">'?'</span> <span class=\"k\">);</span>","      <span class=\"k\">var</span> params <span class=\"k\">=</span> url<span class=\"k\">.</span>substr<span class=\"k\">(</span> pos <span class=\"k\">);</span>","      pos <span class=\"k\">=</span> params<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> <span class=\"s\">'?'</span><span class=\"k\">+</span>name<span class=\"k\">+</span><span class=\"s\">'='</span> <span class=\"k\">);</span>","      <span class=\"k\">if</span><span class=\"k\">(</span> pos <span class=\"k\">==</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        pos <span class=\"k\">=</span> params<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> <span class=\"s\">'&amp;'</span><span class=\"k\">+</span>name<span class=\"k\">+</span><span class=\"s\">'='</span> <span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span><span class=\"k\">(</span> pos <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> tmp <span class=\"k\">=</span> params<span class=\"k\">.</span>substr<span class=\"k\">(</span> pos <span class=\"k\">+</span> name<span class=\"k\">.</span>length <span class=\"k\">+</span> <span class=\"s\">2</span> <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> tmp<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> <span class=\"s\">'&amp;'</span> <span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","          tmp <span class=\"k\">=</span> tmp<span class=\"k\">.</span>substr<span class=\"k\">(</span> <span class=\"s\">0</span><span class=\"k\">,</span> tmp<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> <span class=\"s\">'&amp;'</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","        tmp <span class=\"k\">=</span> unescape<span class=\"k\">(</span> tmp <span class=\"k\">);</span>","        <span class=\"k\">return</span> tmp<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","<span class=\"k\">this</span><span class=\"k\">.</span>loadStateStringFromUrl <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","    <span class=\"c\">// TODO - handle reposvc URLs</span>","    <span class=\"k\">var</span> url <span class=\"k\">=</span> document<span class=\"k\">.</span>location<span class=\"k\">.</span>href<span class=\"k\">;</span>","    <span class=\"k\">var</span> solution <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>findUrlParam<span class=\"k\">(</span> <span class=\"s\">'solution'</span><span class=\"k\">,</span> url <span class=\"k\">);</span>","    <span class=\"k\">var</span> path <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>findUrlParam<span class=\"k\">(</span> <span class=\"s\">'path'</span><span class=\"k\">,</span> url <span class=\"k\">);</span>","    <span class=\"k\">var</span> filename <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>findUrlParam<span class=\"k\">(</span> <span class=\"s\">'filename'</span><span class=\"k\">,</span> url <span class=\"k\">);</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>loadStateString<span class=\"k\">(</span> solution<span class=\"k\">,</span> path<span class=\"k\">,</span> filename <span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"k\">this</span><span class=\"k\">.</span>loadStateString <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> solution<span class=\"k\">,</span> path<span class=\"k\">,</span> filename <span class=\"k\">)</span> <span class=\"k\">{</span>","","    <span class=\"c\">// handle '/'s robustly</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> path<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> <span class=\"s\">'/'</span> <span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// trim a leading '/'</span>","        path <span class=\"k\">=</span> path<span class=\"k\">.</span>substr<span class=\"k\">(</span> <span class=\"s\">1</span> <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> path<span class=\"k\">[</span>path<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"s\">'/'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        path <span class=\"k\">=</span> path<span class=\"k\">.</span>substr<span class=\"k\">(</span> <span class=\"s\">0</span><span class=\"k\">,</span> path<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">2</span> <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> path <span class=\"k\">!=</span> <span class=\"s\">''</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        query <span class=\"k\">=</span> <span class=\"s\">'filepath='</span><span class=\"k\">+</span>solution<span class=\"k\">+</span><span class=\"s\">'/'</span><span class=\"k\">+</span>path<span class=\"k\">+</span><span class=\"s\">'/'</span><span class=\"k\">+</span>filename<span class=\"k\">;</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        query <span class=\"k\">=</span> <span class=\"s\">'filepath='</span><span class=\"k\">+</span>solution<span class=\"k\">+</span><span class=\"s\">'/'</span><span class=\"k\">+</span>filename<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">var</span> resultStr <span class=\"k\">=</span> pentahoGet<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>SERVICE_URL<span class=\"k\">+</span><span class=\"s\">'/loadState'</span><span class=\"k\">,</span> query<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"s\">'text/text'</span> <span class=\"k\">);</span>","    ","    <span class=\"c\">// pull the state, status, and message out</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>resultStr <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">var</span> stateObject <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getResultMessage<span class=\"k\">(</span>resultStr<span class=\"k\">);</span>","    <span class=\"k\">return</span> stateObject<span class=\"k\">;</span>","    ","<span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>getResultMessage <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> str <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> xml  <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parseXML<span class=\"k\">(</span>str<span class=\"k\">);</span>","","        <span class=\"k\">var</span> stateObject <span class=\"k\">=</span> <span class=\"k\">new</span> StateObject<span class=\"k\">();</span>","","        <span class=\"k\">var</span> nodeList <span class=\"k\">=</span> xml<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'state'</span><span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> nodeList<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> nodeList<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>firstChild <span class=\"k\">)</span> <span class=\"k\">{</span>","            stateObject<span class=\"k\">.</span>state <span class=\"k\">=</span> nodeList<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>firstChild<span class=\"k\">.</span>nodeValue<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        nodeList <span class=\"k\">=</span> xml<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'message'</span><span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> nodeList<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> nodeList<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>firstChild <span class=\"k\">)</span> <span class=\"k\">{</span>","            stateObject<span class=\"k\">.</span>message <span class=\"k\">=</span> nodeList<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>firstChild<span class=\"k\">.</span>nodeValue<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        nodeList <span class=\"k\">=</span> xml<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'status'</span><span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> nodeList<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> nodeList<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>firstChild <span class=\"k\">)</span> <span class=\"k\">{</span>","            stateObject<span class=\"k\">.</span>status <span class=\"k\">=</span> nodeList<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>firstChild<span class=\"k\">.</span>nodeValue<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">return</span> stateObject<span class=\"k\">;</span>","","    <span class=\"k\">}</span>","","<span class=\"k\">this</span><span class=\"k\">.</span>parseXML <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>sText<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>sText <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">var</span> xmlDoc<span class=\"k\">;</span>","    <span class=\"k\">try</span> <span class=\"k\">{</span> <span class=\"c\">//Firefox, Mozilla, Opera, etc.</span>","        parser<span class=\"k\">=</span><span class=\"k\">new</span> DOMParser<span class=\"k\">();</span>","        xmlDoc<span class=\"k\">=</span>parser<span class=\"k\">.</span>parseFromString<span class=\"k\">(</span>sText<span class=\"k\">,</span><span class=\"s\">\"text/xml\"</span><span class=\"k\">);</span>","        <span class=\"k\">return</span> xmlDoc<span class=\"k\">;</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">try</span> <span class=\"k\">{</span> <span class=\"c\">//Internet Explorer</span>","            xmlDoc<span class=\"k\">=</span><span class=\"k\">new</span> ActiveXObject<span class=\"k\">(</span><span class=\"s\">\"Microsoft.XMLDOM\"</span><span class=\"k\">);</span>","            xmlDoc<span class=\"k\">.</span>async<span class=\"k\">=</span><span class=\"s\">\"false\"</span><span class=\"k\">;</span>","            xmlDoc<span class=\"k\">.</span>loadXML<span class=\"k\">(</span>sText<span class=\"k\">);</span>","            <span class=\"k\">return</span> xmlDoc<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    alert<span class=\"k\">(</span><span class=\"s\">'XML is invalid or no XML parser found'</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>saveState <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>myFilename<span class=\"k\">,</span> mySolution<span class=\"k\">,</span> myPath<span class=\"k\">,</span> myType<span class=\"k\">,</span> myOverwrite<span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> myFilename<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>fileType <span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> myFilename<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>fileType <span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"k\">(</span>myFilename<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">6</span> <span class=\"k\">))</span> <span class=\"k\">{</span>","            myFilename <span class=\"k\">=</span> myFilename<span class=\"k\">.</span>substr<span class=\"k\">(</span> <span class=\"s\">0</span><span class=\"k\">,</span> myFilename<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"k\">this</span><span class=\"k\">.</span>fileType<span class=\"k\">.</span>length <span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> isXml <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> stateStr <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","        ","        <span class=\"k\">if</span><span class=\"k\">(</span> pentahoRepositoryClient<span class=\"k\">.</span>getStateAsXmlCallback <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// get the state from the page</span>","            stateStr <span class=\"k\">=</span> pentahoRepositoryClient<span class=\"k\">.</span>getStateAsXmlCallback<span class=\"k\">();</span>","            isXml <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> pentahoRepositoryClient<span class=\"k\">.</span>getStateAsJsonCallback <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// get the state from the page</span>","            stateStr <span class=\"k\">=</span> pentahoRepositoryClient<span class=\"k\">.</span>getStateAsJsonCallback<span class=\"k\">();</span>","            isXml <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>stateStr <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// we don't have any state to save</span>","            alert<span class=\"k\">(</span><span class=\"s\">'Cannot save, no state was provided'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"s\">'filepath='</span> <span class=\"k\">+</span> encodeURIComponent<span class=\"k\">(</span> <span class=\"s\">'/'</span><span class=\"k\">+</span>mySolution<span class=\"k\">+(</span>myPath<span class=\"k\">?</span><span class=\"s\">'/'</span><span class=\"k\">:</span><span class=\"s\">''</span><span class=\"k\">)+</span>myPath<span class=\"k\">+</span><span class=\"s\">'/'</span><span class=\"k\">+</span>myFilename <span class=\"k\">)</span>","            <span class=\"k\">+</span> <span class=\"s\">'&amp;state='</span> <span class=\"k\">+</span> encodeURIComponent<span class=\"k\">(</span> stateStr <span class=\"k\">)</span>","            <span class=\"k\">+</span> <span class=\"s\">'&amp;type='</span> <span class=\"k\">+</span> encodeURIComponent<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>fileType <span class=\"k\">)</span>","            <span class=\"k\">+</span> <span class=\"s\">'&amp;replace='</span> <span class=\"k\">+</span> myOverwrite","            ","        <span class=\"c\">// TODO get this working with POST instead of GET</span>","        <span class=\"k\">var</span> result <span class=\"k\">=</span> pentahoGet<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>SERVICE_URL<span class=\"k\">+</span><span class=\"s\">'/'</span><span class=\"k\">+((</span>isXml<span class=\"k\">)?</span><span class=\"s\">'saveStateXml'</span><span class=\"k\">:</span><span class=\"s\">'saveStateString'</span><span class=\"k\">),</span> query<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"s\">'text/text'</span> <span class=\"k\">);</span>","        <span class=\"k\">var</span> stateObject <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getResultMessage<span class=\"k\">(</span>result<span class=\"k\">);</span>","        ","        alert<span class=\"k\">(</span>stateObject<span class=\"k\">.</span>message<span class=\"k\">);</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(</span> stateObject<span class=\"k\">.</span>status <span class=\"k\">==</span> <span class=\"s\">'SUCCESS'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        ","            <span class=\"k\">var</span> userConsole <span class=\"k\">=</span> <span class=\"k\">new</span> PentahoUserConsole<span class=\"k\">();</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span> userConsole<span class=\"k\">.</span>console_enabled <span class=\"k\">&amp;&amp;</span> window<span class=\"k\">.</span>parent<span class=\"k\">.</span>mantle_refreshRepository <span class=\"k\">)</span> <span class=\"k\">{</span>","                window<span class=\"k\">.</span>parent<span class=\"k\">.</span>mantle_refreshRepository<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">return</span> stateObject<span class=\"k\">;</span>","        ","    <span class=\"k\">}</span>","","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> gCtrlr <span class=\"k\">&amp;&amp;</span> gCtrlr<span class=\"k\">.</span>repositoryBrowserController<span class=\"k\">)</span> <span class=\"k\">{</span>","            gCtrlr<span class=\"k\">.</span>repositoryBrowserController<span class=\"k\">.</span>callbackObject <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{}</span>","","","<span class=\"k\">}</span>","","<span class=\"k\">function</span> saveState<span class=\"k\">(</span> myFilename<span class=\"k\">,</span> mySolution<span class=\"k\">,</span> myPath<span class=\"k\">,</span> myType<span class=\"k\">,</span> myOverwrite <span class=\"k\">)</span> <span class=\"k\">{</span>","","    pentahoRepository<span class=\"k\">.</span>saveState<span class=\"k\">(</span> myFilename<span class=\"k\">,</span> mySolution<span class=\"k\">,</span> myPath<span class=\"k\">,</span> myType<span class=\"k\">,</span> myOverwrite <span class=\"k\">);</span>","","<span class=\"k\">}</span>","","<span class=\"k\">function</span> StateObject<span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>status <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>state <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>message <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">var</span> pentahoRepositoryClient <span class=\"k\">=</span> <span class=\"k\">new</span> PentahoRepositoryClient<span class=\"k\">();</span>","","pentaho <span class=\"k\">=</span> <span class=\"k\">typeof</span> pentaho <span class=\"k\">==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> <span class=\"k\">{}</span> <span class=\"k\">:</span> pentaho<span class=\"k\">;</span>","","<span class=\"c\">/*</span>","<span class=\"c\">This is an API that lets clients get and set user settings</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>userSettings <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>userSettings<span class=\"k\">.</span>prototype<span class=\"k\">.</span>generateUniqueUrl <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>url<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"c\">// Prevent caching for IE</span>","  <span class=\"c\">// Remove once BISERVER-6216 is implemented</span>","  <span class=\"k\">var</span> time <span class=\"k\">=</span> <span class=\"k\">new</span> Date<span class=\"k\">().</span>getTime<span class=\"k\">();</span>","  <span class=\"k\">return</span> url <span class=\"k\">+</span> <span class=\"k\">(</span>url<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'?'</span><span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">?</span> <span class=\"s\">\"&amp;\"</span> <span class=\"k\">:</span> <span class=\"s\">\"?\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> time <span class=\"k\">+</span> <span class=\"s\">\"=\"</span> <span class=\"k\">+</span> time<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">  Returns an array of settings objects when passed a comma separated list of setting names</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>userSettings<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getSettings <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> names<span class=\"k\">,</span> callback<span class=\"k\">,</span> caller <span class=\"k\">)</span> <span class=\"k\">{</span>","","  dojo<span class=\"k\">.</span>xhrGet<span class=\"k\">(</span><span class=\"k\">{</span>","    url<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>generateUniqueUrl<span class=\"k\">(</span>CONTEXT_PATH <span class=\"k\">+</span> <span class=\"s\">'content/ws-run/UserSettingService/getUserSettingsJson'</span><span class=\"k\">),</span>","    content<span class=\"k\">:</span> <span class=\"k\">{</span>","        settingNames <span class=\"k\">:</span> names","    <span class=\"k\">}</span><span class=\"k\">,</span>","    load<span class=\"k\">:</span> dojo<span class=\"k\">.</span>hitch<span class=\"k\">(</span>caller<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span> callback<span class=\"k\">(</span>controller<span class=\"k\">.</span>getJsonFromXml<span class=\"k\">(</span>data<span class=\"k\">));</span> <span class=\"k\">}</span><span class=\"k\">),</span>","    error<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>alert<span class=\"k\">(</span>data<span class=\"k\">)</span><span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">  Sets a user setting.  </span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>userSettings<span class=\"k\">.</span>prototype<span class=\"k\">.</span>setSetting <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> name<span class=\"k\">,</span> value<span class=\"k\">,</span> callback<span class=\"k\">,</span> caller <span class=\"k\">)</span> <span class=\"k\">{</span>","","  dojo<span class=\"k\">.</span>xhrGet<span class=\"k\">(</span><span class=\"k\">{</span>","    url<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>generateUniqueUrl<span class=\"k\">(</span>CONTEXT_PATH <span class=\"k\">+</span> <span class=\"s\">'content/ws-run/UserSettingService/setUserSettingJson'</span><span class=\"k\">),</span>","    content<span class=\"k\">:</span> <span class=\"k\">{</span>","        settingName <span class=\"k\">:</span> name<span class=\"k\">,</span>","        settingValue <span class=\"k\">:</span> value","    <span class=\"k\">}</span><span class=\"k\">,</span>","    load<span class=\"k\">:</span> dojo<span class=\"k\">.</span>hitch<span class=\"k\">(</span>caller<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","      callback<span class=\"k\">(</span>controller<span class=\"k\">.</span>getJsonFromXml<span class=\"k\">(</span>data<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">),</span>","    error<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>alert<span class=\"k\">(</span>data<span class=\"k\">)</span><span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>userSettingsInstance <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>userSettings<span class=\"k\">();</span>"];
_$jscoverage['repo/state.js'][2]++;
function PentahoRepositoryClient() {
  _$jscoverage['repo/state.js'][4]++;
  this.SERVICE_URL = (CONTEXT_PATH + "content/ws-run/RepositoryClientService");
  _$jscoverage['repo/state.js'][6]++;
  this.fileType = null;
  _$jscoverage['repo/state.js'][8]++;
  this.getStateAsXmlCallback = null;
  _$jscoverage['repo/state.js'][10]++;
  this.getStateAsJsonCallback = null;
  _$jscoverage['repo/state.js'][12]++;
  this.shouldLoad = (function () {
  _$jscoverage['repo/state.js'][14]++;
  var url = document.location.href;
  _$jscoverage['repo/state.js'][16]++;
  if ((url.indexOf("?") != -1)) {
    _$jscoverage['repo/state.js'][18]++;
    var command = this.findUrlParam("command", url);
    _$jscoverage['repo/state.js'][19]++;
    var doLoad = ((command == "edit") || (command == "load"));
    _$jscoverage['repo/state.js'][20]++;
    return doLoad;
  }
  _$jscoverage['repo/state.js'][22]++;
  return false;
});
  _$jscoverage['repo/state.js'][25]++;
  this.shouldEdit = (function () {
  _$jscoverage['repo/state.js'][27]++;
  var url = document.location.href;
  _$jscoverage['repo/state.js'][29]++;
  if ((url.indexOf("?") != -1)) {
    _$jscoverage['repo/state.js'][31]++;
    var command = this.findUrlParam("command", url);
    _$jscoverage['repo/state.js'][32]++;
    var doLoad = ((command == "edit") || (command == "new"));
    _$jscoverage['repo/state.js'][33]++;
    return doLoad;
  }
  _$jscoverage['repo/state.js'][35]++;
  return false;
});
  _$jscoverage['repo/state.js'][38]++;
  this.findUrlParam = (function (name, url) {
  _$jscoverage['repo/state.js'][39]++;
  var pos = url.indexOf("?");
  _$jscoverage['repo/state.js'][40]++;
  var params = url.substr(pos);
  _$jscoverage['repo/state.js'][41]++;
  pos = params.indexOf(("?" + name + "="));
  _$jscoverage['repo/state.js'][42]++;
  if ((pos == -1)) {
    _$jscoverage['repo/state.js'][43]++;
    pos = params.indexOf(("&" + name + "="));
  }
  _$jscoverage['repo/state.js'][45]++;
  if ((pos != -1)) {
    _$jscoverage['repo/state.js'][46]++;
    var tmp = params.substr((pos + name.length + 2));
    _$jscoverage['repo/state.js'][47]++;
    if ((tmp.indexOf("&") != -1)) {
      _$jscoverage['repo/state.js'][48]++;
      tmp = tmp.substr(0, tmp.indexOf("&"));
    }
    _$jscoverage['repo/state.js'][50]++;
    tmp = unescape(tmp);
    _$jscoverage['repo/state.js'][51]++;
    return tmp;
  }
  _$jscoverage['repo/state.js'][53]++;
  return null;
});
  _$jscoverage['repo/state.js'][56]++;
  this.loadStateStringFromUrl = (function () {
  _$jscoverage['repo/state.js'][59]++;
  var url = document.location.href;
  _$jscoverage['repo/state.js'][60]++;
  var solution = this.findUrlParam("solution", url);
  _$jscoverage['repo/state.js'][61]++;
  var path = this.findUrlParam("path", url);
  _$jscoverage['repo/state.js'][62]++;
  var filename = this.findUrlParam("filename", url);
  _$jscoverage['repo/state.js'][63]++;
  return this.loadStateString(solution, path, filename);
});
  _$jscoverage['repo/state.js'][66]++;
  this.loadStateString = (function (solution, path, filename) {
  _$jscoverage['repo/state.js'][69]++;
  if ((path.indexOf("/") == 0)) {
    _$jscoverage['repo/state.js'][71]++;
    path = path.substr(1);
  }
  _$jscoverage['repo/state.js'][73]++;
  if ((path[(path.length - 1)] == "/")) {
    _$jscoverage['repo/state.js'][74]++;
    path = path.substr(0, (path.length - 2));
  }
  _$jscoverage['repo/state.js'][76]++;
  var query = "";
  _$jscoverage['repo/state.js'][77]++;
  if ((path != "")) {
    _$jscoverage['repo/state.js'][78]++;
    query = ("filepath=" + solution + "/" + path + "/" + filename);
  }
  else {
    _$jscoverage['repo/state.js'][80]++;
    query = ("filepath=" + solution + "/" + filename);
  }
  _$jscoverage['repo/state.js'][82]++;
  var resultStr = pentahoGet((this.SERVICE_URL + "/loadState"), query, null, "text/text");
  _$jscoverage['repo/state.js'][85]++;
  if ((! resultStr)) {
    _$jscoverage['repo/state.js'][86]++;
    return null;
  }
  _$jscoverage['repo/state.js'][88]++;
  var stateObject = this.getResultMessage(resultStr);
  _$jscoverage['repo/state.js'][89]++;
  return stateObject;
});
  _$jscoverage['repo/state.js'][93]++;
  this.getResultMessage = (function (str) {
  _$jscoverage['repo/state.js'][94]++;
  var xml = this.parseXML(str);
  _$jscoverage['repo/state.js'][96]++;
  var stateObject = new StateObject();
  _$jscoverage['repo/state.js'][98]++;
  var nodeList = xml.getElementsByTagName("state");
  _$jscoverage['repo/state.js'][99]++;
  if (((nodeList.length > 0) && nodeList[0].firstChild)) {
    _$jscoverage['repo/state.js'][100]++;
    stateObject.state = nodeList[0].firstChild.nodeValue;
  }
  _$jscoverage['repo/state.js'][103]++;
  nodeList = xml.getElementsByTagName("message");
  _$jscoverage['repo/state.js'][104]++;
  if (((nodeList.length > 0) && nodeList[0].firstChild)) {
    _$jscoverage['repo/state.js'][105]++;
    stateObject.message = nodeList[0].firstChild.nodeValue;
  }
  _$jscoverage['repo/state.js'][108]++;
  nodeList = xml.getElementsByTagName("status");
  _$jscoverage['repo/state.js'][109]++;
  if (((nodeList.length > 0) && nodeList[0].firstChild)) {
    _$jscoverage['repo/state.js'][110]++;
    stateObject.status = nodeList[0].firstChild.nodeValue;
  }
  _$jscoverage['repo/state.js'][113]++;
  return stateObject;
});
  _$jscoverage['repo/state.js'][117]++;
  this.parseXML = (function (sText) {
  _$jscoverage['repo/state.js'][118]++;
  if ((! sText)) {
    _$jscoverage['repo/state.js'][119]++;
    return null;
  }
  _$jscoverage['repo/state.js'][121]++;
  var xmlDoc;
  _$jscoverage['repo/state.js'][122]++;
  try {
    _$jscoverage['repo/state.js'][123]++;
    parser = new DOMParser();
    _$jscoverage['repo/state.js'][124]++;
    xmlDoc = parser.parseFromString(sText, "text/xml");
    _$jscoverage['repo/state.js'][125]++;
    return xmlDoc;
  }
  catch (e) {
    _$jscoverage['repo/state.js'][127]++;
    try {
      _$jscoverage['repo/state.js'][128]++;
      xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
      _$jscoverage['repo/state.js'][129]++;
      xmlDoc.async = "false";
      _$jscoverage['repo/state.js'][130]++;
      xmlDoc.loadXML(sText);
      _$jscoverage['repo/state.js'][131]++;
      return xmlDoc;
    }
    catch (e) {
    }
  }
  _$jscoverage['repo/state.js'][135]++;
  alert("XML is invalid or no XML parser found");
  _$jscoverage['repo/state.js'][136]++;
  return null;
});
  _$jscoverage['repo/state.js'][139]++;
  this.saveState = (function (myFilename, mySolution, myPath, myType, myOverwrite) {
  _$jscoverage['repo/state.js'][141]++;
  if (((myFilename.indexOf(this.fileType) != -1) && (myFilename.indexOf(this.fileType) == (myFilename.length - 6)))) {
    _$jscoverage['repo/state.js'][142]++;
    myFilename = myFilename.substr(0, (myFilename.length - this.fileType.length));
  }
  _$jscoverage['repo/state.js'][144]++;
  var isXml = false;
  _$jscoverage['repo/state.js'][145]++;
  var stateStr = null;
  _$jscoverage['repo/state.js'][148]++;
  if (pentahoRepositoryClient.getStateAsXmlCallback) {
    _$jscoverage['repo/state.js'][150]++;
    stateStr = pentahoRepositoryClient.getStateAsXmlCallback();
    _$jscoverage['repo/state.js'][151]++;
    isXml = true;
  }
  else {
    _$jscoverage['repo/state.js'][153]++;
    if (pentahoRepositoryClient.getStateAsJsonCallback) {
      _$jscoverage['repo/state.js'][155]++;
      stateStr = pentahoRepositoryClient.getStateAsJsonCallback();
      _$jscoverage['repo/state.js'][156]++;
      isXml = false;
    }
  }
  _$jscoverage['repo/state.js'][159]++;
  if ((! stateStr)) {
    _$jscoverage['repo/state.js'][161]++;
    alert("Cannot save, no state was provided");
  }
  _$jscoverage['repo/state.js'][164]++;
  var query = ("filepath=" + encodeURIComponent(("/" + mySolution + (myPath? "/": "") + myPath + "/" + myFilename)) + "&state=" + encodeURIComponent(stateStr) + "&type=" + encodeURIComponent(this.fileType) + "&replace=" + myOverwrite);
  _$jscoverage['repo/state.js'][170]++;
  var result = pentahoGet((this.SERVICE_URL + "/" + (isXml? "saveStateXml": "saveStateString")), query, null, "text/text");
  _$jscoverage['repo/state.js'][171]++;
  var stateObject = this.getResultMessage(result);
  _$jscoverage['repo/state.js'][173]++;
  alert(stateObject.message);
  _$jscoverage['repo/state.js'][175]++;
  if ((stateObject.status == "SUCCESS")) {
    _$jscoverage['repo/state.js'][177]++;
    var userConsole = new PentahoUserConsole();
    _$jscoverage['repo/state.js'][178]++;
    if ((userConsole.console_enabled && window.parent.mantle_refreshRepository)) {
      _$jscoverage['repo/state.js'][179]++;
      window.parent.mantle_refreshRepository();
    }
  }
  _$jscoverage['repo/state.js'][183]++;
  return stateObject;
});
  _$jscoverage['repo/state.js'][187]++;
  try {
    _$jscoverage['repo/state.js'][188]++;
    if ((gCtrlr && gCtrlr.repositoryBrowserController)) {
      _$jscoverage['repo/state.js'][189]++;
      gCtrlr.repositoryBrowserController.callbackObject = this;
    }
  }
  catch (e) {
  }
}
_$jscoverage['repo/state.js'][196]++;
function saveState(myFilename, mySolution, myPath, myType, myOverwrite) {
  _$jscoverage['repo/state.js'][198]++;
  pentahoRepository.saveState(myFilename, mySolution, myPath, myType, myOverwrite);
}
_$jscoverage['repo/state.js'][202]++;
function StateObject() {
  _$jscoverage['repo/state.js'][203]++;
  this.status = null;
  _$jscoverage['repo/state.js'][204]++;
  this.state = null;
  _$jscoverage['repo/state.js'][205]++;
  this.message = null;
}
_$jscoverage['repo/state.js'][208]++;
var pentahoRepositoryClient = new PentahoRepositoryClient();
_$jscoverage['repo/state.js'][210]++;
pentaho = (((typeof pentaho) == "undefined")? {}: pentaho);
_$jscoverage['repo/state.js'][215]++;
pentaho.userSettings = (function () {
});
_$jscoverage['repo/state.js'][218]++;
pentaho.userSettings.prototype.generateUniqueUrl = (function (url) {
  _$jscoverage['repo/state.js'][221]++;
  var time = new Date().getTime();
  _$jscoverage['repo/state.js'][222]++;
  return (url + ((url.indexOf("?") !== -1)? "&": "?") + time + "=" + time);
});
_$jscoverage['repo/state.js'][228]++;
pentaho.userSettings.prototype.getSettings = (function (names, callback, caller) {
  _$jscoverage['repo/state.js'][230]++;
  dojo.xhrGet({url: this.generateUniqueUrl((CONTEXT_PATH + "content/ws-run/UserSettingService/getUserSettingsJson")), content: {settingNames: names}, load: dojo.hitch(caller, (function (data) {
  _$jscoverage['repo/state.js'][235]++;
  callback(controller.getJsonFromXml(data));
})), error: (function (data) {
  _$jscoverage['repo/state.js'][236]++;
  alert(data);
})});
});
_$jscoverage['repo/state.js'][243]++;
pentaho.userSettings.prototype.setSetting = (function (name, value, callback, caller) {
  _$jscoverage['repo/state.js'][245]++;
  dojo.xhrGet({url: this.generateUniqueUrl((CONTEXT_PATH + "content/ws-run/UserSettingService/setUserSettingJson")), content: {settingName: name, settingValue: value}, load: dojo.hitch(caller, (function (data) {
  _$jscoverage['repo/state.js'][252]++;
  callback(controller.getJsonFromXml(data));
})), error: (function (data) {
  _$jscoverage['repo/state.js'][254]++;
  alert(data);
})});
});
_$jscoverage['repo/state.js'][258]++;
pentaho.userSettingsInstance = new (pentaho.userSettings)();
