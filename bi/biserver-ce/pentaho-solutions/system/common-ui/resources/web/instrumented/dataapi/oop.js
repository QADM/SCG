/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['dataapi/oop.js']) {
  _$jscoverage['dataapi/oop.js'] = [];
  _$jscoverage['dataapi/oop.js'][4] = 0;
  _$jscoverage['dataapi/oop.js'][5] = 0;
  _$jscoverage['dataapi/oop.js'][6] = 0;
  _$jscoverage['dataapi/oop.js'][7] = 0;
  _$jscoverage['dataapi/oop.js'][10] = 0;
  _$jscoverage['dataapi/oop.js'][11] = 0;
  _$jscoverage['dataapi/oop.js'][12] = 0;
  _$jscoverage['dataapi/oop.js'][13] = 0;
  _$jscoverage['dataapi/oop.js'][14] = 0;
}
_$jscoverage['dataapi/oop.js'].source = ["<span class=\"c\">/*</span>","<span class=\"c\">concepts taken from Nicholas Zakas Professional Javascript</span>","<span class=\"c\">*/</span>","<span class=\"k\">function</span> object<span class=\"k\">(</span>o<span class=\"k\">)</span><span class=\"k\">{</span>","\t<span class=\"k\">function</span> F<span class=\"k\">()</span><span class=\"k\">{}</span>","\tF<span class=\"k\">.</span>prototype <span class=\"k\">=</span> o<span class=\"k\">;</span>","\t<span class=\"k\">return</span> <span class=\"k\">new</span> F<span class=\"k\">();</span>","<span class=\"k\">}</span>","\t","<span class=\"k\">function</span> inheritPrototype<span class=\"k\">(</span>subType<span class=\"k\">,</span> superType<span class=\"k\">)</span><span class=\"k\">{</span>","\t<span class=\"k\">var</span> prototype <span class=\"k\">=</span> object<span class=\"k\">(</span>superType<span class=\"k\">.</span>prototype<span class=\"k\">);</span>   <span class=\"c\">//create object</span>","\tprototype<span class=\"k\">.</span>constructor <span class=\"k\">=</span> subType<span class=\"k\">;</span>               <span class=\"c\">//augment object</span>","\tsubType<span class=\"k\">.</span>prototype <span class=\"k\">=</span> prototype<span class=\"k\">;</span>                 <span class=\"c\">//assign object</span>","\tsubType<span class=\"k\">.</span>uber <span class=\"k\">=</span> superType<span class=\"k\">.</span>prototype<span class=\"k\">;</span>","<span class=\"k\">}</span>"];
_$jscoverage['dataapi/oop.js'][4]++;
function object(o) {
  _$jscoverage['dataapi/oop.js'][5]++;
  function F() {
}
  _$jscoverage['dataapi/oop.js'][6]++;
  F.prototype = o;
  _$jscoverage['dataapi/oop.js'][7]++;
  return new F();
}
_$jscoverage['dataapi/oop.js'][10]++;
function inheritPrototype(subType, superType) {
  _$jscoverage['dataapi/oop.js'][11]++;
  var prototype = object(superType.prototype);
  _$jscoverage['dataapi/oop.js'][12]++;
  prototype.constructor = subType;
  _$jscoverage['dataapi/oop.js'][13]++;
  subType.prototype = prototype;
  _$jscoverage['dataapi/oop.js'][14]++;
  subType.uber = superType.prototype;
}
