/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['dataapi/models-svc.js']) {
  _$jscoverage['dataapi/models-svc.js'] = [];
  _$jscoverage['dataapi/models-svc.js'][4] = 0;
  _$jscoverage['dataapi/models-svc.js'][5] = 0;
  _$jscoverage['dataapi/models-svc.js'][6] = 0;
  _$jscoverage['dataapi/models-svc.js'][7] = 0;
  _$jscoverage['dataapi/models-svc.js'][10] = 0;
  _$jscoverage['dataapi/models-svc.js'][12] = 0;
  _$jscoverage['dataapi/models-svc.js'][13] = 0;
  _$jscoverage['dataapi/models-svc.js'][14] = 0;
  _$jscoverage['dataapi/models-svc.js'][15] = 0;
  _$jscoverage['dataapi/models-svc.js'][16] = 0;
  _$jscoverage['dataapi/models-svc.js'][17] = 0;
  _$jscoverage['dataapi/models-svc.js'][18] = 0;
  _$jscoverage['dataapi/models-svc.js'][19] = 0;
  _$jscoverage['dataapi/models-svc.js'][22] = 0;
  _$jscoverage['dataapi/models-svc.js'][23] = 0;
  _$jscoverage['dataapi/models-svc.js'][24] = 0;
  _$jscoverage['dataapi/models-svc.js'][25] = 0;
  _$jscoverage['dataapi/models-svc.js'][26] = 0;
  _$jscoverage['dataapi/models-svc.js'][36] = 0;
  _$jscoverage['dataapi/models-svc.js'][37] = 0;
  _$jscoverage['dataapi/models-svc.js'][38] = 0;
  _$jscoverage['dataapi/models-svc.js'][39] = 0;
  _$jscoverage['dataapi/models-svc.js'][40] = 0;
  _$jscoverage['dataapi/models-svc.js'][42] = 0;
  _$jscoverage['dataapi/models-svc.js'][43] = 0;
  _$jscoverage['dataapi/models-svc.js'][44] = 0;
  _$jscoverage['dataapi/models-svc.js'][45] = 0;
  _$jscoverage['dataapi/models-svc.js'][46] = 0;
  _$jscoverage['dataapi/models-svc.js'][48] = 0;
  _$jscoverage['dataapi/models-svc.js'][49] = 0;
  _$jscoverage['dataapi/models-svc.js'][57] = 0;
  _$jscoverage['dataapi/models-svc.js'][58] = 0;
  _$jscoverage['dataapi/models-svc.js'][59] = 0;
  _$jscoverage['dataapi/models-svc.js'][60] = 0;
  _$jscoverage['dataapi/models-svc.js'][61] = 0;
  _$jscoverage['dataapi/models-svc.js'][64] = 0;
  _$jscoverage['dataapi/models-svc.js'][65] = 0;
  _$jscoverage['dataapi/models-svc.js'][72] = 0;
  _$jscoverage['dataapi/models-svc.js'][73] = 0;
  _$jscoverage['dataapi/models-svc.js'][75] = 0;
  _$jscoverage['dataapi/models-svc.js'][76] = 0;
  _$jscoverage['dataapi/models-svc.js'][77] = 0;
  _$jscoverage['dataapi/models-svc.js'][78] = 0;
  _$jscoverage['dataapi/models-svc.js'][79] = 0;
  _$jscoverage['dataapi/models-svc.js'][80] = 0;
  _$jscoverage['dataapi/models-svc.js'][81] = 0;
  _$jscoverage['dataapi/models-svc.js'][82] = 0;
  _$jscoverage['dataapi/models-svc.js'][85] = 0;
  _$jscoverage['dataapi/models-svc.js'][87] = 0;
  _$jscoverage['dataapi/models-svc.js'][90] = 0;
  _$jscoverage['dataapi/models-svc.js'][91] = 0;
  _$jscoverage['dataapi/models-svc.js'][94] = 0;
  _$jscoverage['dataapi/models-svc.js'][96] = 0;
  _$jscoverage['dataapi/models-svc.js'][97] = 0;
  _$jscoverage['dataapi/models-svc.js'][98] = 0;
  _$jscoverage['dataapi/models-svc.js'][99] = 0;
  _$jscoverage['dataapi/models-svc.js'][101] = 0;
  _$jscoverage['dataapi/models-svc.js'][105] = 0;
  _$jscoverage['dataapi/models-svc.js'][106] = 0;
  _$jscoverage['dataapi/models-svc.js'][108] = 0;
  _$jscoverage['dataapi/models-svc.js'][109] = 0;
  _$jscoverage['dataapi/models-svc.js'][110] = 0;
  _$jscoverage['dataapi/models-svc.js'][113] = 0;
  _$jscoverage['dataapi/models-svc.js'][116] = 0;
  _$jscoverage['dataapi/models-svc.js'][117] = 0;
  _$jscoverage['dataapi/models-svc.js'][118] = 0;
  _$jscoverage['dataapi/models-svc.js'][119] = 0;
  _$jscoverage['dataapi/models-svc.js'][120] = 0;
  _$jscoverage['dataapi/models-svc.js'][121] = 0;
  _$jscoverage['dataapi/models-svc.js'][123] = 0;
  _$jscoverage['dataapi/models-svc.js'][126] = 0;
  _$jscoverage['dataapi/models-svc.js'][127] = 0;
  _$jscoverage['dataapi/models-svc.js'][131] = 0;
  _$jscoverage['dataapi/models-svc.js'][133] = 0;
  _$jscoverage['dataapi/models-svc.js'][135] = 0;
  _$jscoverage['dataapi/models-svc.js'][136] = 0;
  _$jscoverage['dataapi/models-svc.js'][141] = 0;
  _$jscoverage['dataapi/models-svc.js'][143] = 0;
  _$jscoverage['dataapi/models-svc.js'][145] = 0;
  _$jscoverage['dataapi/models-svc.js'][146] = 0;
  _$jscoverage['dataapi/models-svc.js'][147] = 0;
  _$jscoverage['dataapi/models-svc.js'][149] = 0;
  _$jscoverage['dataapi/models-svc.js'][152] = 0;
  _$jscoverage['dataapi/models-svc.js'][153] = 0;
  _$jscoverage['dataapi/models-svc.js'][154] = 0;
  _$jscoverage['dataapi/models-svc.js'][160] = 0;
  _$jscoverage['dataapi/models-svc.js'][161] = 0;
  _$jscoverage['dataapi/models-svc.js'][163] = 0;
  _$jscoverage['dataapi/models-svc.js'][166] = 0;
  _$jscoverage['dataapi/models-svc.js'][168] = 0;
  _$jscoverage['dataapi/models-svc.js'][172] = 0;
  _$jscoverage['dataapi/models-svc.js'][173] = 0;
  _$jscoverage['dataapi/models-svc.js'][176] = 0;
  _$jscoverage['dataapi/models-svc.js'][178] = 0;
  _$jscoverage['dataapi/models-svc.js'][179] = 0;
  _$jscoverage['dataapi/models-svc.js'][180] = 0;
  _$jscoverage['dataapi/models-svc.js'][181] = 0;
  _$jscoverage['dataapi/models-svc.js'][183] = 0;
  _$jscoverage['dataapi/models-svc.js'][186] = 0;
  _$jscoverage['dataapi/models-svc.js'][188] = 0;
  _$jscoverage['dataapi/models-svc.js'][189] = 0;
  _$jscoverage['dataapi/models-svc.js'][190] = 0;
  _$jscoverage['dataapi/models-svc.js'][191] = 0;
  _$jscoverage['dataapi/models-svc.js'][192] = 0;
  _$jscoverage['dataapi/models-svc.js'][195] = 0;
  _$jscoverage['dataapi/models-svc.js'][197] = 0;
  _$jscoverage['dataapi/models-svc.js'][202] = 0;
  _$jscoverage['dataapi/models-svc.js'][204] = 0;
  _$jscoverage['dataapi/models-svc.js'][205] = 0;
  _$jscoverage['dataapi/models-svc.js'][206] = 0;
  _$jscoverage['dataapi/models-svc.js'][207] = 0;
  _$jscoverage['dataapi/models-svc.js'][208] = 0;
  _$jscoverage['dataapi/models-svc.js'][209] = 0;
  _$jscoverage['dataapi/models-svc.js'][210] = 0;
  _$jscoverage['dataapi/models-svc.js'][211] = 0;
  _$jscoverage['dataapi/models-svc.js'][213] = 0;
  _$jscoverage['dataapi/models-svc.js'][214] = 0;
  _$jscoverage['dataapi/models-svc.js'][217] = 0;
  _$jscoverage['dataapi/models-svc.js'][219] = 0;
  _$jscoverage['dataapi/models-svc.js'][221] = 0;
  _$jscoverage['dataapi/models-svc.js'][222] = 0;
  _$jscoverage['dataapi/models-svc.js'][223] = 0;
  _$jscoverage['dataapi/models-svc.js'][224] = 0;
  _$jscoverage['dataapi/models-svc.js'][225] = 0;
  _$jscoverage['dataapi/models-svc.js'][226] = 0;
  _$jscoverage['dataapi/models-svc.js'][227] = 0;
  _$jscoverage['dataapi/models-svc.js'][228] = 0;
  _$jscoverage['dataapi/models-svc.js'][229] = 0;
  _$jscoverage['dataapi/models-svc.js'][231] = 0;
  _$jscoverage['dataapi/models-svc.js'][232] = 0;
  _$jscoverage['dataapi/models-svc.js'][233] = 0;
  _$jscoverage['dataapi/models-svc.js'][234] = 0;
  _$jscoverage['dataapi/models-svc.js'][235] = 0;
  _$jscoverage['dataapi/models-svc.js'][237] = 0;
  _$jscoverage['dataapi/models-svc.js'][241] = 0;
  _$jscoverage['dataapi/models-svc.js'][243] = 0;
  _$jscoverage['dataapi/models-svc.js'][245] = 0;
  _$jscoverage['dataapi/models-svc.js'][246] = 0;
  _$jscoverage['dataapi/models-svc.js'][249] = 0;
  _$jscoverage['dataapi/models-svc.js'][250] = 0;
  _$jscoverage['dataapi/models-svc.js'][251] = 0;
  _$jscoverage['dataapi/models-svc.js'][253] = 0;
  _$jscoverage['dataapi/models-svc.js'][254] = 0;
  _$jscoverage['dataapi/models-svc.js'][255] = 0;
  _$jscoverage['dataapi/models-svc.js'][257] = 0;
  _$jscoverage['dataapi/models-svc.js'][258] = 0;
  _$jscoverage['dataapi/models-svc.js'][259] = 0;
  _$jscoverage['dataapi/models-svc.js'][260] = 0;
  _$jscoverage['dataapi/models-svc.js'][264] = 0;
  _$jscoverage['dataapi/models-svc.js'][266] = 0;
  _$jscoverage['dataapi/models-svc.js'][267] = 0;
  _$jscoverage['dataapi/models-svc.js'][269] = 0;
  _$jscoverage['dataapi/models-svc.js'][270] = 0;
  _$jscoverage['dataapi/models-svc.js'][271] = 0;
  _$jscoverage['dataapi/models-svc.js'][272] = 0;
  _$jscoverage['dataapi/models-svc.js'][273] = 0;
  _$jscoverage['dataapi/models-svc.js'][276] = 0;
  _$jscoverage['dataapi/models-svc.js'][277] = 0;
  _$jscoverage['dataapi/models-svc.js'][278] = 0;
  _$jscoverage['dataapi/models-svc.js'][281] = 0;
  _$jscoverage['dataapi/models-svc.js'][283] = 0;
  _$jscoverage['dataapi/models-svc.js'][285] = 0;
  _$jscoverage['dataapi/models-svc.js'][286] = 0;
  _$jscoverage['dataapi/models-svc.js'][287] = 0;
  _$jscoverage['dataapi/models-svc.js'][288] = 0;
  _$jscoverage['dataapi/models-svc.js'][289] = 0;
  _$jscoverage['dataapi/models-svc.js'][290] = 0;
  _$jscoverage['dataapi/models-svc.js'][291] = 0;
  _$jscoverage['dataapi/models-svc.js'][292] = 0;
  _$jscoverage['dataapi/models-svc.js'][293] = 0;
  _$jscoverage['dataapi/models-svc.js'][296] = 0;
  _$jscoverage['dataapi/models-svc.js'][299] = 0;
  _$jscoverage['dataapi/models-svc.js'][300] = 0;
  _$jscoverage['dataapi/models-svc.js'][301] = 0;
  _$jscoverage['dataapi/models-svc.js'][302] = 0;
  _$jscoverage['dataapi/models-svc.js'][303] = 0;
  _$jscoverage['dataapi/models-svc.js'][305] = 0;
  _$jscoverage['dataapi/models-svc.js'][308] = 0;
  _$jscoverage['dataapi/models-svc.js'][309] = 0;
  _$jscoverage['dataapi/models-svc.js'][310] = 0;
  _$jscoverage['dataapi/models-svc.js'][311] = 0;
  _$jscoverage['dataapi/models-svc.js'][312] = 0;
  _$jscoverage['dataapi/models-svc.js'][313] = 0;
  _$jscoverage['dataapi/models-svc.js'][314] = 0;
  _$jscoverage['dataapi/models-svc.js'][315] = 0;
  _$jscoverage['dataapi/models-svc.js'][316] = 0;
  _$jscoverage['dataapi/models-svc.js'][317] = 0;
  _$jscoverage['dataapi/models-svc.js'][319] = 0;
  _$jscoverage['dataapi/models-svc.js'][329] = 0;
  _$jscoverage['dataapi/models-svc.js'][330] = 0;
  _$jscoverage['dataapi/models-svc.js'][332] = 0;
  _$jscoverage['dataapi/models-svc.js'][344] = 0;
  _$jscoverage['dataapi/models-svc.js'][346] = 0;
  _$jscoverage['dataapi/models-svc.js'][347] = 0;
  _$jscoverage['dataapi/models-svc.js'][350] = 0;
  _$jscoverage['dataapi/models-svc.js'][351] = 0;
  _$jscoverage['dataapi/models-svc.js'][354] = 0;
  _$jscoverage['dataapi/models-svc.js'][355] = 0;
  _$jscoverage['dataapi/models-svc.js'][358] = 0;
  _$jscoverage['dataapi/models-svc.js'][362] = 0;
  _$jscoverage['dataapi/models-svc.js'][363] = 0;
  _$jscoverage['dataapi/models-svc.js'][372] = 0;
  _$jscoverage['dataapi/models-svc.js'][375] = 0;
  _$jscoverage['dataapi/models-svc.js'][376] = 0;
  _$jscoverage['dataapi/models-svc.js'][382] = 0;
  _$jscoverage['dataapi/models-svc.js'][385] = 0;
  _$jscoverage['dataapi/models-svc.js'][386] = 0;
  _$jscoverage['dataapi/models-svc.js'][396] = 0;
  _$jscoverage['dataapi/models-svc.js'][399] = 0;
  _$jscoverage['dataapi/models-svc.js'][400] = 0;
  _$jscoverage['dataapi/models-svc.js'][408] = 0;
  _$jscoverage['dataapi/models-svc.js'][411] = 0;
  _$jscoverage['dataapi/models-svc.js'][412] = 0;
  _$jscoverage['dataapi/models-svc.js'][413] = 0;
  _$jscoverage['dataapi/models-svc.js'][414] = 0;
  _$jscoverage['dataapi/models-svc.js'][415] = 0;
  _$jscoverage['dataapi/models-svc.js'][416] = 0;
  _$jscoverage['dataapi/models-svc.js'][417] = 0;
  _$jscoverage['dataapi/models-svc.js'][418] = 0;
  _$jscoverage['dataapi/models-svc.js'][419] = 0;
  _$jscoverage['dataapi/models-svc.js'][421] = 0;
  _$jscoverage['dataapi/models-svc.js'][424] = 0;
  _$jscoverage['dataapi/models-svc.js'][425] = 0;
  _$jscoverage['dataapi/models-svc.js'][426] = 0;
  _$jscoverage['dataapi/models-svc.js'][427] = 0;
  _$jscoverage['dataapi/models-svc.js'][428] = 0;
  _$jscoverage['dataapi/models-svc.js'][429] = 0;
  _$jscoverage['dataapi/models-svc.js'][430] = 0;
  _$jscoverage['dataapi/models-svc.js'][431] = 0;
  _$jscoverage['dataapi/models-svc.js'][432] = 0;
  _$jscoverage['dataapi/models-svc.js'][434] = 0;
  _$jscoverage['dataapi/models-svc.js'][437] = 0;
  _$jscoverage['dataapi/models-svc.js'][438] = 0;
  _$jscoverage['dataapi/models-svc.js'][439] = 0;
  _$jscoverage['dataapi/models-svc.js'][440] = 0;
  _$jscoverage['dataapi/models-svc.js'][441] = 0;
  _$jscoverage['dataapi/models-svc.js'][442] = 0;
  _$jscoverage['dataapi/models-svc.js'][443] = 0;
  _$jscoverage['dataapi/models-svc.js'][444] = 0;
  _$jscoverage['dataapi/models-svc.js'][445] = 0;
  _$jscoverage['dataapi/models-svc.js'][446] = 0;
  _$jscoverage['dataapi/models-svc.js'][448] = 0;
  _$jscoverage['dataapi/models-svc.js'][450] = 0;
  _$jscoverage['dataapi/models-svc.js'][451] = 0;
  _$jscoverage['dataapi/models-svc.js'][452] = 0;
  _$jscoverage['dataapi/models-svc.js'][454] = 0;
  _$jscoverage['dataapi/models-svc.js'][455] = 0;
  _$jscoverage['dataapi/models-svc.js'][457] = 0;
  _$jscoverage['dataapi/models-svc.js'][460] = 0;
  _$jscoverage['dataapi/models-svc.js'][461] = 0;
  _$jscoverage['dataapi/models-svc.js'][462] = 0;
  _$jscoverage['dataapi/models-svc.js'][463] = 0;
  _$jscoverage['dataapi/models-svc.js'][464] = 0;
  _$jscoverage['dataapi/models-svc.js'][465] = 0;
  _$jscoverage['dataapi/models-svc.js'][466] = 0;
  _$jscoverage['dataapi/models-svc.js'][467] = 0;
  _$jscoverage['dataapi/models-svc.js'][468] = 0;
  _$jscoverage['dataapi/models-svc.js'][469] = 0;
  _$jscoverage['dataapi/models-svc.js'][470] = 0;
  _$jscoverage['dataapi/models-svc.js'][473] = 0;
  _$jscoverage['dataapi/models-svc.js'][474] = 0;
  _$jscoverage['dataapi/models-svc.js'][477] = 0;
  _$jscoverage['dataapi/models-svc.js'][478] = 0;
  _$jscoverage['dataapi/models-svc.js'][481] = 0;
  _$jscoverage['dataapi/models-svc.js'][482] = 0;
  _$jscoverage['dataapi/models-svc.js'][485] = 0;
  _$jscoverage['dataapi/models-svc.js'][486] = 0;
  _$jscoverage['dataapi/models-svc.js'][489] = 0;
  _$jscoverage['dataapi/models-svc.js'][490] = 0;
  _$jscoverage['dataapi/models-svc.js'][493] = 0;
  _$jscoverage['dataapi/models-svc.js'][494] = 0;
  _$jscoverage['dataapi/models-svc.js'][497] = 0;
  _$jscoverage['dataapi/models-svc.js'][498] = 0;
  _$jscoverage['dataapi/models-svc.js'][501] = 0;
  _$jscoverage['dataapi/models-svc.js'][502] = 0;
  _$jscoverage['dataapi/models-svc.js'][505] = 0;
  _$jscoverage['dataapi/models-svc.js'][506] = 0;
  _$jscoverage['dataapi/models-svc.js'][507] = 0;
  _$jscoverage['dataapi/models-svc.js'][509] = 0;
  _$jscoverage['dataapi/models-svc.js'][511] = 0;
  _$jscoverage['dataapi/models-svc.js'][512] = 0;
  _$jscoverage['dataapi/models-svc.js'][513] = 0;
  _$jscoverage['dataapi/models-svc.js'][514] = 0;
  _$jscoverage['dataapi/models-svc.js'][516] = 0;
  _$jscoverage['dataapi/models-svc.js'][518] = 0;
  _$jscoverage['dataapi/models-svc.js'][520] = 0;
  _$jscoverage['dataapi/models-svc.js'][521] = 0;
  _$jscoverage['dataapi/models-svc.js'][523] = 0;
  _$jscoverage['dataapi/models-svc.js'][524] = 0;
  _$jscoverage['dataapi/models-svc.js'][526] = 0;
  _$jscoverage['dataapi/models-svc.js'][527] = 0;
  _$jscoverage['dataapi/models-svc.js'][529] = 0;
  _$jscoverage['dataapi/models-svc.js'][532] = 0;
  _$jscoverage['dataapi/models-svc.js'][533] = 0;
  _$jscoverage['dataapi/models-svc.js'][534] = 0;
  _$jscoverage['dataapi/models-svc.js'][535] = 0;
  _$jscoverage['dataapi/models-svc.js'][536] = 0;
  _$jscoverage['dataapi/models-svc.js'][537] = 0;
  _$jscoverage['dataapi/models-svc.js'][538] = 0;
  _$jscoverage['dataapi/models-svc.js'][540] = 0;
  _$jscoverage['dataapi/models-svc.js'][541] = 0;
  _$jscoverage['dataapi/models-svc.js'][543] = 0;
  _$jscoverage['dataapi/models-svc.js'][544] = 0;
  _$jscoverage['dataapi/models-svc.js'][546] = 0;
  _$jscoverage['dataapi/models-svc.js'][547] = 0;
  _$jscoverage['dataapi/models-svc.js'][549] = 0;
  _$jscoverage['dataapi/models-svc.js'][550] = 0;
  _$jscoverage['dataapi/models-svc.js'][552] = 0;
  _$jscoverage['dataapi/models-svc.js'][553] = 0;
  _$jscoverage['dataapi/models-svc.js'][555] = 0;
  _$jscoverage['dataapi/models-svc.js'][556] = 0;
  _$jscoverage['dataapi/models-svc.js'][558] = 0;
  _$jscoverage['dataapi/models-svc.js'][559] = 0;
  _$jscoverage['dataapi/models-svc.js'][561] = 0;
  _$jscoverage['dataapi/models-svc.js'][562] = 0;
  _$jscoverage['dataapi/models-svc.js'][564] = 0;
  _$jscoverage['dataapi/models-svc.js'][565] = 0;
  _$jscoverage['dataapi/models-svc.js'][567] = 0;
  _$jscoverage['dataapi/models-svc.js'][568] = 0;
  _$jscoverage['dataapi/models-svc.js'][570] = 0;
  _$jscoverage['dataapi/models-svc.js'][571] = 0;
  _$jscoverage['dataapi/models-svc.js'][573] = 0;
  _$jscoverage['dataapi/models-svc.js'][574] = 0;
  _$jscoverage['dataapi/models-svc.js'][578] = 0;
  _$jscoverage['dataapi/models-svc.js'][579] = 0;
  _$jscoverage['dataapi/models-svc.js'][580] = 0;
  _$jscoverage['dataapi/models-svc.js'][582] = 0;
  _$jscoverage['dataapi/models-svc.js'][585] = 0;
  _$jscoverage['dataapi/models-svc.js'][586] = 0;
  _$jscoverage['dataapi/models-svc.js'][588] = 0;
  _$jscoverage['dataapi/models-svc.js'][589] = 0;
  _$jscoverage['dataapi/models-svc.js'][590] = 0;
  _$jscoverage['dataapi/models-svc.js'][592] = 0;
  _$jscoverage['dataapi/models-svc.js'][595] = 0;
  _$jscoverage['dataapi/models-svc.js'][598] = 0;
  _$jscoverage['dataapi/models-svc.js'][600] = 0;
  _$jscoverage['dataapi/models-svc.js'][601] = 0;
  _$jscoverage['dataapi/models-svc.js'][602] = 0;
  _$jscoverage['dataapi/models-svc.js'][603] = 0;
  _$jscoverage['dataapi/models-svc.js'][605] = 0;
  _$jscoverage['dataapi/models-svc.js'][607] = 0;
  _$jscoverage['dataapi/models-svc.js'][609] = 0;
  _$jscoverage['dataapi/models-svc.js'][610] = 0;
  _$jscoverage['dataapi/models-svc.js'][612] = 0;
  _$jscoverage['dataapi/models-svc.js'][613] = 0;
  _$jscoverage['dataapi/models-svc.js'][615] = 0;
  _$jscoverage['dataapi/models-svc.js'][616] = 0;
  _$jscoverage['dataapi/models-svc.js'][618] = 0;
}
_$jscoverage['dataapi/models-svc.js'].source = ["<span class=\"c\">/*</span>","<span class=\"c\">                         pentaho.pda.SvcHandler</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>SvcHandler <span class=\"k\">=</span> <span class=\"k\">function</span> svcHandler<span class=\"k\">(</span>sandbox<span class=\"k\">)</span> <span class=\"k\">{</span>","\tpentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Handler<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> sandbox<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>SOURCE_TYPE_SVC<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>SERVICE_URL <span class=\"k\">=</span> CONTEXT_PATH<span class=\"k\">+</span><span class=\"s\">'content/MetadataModelsSvc'</span><span class=\"k\">;</span> ","<span class=\"k\">}</span>","","inheritPrototype<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>SvcHandler<span class=\"k\">,</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Handler<span class=\"k\">);</span> <span class=\"c\">//borrow the parent's methods</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>SvcHandler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getSources <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>callback<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","\toptions <span class=\"k\">=</span> options <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> filter <span class=\"k\">=</span> options<span class=\"k\">[</span><span class=\"s\">'filter'</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> _sources <span class=\"k\">=</span> <span class=\"k\">[],</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>j<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span> each<span class=\"k\">;</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>sources<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>filter <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>j<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>sources<span class=\"k\">.</span>length<span class=\"k\">;</span>i<span class=\"k\">&lt;</span>j<span class=\"k\">;</span>i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\t\t\tcallback<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>sources<span class=\"k\">[</span>i<span class=\"k\">]);</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>j<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>sources<span class=\"k\">.</span>length<span class=\"k\">;</span>i<span class=\"k\">&lt;</span>j<span class=\"k\">;</span>i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\t\t\teach <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>sources<span class=\"k\">[</span>i<span class=\"k\">];</span>","\t\t\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>each<span class=\"k\">[</span>filter<span class=\"k\">.</span>property<span class=\"k\">]</span> <span class=\"k\">==</span> filter<span class=\"k\">.</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tcallback<span class=\"k\">(</span>each<span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"c\">//just move on to next</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    ","            <span class=\"c\">// get the info about the models from the server</span>","            <span class=\"k\">var</span> url <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>SERVICE_URL<span class=\"k\">+</span><span class=\"s\">'?action=listmodels'</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> contextName <span class=\"k\">=</span> options<span class=\"k\">[</span><span class=\"s\">'context'</span><span class=\"k\">];</span>","            <span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"s\">\"domainName=&amp;\"</span><span class=\"k\">+((</span>contextName<span class=\"k\">)?</span> <span class=\"s\">'context='</span><span class=\"k\">+</span>contextName <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> jsonStr <span class=\"k\">=</span> pentahoPost<span class=\"k\">(</span> url<span class=\"k\">,</span> query<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"s\">'text/text'</span> <span class=\"k\">);</span>","            <span class=\"k\">var</span> rawModels <span class=\"k\">=</span> eval<span class=\"k\">(</span> <span class=\"s\">'('</span><span class=\"k\">+</span>jsonStr<span class=\"k\">+</span><span class=\"s\">')'</span> <span class=\"k\">);</span>","","            <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>rawModels<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                model <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>addModelInfoFromNode<span class=\"k\">(</span> rawModels<span class=\"k\">[</span>idx<span class=\"k\">]</span> <span class=\"k\">);</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>sources<span class=\"k\">.</span>push<span class=\"k\">(</span>model<span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>filter <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tcallback<span class=\"k\">(</span>model<span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>model<span class=\"k\">[</span>filter<span class=\"k\">.</span>property<span class=\"k\">]</span> <span class=\"k\">==</span> filter<span class=\"k\">.</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tcallback<span class=\"k\">(</span>each<span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">}</span>","            <span class=\"k\">}</span>","","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>  <span class=\"c\">//end discoverModels</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>SvcHandler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>newModelFromState <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> state <span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> model <span class=\"k\">=</span> state<span class=\"k\">;</span>    ","    model<span class=\"k\">.</span>modelId <span class=\"k\">=</span> state<span class=\"k\">.</span>id<span class=\"k\">;</span>","    model<span class=\"k\">.</span>type <span class=\"k\">=</span> model<span class=\"k\">.</span>providerId<span class=\"k\">;</span>","    <span class=\"k\">return</span> model<span class=\"k\">;</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>SvcHandler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addModelInfoFromNode <span class=\"k\">=</span> <span class=\"k\">function</span> addModelInfoFromNode<span class=\"k\">(</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>svc<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>newModelFromState<span class=\"k\">(</span>node<span class=\"k\">),</span> <span class=\"k\">this</span><span class=\"k\">);</span>","<span class=\"k\">}</span> <span class=\"c\">//end addModelInfoFromNode</span>","","<span class=\"c\">/* ******************************************</span>","<span class=\"c\">                        pentaho.pda.model.svc</span>","<span class=\"c\">   ******************************************\t\t\t\t\t\t</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>svc <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> handler<span class=\"k\">)</span> <span class=\"k\">{</span>","\tpentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> obj<span class=\"k\">);</span> <span class=\"c\">//call parent object</span>","\t    ","    <span class=\"k\">this</span><span class=\"k\">.</span>categories <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">();</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>id <span class=\"k\">=</span> obj<span class=\"k\">.</span>id<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>modelId <span class=\"k\">=</span> obj<span class=\"k\">.</span>modelId<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>modelName <span class=\"k\">=</span> obj<span class=\"k\">.</span>modelName <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>modelDescription <span class=\"k\">=</span> obj<span class=\"k\">.</span>modelDescription <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>handler <span class=\"k\">=</span> handler<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'svc'</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>state <span class=\"k\">=</span> obj<span class=\"k\">;</span>","<span class=\"k\">}</span>","","inheritPrototype<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>svc<span class=\"k\">,</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">);</span> <span class=\"c\">//borrow the parent's methods</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>discoverModelDetail <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","\t<span class=\"c\">// get the info about the models from the server</span>","\t<span class=\"k\">var</span> url <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>handler<span class=\"k\">.</span>SERVICE_URL<span class=\"k\">+</span><span class=\"s\">'?action=getmodel&amp;id='</span><span class=\"k\">+</span>escape<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>id<span class=\"k\">);</span>","\t<span class=\"k\">var</span> resultStr <span class=\"k\">=</span> pentahoPost<span class=\"k\">(</span> url<span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"s\">'text/text'</span> <span class=\"k\">);</span>","\t<span class=\"c\">// parse the XML</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>state <span class=\"k\">=</span> eval<span class=\"k\">(</span> <span class=\"s\">'('</span><span class=\"k\">+</span>resultStr<span class=\"k\">+</span><span class=\"s\">')'</span> <span class=\"k\">);</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>categories <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>categories<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>capabilities <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>capabilities<span class=\"k\">;</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>capabilities <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>capabilities <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>elements <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>elements<span class=\"k\">;</span>","    ","<span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getAllColumns <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> columns <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">();</span>","","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx2 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> idx2<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>elements<span class=\"k\">.</span>length<span class=\"k\">;</span> idx2<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>elements<span class=\"k\">[</span>idx2<span class=\"k\">].</span>isQueryElement<span class=\"k\">)</span> <span class=\"k\">{</span>","                columns<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>elements<span class=\"k\">[</span>idx2<span class=\"k\">]</span> <span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> columns<span class=\"k\">;</span>","<span class=\"k\">}</span>","        ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>searchColumn <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> column<span class=\"k\">,</span> searchStr<span class=\"k\">,</span> rowLimit<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createQuery<span class=\"k\">();</span>","        <span class=\"k\">var</span> selection <span class=\"k\">=</span> query<span class=\"k\">.</span>addSelectionById<span class=\"k\">(</span> column<span class=\"k\">.</span>id <span class=\"k\">);</span>","        <span class=\"k\">var</span> sort <span class=\"k\">=</span> query<span class=\"k\">.</span>addSortById<span class=\"k\">(</span> column<span class=\"k\">.</span>id<span class=\"k\">,</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>SORT_TYPES<span class=\"k\">.</span>ASCENDING <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> searchStr <span class=\"k\">)</span> <span class=\"k\">{</span>","            query<span class=\"k\">.</span>addConditionById<span class=\"k\">(</span>column<span class=\"k\">.</span>id<span class=\"k\">,</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>CONTAINS<span class=\"k\">,</span>searchStr<span class=\"k\">,</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>OPERATOR_TYPES<span class=\"k\">.</span>OR<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>submitQuery<span class=\"k\">(</span> query<span class=\"k\">,</span> rowLimit<span class=\"k\">,</span> callback <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getAllValuesForColumn <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> column<span class=\"k\">,</span> rowLimit <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>searchColumn<span class=\"k\">(</span> column<span class=\"k\">,</span> undefined<span class=\"k\">,</span> rowLimit <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// create a new query</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createQuery <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","    <span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","","    query<span class=\"k\">.</span>setSourceId<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>id <span class=\"k\">);</span>","    <span class=\"k\">return</span> query<span class=\"k\">;</span>","<span class=\"k\">}</span>","","","<span class=\"c\">// create a new query from a serialized state</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createQueryFromJson <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> json <span class=\"k\">)</span> <span class=\"k\">{</span>","","    <span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","","    <span class=\"k\">var</span> state<span class=\"k\">;</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> json<span class=\"k\">[</span><span class=\"s\">\"class\"</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        state <span class=\"k\">=</span> json<span class=\"k\">;</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        state <span class=\"k\">=</span> eval<span class=\"k\">(</span> <span class=\"s\">'('</span><span class=\"k\">+</span>json<span class=\"k\">+</span><span class=\"s\">')'</span> <span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    query<span class=\"k\">.</span>setSourceId<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>id <span class=\"k\">);</span>","    query<span class=\"k\">.</span>setState<span class=\"k\">(</span>state<span class=\"k\">);</span>","    <span class=\"k\">return</span> query<span class=\"k\">;</span>","<span class=\"k\">}</span>","","    <span class=\"c\">// get the results of the query</span>","<span class=\"c\">// This is a synchronous call unless a callback is provided. see pentaho-ajax's pentahoAction() documentation</span>","<span class=\"c\">// for types of callbacks.</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>submitQuery <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> queryObject<span class=\"k\">,</span> rowLimit<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> json <span class=\"k\">=</span> queryObject<span class=\"k\">.</span>getJson<span class=\"k\">();</span> ","<span class=\"c\">//        alert(json);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>submit<span class=\"k\">(</span>json<span class=\"k\">,</span> rowLimit<span class=\"k\">,</span> callback<span class=\"k\">);</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>submit <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> jsonString<span class=\"k\">,</span> rowLimit<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","    ","        <span class=\"k\">var</span> results <span class=\"k\">=</span> <span class=\"k\">{</span>","            metadata<span class=\"k\">:[],</span>","            resultset<span class=\"k\">:[]</span>","        <span class=\"k\">}</span>            ","        <span class=\"k\">if</span> <span class=\"k\">(!</span>rowLimit<span class=\"k\">)</span> <span class=\"k\">{</span>","            rowLimit <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","<span class=\"c\">//        alert(jsonString);</span>","        <span class=\"k\">var</span> handleResultCallback <span class=\"k\">=</span> dojo<span class=\"k\">.</span>hitch<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>resultJson<span class=\"k\">)</span> <span class=\"k\">{</span>","<span class=\"c\">//alert(resultJson);</span>","          <span class=\"k\">var</span> jsonTable <span class=\"k\">=</span> eval<span class=\"k\">(</span><span class=\"s\">'('</span><span class=\"k\">+</span>resultJson<span class=\"k\">+</span><span class=\"s\">')'</span><span class=\"k\">);</span>","          result <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">(</span>jsonTable<span class=\"k\">);</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>callback<span class=\"k\">)</span> <span class=\"k\">{</span>","            callback<span class=\"k\">(</span>result<span class=\"k\">);</span>","          <span class=\"k\">}</span>","          <span class=\"k\">return</span> result<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        ","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"c\">// get the info about the models from the server</span>","            <span class=\"k\">var</span> url <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>handler<span class=\"k\">.</span>SERVICE_URL<span class=\"k\">;</span>","            <span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"s\">\"action=query&amp;query=\"</span><span class=\"k\">+</span>jsonString<span class=\"k\">;</span>","            <span class=\"k\">var</span> resultJson <span class=\"k\">=</span> pentahoPost<span class=\"k\">(</span> url<span class=\"k\">,</span> query<span class=\"k\">,</span> callback <span class=\"k\">?</span> handleResultCallback <span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"s\">'text/text'</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>callback<span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"k\">return</span> handleResultCallback<span class=\"k\">(</span>resultJson<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            alert<span class=\"k\">(</span>e<span class=\"k\">.</span>message<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","    <span class=\"k\">}</span>","","<span class=\"c\">// this helps show values from columns for the user to select from during parameter creation</span>","FilterHelper <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> filterColumn<span class=\"k\">,</span> filterEditBoxId<span class=\"k\">,</span> filterParameterState<span class=\"k\">,</span> model <span class=\"k\">)</span> <span class=\"k\">{</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>filterEditBoxId <span class=\"k\">=</span> filterEditBoxId<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>filterColumn <span class=\"k\">=</span> filterColumn<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState <span class=\"k\">=</span> filterParameterState<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>model <span class=\"k\">=</span> model<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>filterKeyTimeout <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>filterId <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>endFilterSelection <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">'none'</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>handleFilterKeyUp <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> evt <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">var</span> code <span class=\"k\">=</span> evt<span class=\"k\">.</span>keyCode<span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>code<span class=\"k\">==</span><span class=\"s\">13</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">}</span><span class=\"k\">;</span> <span class=\"c\">// return</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>code<span class=\"k\">==</span><span class=\"s\">37</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">}</span><span class=\"k\">;</span> <span class=\"c\">// left</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>code<span class=\"k\">==</span><span class=\"s\">38</span><span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">}</span><span class=\"k\">;</span> <span class=\"c\">// up</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>code<span class=\"k\">==</span><span class=\"s\">39</span><span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">}</span><span class=\"k\">;</span> <span class=\"c\">// right</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>code<span class=\"k\">==</span><span class=\"s\">27</span><span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>endFilterSelection<span class=\"k\">();</span> <span class=\"k\">return</span> <span class=\"k\">}</span><span class=\"k\">;</span> <span class=\"c\">// escape</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>code<span class=\"k\">==</span><span class=\"s\">40</span><span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"c\">// down</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>focus<span class=\"k\">();</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>selectedIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>\t","        <span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState<span class=\"k\">.</span>value <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterEditBoxId <span class=\"k\">).</span>value<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState<span class=\"k\">.</span>defaultValue <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState<span class=\"k\">.</span>value<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterColumn <span class=\"k\">!=</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterKeyTimeout <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                clearTimeout<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterKeyTimeout <span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>filterKeyTimeout <span class=\"k\">=</span> setTimeout<span class=\"k\">(</span> <span class=\"s\">\"filterHelper.searchFilterValues()\"</span><span class=\"k\">,</span> <span class=\"s\">500</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>filterListKeyUp <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> evt <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">var</span> code <span class=\"k\">=</span> evt<span class=\"k\">.</span>keyCode<span class=\"k\">;</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> code <span class=\"k\">==</span> <span class=\"s\">27</span> <span class=\"k\">)</span> <span class=\"k\">{</span>  <span class=\"c\">// escape</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">'none'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>code<span class=\"k\">==</span><span class=\"s\">38</span><span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"c\">// up arrow</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>selectedIndex <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> editbox <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterEditBoxId <span class=\"k\">);</span>","            editbox<span class=\"k\">.</span>focus<span class=\"k\">();</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>selectedIndex <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> code<span class=\"k\">==</span><span class=\"s\">13</span> <span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// return</span>","            <span class=\"k\">var</span> editbox <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterEditBoxId <span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>selectFilterValue<span class=\"k\">();</span>","            editbox<span class=\"k\">.</span>focus<span class=\"k\">();</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>searchFilterValues <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterKeyTimeout <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            clearTimeout<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterKeyTimeout <span class=\"k\">);</span>","        <span class=\"k\">}</span>   ","        <span class=\"k\">this</span><span class=\"k\">.</span>filterKeyTimeout <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>options<span class=\"k\">.</span>length <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterEditBoxId <span class=\"k\">).</span>value<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> value <span class=\"k\">==</span> <span class=\"s\">''</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>searchColumn<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterColumn<span class=\"k\">,</span> value <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>result <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> editbox <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> filterEditBoxId <span class=\"k\">);</span>","","        <span class=\"k\">var</span> pos <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>findPosition<span class=\"k\">(</span>editbox<span class=\"k\">);</span>","    ","        <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv<span class=\"k\">.</span>style<span class=\"k\">.</span>left <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">+</span>pos<span class=\"k\">.</span>x<span class=\"k\">+</span><span class=\"s\">'px'</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv<span class=\"k\">.</span>style<span class=\"k\">.</span>width <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">+</span>editbox<span class=\"k\">.</span>style<span class=\"k\">.</span>width<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv<span class=\"k\">.</span>style<span class=\"k\">.</span>top <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">+(</span>pos<span class=\"k\">.</span>y<span class=\"k\">+</span>parseInt<span class=\"k\">(</span>editbox<span class=\"k\">.</span>style<span class=\"k\">.</span>height<span class=\"k\">))+</span><span class=\"s\">'px'</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> rows <span class=\"k\">=</span> result<span class=\"k\">.</span>resultset<span class=\"k\">;</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>rows<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> option <span class=\"k\">=</span> <span class=\"k\">new</span> Option<span class=\"k\">(</span> rows<span class=\"k\">[</span>idx<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>options<span class=\"k\">[</span> <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>options<span class=\"k\">.</span>length <span class=\"k\">]</span> <span class=\"k\">=</span> option","            <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>options<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">9</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>size <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>options<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span> <span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv<span class=\"k\">.</span>style<span class=\"k\">.</span>display<span class=\"k\">=</span><span class=\"s\">'block'</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>findPosition <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> p <span class=\"k\">=</span> <span class=\"k\">{</span>x<span class=\"k\">:</span> element<span class=\"k\">.</span>offsetLeft <span class=\"k\">||</span> <span class=\"s\">0</span><span class=\"k\">,</span> y<span class=\"k\">:</span>element<span class=\"k\">.</span>offsetTop <span class=\"k\">||</span> <span class=\"s\">0</span><span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">while</span> <span class=\"k\">(</span>element <span class=\"k\">=</span> element<span class=\"k\">.</span>offsetParent<span class=\"k\">)</span> <span class=\"k\">{</span>","            p<span class=\"k\">.</span>x <span class=\"k\">+=</span> element<span class=\"k\">.</span>offsetLeft<span class=\"k\">;</span>","            p<span class=\"k\">.</span>y <span class=\"k\">+=</span> element<span class=\"k\">.</span>offsetTop<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> p<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>selectFilterValue <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> idx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>selectedIndex<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> idx <span class=\"k\">&gt;=</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>options<span class=\"k\">[</span>idx<span class=\"k\">].</span>value<span class=\"k\">;</span>","            <span class=\"k\">var</span> editbox <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> filterEditBoxId <span class=\"k\">);</span>","            editbox<span class=\"k\">.</span>value <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState<span class=\"k\">.</span>value <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState<span class=\"k\">.</span>defaultValue <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState<span class=\"k\">.</span>value<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterValueSelected <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>filterValueSelected<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv<span class=\"k\">.</span>style<span class=\"k\">.</span>display<span class=\"k\">=</span><span class=\"s\">'none'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","<span class=\"k\">}</span>","","<span class=\"c\">/* ******************************************</span>","<span class=\"c\">                        pentaho.pda.query.svc</span>","<span class=\"c\">   ******************************************\t\t\t\t\t\t</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>model<span class=\"k\">)</span> <span class=\"k\">{</span>","\tpentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span>model<span class=\"k\">);</span> <span class=\"c\">//call parent object</span>","\t","    <span class=\"k\">this</span><span class=\"k\">.</span>state <span class=\"k\">=</span> <span class=\"k\">{</span>","        <span class=\"s\">\"class\"</span><span class=\"k\">:</span><span class=\"s\">\"org.pentaho.metadata.model.thin.Query\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"elements\"</span><span class=\"k\">:[],</span>","        <span class=\"s\">\"conditions\"</span><span class=\"k\">:[],</span>","        <span class=\"s\">\"defaultParameterMap\"</span><span class=\"k\">:</span><span class=\"k\">null</span><span class=\"k\">,</span>","        <span class=\"s\">\"disableDistinct\"</span><span class=\"k\">:</span><span class=\"k\">null</span><span class=\"k\">,</span>","        <span class=\"s\">\"orders\"</span><span class=\"k\">:[],</span>","        <span class=\"s\">\"parameters\"</span><span class=\"k\">:[],</span>","        <span class=\"s\">\"sourceId\"</span><span class=\"k\">:</span><span class=\"s\">\"\"</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","inheritPrototype<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">,</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">);</span> <span class=\"c\">//borrow the parent's methods</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>setState <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>state<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>state <span class=\"k\">=</span> state<span class=\"k\">;</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>canQueryReturnData <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>elements<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>setSourceId <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>sourceId<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>sourceId <span class=\"k\">=</span> sourceId<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>prepare <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"c\">// nothing to do here</span>","    <span class=\"k\">}</span>    ","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createSelection <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> selection <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">\"class\"</span><span class=\"k\">:</span><span class=\"s\">\"org.pentaho.metadata.model.thin.Element\"</span><span class=\"k\">,</span>","            <span class=\"s\">\"elementType\"</span><span class=\"k\">:</span><span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"id\"</span><span class=\"k\">:</span><span class=\"s\">\"time\"</span><span class=\"k\">,</span>","            <span class=\"s\">\"name\"</span><span class=\"k\">:</span><span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"selectedAggregation\"</span><span class=\"k\">:</span><span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"dataType\"</span><span class=\"k\">:</span><span class=\"k\">null</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">return</span> selection<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createSort <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> sort <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">\"class\"</span> <span class=\"k\">:</span> <span class=\"s\">\"org.pentaho.metadata.model.thin.Order\"</span><span class=\"k\">,</span>","            <span class=\"s\">\"parentId\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"elementId\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"orderType\"</span> <span class=\"k\">:</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>SORT_TYPES<span class=\"k\">.</span>ASCENDING","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> sort<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createCondition <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> condition <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">\"class\"</span> <span class=\"k\">:</span> <span class=\"s\">\"org.pentaho.common.ui.metadata.model.impl.Condition\"</span><span class=\"k\">,</span>","            <span class=\"s\">\"parentId\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"elementId\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"operator\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"value\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"combinationType\"</span> <span class=\"k\">:</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>OPERATOR_TYPES<span class=\"k\">.</span>AND<span class=\"k\">,</span>","            <span class=\"s\">\"parameterized\"</span><span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","            <span class=\"s\">\"selectedAggType\"</span><span class=\"k\">:</span> <span class=\"k\">null</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> condition<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createParameter <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> parameter <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">\"class\"</span> <span class=\"k\">:</span> <span class=\"s\">\"org.pentaho.common.ui.metadata.model.impl.Parameter\"</span><span class=\"k\">,</span>","            <span class=\"s\">\"elementId\"</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"name\"</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"type\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"value\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"defaultValue\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> parameter<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addSelectionById <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> columnId <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> column <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>getColumnById<span class=\"k\">(</span> columnId <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>column <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> selection <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createSelection<span class=\"k\">();</span>","            selection<span class=\"k\">.</span>id <span class=\"k\">=</span> columnId<span class=\"k\">;</span>","            selection<span class=\"k\">.</span>parentId <span class=\"k\">=</span> column<span class=\"k\">.</span>parentId<span class=\"k\">;</span>","            selection<span class=\"k\">.</span>selectedAggregation <span class=\"k\">=</span> selection<span class=\"k\">.</span>defaultAggType <span class=\"k\">=</span> column<span class=\"k\">.</span>defaultAggregation<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addSelection<span class=\"k\">(</span> selection <span class=\"k\">);</span>","            <span class=\"k\">return</span> selection<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addSortById <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> columnId<span class=\"k\">,</span> orderType <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> column <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>getColumnById<span class=\"k\">(</span> columnId <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>column <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> sort <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createSort<span class=\"k\">();</span>","            sort<span class=\"k\">.</span>elementId <span class=\"k\">=</span> columnId<span class=\"k\">;</span>","            sort<span class=\"k\">.</span>parentId <span class=\"k\">=</span> column<span class=\"k\">.</span>parentId<span class=\"k\">;</span>","            sort<span class=\"k\">.</span>orderType <span class=\"k\">=</span> orderType<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addSort<span class=\"k\">(</span> sort <span class=\"k\">);</span>","            <span class=\"k\">return</span> sort<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addConditionById <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnId<span class=\"k\">,</span> operator<span class=\"k\">,</span> value<span class=\"k\">,</span> combinationType<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> selectedAggType<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> column <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>getColumnById<span class=\"k\">(</span> columnId <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>column <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> condition <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createCondition<span class=\"k\">();</span>","            condition<span class=\"k\">.</span>elementId <span class=\"k\">=</span> columnId<span class=\"k\">;</span>","            condition<span class=\"k\">.</span>parentId <span class=\"k\">=</span> column<span class=\"k\">.</span>parentId<span class=\"k\">;</span>","            condition<span class=\"k\">.</span>operator <span class=\"k\">=</span> operator<span class=\"k\">;</span>","            condition<span class=\"k\">.</span>parameterized <span class=\"k\">=</span> <span class=\"k\">true</span> <span class=\"k\">===</span> parameterized<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">typeof</span> value <span class=\"k\">==</span> <span class=\"s\">'object'</span> <span class=\"k\">&amp;&amp;</span> value<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                condition<span class=\"k\">.</span>value <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                condition<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"k\">[</span> value <span class=\"k\">];</span>","            <span class=\"k\">}</span>","            condition<span class=\"k\">.</span>combinationType <span class=\"k\">=</span> combinationType<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>selectedAggType <span class=\"k\">&amp;&amp;</span> column<span class=\"k\">.</span>defaultAggregation <span class=\"k\">!==</span> selectedAggType <span class=\"k\">&amp;&amp;</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>AGG_TYPE_MAP<span class=\"k\">[</span>selectedAggType<span class=\"k\">])</span> <span class=\"k\">{</span>","                condition<span class=\"k\">.</span>selectedAggType <span class=\"k\">=</span> selectedAggType<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addCondition<span class=\"k\">(</span> condition <span class=\"k\">);</span>","            <span class=\"k\">return</span> condition<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addParameterById <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnId<span class=\"k\">,</span> name<span class=\"k\">,</span> value<span class=\"k\">,</span> defaultValue<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> column <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>getColumnById<span class=\"k\">(</span> columnId <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>column <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> parameter <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createParameter<span class=\"k\">();</span>","            parameter<span class=\"k\">.</span>elementId <span class=\"k\">=</span> columnId<span class=\"k\">;</span>","            parameter<span class=\"k\">.</span>name <span class=\"k\">=</span> name<span class=\"k\">;</span>","            parameter<span class=\"k\">.</span>type <span class=\"k\">=</span> column<span class=\"k\">.</span>dataType<span class=\"k\">;</span>","            parameter<span class=\"k\">.</span>value <span class=\"k\">=</span> value<span class=\"k\">;</span>","            parameter<span class=\"k\">.</span>defaultValue <span class=\"k\">=</span> defaultValue<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>parameter<span class=\"k\">.</span>defaultValue <span class=\"k\">==</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","              parameter<span class=\"k\">.</span>defaultValue <span class=\"k\">=</span> parameter<span class=\"k\">.</span>value<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>addParameter<span class=\"k\">(</span>parameter<span class=\"k\">);</span>","        <span class=\"k\">return</span> parameter<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>couldReturnData <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>elements<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addSelection <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> selection <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>elements<span class=\"k\">.</span>push<span class=\"k\">(</span> selection <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addSort <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> sort <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>orders<span class=\"k\">.</span>push<span class=\"k\">(</span> sort <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addCondition <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> condition <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">.</span>push<span class=\"k\">(</span> condition <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addParameter <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> parameter <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>parameters<span class=\"k\">.</span>push<span class=\"k\">(</span> parameter <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getJson <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> dojo<span class=\"k\">.</span>toJson<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getQueryStr <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>getJson<span class=\"k\">();</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getParameterValueString <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span> column<span class=\"k\">,</span> value <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">||</span> value <span class=\"k\">==</span> <span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> value<span class=\"k\">.</span>constructor<span class=\"k\">.</span>toString<span class=\"k\">().</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"Array\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// we have an array of values</span>","            <span class=\"k\">var</span> str <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","            <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>value<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> idx <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    str <span class=\"k\">+=</span> <span class=\"s\">'|'</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                str <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getParameterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span>value<span class=\"k\">[</span>idx<span class=\"k\">]);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> str<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> column<span class=\"k\">.</span>dataType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>DATE <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">+</span>value<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> column<span class=\"k\">.</span>dataType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>NUMERIC <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">+</span>value<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> column<span class=\"k\">.</span>dataType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>BOOLEAN <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">+</span>value<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"s\">'\"'</span><span class=\"k\">+</span>value<span class=\"k\">+</span><span class=\"s\">'\"'</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getFilterConditionString <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> columnId<span class=\"k\">,</span> category<span class=\"k\">,</span> operator<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">,</span> aggregationType <span class=\"k\">)</span> <span class=\"k\">{</span>","        operator <span class=\"k\">=</span> operator<span class=\"k\">.</span>toUpperCase<span class=\"k\">();</span>","        <span class=\"k\">var</span> column <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>getColumnById<span class=\"k\">(</span> columnId <span class=\"k\">);</span>","        <span class=\"k\">var</span> operand <span class=\"k\">=</span> <span class=\"s\">'['</span> <span class=\"k\">+</span> category <span class=\"k\">+</span> <span class=\"s\">'.'</span> <span class=\"k\">+</span> columnId <span class=\"k\">+</span> <span class=\"k\">(</span>aggregationType <span class=\"k\">?</span> <span class=\"s\">'.'</span> <span class=\"k\">+</span> aggregationType <span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">']'</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> isArrayValues <span class=\"k\">=</span> value<span class=\"k\">.</span>constructor<span class=\"k\">.</span>toString<span class=\"k\">().</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"Array\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>LIKE <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'LIKE('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">';\"%'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">)+</span><span class=\"s\">'%\")'</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>EQUAL <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>isArrayValues <span class=\"k\">||</span> value<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'EQUALS('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">';'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">')'</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>EQUAL <span class=\"k\">&amp;&amp;</span> isArrayValues<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'IN('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">';'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">)+</span><span class=\"s\">\")\"</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>LESS_THAN <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> operand<span class=\"k\">+</span><span class=\"s\">' &lt;'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">);</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>LESS_THAN_OR_EQUAL <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> operand<span class=\"k\">+</span><span class=\"s\">' &lt;='</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">);</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>MORE_THAN <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> operand<span class=\"k\">+</span><span class=\"s\">' &gt;'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">);</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>MORE_THAN_OR_EQUAL <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> operand<span class=\"k\">+</span><span class=\"s\">' &gt;='</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">);</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>CONTAINS<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'CONTAINS('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">';'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">)+</span><span class=\"s\">\")\"</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>NOT_CONTAINS<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'NOT(CONTAINS('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">';'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">)+</span><span class=\"s\">\"))\"</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>BEGINSWITH<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'BEGINSWITH('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">';'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">)+</span><span class=\"s\">\")\"</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>ENDSWITH<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'ENDSWITH('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">';'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">)+</span><span class=\"s\">\")\"</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>IS_NULL<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'ISNA('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">')'</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>NOT_NULL<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'NOT(ISNA('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">'))'</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>svc<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getFilterValueString <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>parameterized<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"c\">// If this filter is parameterized it's value is the name of the parameter</span>","          <span class=\"c\">// see if we have parameters</span>","          <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>parameters<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++)</span> <span class=\"k\">{</span>","              <span class=\"k\">if</span><span class=\"k\">(</span> parameters<span class=\"k\">[</span>idx<span class=\"k\">].</span>name <span class=\"k\">===</span> value<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                  <span class=\"c\">// this has a parameter</span>","                  <span class=\"k\">var</span> param <span class=\"k\">=</span> <span class=\"s\">'[param:'</span><span class=\"k\">+</span>parameters<span class=\"k\">[</span>idx<span class=\"k\">].</span>name<span class=\"k\">+</span><span class=\"s\">']'</span><span class=\"k\">;</span>","                  <span class=\"k\">if</span><span class=\"k\">(</span> column<span class=\"k\">.</span>dataType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>DATE <span class=\"k\">)</span> <span class=\"k\">{</span>","                    param <span class=\"k\">=</span> <span class=\"s\">'DATEVALUE('</span><span class=\"k\">+</span>param<span class=\"k\">+</span><span class=\"s\">')'</span><span class=\"k\">;</span>","                  <span class=\"k\">}</span>","                  <span class=\"k\">return</span> param<span class=\"k\">;</span>","              <span class=\"k\">}</span>","          <span class=\"k\">}</span>","          <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"unable to find parameter '\"</span> <span class=\"k\">+</span> value <span class=\"k\">+</span> <span class=\"s\">\"' for condition on column \"</span> <span class=\"k\">+</span> column <span class=\"k\">+</span> <span class=\"s\">\".\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(</span> value<span class=\"k\">.</span>constructor<span class=\"k\">.</span>toString<span class=\"k\">().</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"Array\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// we have an array of values</span>","            <span class=\"k\">var</span> str <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","            <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>value<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> idx <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    str <span class=\"k\">+=</span> <span class=\"s\">';'</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                str <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span>value<span class=\"k\">[</span>idx<span class=\"k\">]);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> str<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> column<span class=\"k\">.</span>dataType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>NUMERIC <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">+</span>value<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> column<span class=\"k\">.</span>dataType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>DATE <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'DATEVALUE(\"'</span><span class=\"k\">+</span>value<span class=\"k\">+</span><span class=\"s\">'\")'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> column<span class=\"k\">.</span>dataType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>BOOLEAN <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">+</span>value<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"s\">'\"'</span><span class=\"k\">+</span>value<span class=\"k\">+</span><span class=\"s\">'\"'</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>"];
_$jscoverage['dataapi/models-svc.js'][4]++;
pentaho.pda.SvcHandler = (function svcHandler(sandbox) {
  _$jscoverage['dataapi/models-svc.js'][5]++;
  pentaho.pda.Handler.call(this, sandbox);
  _$jscoverage['dataapi/models-svc.js'][6]++;
  this.type = pentaho.pda.SOURCE_TYPE_SVC;
  _$jscoverage['dataapi/models-svc.js'][7]++;
  this.SERVICE_URL = (CONTEXT_PATH + "content/MetadataModelsSvc");
});
_$jscoverage['dataapi/models-svc.js'][10]++;
inheritPrototype(pentaho.pda.SvcHandler, pentaho.pda.Handler);
_$jscoverage['dataapi/models-svc.js'][12]++;
pentaho.pda.SvcHandler.prototype.getSources = (function (callback, options) {
  _$jscoverage['dataapi/models-svc.js'][13]++;
  options = (options || {});
  _$jscoverage['dataapi/models-svc.js'][14]++;
  var filter = options.filter;
  _$jscoverage['dataapi/models-svc.js'][15]++;
  var _sources = [], i = 0, j = 0, each;
  _$jscoverage['dataapi/models-svc.js'][16]++;
  if ((this.sources.length > 0)) {
    _$jscoverage['dataapi/models-svc.js'][17]++;
    if ((filter == null)) {
      _$jscoverage['dataapi/models-svc.js'][18]++;
      for (var i = 0, j = this.sources.length; (i < j); (i++)) {
        _$jscoverage['dataapi/models-svc.js'][19]++;
        callback(this.sources[i]);
}
    }
    else {
      _$jscoverage['dataapi/models-svc.js'][22]++;
      for (var i = 0, j = this.sources.length; (i < j); (i++)) {
        _$jscoverage['dataapi/models-svc.js'][23]++;
        each = this.sources[i];
        _$jscoverage['dataapi/models-svc.js'][24]++;
        try {
          _$jscoverage['dataapi/models-svc.js'][25]++;
          if ((each[filter.property] == filter.value)) {
            _$jscoverage['dataapi/models-svc.js'][26]++;
            callback(each);
          }
        }
        catch (e) {
        }
}
    }
  }
  else {
    _$jscoverage['dataapi/models-svc.js'][36]++;
    var url = (this.SERVICE_URL + "?action=listmodels");
    _$jscoverage['dataapi/models-svc.js'][37]++;
    var contextName = options.context;
    _$jscoverage['dataapi/models-svc.js'][38]++;
    var query = ("domainName=&" + (contextName? ("context=" + contextName): ""));
    _$jscoverage['dataapi/models-svc.js'][39]++;
    var jsonStr = pentahoPost(url, query, null, "text/text");
    _$jscoverage['dataapi/models-svc.js'][40]++;
    var rawModels = eval(("(" + jsonStr + ")"));
    _$jscoverage['dataapi/models-svc.js'][42]++;
    for (var idx = 0; (idx < rawModels.length); (idx++)) {
      _$jscoverage['dataapi/models-svc.js'][43]++;
      model = this.addModelInfoFromNode(rawModels[idx]);
      _$jscoverage['dataapi/models-svc.js'][44]++;
      this.sources.push(model);
      _$jscoverage['dataapi/models-svc.js'][45]++;
      if ((filter == null)) {
        _$jscoverage['dataapi/models-svc.js'][46]++;
        callback(model);
      }
      else {
        _$jscoverage['dataapi/models-svc.js'][48]++;
        if ((model[filter.property] == filter.value)) {
          _$jscoverage['dataapi/models-svc.js'][49]++;
          callback(each);
        }
      }
}
  }
});
_$jscoverage['dataapi/models-svc.js'][57]++;
pentaho.pda.SvcHandler.prototype.newModelFromState = (function (state) {
  _$jscoverage['dataapi/models-svc.js'][58]++;
  var model = state;
  _$jscoverage['dataapi/models-svc.js'][59]++;
  model.modelId = state.id;
  _$jscoverage['dataapi/models-svc.js'][60]++;
  model.type = model.providerId;
  _$jscoverage['dataapi/models-svc.js'][61]++;
  return model;
});
_$jscoverage['dataapi/models-svc.js'][64]++;
pentaho.pda.SvcHandler.prototype.addModelInfoFromNode = (function addModelInfoFromNode(node) {
  _$jscoverage['dataapi/models-svc.js'][65]++;
  return new (pentaho.pda.model.svc)(this.newModelFromState(node), this);
});
_$jscoverage['dataapi/models-svc.js'][72]++;
pentaho.pda.model.svc = (function (obj, handler) {
  _$jscoverage['dataapi/models-svc.js'][73]++;
  pentaho.pda.model.call(this, obj);
  _$jscoverage['dataapi/models-svc.js'][75]++;
  this.categories = new Array();
  _$jscoverage['dataapi/models-svc.js'][76]++;
  this.id = obj.id;
  _$jscoverage['dataapi/models-svc.js'][77]++;
  this.modelId = obj.modelId;
  _$jscoverage['dataapi/models-svc.js'][78]++;
  this.modelName = (obj.modelName || "");
  _$jscoverage['dataapi/models-svc.js'][79]++;
  this.modelDescription = (obj.modelDescription || "");
  _$jscoverage['dataapi/models-svc.js'][80]++;
  this.handler = handler;
  _$jscoverage['dataapi/models-svc.js'][81]++;
  this.type = "svc";
  _$jscoverage['dataapi/models-svc.js'][82]++;
  this.state = obj;
});
_$jscoverage['dataapi/models-svc.js'][85]++;
inheritPrototype(pentaho.pda.model.svc, pentaho.pda.model);
_$jscoverage['dataapi/models-svc.js'][87]++;
pentaho.pda.model.svc.prototype.discoverModelDetail = (function () {
  _$jscoverage['dataapi/models-svc.js'][90]++;
  var url = (this.handler.SERVICE_URL + "?action=getmodel&id=" + escape(this.id));
  _$jscoverage['dataapi/models-svc.js'][91]++;
  var resultStr = pentahoPost(url, "", null, "text/text");
  _$jscoverage['dataapi/models-svc.js'][94]++;
  this.state = eval(("(" + resultStr + ")"));
  _$jscoverage['dataapi/models-svc.js'][96]++;
  this.categories = this.state.categories;
  _$jscoverage['dataapi/models-svc.js'][97]++;
  this.capabilities = this.state.capabilities;
  _$jscoverage['dataapi/models-svc.js'][98]++;
  if ((this.capabilities == null)) {
    _$jscoverage['dataapi/models-svc.js'][99]++;
    this.capabilities = {};
  }
  _$jscoverage['dataapi/models-svc.js'][101]++;
  this.elements = this.state.elements;
});
_$jscoverage['dataapi/models-svc.js'][105]++;
pentaho.pda.model.svc.prototype.getAllColumns = (function () {
  _$jscoverage['dataapi/models-svc.js'][106]++;
  var columns = new Array();
  _$jscoverage['dataapi/models-svc.js'][108]++;
  for (var idx2 = 0; (idx2 < this.elements.length); (idx2++)) {
    _$jscoverage['dataapi/models-svc.js'][109]++;
    if (this.elements[idx2].isQueryElement) {
      _$jscoverage['dataapi/models-svc.js'][110]++;
      columns.push(this.elements[idx2]);
    }
}
  _$jscoverage['dataapi/models-svc.js'][113]++;
  return columns;
});
_$jscoverage['dataapi/models-svc.js'][116]++;
pentaho.pda.model.svc.prototype.searchColumn = (function (column, searchStr, rowLimit, callback) {
  _$jscoverage['dataapi/models-svc.js'][117]++;
  var query = this.createQuery();
  _$jscoverage['dataapi/models-svc.js'][118]++;
  var selection = query.addSelectionById(column.id);
  _$jscoverage['dataapi/models-svc.js'][119]++;
  var sort = query.addSortById(column.id, pentaho.pda.Column.SORT_TYPES.ASCENDING);
  _$jscoverage['dataapi/models-svc.js'][120]++;
  if (searchStr) {
    _$jscoverage['dataapi/models-svc.js'][121]++;
    query.addConditionById(column.id, pentaho.pda.Column.CONDITION_TYPES.CONTAINS, searchStr, pentaho.pda.Column.OPERATOR_TYPES.OR);
  }
  _$jscoverage['dataapi/models-svc.js'][123]++;
  return this.submitQuery(query, rowLimit, callback);
});
_$jscoverage['dataapi/models-svc.js'][126]++;
pentaho.pda.model.svc.prototype.getAllValuesForColumn = (function (column, rowLimit) {
  _$jscoverage['dataapi/models-svc.js'][127]++;
  return this.searchColumn(column, undefined, rowLimit);
});
_$jscoverage['dataapi/models-svc.js'][131]++;
pentaho.pda.model.svc.prototype.createQuery = (function () {
  _$jscoverage['dataapi/models-svc.js'][133]++;
  var query = new (pentaho.pda.query.svc)(this);
  _$jscoverage['dataapi/models-svc.js'][135]++;
  query.setSourceId(this.id);
  _$jscoverage['dataapi/models-svc.js'][136]++;
  return query;
});
_$jscoverage['dataapi/models-svc.js'][141]++;
pentaho.pda.model.svc.prototype.createQueryFromJson = (function (json) {
  _$jscoverage['dataapi/models-svc.js'][143]++;
  var query = new (pentaho.pda.query.svc)(this);
  _$jscoverage['dataapi/models-svc.js'][145]++;
  var state;
  _$jscoverage['dataapi/models-svc.js'][146]++;
  if (json["class"]) {
    _$jscoverage['dataapi/models-svc.js'][147]++;
    state = json;
  }
  else {
    _$jscoverage['dataapi/models-svc.js'][149]++;
    state = eval(("(" + json + ")"));
  }
  _$jscoverage['dataapi/models-svc.js'][152]++;
  query.setSourceId(this.id);
  _$jscoverage['dataapi/models-svc.js'][153]++;
  query.setState(state);
  _$jscoverage['dataapi/models-svc.js'][154]++;
  return query;
});
_$jscoverage['dataapi/models-svc.js'][160]++;
pentaho.pda.model.svc.prototype.submitQuery = (function (queryObject, rowLimit, callback) {
  _$jscoverage['dataapi/models-svc.js'][161]++;
  var json = queryObject.getJson();
  _$jscoverage['dataapi/models-svc.js'][163]++;
  return this.submit(json, rowLimit, callback);
});
_$jscoverage['dataapi/models-svc.js'][166]++;
pentaho.pda.model.svc.prototype.submit = (function (jsonString, rowLimit, callback) {
  _$jscoverage['dataapi/models-svc.js'][168]++;
  var results = {metadata: [], resultset: []};
  _$jscoverage['dataapi/models-svc.js'][172]++;
  if ((! rowLimit)) {
    _$jscoverage['dataapi/models-svc.js'][173]++;
    rowLimit = -1;
  }
  _$jscoverage['dataapi/models-svc.js'][176]++;
  var handleResultCallback = dojo.hitch(this, (function (resultJson) {
  _$jscoverage['dataapi/models-svc.js'][178]++;
  var jsonTable = eval(("(" + resultJson + ")"));
  _$jscoverage['dataapi/models-svc.js'][179]++;
  result = new (pentaho.DataTable)(jsonTable);
  _$jscoverage['dataapi/models-svc.js'][180]++;
  if (callback) {
    _$jscoverage['dataapi/models-svc.js'][181]++;
    callback(result);
  }
  _$jscoverage['dataapi/models-svc.js'][183]++;
  return result;
}));
  _$jscoverage['dataapi/models-svc.js'][186]++;
  try {
    _$jscoverage['dataapi/models-svc.js'][188]++;
    var url = this.handler.SERVICE_URL;
    _$jscoverage['dataapi/models-svc.js'][189]++;
    var query = ("action=query&query=" + jsonString);
    _$jscoverage['dataapi/models-svc.js'][190]++;
    var resultJson = pentahoPost(url, query, (callback? handleResultCallback: undefined), "text/text");
    _$jscoverage['dataapi/models-svc.js'][191]++;
    if ((! callback)) {
      _$jscoverage['dataapi/models-svc.js'][192]++;
      return handleResultCallback(resultJson);
    }
  }
  catch (e) {
    _$jscoverage['dataapi/models-svc.js'][195]++;
    alert(e.message);
  }
  _$jscoverage['dataapi/models-svc.js'][197]++;
  return null;
});
_$jscoverage['dataapi/models-svc.js'][202]++;
FilterHelper = (function (filterColumn, filterEditBoxId, filterParameterState, model) {
  _$jscoverage['dataapi/models-svc.js'][204]++;
  this.filterEditBoxId = filterEditBoxId;
  _$jscoverage['dataapi/models-svc.js'][205]++;
  this.filterColumn = filterColumn;
  _$jscoverage['dataapi/models-svc.js'][206]++;
  this.filterParameterState = filterParameterState;
  _$jscoverage['dataapi/models-svc.js'][207]++;
  this.model = model;
  _$jscoverage['dataapi/models-svc.js'][208]++;
  this.filterKeyTimeout = null;
  _$jscoverage['dataapi/models-svc.js'][209]++;
  this.filterId = null;
  _$jscoverage['dataapi/models-svc.js'][210]++;
  this.searchListElement = null;
  _$jscoverage['dataapi/models-svc.js'][211]++;
  this.searchListDiv = null;
  _$jscoverage['dataapi/models-svc.js'][213]++;
  this.endFilterSelection = (function () {
  _$jscoverage['dataapi/models-svc.js'][214]++;
  this.searchListDiv.style.display = "none";
});
  _$jscoverage['dataapi/models-svc.js'][217]++;
  this.handleFilterKeyUp = (function (evt) {
  _$jscoverage['dataapi/models-svc.js'][219]++;
  var code = evt.keyCode;
  _$jscoverage['dataapi/models-svc.js'][221]++;
  if ((code == 13)) {
    _$jscoverage['dataapi/models-svc.js'][221]++;
    return;
  }
  _$jscoverage['dataapi/models-svc.js'][221]++;
  ;
  _$jscoverage['dataapi/models-svc.js'][222]++;
  if ((code == 37)) {
    _$jscoverage['dataapi/models-svc.js'][222]++;
    return;
  }
  _$jscoverage['dataapi/models-svc.js'][222]++;
  ;
  _$jscoverage['dataapi/models-svc.js'][223]++;
  if ((code == 38)) {
    _$jscoverage['dataapi/models-svc.js'][223]++;
    return;
  }
  _$jscoverage['dataapi/models-svc.js'][223]++;
  ;
  _$jscoverage['dataapi/models-svc.js'][224]++;
  if ((code == 39)) {
    _$jscoverage['dataapi/models-svc.js'][224]++;
    return;
  }
  _$jscoverage['dataapi/models-svc.js'][224]++;
  ;
  _$jscoverage['dataapi/models-svc.js'][225]++;
  if ((code == 27)) {
    _$jscoverage['dataapi/models-svc.js'][225]++;
    this.endFilterSelection();
    _$jscoverage['dataapi/models-svc.js'][225]++;
    return;
  }
  _$jscoverage['dataapi/models-svc.js'][225]++;
  ;
  _$jscoverage['dataapi/models-svc.js'][226]++;
  if ((code == 40)) {
    _$jscoverage['dataapi/models-svc.js'][227]++;
    this.searchListElement.focus();
    _$jscoverage['dataapi/models-svc.js'][228]++;
    this.searchListElement.selectedIndex = 0;
    _$jscoverage['dataapi/models-svc.js'][229]++;
    return;
  }
  _$jscoverage['dataapi/models-svc.js'][231]++;
  this.filterParameterState.value = document.getElementById(this.filterEditBoxId).value;
  _$jscoverage['dataapi/models-svc.js'][232]++;
  this.filterParameterState.defaultValue = this.filterParameterState.value;
  _$jscoverage['dataapi/models-svc.js'][233]++;
  if ((this.filterColumn != null)) {
    _$jscoverage['dataapi/models-svc.js'][234]++;
    if ((this.filterKeyTimeout != null)) {
      _$jscoverage['dataapi/models-svc.js'][235]++;
      clearTimeout(this.filterKeyTimeout);
    }
    _$jscoverage['dataapi/models-svc.js'][237]++;
    this.filterKeyTimeout = setTimeout("filterHelper.searchFilterValues()", 500);
  }
});
  _$jscoverage['dataapi/models-svc.js'][241]++;
  this.filterListKeyUp = (function (evt) {
  _$jscoverage['dataapi/models-svc.js'][243]++;
  var code = evt.keyCode;
  _$jscoverage['dataapi/models-svc.js'][245]++;
  if ((code == 27)) {
    _$jscoverage['dataapi/models-svc.js'][246]++;
    this.searchListDiv.style.display = "none";
  }
  _$jscoverage['dataapi/models-svc.js'][249]++;
  if ((code == 38)) {
    _$jscoverage['dataapi/models-svc.js'][250]++;
    if ((this.searchListElement.selectedIndex > 0)) {
      _$jscoverage['dataapi/models-svc.js'][251]++;
      return;
    }
    _$jscoverage['dataapi/models-svc.js'][253]++;
    var editbox = document.getElementById(this.filterEditBoxId);
    _$jscoverage['dataapi/models-svc.js'][254]++;
    editbox.focus();
    _$jscoverage['dataapi/models-svc.js'][255]++;
    this.searchListElement.selectedIndex = -1;
  }
  _$jscoverage['dataapi/models-svc.js'][257]++;
  if ((code == 13)) {
    _$jscoverage['dataapi/models-svc.js'][258]++;
    var editbox = document.getElementById(this.filterEditBoxId);
    _$jscoverage['dataapi/models-svc.js'][259]++;
    this.selectFilterValue();
    _$jscoverage['dataapi/models-svc.js'][260]++;
    editbox.focus();
  }
});
  _$jscoverage['dataapi/models-svc.js'][264]++;
  this.searchFilterValues = (function () {
  _$jscoverage['dataapi/models-svc.js'][266]++;
  if ((this.filterKeyTimeout != null)) {
    _$jscoverage['dataapi/models-svc.js'][267]++;
    clearTimeout(this.filterKeyTimeout);
  }
  _$jscoverage['dataapi/models-svc.js'][269]++;
  this.filterKeyTimeout = null;
  _$jscoverage['dataapi/models-svc.js'][270]++;
  this.searchListElement.options.length = 0;
  _$jscoverage['dataapi/models-svc.js'][271]++;
  var value = document.getElementById(this.filterEditBoxId).value;
  _$jscoverage['dataapi/models-svc.js'][272]++;
  if ((value == "")) {
    _$jscoverage['dataapi/models-svc.js'][273]++;
    return;
  }
  _$jscoverage['dataapi/models-svc.js'][276]++;
  var result = this.model.searchColumn(this.filterColumn, value);
  _$jscoverage['dataapi/models-svc.js'][277]++;
  if ((! result)) {
    _$jscoverage['dataapi/models-svc.js'][278]++;
    return;
  }
  _$jscoverage['dataapi/models-svc.js'][281]++;
  var editbox = document.getElementById(filterEditBoxId);
  _$jscoverage['dataapi/models-svc.js'][283]++;
  var pos = this.findPosition(editbox);
  _$jscoverage['dataapi/models-svc.js'][285]++;
  this.searchListDiv.style.left = ("" + pos.x + "px");
  _$jscoverage['dataapi/models-svc.js'][286]++;
  this.searchListDiv.style.width = ("" + editbox.style.width);
  _$jscoverage['dataapi/models-svc.js'][287]++;
  this.searchListDiv.style.top = ("" + (pos.y + parseInt(editbox.style.height)) + "px");
  _$jscoverage['dataapi/models-svc.js'][288]++;
  var rows = result.resultset;
  _$jscoverage['dataapi/models-svc.js'][289]++;
  for (var idx = 0; (idx < rows.length); (idx++)) {
    _$jscoverage['dataapi/models-svc.js'][290]++;
    var option = new Option(rows[idx][0]);
    _$jscoverage['dataapi/models-svc.js'][291]++;
    this.searchListElement.options[this.searchListElement.options.length] = option;
    _$jscoverage['dataapi/models-svc.js'][292]++;
    if ((this.searchListElement.options.length < 9)) {
      _$jscoverage['dataapi/models-svc.js'][293]++;
      this.searchListElement.size = Math.max(this.searchListElement.options.length, 2);
    }
}
  _$jscoverage['dataapi/models-svc.js'][296]++;
  this.searchListDiv.style.display = "block";
});
  _$jscoverage['dataapi/models-svc.js'][299]++;
  this.findPosition = (function (element) {
  _$jscoverage['dataapi/models-svc.js'][300]++;
  var p = {x: (element.offsetLeft || 0), y: (element.offsetTop || 0)};
  _$jscoverage['dataapi/models-svc.js'][301]++;
  while ((element = element.offsetParent)) {
    _$jscoverage['dataapi/models-svc.js'][302]++;
    p.x += element.offsetLeft;
    _$jscoverage['dataapi/models-svc.js'][303]++;
    p.y += element.offsetTop;
}
  _$jscoverage['dataapi/models-svc.js'][305]++;
  return p;
});
  _$jscoverage['dataapi/models-svc.js'][308]++;
  this.selectFilterValue = (function () {
  _$jscoverage['dataapi/models-svc.js'][309]++;
  var idx = this.searchListElement.selectedIndex;
  _$jscoverage['dataapi/models-svc.js'][310]++;
  if ((idx >= 0)) {
    _$jscoverage['dataapi/models-svc.js'][311]++;
    var value = this.searchListElement.options[idx].value;
    _$jscoverage['dataapi/models-svc.js'][312]++;
    var editbox = document.getElementById(filterEditBoxId);
    _$jscoverage['dataapi/models-svc.js'][313]++;
    editbox.value = value;
    _$jscoverage['dataapi/models-svc.js'][314]++;
    this.filterParameterState.value = value;
    _$jscoverage['dataapi/models-svc.js'][315]++;
    this.filterParameterState.defaultValue = this.filterParameterState.value;
    _$jscoverage['dataapi/models-svc.js'][316]++;
    if (this.filterValueSelected) {
      _$jscoverage['dataapi/models-svc.js'][317]++;
      this.filterValueSelected(this.filterParameterState);
    }
    _$jscoverage['dataapi/models-svc.js'][319]++;
    this.searchListDiv.style.display = "none";
  }
});
});
_$jscoverage['dataapi/models-svc.js'][329]++;
pentaho.pda.query.svc = (function (model) {
  _$jscoverage['dataapi/models-svc.js'][330]++;
  pentaho.pda.query.call(this, model);
  _$jscoverage['dataapi/models-svc.js'][332]++;
  this.state = {"class": "org.pentaho.metadata.model.thin.Query", "elements": [], "conditions": [], "defaultParameterMap": null, "disableDistinct": null, "orders": [], "parameters": [], "sourceId": ""};
});
_$jscoverage['dataapi/models-svc.js'][344]++;
inheritPrototype(pentaho.pda.query.svc, pentaho.pda.query);
_$jscoverage['dataapi/models-svc.js'][346]++;
pentaho.pda.query.svc.prototype.setState = (function (state) {
  _$jscoverage['dataapi/models-svc.js'][347]++;
  this.state = state;
});
_$jscoverage['dataapi/models-svc.js'][350]++;
pentaho.pda.query.svc.prototype.canQueryReturnData = (function () {
  _$jscoverage['dataapi/models-svc.js'][351]++;
  return (this.state.elements.length > 0);
});
_$jscoverage['dataapi/models-svc.js'][354]++;
pentaho.pda.query.svc.prototype.setSourceId = (function (sourceId) {
  _$jscoverage['dataapi/models-svc.js'][355]++;
  this.state.sourceId = sourceId;
});
_$jscoverage['dataapi/models-svc.js'][358]++;
pentaho.pda.query.svc.prototype.prepare = (function () {
});
_$jscoverage['dataapi/models-svc.js'][362]++;
pentaho.pda.query.svc.prototype.createSelection = (function () {
  _$jscoverage['dataapi/models-svc.js'][363]++;
  var selection = {"class": "org.pentaho.metadata.model.thin.Element", "elementType": null, "id": "time", "name": null, "selectedAggregation": null, "dataType": null};
  _$jscoverage['dataapi/models-svc.js'][372]++;
  return selection;
});
_$jscoverage['dataapi/models-svc.js'][375]++;
pentaho.pda.query.svc.prototype.createSort = (function () {
  _$jscoverage['dataapi/models-svc.js'][376]++;
  var sort = {"class": "org.pentaho.metadata.model.thin.Order", "parentId": null, "elementId": null, "orderType": pentaho.pda.Column.SORT_TYPES.ASCENDING};
  _$jscoverage['dataapi/models-svc.js'][382]++;
  return sort;
});
_$jscoverage['dataapi/models-svc.js'][385]++;
pentaho.pda.query.svc.prototype.createCondition = (function () {
  _$jscoverage['dataapi/models-svc.js'][386]++;
  var condition = {"class": "org.pentaho.common.ui.metadata.model.impl.Condition", "parentId": null, "elementId": null, "operator": null, "value": null, "combinationType": pentaho.pda.Column.OPERATOR_TYPES.AND, "parameterized": false, "selectedAggType": null};
  _$jscoverage['dataapi/models-svc.js'][396]++;
  return condition;
});
_$jscoverage['dataapi/models-svc.js'][399]++;
pentaho.pda.query.svc.prototype.createParameter = (function () {
  _$jscoverage['dataapi/models-svc.js'][400]++;
  var parameter = {"class": "org.pentaho.common.ui.metadata.model.impl.Parameter", "elementId": null, "name": null, "type": null, "value": null, "defaultValue": null};
  _$jscoverage['dataapi/models-svc.js'][408]++;
  return parameter;
});
_$jscoverage['dataapi/models-svc.js'][411]++;
pentaho.pda.query.svc.prototype.addSelectionById = (function (columnId) {
  _$jscoverage['dataapi/models-svc.js'][412]++;
  var column = this.model.getColumnById(columnId);
  _$jscoverage['dataapi/models-svc.js'][413]++;
  if ((column != null)) {
    _$jscoverage['dataapi/models-svc.js'][414]++;
    var selection = this.createSelection();
    _$jscoverage['dataapi/models-svc.js'][415]++;
    selection.id = columnId;
    _$jscoverage['dataapi/models-svc.js'][416]++;
    selection.parentId = column.parentId;
    _$jscoverage['dataapi/models-svc.js'][417]++;
    selection.selectedAggregation = (selection.defaultAggType = column.defaultAggregation);
    _$jscoverage['dataapi/models-svc.js'][418]++;
    this.addSelection(selection);
    _$jscoverage['dataapi/models-svc.js'][419]++;
    return selection;
  }
  _$jscoverage['dataapi/models-svc.js'][421]++;
  return null;
});
_$jscoverage['dataapi/models-svc.js'][424]++;
pentaho.pda.query.svc.prototype.addSortById = (function (columnId, orderType) {
  _$jscoverage['dataapi/models-svc.js'][425]++;
  var column = this.model.getColumnById(columnId);
  _$jscoverage['dataapi/models-svc.js'][426]++;
  if ((column != null)) {
    _$jscoverage['dataapi/models-svc.js'][427]++;
    var sort = this.createSort();
    _$jscoverage['dataapi/models-svc.js'][428]++;
    sort.elementId = columnId;
    _$jscoverage['dataapi/models-svc.js'][429]++;
    sort.parentId = column.parentId;
    _$jscoverage['dataapi/models-svc.js'][430]++;
    sort.orderType = orderType;
    _$jscoverage['dataapi/models-svc.js'][431]++;
    this.addSort(sort);
    _$jscoverage['dataapi/models-svc.js'][432]++;
    return sort;
  }
  _$jscoverage['dataapi/models-svc.js'][434]++;
  return null;
});
_$jscoverage['dataapi/models-svc.js'][437]++;
pentaho.pda.query.svc.prototype.addConditionById = (function (columnId, operator, value, combinationType, parameterized, selectedAggType) {
  _$jscoverage['dataapi/models-svc.js'][438]++;
  var column = this.model.getColumnById(columnId);
  _$jscoverage['dataapi/models-svc.js'][439]++;
  if ((column != null)) {
    _$jscoverage['dataapi/models-svc.js'][440]++;
    var condition = this.createCondition();
    _$jscoverage['dataapi/models-svc.js'][441]++;
    condition.elementId = columnId;
    _$jscoverage['dataapi/models-svc.js'][442]++;
    condition.parentId = column.parentId;
    _$jscoverage['dataapi/models-svc.js'][443]++;
    condition.operator = operator;
    _$jscoverage['dataapi/models-svc.js'][444]++;
    condition.parameterized = (true === parameterized);
    _$jscoverage['dataapi/models-svc.js'][445]++;
    if ((((typeof value) == "object") && value.length)) {
      _$jscoverage['dataapi/models-svc.js'][446]++;
      condition.value = value;
    }
    else {
      _$jscoverage['dataapi/models-svc.js'][448]++;
      condition.value = [value];
    }
    _$jscoverage['dataapi/models-svc.js'][450]++;
    condition.combinationType = combinationType;
    _$jscoverage['dataapi/models-svc.js'][451]++;
    if ((selectedAggType && (column.defaultAggregation !== selectedAggType) && pentaho.pda.Column.AGG_TYPE_MAP[selectedAggType])) {
      _$jscoverage['dataapi/models-svc.js'][452]++;
      condition.selectedAggType = selectedAggType;
    }
    _$jscoverage['dataapi/models-svc.js'][454]++;
    this.addCondition(condition);
    _$jscoverage['dataapi/models-svc.js'][455]++;
    return condition;
  }
  _$jscoverage['dataapi/models-svc.js'][457]++;
  return null;
});
_$jscoverage['dataapi/models-svc.js'][460]++;
pentaho.pda.query.svc.prototype.addParameterById = (function (columnId, name, value, defaultValue) {
  _$jscoverage['dataapi/models-svc.js'][461]++;
  var column = this.model.getColumnById(columnId);
  _$jscoverage['dataapi/models-svc.js'][462]++;
  if ((column != null)) {
    _$jscoverage['dataapi/models-svc.js'][463]++;
    var parameter = this.createParameter();
    _$jscoverage['dataapi/models-svc.js'][464]++;
    parameter.elementId = columnId;
    _$jscoverage['dataapi/models-svc.js'][465]++;
    parameter.name = name;
    _$jscoverage['dataapi/models-svc.js'][466]++;
    parameter.type = column.dataType;
    _$jscoverage['dataapi/models-svc.js'][467]++;
    parameter.value = value;
    _$jscoverage['dataapi/models-svc.js'][468]++;
    parameter.defaultValue = defaultValue;
    _$jscoverage['dataapi/models-svc.js'][469]++;
    if ((parameter.defaultValue == undefined)) {
      _$jscoverage['dataapi/models-svc.js'][470]++;
      parameter.defaultValue = parameter.value;
    }
  }
  _$jscoverage['dataapi/models-svc.js'][473]++;
  this.addParameter(parameter);
  _$jscoverage['dataapi/models-svc.js'][474]++;
  return parameter;
});
_$jscoverage['dataapi/models-svc.js'][477]++;
pentaho.pda.query.svc.prototype.couldReturnData = (function () {
  _$jscoverage['dataapi/models-svc.js'][478]++;
  return (this.state.elements.length > 0);
});
_$jscoverage['dataapi/models-svc.js'][481]++;
pentaho.pda.query.svc.prototype.addSelection = (function (selection) {
  _$jscoverage['dataapi/models-svc.js'][482]++;
  this.state.elements.push(selection);
});
_$jscoverage['dataapi/models-svc.js'][485]++;
pentaho.pda.query.svc.prototype.addSort = (function (sort) {
  _$jscoverage['dataapi/models-svc.js'][486]++;
  this.state.orders.push(sort);
});
_$jscoverage['dataapi/models-svc.js'][489]++;
pentaho.pda.query.svc.prototype.addCondition = (function (condition) {
  _$jscoverage['dataapi/models-svc.js'][490]++;
  this.state.conditions.push(condition);
});
_$jscoverage['dataapi/models-svc.js'][493]++;
pentaho.pda.query.svc.prototype.addParameter = (function (parameter) {
  _$jscoverage['dataapi/models-svc.js'][494]++;
  this.state.parameters.push(parameter);
});
_$jscoverage['dataapi/models-svc.js'][497]++;
pentaho.pda.query.svc.prototype.getJson = (function () {
  _$jscoverage['dataapi/models-svc.js'][498]++;
  return dojo.toJson(this.state);
});
_$jscoverage['dataapi/models-svc.js'][501]++;
pentaho.pda.query.svc.prototype.getQueryStr = (function () {
  _$jscoverage['dataapi/models-svc.js'][502]++;
  return this.getJson();
});
_$jscoverage['dataapi/models-svc.js'][505]++;
pentaho.pda.query.svc.prototype.getParameterValueString = (function (column, value) {
  _$jscoverage['dataapi/models-svc.js'][506]++;
  if (((value == null) || (value == ""))) {
    _$jscoverage['dataapi/models-svc.js'][507]++;
    return "";
  }
  _$jscoverage['dataapi/models-svc.js'][509]++;
  if ((value.constructor.toString().indexOf("Array") != -1)) {
    _$jscoverage['dataapi/models-svc.js'][511]++;
    var str = "";
    _$jscoverage['dataapi/models-svc.js'][512]++;
    for (var idx = 0; (idx < value.length); (idx++)) {
      _$jscoverage['dataapi/models-svc.js'][513]++;
      if ((idx > 0)) {
        _$jscoverage['dataapi/models-svc.js'][514]++;
        str += "|";
      }
      _$jscoverage['dataapi/models-svc.js'][516]++;
      str += this.getParameterValueString(column, value[idx]);
}
    _$jscoverage['dataapi/models-svc.js'][518]++;
    return str;
  }
  _$jscoverage['dataapi/models-svc.js'][520]++;
  if ((column.dataType == pentaho.pda.Column.DATA_TYPES.DATE)) {
    _$jscoverage['dataapi/models-svc.js'][521]++;
    return ("" + value);
  }
  _$jscoverage['dataapi/models-svc.js'][523]++;
  if ((column.dataType == pentaho.pda.Column.DATA_TYPES.NUMERIC)) {
    _$jscoverage['dataapi/models-svc.js'][524]++;
    return ("" + value);
  }
  _$jscoverage['dataapi/models-svc.js'][526]++;
  if ((column.dataType == pentaho.pda.Column.DATA_TYPES.BOOLEAN)) {
    _$jscoverage['dataapi/models-svc.js'][527]++;
    return ("" + value);
  }
  _$jscoverage['dataapi/models-svc.js'][529]++;
  return ("\"" + value + "\"");
});
_$jscoverage['dataapi/models-svc.js'][532]++;
pentaho.pda.query.svc.prototype.getFilterConditionString = (function (columnId, category, operator, value, parameterized, parameters, aggregationType) {
  _$jscoverage['dataapi/models-svc.js'][533]++;
  operator = operator.toUpperCase();
  _$jscoverage['dataapi/models-svc.js'][534]++;
  var column = this.model.getColumnById(columnId);
  _$jscoverage['dataapi/models-svc.js'][535]++;
  var operand = ("[" + category + "." + columnId + (aggregationType? ("." + aggregationType): "") + "]");
  _$jscoverage['dataapi/models-svc.js'][536]++;
  var isArrayValues = (value.constructor.toString().indexOf("Array") != -1);
  _$jscoverage['dataapi/models-svc.js'][537]++;
  if ((operator == pentaho.pda.Column.CONDITION_TYPES.LIKE)) {
    _$jscoverage['dataapi/models-svc.js'][538]++;
    return ("LIKE(" + operand + ";\"%" + this.getFilterValueString(column, value, parameterized, parameters) + "%\")");
  }
  else {
    _$jscoverage['dataapi/models-svc.js'][540]++;
    if (((operator == pentaho.pda.Column.CONDITION_TYPES.EQUAL) && ((! isArrayValues) || (value.length == 1)))) {
      _$jscoverage['dataapi/models-svc.js'][541]++;
      return ("EQUALS(" + operand + ";" + this.getFilterValueString(column, value, parameterized, parameters) + ")");
    }
    else {
      _$jscoverage['dataapi/models-svc.js'][543]++;
      if (((operator == pentaho.pda.Column.CONDITION_TYPES.EQUAL) && isArrayValues)) {
        _$jscoverage['dataapi/models-svc.js'][544]++;
        return ("IN(" + operand + ";" + this.getFilterValueString(column, value, parameterized, parameters) + ")");
      }
      else {
        _$jscoverage['dataapi/models-svc.js'][546]++;
        if ((operator == pentaho.pda.Column.CONDITION_TYPES.LESS_THAN)) {
          _$jscoverage['dataapi/models-svc.js'][547]++;
          return (operand + " <" + this.getFilterValueString(column, value, parameterized, parameters));
        }
        else {
          _$jscoverage['dataapi/models-svc.js'][549]++;
          if ((operator == pentaho.pda.Column.CONDITION_TYPES.LESS_THAN_OR_EQUAL)) {
            _$jscoverage['dataapi/models-svc.js'][550]++;
            return (operand + " <=" + this.getFilterValueString(column, value, parameterized, parameters));
          }
          else {
            _$jscoverage['dataapi/models-svc.js'][552]++;
            if ((operator == pentaho.pda.Column.CONDITION_TYPES.MORE_THAN)) {
              _$jscoverage['dataapi/models-svc.js'][553]++;
              return (operand + " >" + this.getFilterValueString(column, value, parameterized, parameters));
            }
            else {
              _$jscoverage['dataapi/models-svc.js'][555]++;
              if ((operator == pentaho.pda.Column.CONDITION_TYPES.MORE_THAN_OR_EQUAL)) {
                _$jscoverage['dataapi/models-svc.js'][556]++;
                return (operand + " >=" + this.getFilterValueString(column, value, parameterized, parameters));
              }
              else {
                _$jscoverage['dataapi/models-svc.js'][558]++;
                if ((operator == pentaho.pda.Column.CONDITION_TYPES.CONTAINS)) {
                  _$jscoverage['dataapi/models-svc.js'][559]++;
                  return ("CONTAINS(" + operand + ";" + this.getFilterValueString(column, value, parameterized, parameters) + ")");
                }
                else {
                  _$jscoverage['dataapi/models-svc.js'][561]++;
                  if ((operator == pentaho.pda.Column.CONDITION_TYPES.NOT_CONTAINS)) {
                    _$jscoverage['dataapi/models-svc.js'][562]++;
                    return ("NOT(CONTAINS(" + operand + ";" + this.getFilterValueString(column, value, parameterized, parameters) + "))");
                  }
                  else {
                    _$jscoverage['dataapi/models-svc.js'][564]++;
                    if ((operator == pentaho.pda.Column.CONDITION_TYPES.BEGINSWITH)) {
                      _$jscoverage['dataapi/models-svc.js'][565]++;
                      return ("BEGINSWITH(" + operand + ";" + this.getFilterValueString(column, value, parameterized, parameters) + ")");
                    }
                    else {
                      _$jscoverage['dataapi/models-svc.js'][567]++;
                      if ((operator == pentaho.pda.Column.CONDITION_TYPES.ENDSWITH)) {
                        _$jscoverage['dataapi/models-svc.js'][568]++;
                        return ("ENDSWITH(" + operand + ";" + this.getFilterValueString(column, value, parameterized, parameters) + ")");
                      }
                      else {
                        _$jscoverage['dataapi/models-svc.js'][570]++;
                        if ((operator == pentaho.pda.Column.CONDITION_TYPES.IS_NULL)) {
                          _$jscoverage['dataapi/models-svc.js'][571]++;
                          return ("ISNA(" + operand + ")");
                        }
                        else {
                          _$jscoverage['dataapi/models-svc.js'][573]++;
                          if ((operator == pentaho.pda.Column.CONDITION_TYPES.NOT_NULL)) {
                            _$jscoverage['dataapi/models-svc.js'][574]++;
                            return ("NOT(ISNA(" + operand + "))");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
});
_$jscoverage['dataapi/models-svc.js'][578]++;
pentaho.pda.query.svc.prototype.getFilterValueString = (function (column, value, parameterized, parameters) {
  _$jscoverage['dataapi/models-svc.js'][579]++;
  if ((value == null)) {
    _$jscoverage['dataapi/models-svc.js'][580]++;
    return "";
  }
  _$jscoverage['dataapi/models-svc.js'][582]++;
  if (parameterized) {
    _$jscoverage['dataapi/models-svc.js'][585]++;
    for (var idx = 0; (idx < parameters.length); (idx++)) {
      _$jscoverage['dataapi/models-svc.js'][586]++;
      if ((parameters[idx].name === value[0])) {
        _$jscoverage['dataapi/models-svc.js'][588]++;
        var param = ("[param:" + parameters[idx].name + "]");
        _$jscoverage['dataapi/models-svc.js'][589]++;
        if ((column.dataType == pentaho.pda.Column.DATA_TYPES.DATE)) {
          _$jscoverage['dataapi/models-svc.js'][590]++;
          param = ("DATEVALUE(" + param + ")");
        }
        _$jscoverage['dataapi/models-svc.js'][592]++;
        return param;
      }
}
    _$jscoverage['dataapi/models-svc.js'][595]++;
    throw new Error(("unable to find parameter '" + value + "' for condition on column " + column + "."));
  }
  _$jscoverage['dataapi/models-svc.js'][598]++;
  if ((value.constructor.toString().indexOf("Array") != -1)) {
    _$jscoverage['dataapi/models-svc.js'][600]++;
    var str = "";
    _$jscoverage['dataapi/models-svc.js'][601]++;
    for (var idx = 0; (idx < value.length); (idx++)) {
      _$jscoverage['dataapi/models-svc.js'][602]++;
      if ((idx > 0)) {
        _$jscoverage['dataapi/models-svc.js'][603]++;
        str += ";";
      }
      _$jscoverage['dataapi/models-svc.js'][605]++;
      str += this.getFilterValueString(column, value[idx]);
}
    _$jscoverage['dataapi/models-svc.js'][607]++;
    return str;
  }
  _$jscoverage['dataapi/models-svc.js'][609]++;
  if ((column.dataType == pentaho.pda.Column.DATA_TYPES.NUMERIC)) {
    _$jscoverage['dataapi/models-svc.js'][610]++;
    return ("" + value);
  }
  _$jscoverage['dataapi/models-svc.js'][612]++;
  if ((column.dataType == pentaho.pda.Column.DATA_TYPES.DATE)) {
    _$jscoverage['dataapi/models-svc.js'][613]++;
    return ("DATEVALUE(\"" + value + "\")");
  }
  _$jscoverage['dataapi/models-svc.js'][615]++;
  if ((column.dataType == pentaho.pda.Column.DATA_TYPES.BOOLEAN)) {
    _$jscoverage['dataapi/models-svc.js'][616]++;
    return ("" + value);
  }
  _$jscoverage['dataapi/models-svc.js'][618]++;
  return ("\"" + value + "\"");
});
