/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['repo/pentaho-ajax.js']) {
  _$jscoverage['repo/pentaho-ajax.js'] = [];
  _$jscoverage['repo/pentaho-ajax.js'][2] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][4] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][5] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][6] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][7] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][9] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][10] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][35] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][38] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][41] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][43] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][44] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][45] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][46] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][50] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][74] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][77] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][79] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][80] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][81] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][84] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][85] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][86] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][87] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][92] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][118] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][119] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][122] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][123] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][124] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][125] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][129] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][130] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][131] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][132] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][134] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][135] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][136] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][138] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][139] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][142] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][147] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][148] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][152] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][154] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][157] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][158] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][159] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][163] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][164] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][165] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][167] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][171] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][175] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][177] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][180] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][182] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][207] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][208] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][210] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][211] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][212] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][213] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][217] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][218] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][219] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][220] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][222] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][223] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][224] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][226] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][227] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][230] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][234] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][235] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][239] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][241] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][245] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][246] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][247] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][248] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][249] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][250] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][252] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][256] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][274] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][277] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][278] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][280] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][283] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][285] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][287] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][289] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][291] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][294] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][299] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][303] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][304] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][305] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][310] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][312] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][315] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][316] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][318] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][319] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][321] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][322] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][324] = 0;
  _$jscoverage['repo/pentaho-ajax.js'][325] = 0;
}
_$jscoverage['repo/pentaho-ajax.js'].source = ["<span class=\"c\">// see http://developer.mozilla.org/en/docs/AJAX:Getting_Started for other values</span>","<span class=\"k\">var</span> COMPLETE <span class=\"k\">=</span> <span class=\"s\">4</span><span class=\"k\">;</span>","<span class=\"c\">// see http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html for other values</span>","<span class=\"k\">var</span> STATUS_OK <span class=\"k\">=</span> <span class=\"s\">200</span><span class=\"k\">;</span>","<span class=\"k\">var</span> STATUS_UNAUTHORIZED <span class=\"k\">=</span> <span class=\"s\">401</span><span class=\"k\">;</span>","<span class=\"k\">var</span> STATUS_NOT_FOUND <span class=\"k\">=</span> <span class=\"s\">404</span><span class=\"k\">;</span>","<span class=\"k\">var</span> base <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","","<span class=\"k\">var</span> pathArray <span class=\"k\">=</span> window<span class=\"k\">.</span>location<span class=\"k\">.</span>pathname<span class=\"k\">.</span>split<span class=\"k\">(</span> <span class=\"s\">'/'</span> <span class=\"k\">);</span>","<span class=\"k\">var</span> webAppPath <span class=\"k\">=</span> <span class=\"s\">\"/\"</span> <span class=\"k\">+</span> pathArray<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @param solution String name of the solution containing the action sequence definition being called</span>","<span class=\"c\"> * @param path String path to the action sequence definition being called</span>","<span class=\"c\"> * @param action String name of the action sequence definition being called</span>","<span class=\"c\"> * @param params Array containing the parameters for the query string </span>","<span class=\"c\"> * @param func String, object, or function. It is optional. Refers to the function to call </span>","<span class=\"c\"> * asynchronously when the client receives the server's response. If the parameter is:</span>","<span class=\"c\"> *   null or undefined:</span>","<span class=\"c\"> *     the request to the server is synchronous, and the response is returned </span>","<span class=\"c\"> *     by this method.</span>","<span class=\"c\"> *   of type String or string:</span>","<span class=\"c\"> *     the name of the function to call</span>","<span class=\"c\"> *   of type function:</span>","<span class=\"c\"> *     the function object to call</span>","<span class=\"c\"> *   of type object, where the object has the properties obj and method:</span>","<span class=\"c\"> *     func.obj is the object to call the method func.method on,</span>","<span class=\"c\"> *     e.g. obj.method()</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * @return String containing the server's response if func is not null or undefined,</span>","<span class=\"c\"> * null if the call is asynchronous.</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * @throws Error when unable to create an XMLHttpRequest object</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> pentahoAction<span class=\"k\">(</span> solution<span class=\"k\">,</span> path<span class=\"k\">,</span> action<span class=\"k\">,</span> params<span class=\"k\">,</span> func <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"c\">// execute an Action Sequence on the server</span>","","\t<span class=\"k\">var</span> url <span class=\"k\">=</span> WEB_CONTEXT_BASE <span class=\"k\">+</span> <span class=\"s\">\"ViewAction\"</span><span class=\"k\">;</span>","\t","\t<span class=\"c\">// create the URL we need</span>","\t<span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"s\">\"wrapper=false&amp;solution=\"</span><span class=\"k\">+</span>solution<span class=\"k\">+</span><span class=\"s\">\"&amp;path=\"</span><span class=\"k\">+</span>path<span class=\"k\">+</span><span class=\"s\">\"&amp;action=\"</span><span class=\"k\">+</span>action<span class=\"k\">;</span>","\t<span class=\"c\">// add any parameters provided</span>","\t<span class=\"k\">if</span><span class=\"k\">(</span> params <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> idx<span class=\"k\">;</span>","\t\t<span class=\"k\">for</span><span class=\"k\">(</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>params<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tquery <span class=\"k\">+=</span> <span class=\"s\">\"&amp;\"</span> <span class=\"k\">+</span>encodeURIComponent<span class=\"k\">(</span> params<span class=\"k\">[</span>idx<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"=\"</span> <span class=\"k\">+</span> encodeURIComponent<span class=\"k\">(</span> params<span class=\"k\">[</span>idx<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","\t<span class=\"c\">// submit this as a post</span>","\t<span class=\"k\">return</span> pentahoPost<span class=\"k\">(</span> url<span class=\"k\">,</span> query<span class=\"k\">,</span> func <span class=\"k\">);</span>","<span class=\"k\">}</span>    ","<span class=\"c\">/**</span>","<span class=\"c\"> * @param component String</span>","<span class=\"c\"> * @param params Array containing the parameters for the query string </span>","<span class=\"c\"> * @param func String, object, or function. It is optional. Refers to the function to call when the client </span>","<span class=\"c\"> * receives the server's response. If the parameter is:</span>","<span class=\"c\"> *   null or undefined:</span>","<span class=\"c\"> *     the request to the server is synchronous, and the response is returned </span>","<span class=\"c\"> *     by this method.</span>","<span class=\"c\"> *   of type String or string:</span>","<span class=\"c\"> *     the name of the function to call</span>","<span class=\"c\"> *   of type function:</span>","<span class=\"c\"> *     the function object to call</span>","<span class=\"c\"> *   of type object, where the object has the properties obj and method:</span>","<span class=\"c\"> *     func.obj is the object to call the method func.method on,</span>","<span class=\"c\"> *     e.g. obj.method()</span>","<span class=\"c\"> * @param mimeType String optional, specifies the mime type of the response</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * @return String containing the server's response if func is not null or undefined,</span>","<span class=\"c\"> * null if the call is asynchronous.</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * @throws Error when unable to create an XMLHttpRequest object</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> pentahoService<span class=\"k\">(</span> component<span class=\"k\">,</span> params<span class=\"k\">,</span> func<span class=\"k\">,</span> mimeType <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"c\">// execute a web service on the server</span>","\t<span class=\"c\">// create the URL we need</span>","\t<span class=\"k\">var</span> url <span class=\"k\">=</span> WEB_CONTEXT_BASE <span class=\"k\">+</span> <span class=\"s\">\"ServiceAction\"</span><span class=\"k\">;</span>","\t","\t<span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"s\">\"ajax=true&amp;\"</span><span class=\"k\">;</span>","\t<span class=\"k\">if</span><span class=\"k\">(</span> component <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tquery <span class=\"k\">+=</span> <span class=\"s\">\"component=\"</span><span class=\"k\">+</span>component<span class=\"k\">+</span><span class=\"s\">\"&amp;\"</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","\t<span class=\"c\">// add any parameters provided</span>","\t<span class=\"k\">if</span><span class=\"k\">(</span> params <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> idx<span class=\"k\">;</span>","\t\t<span class=\"k\">for</span><span class=\"k\">(</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>params<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tquery <span class=\"k\">+=</span> <span class=\"s\">\"&amp;\"</span> <span class=\"k\">+</span>encodeURIComponent<span class=\"k\">(</span> params<span class=\"k\">[</span>idx<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"=\"</span> <span class=\"k\">+</span> encodeURIComponent<span class=\"k\">(</span> params<span class=\"k\">[</span>idx<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","\t","\t<span class=\"c\">// submit this as a post</span>","\t<span class=\"k\">return</span> pentahoPost<span class=\"k\">(</span> url<span class=\"k\">,</span> query<span class=\"k\">,</span> func<span class=\"k\">,</span> mimeType <span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @param url String url of the web service/servlet</span>","<span class=\"c\"> * @param query String containing the message to send to the server</span>","<span class=\"c\"> * @param func String, object, or function. It is optional. Refers to the function to call when the client </span>","<span class=\"c\"> * receives the server's response. If the parameter is:</span>","<span class=\"c\"> *   null or undefined:</span>","<span class=\"c\"> *     the request to the server is synchronous, and the response is returned </span>","<span class=\"c\"> *     by this method.</span>","<span class=\"c\"> *   of type String or string:</span>","<span class=\"c\"> *     the name of the function to call</span>","<span class=\"c\"> *   of type function:</span>","<span class=\"c\"> *     the function object to call</span>","<span class=\"c\"> *   of type object, where the object has the properties obj and method:</span>","<span class=\"c\"> *     func.obj is the object to call the method func.method on,</span>","<span class=\"c\"> *     e.g. obj.method()</span>","<span class=\"c\"> * @param mimeType String optional, specifies the mime type of the response</span>","<span class=\"c\"> * @param allowCaching If not true a unique request string will be generated </span>","<span class=\"c\"> * </span>","<span class=\"c\"> * @return String containing the server's response if func is not null or undefined,</span>","<span class=\"c\"> * null if the call is asynchronous.</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * @throws Error when unable to create an XMLHttpRequest object</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> pentahoGet<span class=\"k\">(</span> url<span class=\"k\">,</span> query<span class=\"k\">,</span> func<span class=\"k\">,</span> mimeType<span class=\"k\">,</span> allowCaching <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> async <span class=\"k\">=</span> undefined <span class=\"k\">!=</span> func <span class=\"k\">&amp;&amp;</span> <span class=\"k\">null</span> <span class=\"k\">!=</span> func<span class=\"k\">;</span>","","\t<span class=\"c\">// submit a 'get' request</span>","    <span class=\"k\">var</span> http_request <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t<span class=\"k\">var</span> returnType <span class=\"k\">=</span> <span class=\"s\">\"text/xml\"</span><span class=\"k\">;</span>","\t<span class=\"k\">if</span><span class=\"k\">(</span> mimeType <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\treturnType <span class=\"k\">=</span> mimeType<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// create an HTTP request object</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>window<span class=\"k\">.</span>XMLHttpRequest<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// Mozilla, Safari, ...</span>","        http_request <span class=\"k\">=</span> <span class=\"k\">new</span> XMLHttpRequest<span class=\"k\">();</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>http_request<span class=\"k\">.</span>overrideMimeType<span class=\"k\">)</span> <span class=\"k\">{</span>","            http_request<span class=\"k\">.</span>overrideMimeType<span class=\"k\">(</span>returnType<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>window<span class=\"k\">.</span>ActiveXObject<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// IE</span>","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            http_request <span class=\"k\">=</span> <span class=\"k\">new</span> ActiveXObject<span class=\"k\">(</span><span class=\"s\">\"Msxml2.XMLHTTP\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                http_request <span class=\"k\">=</span> <span class=\"k\">new</span> ActiveXObject<span class=\"k\">(</span><span class=\"s\">\"Microsoft.XMLHTTP\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> ","            <span class=\"k\">{</span>","            \thttp_request <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">if</span> <span class=\"k\">(!</span>http_request<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">'Cannot create an XMLHTTP instance'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// set the callback function</span>","\t  <span class=\"k\">if</span> <span class=\"k\">(</span> async <span class=\"k\">)</span>","\t  <span class=\"k\">{</span>","\t    http_request<span class=\"k\">.</span>onreadystatechange <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> pentahoResponse<span class=\"k\">(</span>http_request<span class=\"k\">,</span> func<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">;</span>","\t  <span class=\"k\">}</span>","\t","\t  <span class=\"k\">if</span> <span class=\"k\">(</span>allowCaching <span class=\"k\">!==</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t    <span class=\"k\">var</span> time <span class=\"k\">=</span> <span class=\"k\">new</span> Date<span class=\"k\">().</span>getTime<span class=\"k\">();</span>","\t    query <span class=\"k\">=</span> query <span class=\"k\">+</span> <span class=\"k\">(</span>query<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">?</span> <span class=\"s\">\"\"</span> <span class=\"k\">:</span> <span class=\"s\">\"&amp;\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> time <span class=\"k\">+</span> <span class=\"s\">\"=\"</span> <span class=\"k\">+</span> time<span class=\"k\">;</span>","\t  <span class=\"k\">}</span>","","\t  <span class=\"c\">// submit the request</span>","    http_request<span class=\"k\">.</span>open<span class=\"k\">(</span><span class=\"s\">'GET'</span><span class=\"k\">,</span> url<span class=\"k\">+</span><span class=\"s\">\"?\"</span><span class=\"k\">+</span>query<span class=\"k\">,</span> async <span class=\"k\">);</span>","    http_request<span class=\"k\">.</span>send<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>async <span class=\"k\">)</span>","\t<span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> getResponse<span class=\"k\">(</span> http_request <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">else</span>","\t<span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> getUnauthorizedMsg<span class=\"k\">()</span>","<span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"s\">\"&lt;web-service&gt;&lt;unauthorized/&gt;&lt;/web-service&gt;\"</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> getNotFoundMsg<span class=\"k\">()</span>","<span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"s\">\"&lt;web-service&gt;&lt;not-found/&gt;&lt;/web-service&gt;\"</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @param url String url of the web service/servlet</span>","<span class=\"c\"> * @param query String containing the message to send to the server</span>","<span class=\"c\"> * @param func String, object, or function. It is optional. Refers to the function to call when the client </span>","<span class=\"c\"> * receives the server's response. If the parameter is:</span>","<span class=\"c\"> *   null or undefined:</span>","<span class=\"c\"> *     the request to the server is synchronous, and the response is returned </span>","<span class=\"c\"> *     by this method.</span>","<span class=\"c\"> *   of type String or string:</span>","<span class=\"c\"> *     the name of the function to call</span>","<span class=\"c\"> *   of type function:</span>","<span class=\"c\"> *     the function object to call</span>","<span class=\"c\"> *   of type object, where the object has the properties obj and method:</span>","<span class=\"c\"> *     func.obj is the object to call the method func.method on,</span>","<span class=\"c\"> *     e.g. obj.method()</span>","<span class=\"c\"> * @param mimeType String optional, specifies the mime type of the response</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * @return String containing the server's response if func is not null or undefined,</span>","<span class=\"c\"> * null if the call is asynchronous.</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * @throws Error when unable to create an XMLHttpRequest object</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> pentahoPost<span class=\"k\">(</span> url<span class=\"k\">,</span> query<span class=\"k\">,</span> func<span class=\"k\">,</span> mimeType <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> async <span class=\"k\">=</span> undefined <span class=\"k\">!=</span> func <span class=\"k\">&amp;&amp;</span> <span class=\"k\">null</span> <span class=\"k\">!=</span> func<span class=\"k\">;</span>","\t","\t<span class=\"k\">var</span> http_request <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t<span class=\"k\">var</span> returnType <span class=\"k\">=</span> <span class=\"s\">\"text/xml\"</span><span class=\"k\">;</span>","\t<span class=\"k\">if</span><span class=\"k\">(</span> mimeType <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\treturnType <span class=\"k\">=</span> mimeType<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","  ","\t<span class=\"c\">// create an HTTP request object</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span>window<span class=\"k\">.</span>XMLHttpRequest<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// Mozilla, Safari,...</span>","\t\thttp_request <span class=\"k\">=</span> <span class=\"k\">new</span> XMLHttpRequest<span class=\"k\">();</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>http_request<span class=\"k\">.</span>overrideMimeType<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\thttp_request<span class=\"k\">.</span>overrideMimeType<span class=\"k\">(</span>returnType<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>window<span class=\"k\">.</span>ActiveXObject<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// IE</span>","\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\thttp_request <span class=\"k\">=</span> <span class=\"k\">new</span> ActiveXObject<span class=\"k\">(</span><span class=\"s\">\"Msxml2.XMLHTTP\"</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t\thttp_request <span class=\"k\">=</span> <span class=\"k\">new</span> ActiveXObject<span class=\"k\">(</span><span class=\"s\">\"Microsoft.XMLHTTP\"</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> ","\t\t\t<span class=\"k\">{</span>","\t\t\t\thttp_request <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">if</span> <span class=\"k\">(!</span>http_request<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">'Cannot create XMLHTTP instance'</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","  ","  <span class=\"c\">// set the callback function</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span> async <span class=\"k\">)</span>","  <span class=\"k\">{</span>","  \thttp_request<span class=\"k\">.</span>onreadystatechange <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> pentahoResponse<span class=\"k\">(</span>http_request<span class=\"k\">,</span> func<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  <span class=\"c\">// submit the request</span>","  http_request<span class=\"k\">.</span>open<span class=\"k\">(</span><span class=\"s\">'POST'</span><span class=\"k\">,</span> url<span class=\"k\">,</span> async<span class=\"k\">);</span>","  http_request<span class=\"k\">.</span>setRequestHeader<span class=\"k\">(</span><span class=\"s\">\"Content-type\"</span><span class=\"k\">,</span> <span class=\"s\">\"application/x-www-form-urlencoded\"</span><span class=\"k\">);</span>","  http_request<span class=\"k\">.</span>setRequestHeader<span class=\"k\">(</span><span class=\"s\">\"Content-length\"</span><span class=\"k\">,</span> query<span class=\"k\">.</span>length<span class=\"k\">);</span>","  http_request<span class=\"k\">.</span>setRequestHeader<span class=\"k\">(</span><span class=\"s\">\"Connection\"</span><span class=\"k\">,</span> <span class=\"s\">\"close\"</span><span class=\"k\">);</span>","\thttp_request<span class=\"k\">.</span>send<span class=\"k\">(</span>query<span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>async <span class=\"k\">)</span>","\t<span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> getResponse<span class=\"k\">(</span> http_request <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">else</span>","\t<span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * NOTE: http://radio.javaranch.com/pascarello/2006/02/07/1139345471027.html discusses the necessity of the try/catch block</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * @param http_request instance of XMLHttpRequest object, actually object is platform dependent.</span>","<span class=\"c\"> * @param func String, object, or function. Required. Refers to the function to call when the client </span>","<span class=\"c\"> * receives the server's response. If the parameter is:</span>","<span class=\"c\"> *   of type String or string:</span>","<span class=\"c\"> *     the name of the function to call</span>","<span class=\"c\"> *   of type function:</span>","<span class=\"c\"> *     the function object to call</span>","<span class=\"c\"> *   of type object, where the object has the properties obj and method:</span>","<span class=\"c\"> *     func.obj is the object to call the method func.method on,</span>","<span class=\"c\"> *     e.g. obj.method()</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> pentahoResponse<span class=\"k\">(</span>http_request<span class=\"k\">,</span> func<span class=\"k\">)</span> <span class=\"k\">{</span>","  ","\t<span class=\"c\">// see if we got a good response back</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span>http_request<span class=\"k\">.</span>readyState <span class=\"k\">==</span> COMPLETE <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">try</span>","\t\t<span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> content <span class=\"k\">=</span> getResponse<span class=\"k\">(</span> http_request <span class=\"k\">);</span>","\t\t\t","\t\t\t<span class=\"c\">// execute the callback function</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span><span class=\"k\">(</span> func <span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">\"function\"</span> <span class=\"k\">)</span>","\t\t\t<span class=\"k\">{</span>","\t\t\t\tfunc<span class=\"k\">(</span> content <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span><span class=\"k\">(</span> func <span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">\"object\"</span> <span class=\"k\">&amp;&amp;</span> undefined <span class=\"k\">!=</span> func<span class=\"k\">.</span>obj <span class=\"k\">)</span>","\t\t\t<span class=\"k\">{</span>","\t\t\t\tfunc<span class=\"k\">.</span>method<span class=\"k\">.</span>call<span class=\"k\">(</span> func<span class=\"k\">.</span>obj<span class=\"k\">,</span> content <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span><span class=\"k\">(</span> func <span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">\"string\"</span> <span class=\"k\">)</span>","\t\t\t<span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">// must be a string</span>","\t\t\t\teval<span class=\"k\">(</span> func <span class=\"k\">+</span> <span class=\"s\">\"( content );\"</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">else</span>","\t\t\t<span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">//func must be null, which means caller wanted to run async, which means we should never get here</span>","\t\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">\"Invalid state in pentahoResponse, unrecognized callback function.\"</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">catch</span><span class=\"k\">(</span> e <span class=\"k\">)</span>","\t\t<span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> msg <span class=\"k\">=</span> e<span class=\"k\">.</span>message<span class=\"k\">;</span>","\t\t\talert<span class=\"k\">(</span> <span class=\"s\">\"pentaho-ajax.js.pentahoResponse(): \"</span> <span class=\"k\">+</span> e <span class=\"k\">);</span>","\t\t\t<span class=\"k\">throw</span> e<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> getResponse<span class=\"k\">(</span> http_request <span class=\"k\">)</span>","<span class=\"k\">{</span>","\t<span class=\"k\">switch</span> <span class=\"k\">(</span> http_request<span class=\"k\">.</span>status <span class=\"k\">)</span>","\t<span class=\"k\">{</span>","\t\t<span class=\"k\">case</span> STATUS_OK<span class=\"k\">:</span>","\t\t\t<span class=\"k\">return</span> http_request<span class=\"k\">.</span>responseText<span class=\"k\">;</span>","\t\t\t<span class=\"k\">break</span><span class=\"k\">;</span>","\t\t<span class=\"k\">case</span> STATUS_UNAUTHORIZED<span class=\"k\">:</span>","\t\t\t<span class=\"k\">return</span> getUnauthorizedMsg<span class=\"k\">();</span>","\t\t\t<span class=\"k\">break</span><span class=\"k\">;</span>","\t\t<span class=\"k\">case</span> STATUS_NOT_FOUND<span class=\"k\">:</span>","\t\t\t<span class=\"k\">return</span> getNotFoundMsg<span class=\"k\">();</span>","\t\t\t<span class=\"k\">break</span><span class=\"k\">;</span>","\t\t<span class=\"k\">default</span><span class=\"k\">:</span>","\t\t\t<span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">break</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>"];
_$jscoverage['repo/pentaho-ajax.js'][2]++;
var COMPLETE = 4;
_$jscoverage['repo/pentaho-ajax.js'][4]++;
var STATUS_OK = 200;
_$jscoverage['repo/pentaho-ajax.js'][5]++;
var STATUS_UNAUTHORIZED = 401;
_$jscoverage['repo/pentaho-ajax.js'][6]++;
var STATUS_NOT_FOUND = 404;
_$jscoverage['repo/pentaho-ajax.js'][7]++;
var base = "";
_$jscoverage['repo/pentaho-ajax.js'][9]++;
var pathArray = window.location.pathname.split("/");
_$jscoverage['repo/pentaho-ajax.js'][10]++;
var webAppPath = ("/" + pathArray[1]);
_$jscoverage['repo/pentaho-ajax.js'][35]++;
function pentahoAction(solution, path, action, params, func) {
  _$jscoverage['repo/pentaho-ajax.js'][38]++;
  var url = (WEB_CONTEXT_BASE + "ViewAction");
  _$jscoverage['repo/pentaho-ajax.js'][41]++;
  var query = ("wrapper=false&solution=" + solution + "&path=" + path + "&action=" + action);
  _$jscoverage['repo/pentaho-ajax.js'][43]++;
  if (params) {
    _$jscoverage['repo/pentaho-ajax.js'][44]++;
    var idx;
    _$jscoverage['repo/pentaho-ajax.js'][45]++;
    for (idx = 0; (idx < params.length); (idx++)) {
      _$jscoverage['repo/pentaho-ajax.js'][46]++;
      query += ("&" + encodeURIComponent(params[idx][0]) + "=" + encodeURIComponent(params[idx][1]));
}
  }
  _$jscoverage['repo/pentaho-ajax.js'][50]++;
  return pentahoPost(url, query, func);
}
_$jscoverage['repo/pentaho-ajax.js'][74]++;
function pentahoService(component, params, func, mimeType) {
  _$jscoverage['repo/pentaho-ajax.js'][77]++;
  var url = (WEB_CONTEXT_BASE + "ServiceAction");
  _$jscoverage['repo/pentaho-ajax.js'][79]++;
  var query = "ajax=true&";
  _$jscoverage['repo/pentaho-ajax.js'][80]++;
  if (component) {
    _$jscoverage['repo/pentaho-ajax.js'][81]++;
    query += ("component=" + component + "&");
  }
  _$jscoverage['repo/pentaho-ajax.js'][84]++;
  if (params) {
    _$jscoverage['repo/pentaho-ajax.js'][85]++;
    var idx;
    _$jscoverage['repo/pentaho-ajax.js'][86]++;
    for (idx = 0; (idx < params.length); (idx++)) {
      _$jscoverage['repo/pentaho-ajax.js'][87]++;
      query += ("&" + encodeURIComponent(params[idx][0]) + "=" + encodeURIComponent(params[idx][1]));
}
  }
  _$jscoverage['repo/pentaho-ajax.js'][92]++;
  return pentahoPost(url, query, func, mimeType);
}
_$jscoverage['repo/pentaho-ajax.js'][118]++;
function pentahoGet(url, query, func, mimeType, allowCaching) {
  _$jscoverage['repo/pentaho-ajax.js'][119]++;
  var async = ((undefined != func) && (null != func));
  _$jscoverage['repo/pentaho-ajax.js'][122]++;
  var http_request = null;
  _$jscoverage['repo/pentaho-ajax.js'][123]++;
  var returnType = "text/xml";
  _$jscoverage['repo/pentaho-ajax.js'][124]++;
  if (mimeType) {
    _$jscoverage['repo/pentaho-ajax.js'][125]++;
    returnType = mimeType;
  }
  _$jscoverage['repo/pentaho-ajax.js'][129]++;
  if (window.XMLHttpRequest) {
    _$jscoverage['repo/pentaho-ajax.js'][130]++;
    http_request = new XMLHttpRequest();
    _$jscoverage['repo/pentaho-ajax.js'][131]++;
    if (http_request.overrideMimeType) {
      _$jscoverage['repo/pentaho-ajax.js'][132]++;
      http_request.overrideMimeType(returnType);
    }
  }
  else {
    _$jscoverage['repo/pentaho-ajax.js'][134]++;
    if (window.ActiveXObject) {
      _$jscoverage['repo/pentaho-ajax.js'][135]++;
      try {
        _$jscoverage['repo/pentaho-ajax.js'][136]++;
        http_request = new ActiveXObject("Msxml2.XMLHTTP");
      }
      catch (e) {
        _$jscoverage['repo/pentaho-ajax.js'][138]++;
        try {
          _$jscoverage['repo/pentaho-ajax.js'][139]++;
          http_request = new ActiveXObject("Microsoft.XMLHTTP");
        }
        catch (e) {
          _$jscoverage['repo/pentaho-ajax.js'][142]++;
          http_request = null;
        }
      }
    }
  }
  _$jscoverage['repo/pentaho-ajax.js'][147]++;
  if ((! http_request)) {
    _$jscoverage['repo/pentaho-ajax.js'][148]++;
    throw new Error("Cannot create an XMLHTTP instance");
  }
  _$jscoverage['repo/pentaho-ajax.js'][152]++;
  if (async) {
    _$jscoverage['repo/pentaho-ajax.js'][154]++;
    http_request.onreadystatechange = (function () {
  _$jscoverage['repo/pentaho-ajax.js'][154]++;
  pentahoResponse(http_request, func);
});
  }
  _$jscoverage['repo/pentaho-ajax.js'][157]++;
  if ((allowCaching !== true)) {
    _$jscoverage['repo/pentaho-ajax.js'][158]++;
    var time = new Date().getTime();
    _$jscoverage['repo/pentaho-ajax.js'][159]++;
    query = (query + ((query.length === 0)? "": "&") + time + "=" + time);
  }
  _$jscoverage['repo/pentaho-ajax.js'][163]++;
  http_request.open("GET", (url + "?" + query), async);
  _$jscoverage['repo/pentaho-ajax.js'][164]++;
  http_request.send(null);
  _$jscoverage['repo/pentaho-ajax.js'][165]++;
  if ((! async)) {
    _$jscoverage['repo/pentaho-ajax.js'][167]++;
    return getResponse(http_request);
  }
  else {
    _$jscoverage['repo/pentaho-ajax.js'][171]++;
    return null;
  }
}
_$jscoverage['repo/pentaho-ajax.js'][175]++;
function getUnauthorizedMsg() {
  _$jscoverage['repo/pentaho-ajax.js'][177]++;
  return "<web-service><unauthorized/></web-service>";
}
_$jscoverage['repo/pentaho-ajax.js'][180]++;
function getNotFoundMsg() {
  _$jscoverage['repo/pentaho-ajax.js'][182]++;
  return "<web-service><not-found/></web-service>";
}
_$jscoverage['repo/pentaho-ajax.js'][207]++;
function pentahoPost(url, query, func, mimeType) {
  _$jscoverage['repo/pentaho-ajax.js'][208]++;
  var async = ((undefined != func) && (null != func));
  _$jscoverage['repo/pentaho-ajax.js'][210]++;
  var http_request = null;
  _$jscoverage['repo/pentaho-ajax.js'][211]++;
  var returnType = "text/xml";
  _$jscoverage['repo/pentaho-ajax.js'][212]++;
  if (mimeType) {
    _$jscoverage['repo/pentaho-ajax.js'][213]++;
    returnType = mimeType;
  }
  _$jscoverage['repo/pentaho-ajax.js'][217]++;
  if (window.XMLHttpRequest) {
    _$jscoverage['repo/pentaho-ajax.js'][218]++;
    http_request = new XMLHttpRequest();
    _$jscoverage['repo/pentaho-ajax.js'][219]++;
    if (http_request.overrideMimeType) {
      _$jscoverage['repo/pentaho-ajax.js'][220]++;
      http_request.overrideMimeType(returnType);
    }
  }
  else {
    _$jscoverage['repo/pentaho-ajax.js'][222]++;
    if (window.ActiveXObject) {
      _$jscoverage['repo/pentaho-ajax.js'][223]++;
      try {
        _$jscoverage['repo/pentaho-ajax.js'][224]++;
        http_request = new ActiveXObject("Msxml2.XMLHTTP");
      }
      catch (e) {
        _$jscoverage['repo/pentaho-ajax.js'][226]++;
        try {
          _$jscoverage['repo/pentaho-ajax.js'][227]++;
          http_request = new ActiveXObject("Microsoft.XMLHTTP");
        }
        catch (e) {
          _$jscoverage['repo/pentaho-ajax.js'][230]++;
          http_request = null;
        }
      }
    }
  }
  _$jscoverage['repo/pentaho-ajax.js'][234]++;
  if ((! http_request)) {
    _$jscoverage['repo/pentaho-ajax.js'][235]++;
    throw new Error("Cannot create XMLHTTP instance");
  }
  _$jscoverage['repo/pentaho-ajax.js'][239]++;
  if (async) {
    _$jscoverage['repo/pentaho-ajax.js'][241]++;
    http_request.onreadystatechange = (function () {
  _$jscoverage['repo/pentaho-ajax.js'][241]++;
  pentahoResponse(http_request, func);
});
  }
  _$jscoverage['repo/pentaho-ajax.js'][245]++;
  http_request.open("POST", url, async);
  _$jscoverage['repo/pentaho-ajax.js'][246]++;
  http_request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  _$jscoverage['repo/pentaho-ajax.js'][247]++;
  http_request.setRequestHeader("Content-length", query.length);
  _$jscoverage['repo/pentaho-ajax.js'][248]++;
  http_request.setRequestHeader("Connection", "close");
  _$jscoverage['repo/pentaho-ajax.js'][249]++;
  http_request.send(query);
  _$jscoverage['repo/pentaho-ajax.js'][250]++;
  if ((! async)) {
    _$jscoverage['repo/pentaho-ajax.js'][252]++;
    return getResponse(http_request);
  }
  else {
    _$jscoverage['repo/pentaho-ajax.js'][256]++;
    return null;
  }
}
_$jscoverage['repo/pentaho-ajax.js'][274]++;
function pentahoResponse(http_request, func) {
  _$jscoverage['repo/pentaho-ajax.js'][277]++;
  if ((http_request.readyState == COMPLETE)) {
    _$jscoverage['repo/pentaho-ajax.js'][278]++;
    try {
      _$jscoverage['repo/pentaho-ajax.js'][280]++;
      var content = getResponse(http_request);
      _$jscoverage['repo/pentaho-ajax.js'][283]++;
      if (((typeof func) == "function")) {
        _$jscoverage['repo/pentaho-ajax.js'][285]++;
        func(content);
      }
      else {
        _$jscoverage['repo/pentaho-ajax.js'][287]++;
        if ((((typeof func) == "object") && (undefined != func.obj))) {
          _$jscoverage['repo/pentaho-ajax.js'][289]++;
          func.method.call(func.obj, content);
        }
        else {
          _$jscoverage['repo/pentaho-ajax.js'][291]++;
          if (((typeof func) == "string")) {
            _$jscoverage['repo/pentaho-ajax.js'][294]++;
            eval((func + "( content );"));
          }
          else {
            _$jscoverage['repo/pentaho-ajax.js'][299]++;
            throw new Error("Invalid state in pentahoResponse, unrecognized callback function.");
          }
        }
      }
    }
    catch (e) {
      _$jscoverage['repo/pentaho-ajax.js'][303]++;
      var msg = e.message;
      _$jscoverage['repo/pentaho-ajax.js'][304]++;
      alert(("pentaho-ajax.js.pentahoResponse(): " + e));
      _$jscoverage['repo/pentaho-ajax.js'][305]++;
      throw e;
    }
  }
}
_$jscoverage['repo/pentaho-ajax.js'][310]++;
function getResponse(http_request) {
  _$jscoverage['repo/pentaho-ajax.js'][312]++;
  switch (http_request.status) {
  case STATUS_OK:
    _$jscoverage['repo/pentaho-ajax.js'][315]++;
    return http_request.responseText;
    _$jscoverage['repo/pentaho-ajax.js'][316]++;
    break;
  case STATUS_UNAUTHORIZED:
    _$jscoverage['repo/pentaho-ajax.js'][318]++;
    return getUnauthorizedMsg();
    _$jscoverage['repo/pentaho-ajax.js'][319]++;
    break;
  case STATUS_NOT_FOUND:
    _$jscoverage['repo/pentaho-ajax.js'][321]++;
    return getNotFoundMsg();
    _$jscoverage['repo/pentaho-ajax.js'][322]++;
    break;
  default:
    _$jscoverage['repo/pentaho-ajax.js'][324]++;
    return null;
    _$jscoverage['repo/pentaho-ajax.js'][325]++;
    break;
  }
}
