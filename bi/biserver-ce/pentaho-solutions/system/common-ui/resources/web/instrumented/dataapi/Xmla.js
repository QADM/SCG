/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['dataapi/Xmla.js']) {
  _$jscoverage['dataapi/Xmla.js'] = [];
  _$jscoverage['dataapi/Xmla.js'][30] = 0;
  _$jscoverage['dataapi/Xmla.js'][31] = 0;
  _$jscoverage['dataapi/Xmla.js'][33] = 0;
  _$jscoverage['dataapi/Xmla.js'][64] = 0;
  _$jscoverage['dataapi/Xmla.js'][69] = 0;
  _$jscoverage['dataapi/Xmla.js'][72] = 0;
  _$jscoverage['dataapi/Xmla.js'][73] = 0;
  _$jscoverage['dataapi/Xmla.js'][75] = 0;
  _$jscoverage['dataapi/Xmla.js'][76] = 0;
  _$jscoverage['dataapi/Xmla.js'][78] = 0;
  _$jscoverage['dataapi/Xmla.js'][79] = 0;
  _$jscoverage['dataapi/Xmla.js'][82] = 0;
  _$jscoverage['dataapi/Xmla.js'][90] = 0;
  _$jscoverage['dataapi/Xmla.js'][93] = 0;
  _$jscoverage['dataapi/Xmla.js'][94] = 0;
  _$jscoverage['dataapi/Xmla.js'][97] = 0;
  _$jscoverage['dataapi/Xmla.js'][99] = 0;
  _$jscoverage['dataapi/Xmla.js'][100] = 0;
  _$jscoverage['dataapi/Xmla.js'][105] = 0;
  _$jscoverage['dataapi/Xmla.js'][107] = 0;
  _$jscoverage['dataapi/Xmla.js'][108] = 0;
  _$jscoverage['dataapi/Xmla.js'][109] = 0;
  _$jscoverage['dataapi/Xmla.js'][110] = 0;
  _$jscoverage['dataapi/Xmla.js'][111] = 0;
  _$jscoverage['dataapi/Xmla.js'][112] = 0;
  _$jscoverage['dataapi/Xmla.js'][114] = 0;
  _$jscoverage['dataapi/Xmla.js'][117] = 0;
  _$jscoverage['dataapi/Xmla.js'][118] = 0;
  _$jscoverage['dataapi/Xmla.js'][120] = 0;
  _$jscoverage['dataapi/Xmla.js'][121] = 0;
  _$jscoverage['dataapi/Xmla.js'][123] = 0;
  _$jscoverage['dataapi/Xmla.js'][124] = 0;
  _$jscoverage['dataapi/Xmla.js'][127] = 0;
  _$jscoverage['dataapi/Xmla.js'][128] = 0;
  _$jscoverage['dataapi/Xmla.js'][131] = 0;
  _$jscoverage['dataapi/Xmla.js'][132] = 0;
  _$jscoverage['dataapi/Xmla.js'][135] = 0;
  _$jscoverage['dataapi/Xmla.js'][139] = 0;
  _$jscoverage['dataapi/Xmla.js'][140] = 0;
  _$jscoverage['dataapi/Xmla.js'][143] = 0;
  _$jscoverage['dataapi/Xmla.js'][144] = 0;
  _$jscoverage['dataapi/Xmla.js'][147] = 0;
  _$jscoverage['dataapi/Xmla.js'][150] = 0;
  _$jscoverage['dataapi/Xmla.js'][151] = 0;
  _$jscoverage['dataapi/Xmla.js'][152] = 0;
  _$jscoverage['dataapi/Xmla.js'][155] = 0;
  _$jscoverage['dataapi/Xmla.js'][156] = 0;
  _$jscoverage['dataapi/Xmla.js'][159] = 0;
  _$jscoverage['dataapi/Xmla.js'][160] = 0;
  _$jscoverage['dataapi/Xmla.js'][161] = 0;
  _$jscoverage['dataapi/Xmla.js'][162] = 0;
  _$jscoverage['dataapi/Xmla.js'][165] = 0;
  _$jscoverage['dataapi/Xmla.js'][169] = 0;
  _$jscoverage['dataapi/Xmla.js'][173] = 0;
  _$jscoverage['dataapi/Xmla.js'][174] = 0;
  _$jscoverage['dataapi/Xmla.js'][176] = 0;
  _$jscoverage['dataapi/Xmla.js'][180] = 0;
  _$jscoverage['dataapi/Xmla.js'][181] = 0;
  _$jscoverage['dataapi/Xmla.js'][182] = 0;
  _$jscoverage['dataapi/Xmla.js'][184] = 0;
  _$jscoverage['dataapi/Xmla.js'][185] = 0;
  _$jscoverage['dataapi/Xmla.js'][186] = 0;
  _$jscoverage['dataapi/Xmla.js'][187] = 0;
  _$jscoverage['dataapi/Xmla.js'][188] = 0;
  _$jscoverage['dataapi/Xmla.js'][189] = 0;
  _$jscoverage['dataapi/Xmla.js'][190] = 0;
  _$jscoverage['dataapi/Xmla.js'][191] = 0;
  _$jscoverage['dataapi/Xmla.js'][192] = 0;
  _$jscoverage['dataapi/Xmla.js'][193] = 0;
  _$jscoverage['dataapi/Xmla.js'][194] = 0;
  _$jscoverage['dataapi/Xmla.js'][197] = 0;
  _$jscoverage['dataapi/Xmla.js'][199] = 0;
  _$jscoverage['dataapi/Xmla.js'][202] = 0;
  _$jscoverage['dataapi/Xmla.js'][204] = 0;
  _$jscoverage['dataapi/Xmla.js'][205] = 0;
  _$jscoverage['dataapi/Xmla.js'][208] = 0;
  _$jscoverage['dataapi/Xmla.js'][210] = 0;
  _$jscoverage['dataapi/Xmla.js'][213] = 0;
  _$jscoverage['dataapi/Xmla.js'][221] = 0;
  _$jscoverage['dataapi/Xmla.js'][223] = 0;
  _$jscoverage['dataapi/Xmla.js'][224] = 0;
  _$jscoverage['dataapi/Xmla.js'][230] = 0;
  _$jscoverage['dataapi/Xmla.js'][236] = 0;
  _$jscoverage['dataapi/Xmla.js'][238] = 0;
  _$jscoverage['dataapi/Xmla.js'][239] = 0;
  _$jscoverage['dataapi/Xmla.js'][247] = 0;
  _$jscoverage['dataapi/Xmla.js'][253] = 0;
  _$jscoverage['dataapi/Xmla.js'][259] = 0;
  _$jscoverage['dataapi/Xmla.js'][260] = 0;
  _$jscoverage['dataapi/Xmla.js'][262] = 0;
  _$jscoverage['dataapi/Xmla.js'][266] = 0;
  _$jscoverage['dataapi/Xmla.js'][269] = 0;
  _$jscoverage['dataapi/Xmla.js'][270] = 0;
  _$jscoverage['dataapi/Xmla.js'][271] = 0;
  _$jscoverage['dataapi/Xmla.js'][273] = 0;
  _$jscoverage['dataapi/Xmla.js'][274] = 0;
  _$jscoverage['dataapi/Xmla.js'][275] = 0;
  _$jscoverage['dataapi/Xmla.js'][276] = 0;
  _$jscoverage['dataapi/Xmla.js'][280] = 0;
  _$jscoverage['dataapi/Xmla.js'][296] = 0;
  _$jscoverage['dataapi/Xmla.js'][298] = 0;
  _$jscoverage['dataapi/Xmla.js'][299] = 0;
  _$jscoverage['dataapi/Xmla.js'][300] = 0;
  _$jscoverage['dataapi/Xmla.js'][301] = 0;
  _$jscoverage['dataapi/Xmla.js'][303] = 0;
  _$jscoverage['dataapi/Xmla.js'][304] = 0;
  _$jscoverage['dataapi/Xmla.js'][305] = 0;
  _$jscoverage['dataapi/Xmla.js'][307] = 0;
  _$jscoverage['dataapi/Xmla.js'][308] = 0;
  _$jscoverage['dataapi/Xmla.js'][309] = 0;
  _$jscoverage['dataapi/Xmla.js'][311] = 0;
  _$jscoverage['dataapi/Xmla.js'][320] = 0;
  _$jscoverage['dataapi/Xmla.js'][323] = 0;
  _$jscoverage['dataapi/Xmla.js'][339] = 0;
  _$jscoverage['dataapi/Xmla.js'][351] = 0;
  _$jscoverage['dataapi/Xmla.js'][353] = 0;
  _$jscoverage['dataapi/Xmla.js'][354] = 0;
  _$jscoverage['dataapi/Xmla.js'][355] = 0;
  _$jscoverage['dataapi/Xmla.js'][370] = 0;
  _$jscoverage['dataapi/Xmla.js'][384] = 0;
  _$jscoverage['dataapi/Xmla.js'][398] = 0;
  _$jscoverage['dataapi/Xmla.js'][412] = 0;
  _$jscoverage['dataapi/Xmla.js'][426] = 0;
  _$jscoverage['dataapi/Xmla.js'][440] = 0;
  _$jscoverage['dataapi/Xmla.js'][454] = 0;
  _$jscoverage['dataapi/Xmla.js'][468] = 0;
  _$jscoverage['dataapi/Xmla.js'][482] = 0;
  _$jscoverage['dataapi/Xmla.js'][496] = 0;
  _$jscoverage['dataapi/Xmla.js'][510] = 0;
  _$jscoverage['dataapi/Xmla.js'][525] = 0;
  _$jscoverage['dataapi/Xmla.js'][540] = 0;
  _$jscoverage['dataapi/Xmla.js'][557] = 0;
  _$jscoverage['dataapi/Xmla.js'][574] = 0;
  _$jscoverage['dataapi/Xmla.js'][591] = 0;
  _$jscoverage['dataapi/Xmla.js'][608] = 0;
  _$jscoverage['dataapi/Xmla.js'][625] = 0;
  _$jscoverage['dataapi/Xmla.js'][642] = 0;
  _$jscoverage['dataapi/Xmla.js'][659] = 0;
  _$jscoverage['dataapi/Xmla.js'][676] = 0;
  _$jscoverage['dataapi/Xmla.js'][693] = 0;
  _$jscoverage['dataapi/Xmla.js'][713] = 0;
  _$jscoverage['dataapi/Xmla.js'][731] = 0;
  _$jscoverage['dataapi/Xmla.js'][745] = 0;
  _$jscoverage['dataapi/Xmla.js'][764] = 0;
  _$jscoverage['dataapi/Xmla.js'][780] = 0;
  _$jscoverage['dataapi/Xmla.js'][794] = 0;
  _$jscoverage['dataapi/Xmla.js'][813] = 0;
  _$jscoverage['dataapi/Xmla.js'][829] = 0;
  _$jscoverage['dataapi/Xmla.js'][844] = 0;
  _$jscoverage['dataapi/Xmla.js'][858] = 0;
  _$jscoverage['dataapi/Xmla.js'][875] = 0;
  _$jscoverage['dataapi/Xmla.js'][892] = 0;
  _$jscoverage['dataapi/Xmla.js'][908] = 0;
  _$jscoverage['dataapi/Xmla.js'][930] = 0;
  _$jscoverage['dataapi/Xmla.js'][946] = 0;
  _$jscoverage['dataapi/Xmla.js'][947] = 0;
  _$jscoverage['dataapi/Xmla.js'][961] = 0;
  _$jscoverage['dataapi/Xmla.js'][978] = 0;
  _$jscoverage['dataapi/Xmla.js'][997] = 0;
  _$jscoverage['dataapi/Xmla.js'][1015] = 0;
  _$jscoverage['dataapi/Xmla.js'][1028] = 0;
  _$jscoverage['dataapi/Xmla.js'][1041] = 0;
  _$jscoverage['dataapi/Xmla.js'][1054] = 0;
  _$jscoverage['dataapi/Xmla.js'][1078] = 0;
  _$jscoverage['dataapi/Xmla.js'][1093] = 0;
  _$jscoverage['dataapi/Xmla.js'][1106] = 0;
  _$jscoverage['dataapi/Xmla.js'][1118] = 0;
  _$jscoverage['dataapi/Xmla.js'][1130] = 0;
  _$jscoverage['dataapi/Xmla.js'][1132] = 0;
  _$jscoverage['dataapi/Xmla.js'][1241] = 0;
  _$jscoverage['dataapi/Xmla.js'][1300] = 0;
  _$jscoverage['dataapi/Xmla.js'][1301] = 0;
  _$jscoverage['dataapi/Xmla.js'][1302] = 0;
  _$jscoverage['dataapi/Xmla.js'][1308] = 0;
  _$jscoverage['dataapi/Xmla.js'][1309] = 0;
  _$jscoverage['dataapi/Xmla.js'][1310] = 0;
  _$jscoverage['dataapi/Xmla.js'][1312] = 0;
  _$jscoverage['dataapi/Xmla.js'][1315] = 0;
  _$jscoverage['dataapi/Xmla.js'][1316] = 0;
  _$jscoverage['dataapi/Xmla.js'][1322] = 0;
  _$jscoverage['dataapi/Xmla.js'][1323] = 0;
  _$jscoverage['dataapi/Xmla.js'][1324] = 0;
  _$jscoverage['dataapi/Xmla.js'][1325] = 0;
  _$jscoverage['dataapi/Xmla.js'][1326] = 0;
  _$jscoverage['dataapi/Xmla.js'][1327] = 0;
  _$jscoverage['dataapi/Xmla.js'][1328] = 0;
  _$jscoverage['dataapi/Xmla.js'][1334] = 0;
  _$jscoverage['dataapi/Xmla.js'][1335] = 0;
  _$jscoverage['dataapi/Xmla.js'][1336] = 0;
  _$jscoverage['dataapi/Xmla.js'][1338] = 0;
  _$jscoverage['dataapi/Xmla.js'][1341] = 0;
  _$jscoverage['dataapi/Xmla.js'][1350] = 0;
  _$jscoverage['dataapi/Xmla.js'][1351] = 0;
  _$jscoverage['dataapi/Xmla.js'][1352] = 0;
  _$jscoverage['dataapi/Xmla.js'][1358] = 0;
  _$jscoverage['dataapi/Xmla.js'][1359] = 0;
  _$jscoverage['dataapi/Xmla.js'][1360] = 0;
  _$jscoverage['dataapi/Xmla.js'][1361] = 0;
  _$jscoverage['dataapi/Xmla.js'][1362] = 0;
  _$jscoverage['dataapi/Xmla.js'][1363] = 0;
  _$jscoverage['dataapi/Xmla.js'][1364] = 0;
  _$jscoverage['dataapi/Xmla.js'][1370] = 0;
  _$jscoverage['dataapi/Xmla.js'][1371] = 0;
  _$jscoverage['dataapi/Xmla.js'][1372] = 0;
  _$jscoverage['dataapi/Xmla.js'][1377] = 0;
  _$jscoverage['dataapi/Xmla.js'][1378] = 0;
  _$jscoverage['dataapi/Xmla.js'][1380] = 0;
  _$jscoverage['dataapi/Xmla.js'][1483] = 0;
  _$jscoverage['dataapi/Xmla.js'][1485] = 0;
  _$jscoverage['dataapi/Xmla.js'][1486] = 0;
  _$jscoverage['dataapi/Xmla.js'][1487] = 0;
  _$jscoverage['dataapi/Xmla.js'][1489] = 0;
  _$jscoverage['dataapi/Xmla.js'][1490] = 0;
  _$jscoverage['dataapi/Xmla.js'][1491] = 0;
  _$jscoverage['dataapi/Xmla.js'][1494] = 0;
  _$jscoverage['dataapi/Xmla.js'][1499] = 0;
  _$jscoverage['dataapi/Xmla.js'][1503] = 0;
  _$jscoverage['dataapi/Xmla.js'][1504] = 0;
  _$jscoverage['dataapi/Xmla.js'][1505] = 0;
  _$jscoverage['dataapi/Xmla.js'][1506] = 0;
  _$jscoverage['dataapi/Xmla.js'][1508] = 0;
  _$jscoverage['dataapi/Xmla.js'][1509] = 0;
  _$jscoverage['dataapi/Xmla.js'][1511] = 0;
  _$jscoverage['dataapi/Xmla.js'][1512] = 0;
  _$jscoverage['dataapi/Xmla.js'][1514] = 0;
  _$jscoverage['dataapi/Xmla.js'][1515] = 0;
  _$jscoverage['dataapi/Xmla.js'][1518] = 0;
  _$jscoverage['dataapi/Xmla.js'][1519] = 0;
  _$jscoverage['dataapi/Xmla.js'][1520] = 0;
  _$jscoverage['dataapi/Xmla.js'][1521] = 0;
  _$jscoverage['dataapi/Xmla.js'][1526] = 0;
  _$jscoverage['dataapi/Xmla.js'][1527] = 0;
  _$jscoverage['dataapi/Xmla.js'][1530] = 0;
  _$jscoverage['dataapi/Xmla.js'][1531] = 0;
  _$jscoverage['dataapi/Xmla.js'][1535] = 0;
  _$jscoverage['dataapi/Xmla.js'][1536] = 0;
  _$jscoverage['dataapi/Xmla.js'][1538] = 0;
  _$jscoverage['dataapi/Xmla.js'][1539] = 0;
  _$jscoverage['dataapi/Xmla.js'][1542] = 0;
  _$jscoverage['dataapi/Xmla.js'][1548] = 0;
  _$jscoverage['dataapi/Xmla.js'][1550] = 0;
  _$jscoverage['dataapi/Xmla.js'][1553] = 0;
  _$jscoverage['dataapi/Xmla.js'][1556] = 0;
  _$jscoverage['dataapi/Xmla.js'][1557] = 0;
  _$jscoverage['dataapi/Xmla.js'][1558] = 0;
  _$jscoverage['dataapi/Xmla.js'][1560] = 0;
  _$jscoverage['dataapi/Xmla.js'][1562] = 0;
  _$jscoverage['dataapi/Xmla.js'][1563] = 0;
  _$jscoverage['dataapi/Xmla.js'][1565] = 0;
  _$jscoverage['dataapi/Xmla.js'][1566] = 0;
  _$jscoverage['dataapi/Xmla.js'][1574] = 0;
  _$jscoverage['dataapi/Xmla.js'][1576] = 0;
  _$jscoverage['dataapi/Xmla.js'][1577] = 0;
  _$jscoverage['dataapi/Xmla.js'][1579] = 0;
  _$jscoverage['dataapi/Xmla.js'][1580] = 0;
  _$jscoverage['dataapi/Xmla.js'][1582] = 0;
  _$jscoverage['dataapi/Xmla.js'][1585] = 0;
  _$jscoverage['dataapi/Xmla.js'][1587] = 0;
  _$jscoverage['dataapi/Xmla.js'][1588] = 0;
  _$jscoverage['dataapi/Xmla.js'][1589] = 0;
  _$jscoverage['dataapi/Xmla.js'][1590] = 0;
  _$jscoverage['dataapi/Xmla.js'][1591] = 0;
  _$jscoverage['dataapi/Xmla.js'][1593] = 0;
  _$jscoverage['dataapi/Xmla.js'][1594] = 0;
  _$jscoverage['dataapi/Xmla.js'][1595] = 0;
  _$jscoverage['dataapi/Xmla.js'][1597] = 0;
  _$jscoverage['dataapi/Xmla.js'][1598] = 0;
  _$jscoverage['dataapi/Xmla.js'][1600] = 0;
  _$jscoverage['dataapi/Xmla.js'][1601] = 0;
  _$jscoverage['dataapi/Xmla.js'][1603] = 0;
  _$jscoverage['dataapi/Xmla.js'][1604] = 0;
  _$jscoverage['dataapi/Xmla.js'][1605] = 0;
  _$jscoverage['dataapi/Xmla.js'][1606] = 0;
  _$jscoverage['dataapi/Xmla.js'][1607] = 0;
  _$jscoverage['dataapi/Xmla.js'][1609] = 0;
  _$jscoverage['dataapi/Xmla.js'][1668] = 0;
  _$jscoverage['dataapi/Xmla.js'][1669] = 0;
  _$jscoverage['dataapi/Xmla.js'][1670] = 0;
  _$jscoverage['dataapi/Xmla.js'][1671] = 0;
  _$jscoverage['dataapi/Xmla.js'][1673] = 0;
  _$jscoverage['dataapi/Xmla.js'][1674] = 0;
  _$jscoverage['dataapi/Xmla.js'][1675] = 0;
  _$jscoverage['dataapi/Xmla.js'][1677] = 0;
  _$jscoverage['dataapi/Xmla.js'][1678] = 0;
  _$jscoverage['dataapi/Xmla.js'][1680] = 0;
  _$jscoverage['dataapi/Xmla.js'][1687] = 0;
  _$jscoverage['dataapi/Xmla.js'][1696] = 0;
  _$jscoverage['dataapi/Xmla.js'][1697] = 0;
  _$jscoverage['dataapi/Xmla.js'][1699] = 0;
  _$jscoverage['dataapi/Xmla.js'][1700] = 0;
  _$jscoverage['dataapi/Xmla.js'][1709] = 0;
  _$jscoverage['dataapi/Xmla.js'][1710] = 0;
  _$jscoverage['dataapi/Xmla.js'][1712] = 0;
  _$jscoverage['dataapi/Xmla.js'][1713] = 0;
  _$jscoverage['dataapi/Xmla.js'][1800] = 0;
  _$jscoverage['dataapi/Xmla.js'][1807] = 0;
  _$jscoverage['dataapi/Xmla.js'][1808] = 0;
  _$jscoverage['dataapi/Xmla.js'][1810] = 0;
  _$jscoverage['dataapi/Xmla.js'][1963] = 0;
  _$jscoverage['dataapi/Xmla.js'][1970] = 0;
  _$jscoverage['dataapi/Xmla.js'][2099] = 0;
  _$jscoverage['dataapi/Xmla.js'][2106] = 0;
  _$jscoverage['dataapi/Xmla.js'][2149] = 0;
  _$jscoverage['dataapi/Xmla.js'][2156] = 0;
  _$jscoverage['dataapi/Xmla.js'][2220] = 0;
  _$jscoverage['dataapi/Xmla.js'][2227] = 0;
  _$jscoverage['dataapi/Xmla.js'][2256] = 0;
  _$jscoverage['dataapi/Xmla.js'][2263] = 0;
  _$jscoverage['dataapi/Xmla.js'][2320] = 0;
  _$jscoverage['dataapi/Xmla.js'][2327] = 0;
  _$jscoverage['dataapi/Xmla.js'][2376] = 0;
  _$jscoverage['dataapi/Xmla.js'][2383] = 0;
  _$jscoverage['dataapi/Xmla.js'][2609] = 0;
  _$jscoverage['dataapi/Xmla.js'][2616] = 0;
  _$jscoverage['dataapi/Xmla.js'][2785] = 0;
  _$jscoverage['dataapi/Xmla.js'][2792] = 0;
  _$jscoverage['dataapi/Xmla.js'][2814] = 0;
  _$jscoverage['dataapi/Xmla.js'][2821] = 0;
  _$jscoverage['dataapi/Xmla.js'][2843] = 0;
  _$jscoverage['dataapi/Xmla.js'][2850] = 0;
  _$jscoverage['dataapi/Xmla.js'][2872] = 0;
  _$jscoverage['dataapi/Xmla.js'][2879] = 0;
  _$jscoverage['dataapi/Xmla.js'][2901] = 0;
  _$jscoverage['dataapi/Xmla.js'][2908] = 0;
  _$jscoverage['dataapi/Xmla.js'][3056] = 0;
  _$jscoverage['dataapi/Xmla.js'][3063] = 0;
  _$jscoverage['dataapi/Xmla.js'][3224] = 0;
  _$jscoverage['dataapi/Xmla.js'][3231] = 0;
  _$jscoverage['dataapi/Xmla.js'][3253] = 0;
  _$jscoverage['dataapi/Xmla.js'][3260] = 0;
  _$jscoverage['dataapi/Xmla.js'][3457] = 0;
  _$jscoverage['dataapi/Xmla.js'][3464] = 0;
  _$jscoverage['dataapi/Xmla.js'][3688] = 0;
  _$jscoverage['dataapi/Xmla.js'][3695] = 0;
  _$jscoverage['dataapi/Xmla.js'][3857] = 0;
  _$jscoverage['dataapi/Xmla.js'][3864] = 0;
  _$jscoverage['dataapi/Xmla.js'][4020] = 0;
  _$jscoverage['dataapi/Xmla.js'][4027] = 0;
  _$jscoverage['dataapi/Xmla.js'][4049] = 0;
  _$jscoverage['dataapi/Xmla.js'][4056] = 0;
  _$jscoverage['dataapi/Xmla.js'][4078] = 0;
  _$jscoverage['dataapi/Xmla.js'][4085] = 0;
  _$jscoverage['dataapi/Xmla.js'][4089] = 0;
  _$jscoverage['dataapi/Xmla.js'][4090] = 0;
  _$jscoverage['dataapi/Xmla.js'][4094] = 0;
  _$jscoverage['dataapi/Xmla.js'][4095] = 0;
  _$jscoverage['dataapi/Xmla.js'][4096] = 0;
  _$jscoverage['dataapi/Xmla.js'][4097] = 0;
  _$jscoverage['dataapi/Xmla.js'][4100] = 0;
  _$jscoverage['dataapi/Xmla.js'][4130] = 0;
  _$jscoverage['dataapi/Xmla.js'][4131] = 0;
  _$jscoverage['dataapi/Xmla.js'][4132] = 0;
  _$jscoverage['dataapi/Xmla.js'][4133] = 0;
  _$jscoverage['dataapi/Xmla.js'][4134] = 0;
  _$jscoverage['dataapi/Xmla.js'][4148] = 0;
  _$jscoverage['dataapi/Xmla.js'][4160] = 0;
  _$jscoverage['dataapi/Xmla.js'][4172] = 0;
  _$jscoverage['dataapi/Xmla.js'][4184] = 0;
  _$jscoverage['dataapi/Xmla.js'][4196] = 0;
  _$jscoverage['dataapi/Xmla.js'][4208] = 0;
  _$jscoverage['dataapi/Xmla.js'][4220] = 0;
  _$jscoverage['dataapi/Xmla.js'][4232] = 0;
  _$jscoverage['dataapi/Xmla.js'][4244] = 0;
  _$jscoverage['dataapi/Xmla.js'][4256] = 0;
  _$jscoverage['dataapi/Xmla.js'][4268] = 0;
  _$jscoverage['dataapi/Xmla.js'][4280] = 0;
  _$jscoverage['dataapi/Xmla.js'][4292] = 0;
  _$jscoverage['dataapi/Xmla.js'][4304] = 0;
  _$jscoverage['dataapi/Xmla.js'][4316] = 0;
  _$jscoverage['dataapi/Xmla.js'][4328] = 0;
  _$jscoverage['dataapi/Xmla.js'][4340] = 0;
  _$jscoverage['dataapi/Xmla.js'][4351] = 0;
  _$jscoverage['dataapi/Xmla.js'][4361] = 0;
  _$jscoverage['dataapi/Xmla.js'][4371] = 0;
  _$jscoverage['dataapi/Xmla.js'][4381] = 0;
  _$jscoverage['dataapi/Xmla.js'][4393] = 0;
  _$jscoverage['dataapi/Xmla.js'][4404] = 0;
  _$jscoverage['dataapi/Xmla.js'][4415] = 0;
  _$jscoverage['dataapi/Xmla.js'][4427] = 0;
  _$jscoverage['dataapi/Xmla.js'][4438] = 0;
  _$jscoverage['dataapi/Xmla.js'][4449] = 0;
  _$jscoverage['dataapi/Xmla.js'][4460] = 0;
  _$jscoverage['dataapi/Xmla.js'][4471] = 0;
  _$jscoverage['dataapi/Xmla.js'][4473] = 0;
  _$jscoverage['dataapi/Xmla.js'][4474] = 0;
  _$jscoverage['dataapi/Xmla.js'][4475] = 0;
  _$jscoverage['dataapi/Xmla.js'][4476] = 0;
  _$jscoverage['dataapi/Xmla.js'][4477] = 0;
  _$jscoverage['dataapi/Xmla.js'][4478] = 0;
  _$jscoverage['dataapi/Xmla.js'][4479] = 0;
  _$jscoverage['dataapi/Xmla.js'][4480] = 0;
  _$jscoverage['dataapi/Xmla.js'][4481] = 0;
  _$jscoverage['dataapi/Xmla.js'][4482] = 0;
  _$jscoverage['dataapi/Xmla.js'][4483] = 0;
  _$jscoverage['dataapi/Xmla.js'][4484] = 0;
  _$jscoverage['dataapi/Xmla.js'][4485] = 0;
  _$jscoverage['dataapi/Xmla.js'][4486] = 0;
  _$jscoverage['dataapi/Xmla.js'][4487] = 0;
  _$jscoverage['dataapi/Xmla.js'][4488] = 0;
  _$jscoverage['dataapi/Xmla.js'][4489] = 0;
  _$jscoverage['dataapi/Xmla.js'][4490] = 0;
  _$jscoverage['dataapi/Xmla.js'][4491] = 0;
  _$jscoverage['dataapi/Xmla.js'][4492] = 0;
  _$jscoverage['dataapi/Xmla.js'][4493] = 0;
  _$jscoverage['dataapi/Xmla.js'][4494] = 0;
  _$jscoverage['dataapi/Xmla.js'][4495] = 0;
  _$jscoverage['dataapi/Xmla.js'][4498] = 0;
  _$jscoverage['dataapi/Xmla.js'][4499] = 0;
  _$jscoverage['dataapi/Xmla.js'][4502] = 0;
  _$jscoverage['dataapi/Xmla.js'][4503] = 0;
  _$jscoverage['dataapi/Xmla.js'][4506] = 0;
  _$jscoverage['dataapi/Xmla.js'][4507] = 0;
  _$jscoverage['dataapi/Xmla.js'][4510] = 0;
  _$jscoverage['dataapi/Xmla.js'][4511] = 0;
  _$jscoverage['dataapi/Xmla.js'][4514] = 0;
  _$jscoverage['dataapi/Xmla.js'][4515] = 0;
  _$jscoverage['dataapi/Xmla.js'][4518] = 0;
  _$jscoverage['dataapi/Xmla.js'][4519] = 0;
  _$jscoverage['dataapi/Xmla.js'][4522] = 0;
  _$jscoverage['dataapi/Xmla.js'][4523] = 0;
  _$jscoverage['dataapi/Xmla.js'][4527] = 0;
  _$jscoverage['dataapi/Xmla.js'][4528] = 0;
  _$jscoverage['dataapi/Xmla.js'][4529] = 0;
  _$jscoverage['dataapi/Xmla.js'][4531] = 0;
  _$jscoverage['dataapi/Xmla.js'][4534] = 0;
  _$jscoverage['dataapi/Xmla.js'][4535] = 0;
  _$jscoverage['dataapi/Xmla.js'][4536] = 0;
  _$jscoverage['dataapi/Xmla.js'][4538] = 0;
  _$jscoverage['dataapi/Xmla.js'][4539] = 0;
  _$jscoverage['dataapi/Xmla.js'][4540] = 0;
  _$jscoverage['dataapi/Xmla.js'][4544] = 0;
  _$jscoverage['dataapi/Xmla.js'][4545] = 0;
  _$jscoverage['dataapi/Xmla.js'][4546] = 0;
  _$jscoverage['dataapi/Xmla.js'][4560] = 0;
  _$jscoverage['dataapi/Xmla.js'][4561] = 0;
  _$jscoverage['dataapi/Xmla.js'][4562] = 0;
  _$jscoverage['dataapi/Xmla.js'][4564] = 0;
  _$jscoverage['dataapi/Xmla.js'][4565] = 0;
  _$jscoverage['dataapi/Xmla.js'][4566] = 0;
  _$jscoverage['dataapi/Xmla.js'][4568] = 0;
  _$jscoverage['dataapi/Xmla.js'][4569] = 0;
  _$jscoverage['dataapi/Xmla.js'][4570] = 0;
  _$jscoverage['dataapi/Xmla.js'][4572] = 0;
  _$jscoverage['dataapi/Xmla.js'][4573] = 0;
  _$jscoverage['dataapi/Xmla.js'][4574] = 0;
  _$jscoverage['dataapi/Xmla.js'][4576] = 0;
  _$jscoverage['dataapi/Xmla.js'][4577] = 0;
  _$jscoverage['dataapi/Xmla.js'][4578] = 0;
  _$jscoverage['dataapi/Xmla.js'][4580] = 0;
  _$jscoverage['dataapi/Xmla.js'][4583] = 0;
  _$jscoverage['dataapi/Xmla.js'][4584] = 0;
  _$jscoverage['dataapi/Xmla.js'][4586] = 0;
  _$jscoverage['dataapi/Xmla.js'][4588] = 0;
  _$jscoverage['dataapi/Xmla.js'][4589] = 0;
  _$jscoverage['dataapi/Xmla.js'][4590] = 0;
  _$jscoverage['dataapi/Xmla.js'][4591] = 0;
  _$jscoverage['dataapi/Xmla.js'][4594] = 0;
  _$jscoverage['dataapi/Xmla.js'][4598] = 0;
  _$jscoverage['dataapi/Xmla.js'][4602] = 0;
  _$jscoverage['dataapi/Xmla.js'][4612] = 0;
  _$jscoverage['dataapi/Xmla.js'][4613] = 0;
  _$jscoverage['dataapi/Xmla.js'][4614] = 0;
  _$jscoverage['dataapi/Xmla.js'][4615] = 0;
  _$jscoverage['dataapi/Xmla.js'][4616] = 0;
  _$jscoverage['dataapi/Xmla.js'][4617] = 0;
  _$jscoverage['dataapi/Xmla.js'][4618] = 0;
  _$jscoverage['dataapi/Xmla.js'][4619] = 0;
  _$jscoverage['dataapi/Xmla.js'][4620] = 0;
  _$jscoverage['dataapi/Xmla.js'][4623] = 0;
  _$jscoverage['dataapi/Xmla.js'][4624] = 0;
  _$jscoverage['dataapi/Xmla.js'][4625] = 0;
  _$jscoverage['dataapi/Xmla.js'][4626] = 0;
  _$jscoverage['dataapi/Xmla.js'][4628] = 0;
  _$jscoverage['dataapi/Xmla.js'][4629] = 0;
  _$jscoverage['dataapi/Xmla.js'][4630] = 0;
  _$jscoverage['dataapi/Xmla.js'][4631] = 0;
  _$jscoverage['dataapi/Xmla.js'][4632] = 0;
  _$jscoverage['dataapi/Xmla.js'][4633] = 0;
  _$jscoverage['dataapi/Xmla.js'][4634] = 0;
  _$jscoverage['dataapi/Xmla.js'][4642] = 0;
  _$jscoverage['dataapi/Xmla.js'][4643] = 0;
  _$jscoverage['dataapi/Xmla.js'][4645] = 0;
  _$jscoverage['dataapi/Xmla.js'][4646] = 0;
  _$jscoverage['dataapi/Xmla.js'][4647] = 0;
  _$jscoverage['dataapi/Xmla.js'][4650] = 0;
  _$jscoverage['dataapi/Xmla.js'][4652] = 0;
  _$jscoverage['dataapi/Xmla.js'][4653] = 0;
  _$jscoverage['dataapi/Xmla.js'][4654] = 0;
  _$jscoverage['dataapi/Xmla.js'][4655] = 0;
  _$jscoverage['dataapi/Xmla.js'][4658] = 0;
  _$jscoverage['dataapi/Xmla.js'][4662] = 0;
  _$jscoverage['dataapi/Xmla.js'][4664] = 0;
  _$jscoverage['dataapi/Xmla.js'][4665] = 0;
  _$jscoverage['dataapi/Xmla.js'][4675] = 0;
  _$jscoverage['dataapi/Xmla.js'][4679] = 0;
  _$jscoverage['dataapi/Xmla.js'][4687] = 0;
  _$jscoverage['dataapi/Xmla.js'][4688] = 0;
  _$jscoverage['dataapi/Xmla.js'][4689] = 0;
  _$jscoverage['dataapi/Xmla.js'][4690] = 0;
  _$jscoverage['dataapi/Xmla.js'][4691] = 0;
  _$jscoverage['dataapi/Xmla.js'][4692] = 0;
  _$jscoverage['dataapi/Xmla.js'][4693] = 0;
  _$jscoverage['dataapi/Xmla.js'][4697] = 0;
  _$jscoverage['dataapi/Xmla.js'][4698] = 0;
  _$jscoverage['dataapi/Xmla.js'][4699] = 0;
  _$jscoverage['dataapi/Xmla.js'][4700] = 0;
  _$jscoverage['dataapi/Xmla.js'][4701] = 0;
  _$jscoverage['dataapi/Xmla.js'][4704] = 0;
  _$jscoverage['dataapi/Xmla.js'][4710] = 0;
  _$jscoverage['dataapi/Xmla.js'][4711] = 0;
  _$jscoverage['dataapi/Xmla.js'][4712] = 0;
  _$jscoverage['dataapi/Xmla.js'][4713] = 0;
  _$jscoverage['dataapi/Xmla.js'][4717] = 0;
  _$jscoverage['dataapi/Xmla.js'][4718] = 0;
  _$jscoverage['dataapi/Xmla.js'][4719] = 0;
  _$jscoverage['dataapi/Xmla.js'][4720] = 0;
  _$jscoverage['dataapi/Xmla.js'][4721] = 0;
  _$jscoverage['dataapi/Xmla.js'][4724] = 0;
  _$jscoverage['dataapi/Xmla.js'][4728] = 0;
  _$jscoverage['dataapi/Xmla.js'][4738] = 0;
  _$jscoverage['dataapi/Xmla.js'][4750] = 0;
  _$jscoverage['dataapi/Xmla.js'][4754] = 0;
  _$jscoverage['dataapi/Xmla.js'][4755] = 0;
  _$jscoverage['dataapi/Xmla.js'][4757] = 0;
  _$jscoverage['dataapi/Xmla.js'][4767] = 0;
  _$jscoverage['dataapi/Xmla.js'][4768] = 0;
  _$jscoverage['dataapi/Xmla.js'][4769] = 0;
  _$jscoverage['dataapi/Xmla.js'][4771] = 0;
  _$jscoverage['dataapi/Xmla.js'][4788] = 0;
  _$jscoverage['dataapi/Xmla.js'][4799] = 0;
  _$jscoverage['dataapi/Xmla.js'][4800] = 0;
  _$jscoverage['dataapi/Xmla.js'][4801] = 0;
  _$jscoverage['dataapi/Xmla.js'][4813] = 0;
  _$jscoverage['dataapi/Xmla.js'][4822] = 0;
  _$jscoverage['dataapi/Xmla.js'][4830] = 0;
  _$jscoverage['dataapi/Xmla.js'][4831] = 0;
  _$jscoverage['dataapi/Xmla.js'][4850] = 0;
  _$jscoverage['dataapi/Xmla.js'][4851] = 0;
  _$jscoverage['dataapi/Xmla.js'][4852] = 0;
  _$jscoverage['dataapi/Xmla.js'][4858] = 0;
  _$jscoverage['dataapi/Xmla.js'][4868] = 0;
  _$jscoverage['dataapi/Xmla.js'][4878] = 0;
  _$jscoverage['dataapi/Xmla.js'][4879] = 0;
  _$jscoverage['dataapi/Xmla.js'][4880] = 0;
  _$jscoverage['dataapi/Xmla.js'][4886] = 0;
  _$jscoverage['dataapi/Xmla.js'][4895] = 0;
  _$jscoverage['dataapi/Xmla.js'][4896] = 0;
  _$jscoverage['dataapi/Xmla.js'][4898] = 0;
  _$jscoverage['dataapi/Xmla.js'][4906] = 0;
  _$jscoverage['dataapi/Xmla.js'][4914] = 0;
  _$jscoverage['dataapi/Xmla.js'][4915] = 0;
  _$jscoverage['dataapi/Xmla.js'][4916] = 0;
  _$jscoverage['dataapi/Xmla.js'][4931] = 0;
  _$jscoverage['dataapi/Xmla.js'][4932] = 0;
  _$jscoverage['dataapi/Xmla.js'][4933] = 0;
  _$jscoverage['dataapi/Xmla.js'][4935] = 0;
  _$jscoverage['dataapi/Xmla.js'][4936] = 0;
  _$jscoverage['dataapi/Xmla.js'][4937] = 0;
  _$jscoverage['dataapi/Xmla.js'][4938] = 0;
  _$jscoverage['dataapi/Xmla.js'][4941] = 0;
  _$jscoverage['dataapi/Xmla.js'][4958] = 0;
  _$jscoverage['dataapi/Xmla.js'][4959] = 0;
  _$jscoverage['dataapi/Xmla.js'][4960] = 0;
  _$jscoverage['dataapi/Xmla.js'][4962] = 0;
  _$jscoverage['dataapi/Xmla.js'][4964] = 0;
  _$jscoverage['dataapi/Xmla.js'][4979] = 0;
  _$jscoverage['dataapi/Xmla.js'][4980] = 0;
  _$jscoverage['dataapi/Xmla.js'][4981] = 0;
  _$jscoverage['dataapi/Xmla.js'][4983] = 0;
  _$jscoverage['dataapi/Xmla.js'][4984] = 0;
  _$jscoverage['dataapi/Xmla.js'][4985] = 0;
  _$jscoverage['dataapi/Xmla.js'][4986] = 0;
  _$jscoverage['dataapi/Xmla.js'][4989] = 0;
  _$jscoverage['dataapi/Xmla.js'][5006] = 0;
  _$jscoverage['dataapi/Xmla.js'][5007] = 0;
  _$jscoverage['dataapi/Xmla.js'][5008] = 0;
  _$jscoverage['dataapi/Xmla.js'][5010] = 0;
  _$jscoverage['dataapi/Xmla.js'][5012] = 0;
  _$jscoverage['dataapi/Xmla.js'][5025] = 0;
  _$jscoverage['dataapi/Xmla.js'][5026] = 0;
  _$jscoverage['dataapi/Xmla.js'][5027] = 0;
  _$jscoverage['dataapi/Xmla.js'][5028] = 0;
  _$jscoverage['dataapi/Xmla.js'][5030] = 0;
  _$jscoverage['dataapi/Xmla.js'][5032] = 0;
  _$jscoverage['dataapi/Xmla.js'][5042] = 0;
  _$jscoverage['dataapi/Xmla.js'][5043] = 0;
  _$jscoverage['dataapi/Xmla.js'][5044] = 0;
  _$jscoverage['dataapi/Xmla.js'][5046] = 0;
  _$jscoverage['dataapi/Xmla.js'][5047] = 0;
  _$jscoverage['dataapi/Xmla.js'][5049] = 0;
  _$jscoverage['dataapi/Xmla.js'][5059] = 0;
  _$jscoverage['dataapi/Xmla.js'][5060] = 0;
  _$jscoverage['dataapi/Xmla.js'][5061] = 0;
  _$jscoverage['dataapi/Xmla.js'][5063] = 0;
  _$jscoverage['dataapi/Xmla.js'][5064] = 0;
  _$jscoverage['dataapi/Xmla.js'][5066] = 0;
  _$jscoverage['dataapi/Xmla.js'][5076] = 0;
  _$jscoverage['dataapi/Xmla.js'][5077] = 0;
  _$jscoverage['dataapi/Xmla.js'][5078] = 0;
  _$jscoverage['dataapi/Xmla.js'][5080] = 0;
  _$jscoverage['dataapi/Xmla.js'][5081] = 0;
  _$jscoverage['dataapi/Xmla.js'][5083] = 0;
  _$jscoverage['dataapi/Xmla.js'][5091] = 0;
  _$jscoverage['dataapi/Xmla.js'][5092] = 0;
  _$jscoverage['dataapi/Xmla.js'][5093] = 0;
  _$jscoverage['dataapi/Xmla.js'][5094] = 0;
  _$jscoverage['dataapi/Xmla.js'][5095] = 0;
  _$jscoverage['dataapi/Xmla.js'][5096] = 0;
  _$jscoverage['dataapi/Xmla.js'][5097] = 0;
  _$jscoverage['dataapi/Xmla.js'][5098] = 0;
  _$jscoverage['dataapi/Xmla.js'][5099] = 0;
  _$jscoverage['dataapi/Xmla.js'][5102] = 0;
  _$jscoverage['dataapi/Xmla.js'][5106] = 0;
  _$jscoverage['dataapi/Xmla.js'][5110] = 0;
  _$jscoverage['dataapi/Xmla.js'][5111] = 0;
  _$jscoverage['dataapi/Xmla.js'][5113] = 0;
  _$jscoverage['dataapi/Xmla.js'][5126] = 0;
  _$jscoverage['dataapi/Xmla.js'][5127] = 0;
  _$jscoverage['dataapi/Xmla.js'][5129] = 0;
  _$jscoverage['dataapi/Xmla.js'][5130] = 0;
  _$jscoverage['dataapi/Xmla.js'][5132] = 0;
  _$jscoverage['dataapi/Xmla.js'][5133] = 0;
  _$jscoverage['dataapi/Xmla.js'][5134] = 0;
  _$jscoverage['dataapi/Xmla.js'][5136] = 0;
  _$jscoverage['dataapi/Xmla.js'][5139] = 0;
  _$jscoverage['dataapi/Xmla.js'][5140] = 0;
  _$jscoverage['dataapi/Xmla.js'][5141] = 0;
  _$jscoverage['dataapi/Xmla.js'][5144] = 0;
  _$jscoverage['dataapi/Xmla.js'][5146] = 0;
  _$jscoverage['dataapi/Xmla.js'][5150] = 0;
  _$jscoverage['dataapi/Xmla.js'][5151] = 0;
  _$jscoverage['dataapi/Xmla.js'][5152] = 0;
  _$jscoverage['dataapi/Xmla.js'][5155] = 0;
  _$jscoverage['dataapi/Xmla.js'][5156] = 0;
  _$jscoverage['dataapi/Xmla.js'][5157] = 0;
  _$jscoverage['dataapi/Xmla.js'][5158] = 0;
  _$jscoverage['dataapi/Xmla.js'][5159] = 0;
  _$jscoverage['dataapi/Xmla.js'][5160] = 0;
  _$jscoverage['dataapi/Xmla.js'][5162] = 0;
  _$jscoverage['dataapi/Xmla.js'][5170] = 0;
  _$jscoverage['dataapi/Xmla.js'][5171] = 0;
  _$jscoverage['dataapi/Xmla.js'][5176] = 0;
  _$jscoverage['dataapi/Xmla.js'][5177] = 0;
  _$jscoverage['dataapi/Xmla.js'][5180] = 0;
  _$jscoverage['dataapi/Xmla.js'][5181] = 0;
  _$jscoverage['dataapi/Xmla.js'][5182] = 0;
  _$jscoverage['dataapi/Xmla.js'][5185] = 0;
  _$jscoverage['dataapi/Xmla.js'][5193] = 0;
  _$jscoverage['dataapi/Xmla.js'][5195] = 0;
  _$jscoverage['dataapi/Xmla.js'][5196] = 0;
  _$jscoverage['dataapi/Xmla.js'][5199] = 0;
  _$jscoverage['dataapi/Xmla.js'][5200] = 0;
  _$jscoverage['dataapi/Xmla.js'][5201] = 0;
  _$jscoverage['dataapi/Xmla.js'][5202] = 0;
  _$jscoverage['dataapi/Xmla.js'][5203] = 0;
  _$jscoverage['dataapi/Xmla.js'][5204] = 0;
  _$jscoverage['dataapi/Xmla.js'][5207] = 0;
  _$jscoverage['dataapi/Xmla.js'][5208] = 0;
  _$jscoverage['dataapi/Xmla.js'][5209] = 0;
  _$jscoverage['dataapi/Xmla.js'][5210] = 0;
  _$jscoverage['dataapi/Xmla.js'][5211] = 0;
  _$jscoverage['dataapi/Xmla.js'][5212] = 0;
  _$jscoverage['dataapi/Xmla.js'][5213] = 0;
  _$jscoverage['dataapi/Xmla.js'][5214] = 0;
  _$jscoverage['dataapi/Xmla.js'][5217] = 0;
  _$jscoverage['dataapi/Xmla.js'][5218] = 0;
  _$jscoverage['dataapi/Xmla.js'][5221] = 0;
  _$jscoverage['dataapi/Xmla.js'][5224] = 0;
  _$jscoverage['dataapi/Xmla.js'][5227] = 0;
  _$jscoverage['dataapi/Xmla.js'][5230] = 0;
  _$jscoverage['dataapi/Xmla.js'][5231] = 0;
  _$jscoverage['dataapi/Xmla.js'][5232] = 0;
  _$jscoverage['dataapi/Xmla.js'][5233] = 0;
  _$jscoverage['dataapi/Xmla.js'][5234] = 0;
  _$jscoverage['dataapi/Xmla.js'][5242] = 0;
  _$jscoverage['dataapi/Xmla.js'][5244] = 0;
  _$jscoverage['dataapi/Xmla.js'][5245] = 0;
  _$jscoverage['dataapi/Xmla.js'][5248] = 0;
  _$jscoverage['dataapi/Xmla.js'][5250] = 0;
  _$jscoverage['dataapi/Xmla.js'][5253] = 0;
  _$jscoverage['dataapi/Xmla.js'][5256] = 0;
  _$jscoverage['dataapi/Xmla.js'][5259] = 0;
  _$jscoverage['dataapi/Xmla.js'][5262] = 0;
  _$jscoverage['dataapi/Xmla.js'][5263] = 0;
  _$jscoverage['dataapi/Xmla.js'][5265] = 0;
  _$jscoverage['dataapi/Xmla.js'][5266] = 0;
  _$jscoverage['dataapi/Xmla.js'][5268] = 0;
  _$jscoverage['dataapi/Xmla.js'][5269] = 0;
  _$jscoverage['dataapi/Xmla.js'][5270] = 0;
  _$jscoverage['dataapi/Xmla.js'][5271] = 0;
  _$jscoverage['dataapi/Xmla.js'][5272] = 0;
  _$jscoverage['dataapi/Xmla.js'][5273] = 0;
  _$jscoverage['dataapi/Xmla.js'][5277] = 0;
  _$jscoverage['dataapi/Xmla.js'][5278] = 0;
  _$jscoverage['dataapi/Xmla.js'][5279] = 0;
  _$jscoverage['dataapi/Xmla.js'][5282] = 0;
  _$jscoverage['dataapi/Xmla.js'][5283] = 0;
  _$jscoverage['dataapi/Xmla.js'][5284] = 0;
  _$jscoverage['dataapi/Xmla.js'][5285] = 0;
  _$jscoverage['dataapi/Xmla.js'][5286] = 0;
  _$jscoverage['dataapi/Xmla.js'][5288] = 0;
  _$jscoverage['dataapi/Xmla.js'][5297] = 0;
  _$jscoverage['dataapi/Xmla.js'][5307] = 0;
  _$jscoverage['dataapi/Xmla.js'][5308] = 0;
  _$jscoverage['dataapi/Xmla.js'][5309] = 0;
  _$jscoverage['dataapi/Xmla.js'][5310] = 0;
  _$jscoverage['dataapi/Xmla.js'][5311] = 0;
  _$jscoverage['dataapi/Xmla.js'][5312] = 0;
  _$jscoverage['dataapi/Xmla.js'][5313] = 0;
  _$jscoverage['dataapi/Xmla.js'][5314] = 0;
  _$jscoverage['dataapi/Xmla.js'][5315] = 0;
  _$jscoverage['dataapi/Xmla.js'][5321] = 0;
  _$jscoverage['dataapi/Xmla.js'][5322] = 0;
  _$jscoverage['dataapi/Xmla.js'][5323] = 0;
  _$jscoverage['dataapi/Xmla.js'][5324] = 0;
  _$jscoverage['dataapi/Xmla.js'][5326] = 0;
  _$jscoverage['dataapi/Xmla.js'][5331] = 0;
  _$jscoverage['dataapi/Xmla.js'][5336] = 0;
  _$jscoverage['dataapi/Xmla.js'][5338] = 0;
  _$jscoverage['dataapi/Xmla.js'][5339] = 0;
  _$jscoverage['dataapi/Xmla.js'][5340] = 0;
  _$jscoverage['dataapi/Xmla.js'][5341] = 0;
  _$jscoverage['dataapi/Xmla.js'][5344] = 0;
  _$jscoverage['dataapi/Xmla.js'][5345] = 0;
  _$jscoverage['dataapi/Xmla.js'][5351] = 0;
  _$jscoverage['dataapi/Xmla.js'][5355] = 0;
  _$jscoverage['dataapi/Xmla.js'][5356] = 0;
  _$jscoverage['dataapi/Xmla.js'][5359] = 0;
  _$jscoverage['dataapi/Xmla.js'][5362] = 0;
  _$jscoverage['dataapi/Xmla.js'][5363] = 0;
  _$jscoverage['dataapi/Xmla.js'][5364] = 0;
  _$jscoverage['dataapi/Xmla.js'][5367] = 0;
  _$jscoverage['dataapi/Xmla.js'][5370] = 0;
  _$jscoverage['dataapi/Xmla.js'][5371] = 0;
  _$jscoverage['dataapi/Xmla.js'][5372] = 0;
  _$jscoverage['dataapi/Xmla.js'][5374] = 0;
  _$jscoverage['dataapi/Xmla.js'][5377] = 0;
  _$jscoverage['dataapi/Xmla.js'][5380] = 0;
  _$jscoverage['dataapi/Xmla.js'][5383] = 0;
  _$jscoverage['dataapi/Xmla.js'][5386] = 0;
  _$jscoverage['dataapi/Xmla.js'][5387] = 0;
  _$jscoverage['dataapi/Xmla.js'][5388] = 0;
  _$jscoverage['dataapi/Xmla.js'][5394] = 0;
  _$jscoverage['dataapi/Xmla.js'][5397] = 0;
  _$jscoverage['dataapi/Xmla.js'][5398] = 0;
  _$jscoverage['dataapi/Xmla.js'][5400] = 0;
  _$jscoverage['dataapi/Xmla.js'][5401] = 0;
  _$jscoverage['dataapi/Xmla.js'][5402] = 0;
  _$jscoverage['dataapi/Xmla.js'][5404] = 0;
  _$jscoverage['dataapi/Xmla.js'][5405] = 0;
  _$jscoverage['dataapi/Xmla.js'][5406] = 0;
  _$jscoverage['dataapi/Xmla.js'][5408] = 0;
  _$jscoverage['dataapi/Xmla.js'][5409] = 0;
  _$jscoverage['dataapi/Xmla.js'][5410] = 0;
  _$jscoverage['dataapi/Xmla.js'][5411] = 0;
  _$jscoverage['dataapi/Xmla.js'][5412] = 0;
  _$jscoverage['dataapi/Xmla.js'][5413] = 0;
  _$jscoverage['dataapi/Xmla.js'][5414] = 0;
  _$jscoverage['dataapi/Xmla.js'][5415] = 0;
  _$jscoverage['dataapi/Xmla.js'][5417] = 0;
  _$jscoverage['dataapi/Xmla.js'][5418] = 0;
  _$jscoverage['dataapi/Xmla.js'][5420] = 0;
  _$jscoverage['dataapi/Xmla.js'][5421] = 0;
  _$jscoverage['dataapi/Xmla.js'][5423] = 0;
  _$jscoverage['dataapi/Xmla.js'][5430] = 0;
  _$jscoverage['dataapi/Xmla.js'][5433] = 0;
  _$jscoverage['dataapi/Xmla.js'][5434] = 0;
  _$jscoverage['dataapi/Xmla.js'][5436] = 0;
  _$jscoverage['dataapi/Xmla.js'][5437] = 0;
  _$jscoverage['dataapi/Xmla.js'][5439] = 0;
  _$jscoverage['dataapi/Xmla.js'][5442] = 0;
  _$jscoverage['dataapi/Xmla.js'][5443] = 0;
  _$jscoverage['dataapi/Xmla.js'][5445] = 0;
  _$jscoverage['dataapi/Xmla.js'][5446] = 0;
  _$jscoverage['dataapi/Xmla.js'][5448] = 0;
  _$jscoverage['dataapi/Xmla.js'][5451] = 0;
  _$jscoverage['dataapi/Xmla.js'][5452] = 0;
  _$jscoverage['dataapi/Xmla.js'][5453] = 0;
  _$jscoverage['dataapi/Xmla.js'][5454] = 0;
  _$jscoverage['dataapi/Xmla.js'][5456] = 0;
  _$jscoverage['dataapi/Xmla.js'][5458] = 0;
  _$jscoverage['dataapi/Xmla.js'][5461] = 0;
  _$jscoverage['dataapi/Xmla.js'][5462] = 0;
  _$jscoverage['dataapi/Xmla.js'][5463] = 0;
  _$jscoverage['dataapi/Xmla.js'][5464] = 0;
  _$jscoverage['dataapi/Xmla.js'][5466] = 0;
  _$jscoverage['dataapi/Xmla.js'][5468] = 0;
  _$jscoverage['dataapi/Xmla.js'][5471] = 0;
  _$jscoverage['dataapi/Xmla.js'][5472] = 0;
  _$jscoverage['dataapi/Xmla.js'][5473] = 0;
  _$jscoverage['dataapi/Xmla.js'][5475] = 0;
  _$jscoverage['dataapi/Xmla.js'][5476] = 0;
  _$jscoverage['dataapi/Xmla.js'][5478] = 0;
  _$jscoverage['dataapi/Xmla.js'][5481] = 0;
  _$jscoverage['dataapi/Xmla.js'][5482] = 0;
  _$jscoverage['dataapi/Xmla.js'][5483] = 0;
  _$jscoverage['dataapi/Xmla.js'][5485] = 0;
  _$jscoverage['dataapi/Xmla.js'][5486] = 0;
  _$jscoverage['dataapi/Xmla.js'][5488] = 0;
  _$jscoverage['dataapi/Xmla.js'][5492] = 0;
  _$jscoverage['dataapi/Xmla.js'][5493] = 0;
  _$jscoverage['dataapi/Xmla.js'][5494] = 0;
  _$jscoverage['dataapi/Xmla.js'][5495] = 0;
  _$jscoverage['dataapi/Xmla.js'][5498] = 0;
  _$jscoverage['dataapi/Xmla.js'][5508] = 0;
  _$jscoverage['dataapi/Xmla.js'][5513] = 0;
  _$jscoverage['dataapi/Xmla.js'][5514] = 0;
  _$jscoverage['dataapi/Xmla.js'][5515] = 0;
  _$jscoverage['dataapi/Xmla.js'][5521] = 0;
  _$jscoverage['dataapi/Xmla.js'][5524] = 0;
  _$jscoverage['dataapi/Xmla.js'][5525] = 0;
  _$jscoverage['dataapi/Xmla.js'][5528] = 0;
  _$jscoverage['dataapi/Xmla.js'][5529] = 0;
  _$jscoverage['dataapi/Xmla.js'][5535] = 0;
  _$jscoverage['dataapi/Xmla.js'][5536] = 0;
  _$jscoverage['dataapi/Xmla.js'][5539] = 0;
  _$jscoverage['dataapi/Xmla.js'][5541] = 0;
  _$jscoverage['dataapi/Xmla.js'][5542] = 0;
  _$jscoverage['dataapi/Xmla.js'][5543] = 0;
  _$jscoverage['dataapi/Xmla.js'][5544] = 0;
  _$jscoverage['dataapi/Xmla.js'][5546] = 0;
  _$jscoverage['dataapi/Xmla.js'][5547] = 0;
  _$jscoverage['dataapi/Xmla.js'][5548] = 0;
  _$jscoverage['dataapi/Xmla.js'][5549] = 0;
  _$jscoverage['dataapi/Xmla.js'][5551] = 0;
  _$jscoverage['dataapi/Xmla.js'][5554] = 0;
  _$jscoverage['dataapi/Xmla.js'][5555] = 0;
  _$jscoverage['dataapi/Xmla.js'][5556] = 0;
  _$jscoverage['dataapi/Xmla.js'][5557] = 0;
  _$jscoverage['dataapi/Xmla.js'][5558] = 0;
  _$jscoverage['dataapi/Xmla.js'][5559] = 0;
  _$jscoverage['dataapi/Xmla.js'][5560] = 0;
  _$jscoverage['dataapi/Xmla.js'][5561] = 0;
  _$jscoverage['dataapi/Xmla.js'][5564] = 0;
  _$jscoverage['dataapi/Xmla.js'][5567] = 0;
  _$jscoverage['dataapi/Xmla.js'][5570] = 0;
  _$jscoverage['dataapi/Xmla.js'][5573] = 0;
  _$jscoverage['dataapi/Xmla.js'][5574] = 0;
  _$jscoverage['dataapi/Xmla.js'][5577] = 0;
  _$jscoverage['dataapi/Xmla.js'][5578] = 0;
  _$jscoverage['dataapi/Xmla.js'][5579] = 0;
  _$jscoverage['dataapi/Xmla.js'][5582] = 0;
  _$jscoverage['dataapi/Xmla.js'][5585] = 0;
  _$jscoverage['dataapi/Xmla.js'][5586] = 0;
  _$jscoverage['dataapi/Xmla.js'][5589] = 0;
  _$jscoverage['dataapi/Xmla.js'][5593] = 0;
  _$jscoverage['dataapi/Xmla.js'][5596] = 0;
  _$jscoverage['dataapi/Xmla.js'][5603] = 0;
  _$jscoverage['dataapi/Xmla.js'][5604] = 0;
  _$jscoverage['dataapi/Xmla.js'][5605] = 0;
  _$jscoverage['dataapi/Xmla.js'][5608] = 0;
  _$jscoverage['dataapi/Xmla.js'][5609] = 0;
  _$jscoverage['dataapi/Xmla.js'][5610] = 0;
  _$jscoverage['dataapi/Xmla.js'][5613] = 0;
  _$jscoverage['dataapi/Xmla.js'][5614] = 0;
  _$jscoverage['dataapi/Xmla.js'][5615] = 0;
  _$jscoverage['dataapi/Xmla.js'][5617] = 0;
  _$jscoverage['dataapi/Xmla.js'][5618] = 0;
  _$jscoverage['dataapi/Xmla.js'][5622] = 0;
  _$jscoverage['dataapi/Xmla.js'][5626] = 0;
  _$jscoverage['dataapi/Xmla.js'][5627] = 0;
  _$jscoverage['dataapi/Xmla.js'][5629] = 0;
  _$jscoverage['dataapi/Xmla.js'][5632] = 0;
  _$jscoverage['dataapi/Xmla.js'][5633] = 0;
  _$jscoverage['dataapi/Xmla.js'][5634] = 0;
  _$jscoverage['dataapi/Xmla.js'][5666] = 0;
  _$jscoverage['dataapi/Xmla.js'][5667] = 0;
  _$jscoverage['dataapi/Xmla.js'][5668] = 0;
  _$jscoverage['dataapi/Xmla.js'][5669] = 0;
  _$jscoverage['dataapi/Xmla.js'][5670] = 0;
  _$jscoverage['dataapi/Xmla.js'][5671] = 0;
  _$jscoverage['dataapi/Xmla.js'][5672] = 0;
  _$jscoverage['dataapi/Xmla.js'][5673] = 0;
  _$jscoverage['dataapi/Xmla.js'][5674] = 0;
  _$jscoverage['dataapi/Xmla.js'][5687] = 0;
  _$jscoverage['dataapi/Xmla.js'][5698] = 0;
  _$jscoverage['dataapi/Xmla.js'][5700] = 0;
  _$jscoverage['dataapi/Xmla.js'][5711] = 0;
  _$jscoverage['dataapi/Xmla.js'][5712] = 0;
  _$jscoverage['dataapi/Xmla.js'][5713] = 0;
  _$jscoverage['dataapi/Xmla.js'][5725] = 0;
  _$jscoverage['dataapi/Xmla.js'][5726] = 0;
  _$jscoverage['dataapi/Xmla.js'][5727] = 0;
  _$jscoverage['dataapi/Xmla.js'][5740] = 0;
  _$jscoverage['dataapi/Xmla.js'][5741] = 0;
  _$jscoverage['dataapi/Xmla.js'][5742] = 0;
  _$jscoverage['dataapi/Xmla.js'][5755] = 0;
  _$jscoverage['dataapi/Xmla.js'][5756] = 0;
  _$jscoverage['dataapi/Xmla.js'][5757] = 0;
  _$jscoverage['dataapi/Xmla.js'][5770] = 0;
  _$jscoverage['dataapi/Xmla.js'][5771] = 0;
  _$jscoverage['dataapi/Xmla.js'][5772] = 0;
  _$jscoverage['dataapi/Xmla.js'][5785] = 0;
  _$jscoverage['dataapi/Xmla.js'][5786] = 0;
  _$jscoverage['dataapi/Xmla.js'][5787] = 0;
  _$jscoverage['dataapi/Xmla.js'][5799] = 0;
  _$jscoverage['dataapi/Xmla.js'][5800] = 0;
  _$jscoverage['dataapi/Xmla.js'][5801] = 0;
  _$jscoverage['dataapi/Xmla.js'][5813] = 0;
  _$jscoverage['dataapi/Xmla.js'][5814] = 0;
  _$jscoverage['dataapi/Xmla.js'][5815] = 0;
  _$jscoverage['dataapi/Xmla.js'][5827] = 0;
  _$jscoverage['dataapi/Xmla.js'][5828] = 0;
  _$jscoverage['dataapi/Xmla.js'][5829] = 0;
  _$jscoverage['dataapi/Xmla.js'][5842] = 0;
  _$jscoverage['dataapi/Xmla.js'][5843] = 0;
  _$jscoverage['dataapi/Xmla.js'][5844] = 0;
  _$jscoverage['dataapi/Xmla.js'][5857] = 0;
  _$jscoverage['dataapi/Xmla.js'][5858] = 0;
  _$jscoverage['dataapi/Xmla.js'][5859] = 0;
  _$jscoverage['dataapi/Xmla.js'][5872] = 0;
  _$jscoverage['dataapi/Xmla.js'][5873] = 0;
  _$jscoverage['dataapi/Xmla.js'][5874] = 0;
  _$jscoverage['dataapi/Xmla.js'][5879] = 0;
  _$jscoverage['dataapi/Xmla.js'][5880] = 0;
  _$jscoverage['dataapi/Xmla.js'][5890] = 0;
  _$jscoverage['dataapi/Xmla.js'][5938] = 0;
  _$jscoverage['dataapi/Xmla.js'][5950] = 0;
  _$jscoverage['dataapi/Xmla.js'][5951] = 0;
  _$jscoverage['dataapi/Xmla.js'][5952] = 0;
  _$jscoverage['dataapi/Xmla.js'][5953] = 0;
  _$jscoverage['dataapi/Xmla.js'][5954] = 0;
  _$jscoverage['dataapi/Xmla.js'][5955] = 0;
  _$jscoverage['dataapi/Xmla.js'][5958] = 0;
}
_$jscoverage['dataapi/Xmla.js'].source = ["<span class=\"c\">/*</span>","<span class=\"c\">    Copyright 2009,2010 Roland Bouman</span>","<span class=\"c\">    contact: Roland.Bouman@gmail.com ~ http://rpbouman.blogspot.com/ ~ http://code.google.com/p/xmla4js</span>","<span class=\"c\">    </span>","<span class=\"c\">    This is xmla4js - a stand-alone, cross-browser javascript library for working with \"XML for Analysis\".</span>","<span class=\"c\">    XML for Analysis (XML/A) is a vendor-neutral industry-standard protocol for OLAP services over HTTP.</span>","<span class=\"c\">    xmla4js enables web-browser-based analytical business intelligence applications.</span>","<span class=\"c\">        </span>","<span class=\"c\">    This file contains human-readable javascript source along with the YUI Doc compatible annotations.</span>","<span class=\"c\">    Note: some portions of the API documentation were adopted from the original XML/A specification. </span>","<span class=\"c\">    I believe that this constitutes fair use, but if you have reason to believe that the documentation </span>","<span class=\"c\">    violates any copyright, or is otherwise incompatible with the LGPL license please contact me.</span>","","<span class=\"c\">    Include this in your web-pages for debug and development purposes only.</span>","<span class=\"c\">    For production purposes, consider using the minified/obfuscated versions in the /js directory.</span>","","<span class=\"c\">    This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">    it under the terms of the GNU Lesser General Public License as published by</span>","<span class=\"c\">    the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">    (at your option) any later version.</span>","","<span class=\"c\">    This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>","<span class=\"c\">    GNU General Public License for more details.</span>","","<span class=\"c\">    You should have received a copy of the GNU General Public License</span>","<span class=\"c\">    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>    ","<span class=\"k\">var</span> Xmla<span class=\"k\">;</span>","<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span><span class=\"k\">{</span>","","<span class=\"k\">var</span> _soap <span class=\"k\">=</span> <span class=\"s\">\"http://schemas.xmlsoap.org/soap/\"</span><span class=\"k\">,</span>","    _xmlnsSOAPenvelope <span class=\"k\">=</span> _soap <span class=\"k\">+</span> <span class=\"s\">\"envelope/\"</span><span class=\"k\">,</span>","    _xmlnsSOAPenvelopePrefix <span class=\"k\">=</span> <span class=\"s\">\"SOAP-ENV\"</span><span class=\"k\">,</span>","    _xmlnsIsSOAPenvelope <span class=\"k\">=</span> <span class=\"s\">\"xmlns:\"</span> <span class=\"k\">+</span> _xmlnsSOAPenvelopePrefix <span class=\"k\">+</span> <span class=\"s\">\"=</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> _xmlnsSOAPenvelope <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span><span class=\"k\">,</span>","    _SOAPencodingStyle <span class=\"k\">=</span> _xmlnsSOAPenvelopePrefix <span class=\"k\">+</span> <span class=\"s\">\":encodingStyle=</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> _soap <span class=\"k\">+</span> <span class=\"s\">\"encoding/</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span><span class=\"k\">,</span>","    _ms <span class=\"k\">=</span> <span class=\"s\">\"urn:schemas-microsoft-com:\"</span><span class=\"k\">,</span>","    _xmlnsXmla <span class=\"k\">=</span> _ms <span class=\"k\">+</span> <span class=\"s\">\"xml-analysis\"</span><span class=\"k\">,</span>","    _xmlnsIsXmla <span class=\"k\">=</span> <span class=\"s\">\"xmlns=</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> _xmlnsXmla <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span><span class=\"k\">,</span>","    _xmlnsSQLPrefix <span class=\"k\">=</span> <span class=\"s\">\"sql\"</span><span class=\"k\">,</span>","    _xmlnsSQL <span class=\"k\">=</span> _ms <span class=\"k\">+</span> <span class=\"s\">\"xml-sql\"</span><span class=\"k\">,</span>","    _xmlnsSchema <span class=\"k\">=</span> <span class=\"s\">\"http://www.w3.org/2001/XMLSchema\"</span><span class=\"k\">,</span>","    _xmlnsSchemaPrefix <span class=\"k\">=</span> <span class=\"s\">\"xsd\"</span><span class=\"k\">,</span> ","    _xmlnsSchemaInstance <span class=\"k\">=</span> <span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span><span class=\"k\">,</span>","    _xmlnsSchemaInstancePrefix <span class=\"k\">=</span> <span class=\"s\">\"xsi\"</span><span class=\"k\">,</span> ","    _xmlnsRowset <span class=\"k\">=</span> _xmlnsXmla <span class=\"k\">+</span> <span class=\"s\">\":rowset\"</span><span class=\"k\">,</span>","    _xmlnsDataset <span class=\"k\">=</span> _xmlnsXmla <span class=\"k\">+</span> <span class=\"s\">\":mddataset\"</span><span class=\"k\">,</span>","    _useAX <span class=\"k\">=</span> window<span class=\"k\">.</span>ActiveXObject <span class=\"k\">?</span> <span class=\"k\">true</span> <span class=\"k\">:</span> <span class=\"k\">false</span>","<span class=\"k\">;</span>    ","","<span class=\"c\">/**</span>","<span class=\"c\">*   Xmla implements a XML for Analysis (XML/A) client in javascript.</span>","<span class=\"c\">*   Using this utility you can communicate with XML/A enabled OLAP servers </span>","<span class=\"c\">*   to obtain metadata and to issue MDX queries.</span>","<span class=\"c\">*   @module xmla</span>","<span class=\"c\">*   @title Xmla utility</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/****************************************************************************/</span>","<span class=\"c\">/****************************************************************************/</span>","<span class=\"c\">/****************************************************************************/</span>","","<span class=\"k\">function</span> _ajax<span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","<span class=\"c\">/*</span>","<span class=\"c\">    This is not a general ajax function, </span>","<span class=\"c\">    just something that is good enough for Xmla.</span>","<span class=\"c\">*/</span>","    <span class=\"k\">var</span> xhr<span class=\"k\">,</span>","        handlerCalled <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">,</span>","        handler <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            handlerCalled <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">switch</span> <span class=\"k\">(</span>xhr<span class=\"k\">.</span>readyState<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">case</span> <span class=\"s\">0</span><span class=\"k\">:</span>","                    options<span class=\"k\">.</span>aborted<span class=\"k\">(</span>xhr<span class=\"k\">);</span>                    ","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">case</span> <span class=\"s\">4</span><span class=\"k\">:</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>xhr<span class=\"k\">.</span>status<span class=\"k\">===</span><span class=\"s\">200</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        options<span class=\"k\">.</span>complete<span class=\"k\">(</span>xhr<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">else</span> <span class=\"k\">{</span>","                        options<span class=\"k\">.</span>error<span class=\"k\">(</span>","                            Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                                <span class=\"s\">\"HTTP_ERROR\"</span><span class=\"k\">,</span>","                                <span class=\"s\">\"_ajax\"</span><span class=\"k\">,</span>","                                options","                            <span class=\"k\">)</span>","                        <span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>_useAX<span class=\"k\">)</span> <span class=\"k\">{</span>","        xhr <span class=\"k\">=</span> <span class=\"k\">new</span> ActiveXObject<span class=\"k\">(</span><span class=\"s\">\"MSXML2.XMLHTTP.3.0\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> ","    <span class=\"k\">else</span> <span class=\"k\">{</span>","        xhr <span class=\"k\">=</span> <span class=\"k\">new</span> XMLHttpRequest<span class=\"k\">();</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>username <span class=\"k\">&amp;&amp;</span> options<span class=\"k\">.</span>password<span class=\"k\">)</span> <span class=\"k\">{</span>","        xhr<span class=\"k\">.</span>open<span class=\"k\">(</span>","            <span class=\"s\">\"POST\"</span><span class=\"k\">,</span> options<span class=\"k\">.</span>url<span class=\"k\">,</span> options<span class=\"k\">.</span>async<span class=\"k\">,</span> ","            options<span class=\"k\">.</span>username<span class=\"k\">,</span> options<span class=\"k\">.</span>password","        <span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        xhr<span class=\"k\">.</span>open<span class=\"k\">(</span><span class=\"s\">\"POST\"</span><span class=\"k\">,</span> options<span class=\"k\">.</span>url<span class=\"k\">,</span> options<span class=\"k\">.</span>async<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    xhr<span class=\"k\">.</span>onreadystatechange <span class=\"k\">=</span> handler<span class=\"k\">;</span>","    xhr<span class=\"k\">.</span>setRequestHeader<span class=\"k\">(</span><span class=\"s\">\"Accept\"</span><span class=\"k\">,</span> <span class=\"s\">\"text/xml, application/xml\"</span><span class=\"k\">);</span>","    xhr<span class=\"k\">.</span>setRequestHeader<span class=\"k\">(</span><span class=\"s\">\"Content-Type\"</span><span class=\"k\">,</span> <span class=\"s\">\"text/xml\"</span><span class=\"k\">);</span>","    xhr<span class=\"k\">.</span>send<span class=\"k\">(</span>options<span class=\"k\">.</span>data<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>options<span class=\"k\">.</span>async <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>handlerCalled<span class=\"k\">)</span><span class=\"k\">{</span>","        handler<span class=\"k\">.</span>call<span class=\"k\">(</span>xhr<span class=\"k\">);</span>","    <span class=\"k\">}</span>        ","    <span class=\"k\">return</span> xhr<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> _isUnd<span class=\"k\">(</span>arg<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">typeof</span><span class=\"k\">(</span>arg<span class=\"k\">)===</span><span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","<span class=\"k\">function</span> _isNum<span class=\"k\">(</span>arg<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">typeof</span><span class=\"k\">(</span>arg<span class=\"k\">)===</span><span class=\"s\">\"number\"</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","<span class=\"k\">function</span> _xmlEncode<span class=\"k\">(</span>value<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">return</span> value<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/\\&amp;/g</span><span class=\"k\">,</span><span class=\"s\">\"&amp;amp;\"</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/&lt;/g</span><span class=\"k\">,</span><span class=\"s\">\"&amp;lt;\"</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/&gt;/g</span><span class=\"k\">,</span><span class=\"s\">\"&amp;gt;\"</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"k\">var</span> _getElementsByTagNameNS <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementsByTagNameNS <span class=\"k\">?</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">,</span> ns<span class=\"k\">,</span> prefix<span class=\"k\">,</span> tagName<span class=\"k\">)</span><span class=\"k\">{</span>","                                                                    <span class=\"k\">return</span> node<span class=\"k\">.</span>getElementsByTagNameNS<span class=\"k\">(</span>ns<span class=\"k\">,</span> tagName<span class=\"k\">);</span>","                                                                <span class=\"k\">}</span>","                                                              <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">,</span> ns<span class=\"k\">,</span> prefix<span class=\"k\">,</span> tagName<span class=\"k\">)</span><span class=\"k\">{</span>","                                                                    <span class=\"k\">if</span> <span class=\"k\">(</span>prefix<span class=\"k\">)</span><span class=\"k\">{</span>        ","                                                                        <span class=\"k\">return</span> node<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span>prefix <span class=\"k\">+</span> <span class=\"s\">\":\"</span> <span class=\"k\">+</span> tagName<span class=\"k\">);</span>","                                                                    <span class=\"k\">}</span>","                                                                    <span class=\"k\">else</span> <span class=\"k\">{</span>","                                                                        <span class=\"k\">return</span> node<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span>tagName<span class=\"k\">);</span>","                                                                    <span class=\"k\">}</span>","                                                                <span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">var</span> _getAttributeNS <span class=\"k\">=</span> document<span class=\"k\">.</span>documentElement<span class=\"k\">.</span>getAttributeNS <span class=\"k\">?</span> <span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">,</span> ns<span class=\"k\">,</span> prefix<span class=\"k\">,</span> attributeName<span class=\"k\">)</span><span class=\"k\">{</span>","                                                                    <span class=\"k\">return</span> element<span class=\"k\">.</span>getAttributeNS<span class=\"k\">(</span>ns<span class=\"k\">,</span> attributeName<span class=\"k\">);</span>","                                                                <span class=\"k\">}</span>","                                                              <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">,</span> ns<span class=\"k\">,</span> prefix<span class=\"k\">,</span> attributeName<span class=\"k\">)</span><span class=\"k\">{</span>","                                                                    <span class=\"k\">if</span> <span class=\"k\">(</span>prefix<span class=\"k\">)</span> <span class=\"k\">{</span>","                                                                        <span class=\"k\">return</span> element<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span>prefix <span class=\"k\">+</span> <span class=\"s\">\":\"</span> <span class=\"k\">+</span> attributeName<span class=\"k\">);</span>","                                                                    <span class=\"k\">}</span>","                                                                    <span class=\"k\">else</span> <span class=\"k\">{</span>","                                                                        <span class=\"k\">return</span> element<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span>attributeName<span class=\"k\">);</span>","                                                                    <span class=\"k\">}</span>","                                                                <span class=\"k\">}</span><span class=\"k\">;</span>                                                              ","<span class=\"k\">function</span> _getElementText<span class=\"k\">(</span>el<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>el<span class=\"k\">.</span>innerText<span class=\"k\">)</span> <span class=\"k\">{</span>         <span class=\"c\">//ie</span>","        <span class=\"k\">return</span> el<span class=\"k\">.</span>innerText<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> ","    <span class=\"k\">if</span> <span class=\"k\">(</span>el<span class=\"k\">.</span>textContent<span class=\"k\">)</span> <span class=\"k\">{</span>       <span class=\"c\">//ff</span>","        <span class=\"k\">return</span> el<span class=\"k\">.</span>textContent<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> ","    <span class=\"k\">if</span> <span class=\"k\">(</span>el<span class=\"k\">.</span>normalize<span class=\"k\">)</span><span class=\"k\">{</span>","        el<span class=\"k\">.</span>normalize<span class=\"k\">();</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>el<span class=\"k\">.</span>firstChild<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> el<span class=\"k\">.</span>firstChild<span class=\"k\">.</span>data<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">{</span>                      <span class=\"c\">//generic</span>","        <span class=\"k\">var</span> text <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span>","            childNodes <span class=\"k\">=</span> el<span class=\"k\">.</span>childNodes<span class=\"k\">,</span>","            numChildNodes <span class=\"k\">=</span> childNodes<span class=\"k\">.</span>length","        <span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>numChildNodes<span class=\"k\">;</span> i <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","            text <span class=\"k\">+=</span> childNodes<span class=\"k\">.</span>item<span class=\"k\">(</span>i<span class=\"k\">).</span>data<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> text<span class=\"k\">;</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","                                                                ","<span class=\"k\">function</span> _getXmlaSoapList<span class=\"k\">(</span>container<span class=\"k\">,</span> listType<span class=\"k\">,</span> items<span class=\"k\">,</span> indent<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>indent<span class=\"k\">)</span><span class=\"k\">{</span>","        indent <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">var</span> numItems<span class=\"k\">,</span> i<span class=\"k\">,</span> entry<span class=\"k\">,</span> property<span class=\"k\">,</span> item<span class=\"k\">,</span> msg <span class=\"k\">=</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">+</span> indent <span class=\"k\">+</span> <span class=\"s\">\"&lt;\"</span> <span class=\"k\">+</span> container <span class=\"k\">+</span> <span class=\"s\">\"&gt;\"</span><span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>items<span class=\"k\">)</span> <span class=\"k\">{</span>","        msg <span class=\"k\">+=</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">+</span> indent <span class=\"k\">+</span> <span class=\"s\">\" &lt;\"</span> <span class=\"k\">+</span> listType <span class=\"k\">+</span> <span class=\"s\">\"&gt;\"</span><span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>property <span class=\"k\">in</span> items<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>items<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>property<span class=\"k\">))</span> <span class=\"k\">{</span>","                item <span class=\"k\">=</span> items<span class=\"k\">[</span>property<span class=\"k\">];</span>","                msg <span class=\"k\">+=</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">+</span> indent <span class=\"k\">+</span> <span class=\"s\">\"  &lt;\"</span> <span class=\"k\">+</span> property <span class=\"k\">+</span> <span class=\"s\">\"&gt;\"</span><span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>item<span class=\"k\">)===</span><span class=\"s\">\"array\"</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">for</span> <span class=\"k\">(</span>entry<span class=\"k\">,</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span> numItems <span class=\"k\">=</span> item<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>numItems<span class=\"k\">;</span> i <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        entry <span class=\"k\">=</span> item<span class=\"k\">[</span>i<span class=\"k\">];</span>","                        msg <span class=\"k\">+=</span> <span class=\"s\">\"&lt;Value&gt;\"</span> <span class=\"k\">+</span> _xmlEncode<span class=\"k\">(</span>entry<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/Value&gt;\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    msg <span class=\"k\">+=</span> _xmlEncode<span class=\"k\">(</span>item<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                msg <span class=\"k\">+=</span> <span class=\"s\">\"&lt;/\"</span> <span class=\"k\">+</span> property <span class=\"k\">+</span> <span class=\"s\">\"&gt;\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        msg <span class=\"k\">+=</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">+</span> indent <span class=\"k\">+</span> <span class=\"s\">\" &lt;/\"</span> <span class=\"k\">+</span> listType <span class=\"k\">+</span> <span class=\"s\">\"&gt;\"</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    msg <span class=\"k\">+=</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">+</span> indent <span class=\"k\">+</span> <span class=\"s\">\"&lt;/\"</span> <span class=\"k\">+</span> container <span class=\"k\">+</span> <span class=\"s\">\"&gt;\"</span><span class=\"k\">;</span>","    <span class=\"k\">return</span> msg<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">var</span> _xmlRequestType <span class=\"k\">=</span> <span class=\"s\">\"RequestType\"</span><span class=\"k\">;</span>","","<span class=\"k\">function</span> _getXmlaSoapMessage<span class=\"k\">(</span>","    options","<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">var</span> method <span class=\"k\">=</span> options<span class=\"k\">.</span>method<span class=\"k\">,</span> exception <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">,</span>","        msg <span class=\"k\">=</span> <span class=\"s\">\"&lt;?xml version=</span><span class=\"t\">\\\"</span><span class=\"s\">1.0</span><span class=\"t\">\\\"</span><span class=\"s\"> encoding=</span><span class=\"t\">\\\"</span><span class=\"s\">UTF-8</span><span class=\"t\">\\\"</span><span class=\"s\">?&gt;\"</span> <span class=\"k\">+</span>","        <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">&lt;\"</span> <span class=\"k\">+</span> _xmlnsSOAPenvelopePrefix <span class=\"k\">+</span> <span class=\"s\">\":Envelope\"</span> <span class=\"k\">+</span> ","        <span class=\"s\">\" \"</span> <span class=\"k\">+</span> _xmlnsIsSOAPenvelope <span class=\"k\">+</span> ","        <span class=\"s\">\" \"</span> <span class=\"k\">+</span> _SOAPencodingStyle <span class=\"k\">+</span> <span class=\"s\">\"&gt;\"</span> <span class=\"k\">+</span> ","        <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\"> &lt;\"</span> <span class=\"k\">+</span> _xmlnsSOAPenvelopePrefix <span class=\"k\">+</span> <span class=\"s\">\":Body&gt;\"</span> <span class=\"k\">+</span> ","        <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">  &lt;\"</span> <span class=\"k\">+</span> method <span class=\"k\">+</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> _xmlnsIsXmla <span class=\"k\">+</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> _SOAPencodingStyle <span class=\"k\">+</span> <span class=\"s\">\"&gt;\"</span>","    <span class=\"k\">;</span>","    <span class=\"k\">switch</span><span class=\"k\">(</span>method<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">case</span> Xmla<span class=\"k\">.</span>METHOD_DISCOVER<span class=\"k\">:</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>requestType<span class=\"k\">)</span> <span class=\"k\">{</span>","                msg <span class=\"k\">+=</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">   &lt;\"</span> <span class=\"k\">+</span> _xmlRequestType <span class=\"k\">+</span> <span class=\"s\">\"&gt;\"</span> <span class=\"k\">+</span> options<span class=\"k\">.</span>requestType <span class=\"k\">+</span> <span class=\"s\">\"&lt;/\"</span> <span class=\"k\">+</span> _xmlRequestType <span class=\"k\">+</span> <span class=\"s\">\"&gt;\"</span> <span class=\"k\">+</span> ","                _getXmlaSoapList<span class=\"k\">(</span><span class=\"s\">\"Restrictions\"</span><span class=\"k\">,</span> <span class=\"s\">\"RestrictionList\"</span><span class=\"k\">,</span> options<span class=\"k\">.</span>restrictions<span class=\"k\">,</span> <span class=\"s\">\"   \"</span><span class=\"k\">)</span> <span class=\"k\">+</span> ","                _getXmlaSoapList<span class=\"k\">(</span><span class=\"s\">\"Properties\"</span><span class=\"k\">,</span> <span class=\"s\">\"PropertyList\"</span><span class=\"k\">,</span> options<span class=\"k\">.</span>properties<span class=\"k\">,</span> <span class=\"s\">\"   \"</span><span class=\"k\">)</span>","                <span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">{</span>","                exception <span class=\"k\">=</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                    <span class=\"s\">\"MISSING_REQUEST_TYPE\"</span><span class=\"k\">,</span>","                    <span class=\"s\">\"Xmla._getXmlaSoapMessage\"</span><span class=\"k\">,</span>","                    options","                <span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">case</span> Xmla<span class=\"k\">.</span>METHOD_EXECUTE<span class=\"k\">:</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>statement<span class=\"k\">)</span><span class=\"k\">{</span>","                msg <span class=\"k\">+=</span> <span class=\"s\">\"\"</span> <span class=\"k\">+</span> ","                <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">   &lt;Command&gt;\"</span> <span class=\"k\">+</span>","                <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">    &lt;Statement&gt;\"</span> <span class=\"k\">+</span> _xmlEncode<span class=\"k\">(</span>options<span class=\"k\">.</span>statement<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/Statement&gt;\"</span> <span class=\"k\">+</span> ","                <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">   &lt;/Command&gt;\"</span> <span class=\"k\">+</span> ","                _getXmlaSoapList<span class=\"k\">(</span><span class=\"s\">\"Properties\"</span><span class=\"k\">,</span> <span class=\"s\">\"PropertyList\"</span><span class=\"k\">,</span> options<span class=\"k\">.</span>properties<span class=\"k\">,</span> <span class=\"s\">\"   \"</span><span class=\"k\">)</span>","                <span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">{</span>","                exception <span class=\"k\">=</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                    <span class=\"s\">\"MISSING_REQUEST_TYPE\"</span><span class=\"k\">,</span>","                    <span class=\"s\">\"Xmla._getXmlaSoapMessage\"</span><span class=\"k\">,</span>","                    options","                <span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">default</span><span class=\"k\">:</span>","            <span class=\"c\">//we used to throw an exception here, </span>","            <span class=\"c\">//but this would make it impossible </span>","            <span class=\"c\">//to execute service or provider specific methods. </span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>exception<span class=\"k\">!==</span><span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","        exception<span class=\"k\">.</span>_throw<span class=\"k\">();</span>","    <span class=\"k\">}</span>","    msg <span class=\"k\">+=</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">  &lt;/\"</span> <span class=\"k\">+</span> method <span class=\"k\">+</span> <span class=\"s\">\"&gt;\"</span> <span class=\"k\">+</span> ","        <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\"> &lt;/\"</span> <span class=\"k\">+</span> _xmlnsSOAPenvelopePrefix <span class=\"k\">+</span> <span class=\"s\">\":Body&gt;\"</span> <span class=\"k\">+</span> ","        <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">&lt;/\"</span> <span class=\"k\">+</span> _xmlnsSOAPenvelopePrefix <span class=\"k\">+</span> <span class=\"s\">\":Envelope&gt;\"</span>","    <span class=\"k\">;</span>","    <span class=\"k\">return</span> msg<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> _applyProps<span class=\"k\">(</span>object<span class=\"k\">,</span> properties<span class=\"k\">,</span> overwrite<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>properties <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>object<span class=\"k\">))</span> <span class=\"k\">{</span>","        object <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> property <span class=\"k\">in</span> properties<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>properties<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>property<span class=\"k\">))</span><span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>overwrite <span class=\"k\">||</span> _isUnd<span class=\"k\">(</span>object<span class=\"k\">[</span>property<span class=\"k\">]))</span> <span class=\"k\">{</span>","                object<span class=\"k\">[</span>property<span class=\"k\">]</span> <span class=\"k\">=</span> properties<span class=\"k\">[</span>property<span class=\"k\">];</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> object<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   &lt;p&gt;</span>","<span class=\"c\">*   The Xmla class provides a javascript API to communicate XML for Analysis (XML/A) over HTTP.</span>","<span class=\"c\">*   XML/A is an industry standard protocol that allows webclients to work with OLAP servers.</span>","<span class=\"c\">*   To fully understand the scope and purpose of this utility, it is highly recommended</span>","<span class=\"c\">*   to read &lt;a href=\"http://xmla.org/xmla1.1.doc\"&gt;the XML/A specification&lt;/a&gt; </span>","<span class=\"c\">*   (MS Word format. For other formats, </span>","<span class=\"c\">*   see: &lt;a href=\"http://code.google.com/p/xmla4js/source/browse/#svn/trunk/doc/xmla1.1 specification\"&gt;http://code.google.com/p/xmla4js/source/browse/#svn/trunk/doc/xmla1.1 specification&lt;/a&gt;). </span>","<span class=\"c\">*   &lt;/p&gt;</span>","<span class=\"c\">*   @class Xmla</span>","<span class=\"c\">*   @param options Object standard options</span>","<span class=\"c\">*   @constructor</span>","<span class=\"c\">*/</span>","Xmla <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>listeners <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>listeners<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>EVENT_REQUEST<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>listeners<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>EVENT_SUCCESS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>listeners<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>EVENT_ERROR<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>listeners<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>EVENT_DISCOVER<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>listeners<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>EVENT_DISCOVER_SUCCESS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>listeners<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>EVENT_DISCOVER_ERROR<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>listeners<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>EVENT_EXECUTE<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>listeners<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>EVENT_EXECUTE_SUCCESS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>listeners<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>EVENT_EXECUTE_ERROR<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>options <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","        _applyProps<span class=\"k\">(</span>","            <span class=\"k\">{}</span><span class=\"k\">,</span>","            Xmla<span class=\"k\">.</span>defaultOptions<span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">),</span>","        options<span class=\"k\">,</span>","        <span class=\"k\">true</span>","    <span class=\"k\">);</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Xmla<span class=\"k\">.</span>defaultOptions <span class=\"k\">=</span> <span class=\"k\">{</span>","    requestTimeout<span class=\"k\">:</span> <span class=\"s\">30000</span><span class=\"k\">,</span>   <span class=\"c\">//by default, we bail out after 30 seconds</span>","    async<span class=\"k\">:</span> <span class=\"k\">false</span>             <span class=\"c\">//by default, we do a synchronous request</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the method option in the options object passed to the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server. </span>","<span class=\"c\">*   Instead of explicitly setting the method yourself, consider using the &lt;code&gt;&lt;a href=\"#method_request\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*   The &lt;code&gt;discover()&lt;/code&gt; method automatically sets the method option to &lt;code&gt;METHOD_DISCOVER&lt;/code&gt;.</span>","<span class=\"c\">*   @property METHOD_DISCOVER</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;Discover&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>METHOD_DISCOVER <span class=\"k\">=</span> <span class=\"s\">\"Discover\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the method option property in the options objecct passed to the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/code&gt;&lt;/a&gt; method to invoke the XML/A Execute method on the server. </span>","<span class=\"c\">*   Instead of explicitly setting the method yourself, consider using the &lt;code&gt;&lt;a href=\"#method_execute\"&gt;execute()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*   The &lt;code&gt;execute()&lt;/code&gt; method automatically sets the method option to &lt;code&gt;METHOD_EXECUTE&lt;/code&gt;.</span>","<span class=\"c\">*   @property METHOD_EXECUTE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;Discover&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>METHOD_EXECUTE <span class=\"k\">=</span> <span class=\"s\">\"Execute\"</span><span class=\"k\">;</span>","","<span class=\"k\">var</span> _xmlaDISCOVER <span class=\"k\">=</span> <span class=\"s\">\"DISCOVER_\"</span><span class=\"k\">;</span>","<span class=\"k\">var</span> _xmlaMDSCHEMA <span class=\"k\">=</span> <span class=\"s\">\"MDSCHEMA_\"</span><span class=\"k\">;</span>","<span class=\"k\">var</span> _xmlaDBSCHEMA <span class=\"k\">=</span> <span class=\"s\">\"DBSCHEMA_\"</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this constant as requestType yourself, consider calling the &lt;code&gt;&lt;a href=\"#method_discoverDataSources\"&gt;discoverDataSources()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverDataSources()&lt;/code&gt; method passes &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; automatically as requestType for Discover requests.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property DISCOVER_DATASOURCES</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>DISCOVER_DATASOURCES <span class=\"k\">=</span>     _xmlaDISCOVER <span class=\"k\">+</span> <span class=\"s\">\"DATASOURCES\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the &lt;code&gt;DISCOVER_PROPERTIES&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the &lt;code&gt;&lt;a href=\"#method_discoverProperties\"&gt;discoverProperties()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverProperties()&lt;/code&gt; method passes &lt;code&gt;DISCOVER_PROPERTIES&lt;/code&gt; automatically as requestType for Discover requests.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property DISCOVER_PROPERTIES</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;DISCOVER_PROPERTIES&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>DISCOVER_PROPERTIES <span class=\"k\">=</span>      _xmlaDISCOVER <span class=\"k\">+</span> <span class=\"s\">\"PROPERTIES\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the &lt;code&gt;DISCOVER_SCHEMA_ROWSETS&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the &lt;code&gt;&lt;a href=\"#method_discoverSchemaRowsets\"&gt;discoverSchemaRowsets()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverProperties()&lt;/code&gt; method passes &lt;code&gt;DISCOVER_PROPERTIES&lt;/code&gt; automatically as requestType for Discover requests.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property DISCOVER_SCHEMA_ROWSETS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;DISCOVER_SCHEMA_ROWSETS&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>DISCOVER_SCHEMA_ROWSETS <span class=\"k\">=</span>  _xmlaDISCOVER <span class=\"k\">+</span> <span class=\"s\">\"SCHEMA_ROWSETS\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the &lt;code&gt;DISCOVER_ENUMERATORS&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the &lt;code&gt;&lt;a href=\"#method_discoverEnumerators\"&gt;discoverEnumerators()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverSchemaRowsets()&lt;/code&gt; method issues a request to invoke the Discover method using &lt;code&gt;DISCOVER_SCHEMA_ROWSETS&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property DISCOVER_ENUMERATORS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;DISCOVER_ENUMERATORS&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>DISCOVER_ENUMERATORS <span class=\"k\">=</span>     _xmlaDISCOVER <span class=\"k\">+</span> <span class=\"s\">\"ENUMERATORS\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the &lt;code&gt;DISCOVER_KEYWORDS&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this requestType yourself, consider calling the &lt;code&gt;&lt;a href=\"#method_discoverLiterals\"&gt;discoverKeywords()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverKeywords()&lt;/code&gt; method issues a request to invoke the Discover method using DISCOVER_KEYWORDS as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property DISCOVER_KEYWORDS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;DISCOVER_KEYWORDS&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>DISCOVER_KEYWORDS <span class=\"k\">=</span>        _xmlaDISCOVER <span class=\"k\">+</span> <span class=\"s\">\"KEYWORDS\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the &lt;code&gt;DISCOVER_LITERALS&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the &lt;code&gt;&lt;a href=\"#method_discoverLiterals\"&gt;discoverLiterals()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverLiterals()&lt;/code&gt; method issues a request to invoke the Discover method using DISCOVER_LITERALS as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property DISCOVER_LITERALS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;DISCOVER_LITERALS&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>DISCOVER_LITERALS <span class=\"k\">=</span>        _xmlaDISCOVER <span class=\"k\">+</span> <span class=\"s\">\"LITERALS\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the &lt;code&gt;DBSCHEMA_CATALOGS&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the &lt;code&gt;&lt;a href=\"#method_discoverDBCatalogs\"&gt;discoverDBCatalogs()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverDBCatalogs()&lt;/code&gt; method issues a request to invoke the Discover method using &lt;code&gt;DBSCHEMA_CATALOGS&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property DBSCHEMA_CATALOGS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;DBSCHEMA_CATALOGS&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>DBSCHEMA_CATALOGS <span class=\"k\">=</span>       _xmlaDBSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"CATALOGS\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the &lt;code&gt;DBSCHEMA_COLUMNS&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the &lt;code&gt;&lt;a href=\"#method_discoverDBColumns\"&gt;discoverDBColumns()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverDBColumns()&lt;/code&gt; method issues a request to invoke the Discover method using &lt;code&gt;DBSCHEMA_COLUMNS&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property DBSCHEMA_COLUMNS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;DBSCHEMA_COLUMNS&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>DBSCHEMA_COLUMNS <span class=\"k\">=</span>        _xmlaDBSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"COLUMNS\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the &lt;code&gt;DBSCHEMA_PROVIDER_TYPES&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the &lt;code&gt;&lt;a href=\"#method_discoverDBProviderTypes\"&gt;discoverDBProviderTypes()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverDBProviderTypes()&lt;/code&gt; method issues a request to invoke the Discover method using &lt;code&gt;DBSCHEMA_PROVIDER_TYPES&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property DBSCHEMA_PROVIDER_TYPES</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;DBSCHEMA_PROVIDER_TYPES&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>DBSCHEMA_PROVIDER_TYPES <span class=\"k\">=</span> _xmlaDBSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"PROVIDER_TYPES\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the &lt;code&gt;DBSCHEMA_SCHEMATA&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the &lt;code&gt;&lt;a href=\"#method_discoverDBSchemata\"&gt;discoverDBSchemata()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverDBColumns()&lt;/code&gt; method issues a request to invoke the Discover method using &lt;code&gt;DBSCHEMA_SCHEMATA&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property DBSCHEMA_SCHEMATA</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;DBSCHEMA_SCHEMATA&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>DBSCHEMA_SCHEMATA <span class=\"k\">=</span>       _xmlaDBSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"SCHEMATA\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the &lt;code&gt;DBSCHEMA_TABLES&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the &lt;code&gt;&lt;a href=\"#method_discoverDBTables\"&gt;discoverDBTables()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverDBColumns()&lt;/code&gt; method issues a request to invoke the Discover method using &lt;code&gt;DBSCHEMA_TABLES&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property DBSCHEMA_TABLES</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;DBSCHEMA_TABLES&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>DBSCHEMA_TABLES <span class=\"k\">=</span>         _xmlaDBSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"TABLES\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the &lt;code&gt;DBSCHEMA_TABLES_INFO&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_discoverDBTablesInfo\"&gt;discoverDBTablesInfo()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverDBTablesInfo()&lt;/code&gt; method issues a request to invoke the Discover method using &lt;code&gt;DBSCHEMA_TABLES_INFO&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property DBSCHEMA_TABLES_INFO</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;DBSCHEMA_TABLES_INFO&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>DBSCHEMA_TABLES_INFO <span class=\"k\">=</span>    _xmlaDBSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"TABLES_INFO\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the &lt;code&gt;MDSCHEMA_ACTIONS&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_discoverMDActions\"&gt;discoverMDActions()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverMDActions()&lt;/code&gt; method issues a request to invoke the Discover method using &lt;code&gt;MDSCHEMA_ACTIONS&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MDSCHEMA_ACTIONS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;MDSCHEMA_ACTIONS&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>MDSCHEMA_ACTIONS <span class=\"k\">=</span>        _xmlaMDSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"ACTIONS\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_CUBES&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_discoverMDCubes\"&gt;discoverMDCubes()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverMDCubes()&lt;/code&gt; method issues a request to invoke the Discover method using</span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_CUBES&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MDSCHEMA_CUBES</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;MDSCHEMA_CUBES&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>MDSCHEMA_CUBES <span class=\"k\">=</span>          _xmlaMDSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"CUBES\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_discoverMDDimensions\"&gt;discoverMDCubes()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverMDDimensions()&lt;/code&gt; method issues a request to invoke the Discover method using</span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MDSCHEMA_DIMENSIONS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>MDSCHEMA_DIMENSIONS <span class=\"k\">=</span>     _xmlaMDSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"DIMENSIONS\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_FUNCTIONS&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_discoverMDFunctions\"&gt;discoverMDFunctions()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverMDFunctions()&lt;/code&gt; method issues a request to invoke the Discover method using</span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_FUNCTIONS&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MDSCHEMA_FUNCTIONS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;MDSCHEMA_FUNCTIONS&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>MDSCHEMA_FUNCTIONS <span class=\"k\">=</span>      _xmlaMDSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"FUNCTIONS\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverMDHierarchies()&lt;/code&gt; method issues a request to invoke the Discover method using</span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MDSCHEMA_HIERARCHIES</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>MDSCHEMA_HIERARCHIES <span class=\"k\">=</span>    _xmlaMDSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"HIERARCHIES\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_LEVELS&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_discoverMDLevels\"&gt;discoverMDLevels()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverMDLevels()&lt;/code&gt; method issues a request to invoke the Discover method using</span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_LEVELS&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MDSCHEMA_LEVELS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;MDSCHEMA_LEVELS&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>MDSCHEMA_LEVELS <span class=\"k\">=</span>         _xmlaMDSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"LEVELS\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_MEASURES&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_discoverMDMeasures\"&gt;discoverMDMeasures()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverMDMeasures()&lt;/code&gt; method issues a request to invoke the Discover method using</span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_MEASURES&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MDSCHEMA_MEASURES</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;MDSCHEMA_MEASURES&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>MDSCHEMA_MEASURES <span class=\"k\">=</span>       _xmlaMDSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"MEASURES\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_MEMBERS&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_discoverMDMembers\"&gt;discoverMDMembers()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverMDMembers()&lt;/code&gt; method issues a request to invoke the Discover method using</span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_MEMBERS&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MDSCHEMA_MEMBERS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;MDSCHEMA_MEMBERS&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>MDSCHEMA_MEMBERS <span class=\"k\">=</span>        _xmlaMDSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"MEMBERS\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_PROPERTIES&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_discoverMDProperties\"&gt;discoverMDProperties()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverMDProperties()&lt;/code&gt; method issues a request to invoke the Discover method using</span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_PROPERTIES&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MDSCHEMA_PROPERTIES</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;MDSCHEMA_PROPERTIES&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>MDSCHEMA_PROPERTIES <span class=\"k\">=</span>     _xmlaMDSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"PROPERTIES\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;requestType&lt;/code&gt; option in the options object passed to the to </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method to invoke the XML/A Discover method on the server to return the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_SETS&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*   The &lt;code&gt;requestType&lt;/code&gt; option applies only to Discover requests.</span>","<span class=\"c\">*   Instead of passing this &lt;code&gt;requestType&lt;/code&gt; yourself, consider calling the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_discoverMDSets\"&gt;discoverMDSets()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   The &lt;code&gt;discoverMDSets()&lt;/code&gt; method issues a request to invoke the Discover method using</span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_SETS&lt;/code&gt; as requestType.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MDSCHEMA_SETS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;MDSCHEMA_SETS&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>MDSCHEMA_SETS <span class=\"k\">=</span>           _xmlaMDSCHEMA <span class=\"k\">+</span> <span class=\"s\">\"SETS\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Indicates the &lt;code&gt;request&lt;/code&gt; event. </span>","<span class=\"c\">*   This constant can be used as en entry in the events array argument for the &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*   The &lt;code&gt;request&lt;/code&gt; event is the first event that is fired before submitting a request </span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt;)</span>","<span class=\"c\">*   to the server, and before firing the method-specific request events </span>","<span class=\"c\">*   (see &lt;code&gt;&lt;a href=\"#property_EVENT_EXECUTE\"&gt;EVENT_EXECUTE&lt;/a&gt;&lt;/code&gt; </span>","<span class=\"c\">*   and &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER\"&gt;EVENT_DISCOVER&lt;/a&gt;&lt;/code&gt;). </span>","<span class=\"c\">*   The &lt;code&gt;request&lt;/code&gt; event itself is not method-specific, and fires for &lt;code&gt;Execute&lt;/code&gt; as well as &lt;code&gt;Discover&lt;/code&gt; requests.</span>","<span class=\"c\">*   The &lt;code&gt;EVENT_REQUEST&lt;/code&gt; event is &lt;em&gt;cancelable&lt;/em&gt;:</span>","<span class=\"c\">*   the &lt;code&gt;handler&lt;/code&gt; function specified in the listener object passed to &lt;code&gt;addListener&lt;/code&gt; should return a boolen, indicating </span>","<span class=\"c\">*   whether the respective operation should be canceled. </span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property EVENT_REQUEST</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;request&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>EVENT_REQUEST <span class=\"k\">=</span> <span class=\"s\">\"request\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Indicates the &lt;code&gt;success&lt;/code&gt; event. </span>","<span class=\"c\">*   This constant can be used as en entry in the events array argument for the &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*   The &lt;code&gt;success&lt;/code&gt; event  is the last event that is fired after receiving and processing a normal response </span>","<span class=\"c\">*   (that is, a response that does not contain an XML/A &lt;code&gt;SoapFault&lt;/code&gt;),</span>","<span class=\"c\">*   after firing the method-specific success events </span>","<span class=\"c\">*   (see &lt;code&gt;&lt;a href=\"#property_EVENT_EXECUTE_SUCCESS\"&gt;EVENT_EXECUTE_SUCCESS&lt;/a&gt;&lt;/code&gt; </span>","<span class=\"c\">*   and &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;). </span>","<span class=\"c\">*   The &lt;code&gt;success&lt;/code&gt; event is not method-specific, and fires for &lt;code&gt;Execute&lt;/code&gt; as well as &lt;code&gt;Discover&lt;/code&gt; responses.</span>","<span class=\"c\">*   This is event is not cancelable.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property EVENT_SUCCESS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;success&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>EVENT_SUCCESS <span class=\"k\">=</span> <span class=\"s\">\"success\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Indicates the &lt;code&gt;error&lt;/code&gt; event. </span>","<span class=\"c\">*   This constant can be used as en entry in the events array argument for the &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*   The &lt;code&gt;error&lt;/code&gt; is fired when an error occurs while sending a request or receiving a response.</span>","<span class=\"c\">*   The &lt;code&gt;error&lt;/code&gt; event is not method-specific, and fires for errors encountered during both &lt;code&gt;Execute&lt;/code&gt; as well as &lt;code&gt;Discover&lt;/code&gt; method invocations.</span>","<span class=\"c\">*   This is event is not cancelable.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property EVENT_ERROR</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;error&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>EVENT_ERROR <span class=\"k\">=</span> <span class=\"s\">\"error\"</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Indicates the &lt;code&gt;execute&lt;/code&gt; event. </span>","<span class=\"c\">*   This constant can be used as en entry in the events array argument for the &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*   The &lt;code&gt;execute&lt;/code&gt; event is method-specific, and is fired before submitting an &lt;code&gt;Execute&lt;/code&gt; request</span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#method_execute\"&gt;execute()&lt;/a&gt;&lt;/code&gt;)</span>","<span class=\"c\">*   to the server, but after firing the &lt;code&gt;request&lt;/code&gt; event</span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#property_EVENT_REQUEST\"&gt;EVENT_REQUEST&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*   The &lt;code&gt;EVENT_EXECUTE&lt;/code&gt; event is &lt;em&gt;cancelable&lt;/em&gt;:</span>","<span class=\"c\">*   the &lt;code&gt;handler&lt;/code&gt; function specified in the listener object passed to &lt;code&gt;addListener&lt;/code&gt; should return a boolen, indicating </span>","<span class=\"c\">*   whether the respective operation should be canceled. </span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property EVENT_EXECUTE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;execute&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>EVENT_EXECUTE <span class=\"k\">=</span> <span class=\"s\">\"execute\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Indicates the &lt;code&gt;executesuccess&lt;/code&gt; event. </span>","<span class=\"c\">*   This constant can be used as en entry in the events array argument for the &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*   The &lt;code&gt;executesuccess&lt;/code&gt; event is method-specific and fired only after receiving and processing a normal response </span>","<span class=\"c\">*   (that is, a response that does not contain a &lt;code&gt;SoapFault&lt;/code&gt;)</span>","<span class=\"c\">*   to an incovation of the XML/A &lt;code&gt;Execute&lt;/code&gt; method</span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#method_execute\"&gt;execute()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*   This is event is not cancelable.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property EVENT_EXECUTE_SUCCESS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;executesuccess&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>EVENT_EXECUTE_SUCCESS <span class=\"k\">=</span> <span class=\"s\">\"executesuccess\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Indicates the &lt;code&gt;executeerror&lt;/code&gt; event. </span>","<span class=\"c\">*   This constant can be used as en entry in the events array argument for the &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*   The &lt;code&gt;executeerror&lt;/code&gt; event is method-specific and fired when an error occurs while sending an &lt;code&gt;Execute&lt;/code&gt; request, or receiving a response to an &lt;code&gt;Execute&lt;/code method.</span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#method_execute\"&gt;execute()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*   This is event is not cancelable.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property EVENT_EXECUTE_ERROR</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;executeerror&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>EVENT_EXECUTE_ERROR <span class=\"k\">=</span> <span class=\"s\">\"executeerror\"</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Indicates the &lt;code&gt;discover&lt;/code&gt; event. </span>","<span class=\"c\">*   This constant can be used as en entry in the events array argument for the &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*   The &lt;code&gt;discover&lt;/code&gt; event is method-specific, and is fired before submitting a &lt;code&gt;Discover&lt;/code&gt; request</span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt;)</span>","<span class=\"c\">*   to the server, but after firing the &lt;code&gt;request&lt;/code&gt; event</span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER\"&gt;EVENT_DISCOVER&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*   The &lt;code&gt;EVENT_DISCOVER&lt;/code&gt; event is &lt;em&gt;cancelable&lt;/em&gt;:</span>","<span class=\"c\">*   the &lt;code&gt;handler&lt;/code&gt; function specified in the listener object passed to &lt;code&gt;addListener&lt;/code&gt; should return a boolen, indicating </span>","<span class=\"c\">*   whether the respective operation should be canceled. </span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property EVENT_DISCOVER</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;discover&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>EVENT_DISCOVER <span class=\"k\">=</span> <span class=\"s\">\"discover\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Indicates the &lt;code&gt;discoversuccess&lt;/code&gt; event. </span>","<span class=\"c\">*   This constant can be used as en entry in the events array argument for the &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*   The &lt;code&gt;discoversuccess&lt;/code&gt; event is method-specific and fired only after receiving and processing a normal response </span>","<span class=\"c\">*   (that is, a response that does not contain a &lt;code&gt;SoapFault&lt;/code&gt;)</span>","<span class=\"c\">*   to an incovation of the XML/A &lt;code&gt;Discover&lt;/code&gt; method</span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*   This is event is not cancelable.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property EVENT_DISCOVER_SUCCESS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;discoversuccess&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>EVENT_DISCOVER_SUCCESS <span class=\"k\">=</span> <span class=\"s\">\"discoversuccess\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Indicates the &lt;code&gt;discovererror&lt;/code&gt; event. </span>","<span class=\"c\">*   This constant can be used as en entry in the events array argument for the &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*   The &lt;code&gt;discovererror&lt;/code&gt; is method-specific and fired when an error occurs while sending an &lt;code&gt;Discover&lt;/code&gt; request, </span>","<span class=\"c\">*   or receiving a response to an &lt;code&gt;Discover&lt;/code method.</span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*   This is event is not cancelable.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property EVENT_DISCOVER_ERROR</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;discovererror&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>EVENT_DISCOVER_ERROR <span class=\"k\">=</span> <span class=\"s\">\"discovererror\"</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Unifies all general events, that is, all events that are not method-specific.</span>","<span class=\"c\">*   This constant can be used as events array argument for the &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt; method,</span>","<span class=\"c\">*   or you can use array concatenation to combine it with other arrays of &lt;code&gt;EVENT_XXX&lt;/code&gt; constants.</span>","<span class=\"c\">*   This constant is especially intended for asyncronous handling of Schema rowset data.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property EVENT_GENERAL</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string[]</span>","<span class=\"c\">*   @default &lt;code&gt;[EVENT_REQUEST,EVENT_SUCCESS,EVENT_ERROR]&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>EVENT_GENERAL <span class=\"k\">=</span> <span class=\"k\">[</span>","    Xmla<span class=\"k\">.</span>EVENT_REQUEST<span class=\"k\">,</span>","    Xmla<span class=\"k\">.</span>EVENT_SUCCESS<span class=\"k\">,</span>","    Xmla<span class=\"k\">.</span>EVENT_ERROR","<span class=\"k\">];</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Unifies all events specific for the &lt;code&gt;Discover&lt;/code&gt; method.</span>","<span class=\"c\">*   This constant can be used as events array argument for the &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt; method,</span>","<span class=\"c\">*   or you can use array concatenation to combine it with other arrays of &lt;code&gt;EVENT_XXX&lt;/code&gt; constants.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property EVENT_DISCOVER_ALL</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string[]</span>","<span class=\"c\">*   @default &lt;code&gt;[EVENT_DISCOVER,EVENT_DISCOVER_SUCCESS,EVENT_DISCOVER_ERROR]&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>EVENT_DISCOVER_ALL <span class=\"k\">=</span> <span class=\"k\">[</span>","    Xmla<span class=\"k\">.</span>EVENT_DISCOVER<span class=\"k\">,</span>","    Xmla<span class=\"k\">.</span>EVENT_DISCOVER_SUCCESS<span class=\"k\">,</span>","    Xmla<span class=\"k\">.</span>EVENT_DISCOVER_ERROR","<span class=\"k\">];</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Unifies all events specific for the &lt;code&gt;Execute&lt;/code&gt; method.</span>","<span class=\"c\">*   This constant can be used as events array argument for the &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt; method,</span>","<span class=\"c\">*   or you can use array concatenation to combine it with other arrays of &lt;code&gt;EVENT_XXX&lt;/code&gt; constants.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property EVENT_EXECUTE_ALL</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string[]</span>","<span class=\"c\">*   @default &lt;code&gt;[EVENT_EXECUTE,EVENT_EXECUTE_SUCCESS,EVENT_EXECUTE_ERROR]&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>EVENT_EXECUTE_ALL <span class=\"k\">=</span> <span class=\"k\">[</span>","    Xmla<span class=\"k\">.</span>EVENT_EXECUTE<span class=\"k\">,</span>","    Xmla<span class=\"k\">.</span>EVENT_EXECUTE_SUCCESS<span class=\"k\">,</span>","    Xmla<span class=\"k\">.</span>EVENT_EXECUTE_ERROR","<span class=\"k\">];</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Unifies all method-specific and non method-specific events.</span>","<span class=\"c\">*   This constant can be used as events array argument for the &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property EVENT_ALL</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string[]</span>","<span class=\"c\">*   @default &lt;code&gt;[].concat(Xmla.EVENT_GENERAL, Xmla.EVENT_DISCOVER_ALL, Xmla.EVENT_EXECUTE_ALL)&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>EVENT_ALL <span class=\"k\">=</span> <span class=\"k\">[].</span>concat<span class=\"k\">(</span>","    Xmla<span class=\"k\">.</span>EVENT_GENERAL<span class=\"k\">,</span>","    Xmla<span class=\"k\">.</span>EVENT_DISCOVER_ALL<span class=\"k\">,</span>","    Xmla<span class=\"k\">.</span>EVENT_EXECUTE_ALL","<span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as key in the &lt;code&gt;properties&lt;/code&gt; member of the &lt;code&gt;options&lt;/code&gt; object </span>","<span class=\"c\">*   passed to the &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method </span>","<span class=\"c\">*   to specify the XML/A &lt;code&gt;DataSourceInfo&lt;/code&gt; property.</span>","<span class=\"c\">*   The XML/A &lt;code&gt;DataSourceInfo&lt;/code&gt;, together with the XML/A service URL are required to </span>","<span class=\"c\">*   connect to a particular OLAP datasource.</span>","<span class=\"c\">*   Valid values for the &lt;code&gt;DataSourceInfo&lt;/code&gt; as well as the corresponding URL should be obtained</span>","<span class=\"c\">*   by querying the &lt;code&gt;DataSourceInfo&lt;/code&gt; and &lt;code&gt;URL&lt;/code&gt; columns of the &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; </span>","<span class=\"c\">*   rowset respectively (see &lt;code&gt;&lt;a href=\"method_discoverDataSources\"&gt;discoverDataSources()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property PROP_DATASOURCEINFO</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;DataSourceInfo&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>PROP_DATASOURCEINFO <span class=\"k\">=</span> <span class=\"s\">\"DataSourceInfo\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as key in the &lt;code&gt;properties&lt;/code&gt; member of the &lt;code&gt;options&lt;/code&gt; object </span>","<span class=\"c\">*   passed to the &lt;code&gt;&lt;a href=\"#method_request\"&gt;execute()&lt;/a&gt;&lt;/code&gt; method </span>","<span class=\"c\">*   to specify the XML/A &lt;code&gt;Catalog&lt;/code&gt; property.</span>","<span class=\"c\">*   The XML/A &lt;code&gt;Catalog&lt;/code&gt; spefifies where to look for cubes that are referenced in th MDX statment.</span>","<span class=\"c\">*   Valid values for the &lt;code&gt;Catalog&lt;/code&gt; should be obtained</span>","<span class=\"c\">*   by querying the &lt;code&gt;CATALOG_NAME&lt;/code&gt; of the &lt;code&gt;DBSCHEMA_CATALOGS&lt;/code&gt; </span>","<span class=\"c\">*   rowset (see &lt;code&gt;&lt;a href=\"method_discoverCatalogs\"&gt;discoverCatalogs()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property PROP_Catalog</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;Catalog&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>PROP_CATALOG <span class=\"k\">=</span> <span class=\"s\">\"Catalog\"</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>PROP_CUBE <span class=\"k\">=</span> <span class=\"s\">\"Cube\"</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as key in the &lt;code&gt;properties&lt;/code&gt; member of the &lt;code&gt;options&lt;/code&gt; object </span>","<span class=\"c\">*   passed to the &lt;code&gt;&lt;a href=\"#method_execute\"&gt;execute()&lt;/a&gt;&lt;/code&gt; method </span>","<span class=\"c\">*   to specify the XML/A &lt;code&gt;Format&lt;/code&gt; property.</span>","<span class=\"c\">*   This property controls the structure of the resultset.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property PROP_FORMAT</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;Format&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>PROP_FORMAT <span class=\"k\">=</span> <span class=\"s\">\"Format\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_PROP_FORMAT&gt;PROP_FORMAT&lt;/a&gt;&lt;/code&gt; key of the </span>","<span class=\"c\">*   &lt;code&gt;properties&lt;/code&gt; member of the </span>","<span class=\"c\">*   &lt;code&gt;options&lt;/code&gt; object passed to the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_execute\"&gt;execute()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   When used, this specifies that the multidimensional resultset should be returned in a tabular format,</span>","<span class=\"c\">*   causeing the multidimensional resultset to be represented with an instance of the  </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"Xmla.Rowset#class_Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; class.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property PROP_FORMAT_TABULAR</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;Tabular&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>PROP_FORMAT_TABULAR <span class=\"k\">=</span> <span class=\"s\">\"Tabular\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_PROP_FORMAT&gt;PROP_FORMAT&lt;/a&gt;&lt;/code&gt; key of the </span>","<span class=\"c\">*   &lt;code&gt;properties&lt;/code&gt; member of the </span>","<span class=\"c\">*   &lt;code&gt;options&lt;/code&gt; object passed to the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_execute\"&gt;execute()&lt;/a&gt;&lt;/code&gt; method. </span>","<span class=\"c\">*   When used, this specifies that the multidimensional resultset should be returned in a multidimensional format.</span>","<span class=\"c\">*   Currently, Xmla4js does not provide a class to represent the resultset in this format.</span>","<span class=\"c\">*   However, you can access the results as xml through the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_responseText\"&gt;responseText&lt;/a&gt;&lt;/code&gt; and</span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_responseXML\"&gt;responseXML&lt;/a&gt;&lt;/code&gt; properties.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property PROP_FORMAT_MULTIDIMENSIONAL  </span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;Multidimensional&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>PROP_FORMAT_MULTIDIMENSIONAL <span class=\"k\">=</span> <span class=\"s\">\"Multidimensional\"</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as key in the &lt;code&gt;properties&lt;/code&gt; member of the &lt;code&gt;options&lt;/code&gt; object </span>","<span class=\"c\">*   passed to the &lt;code&gt;&lt;a href=\"#method_execute\"&gt;execute()&lt;/a&gt;&lt;/code&gt; method </span>","<span class=\"c\">*   to specify the XML/A &lt;code&gt;AxisFormat&lt;/code&gt; property.</span>","<span class=\"c\">*   The XML/A &lt;code&gt;AxisFormat&lt;/code&gt; property specifies how the client wants to receive the multi-dimensional resultset of a MDX query.</span>","<span class=\"c\">*   Valid values for the &lt;code&gt;AxisFormat&lt;/code&gt; property are available as the static final properties </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_PROP_AXISFORMAT_TUPLE\"&gt;PROP_AXISFORMAT_TUPLE&lt;/a&gt;&lt;/code&gt;, </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_PROP_AXISFORMAT_CLUSTER\"&gt;PROP_AXISFORMAT_CLUSTER&lt;/a&gt;&lt;/code&gt;,</span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_PROP_AXISFORMAT_CUSTOM\"&gt;PROP_AXISFORMAT_CUSTOM&lt;/a&gt;&lt;/code&gt;.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property PROP_AXISFORMAT</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;AxisFormat&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>PROP_AXISFORMAT <span class=\"k\">=</span> <span class=\"s\">\"AxisFormat\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;AxisFormat&lt;/code&gt; XML/A property </span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#property_PROP_AXISFORMAT\"&gt;PROP_AXISFORMAT&lt;/a&gt;&lt;/code&gt;) </span>","<span class=\"c\">*   in invocations of the &lt;code&gt;Execute&lt;/code&gt; method </span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#method_execute\"&gt;execute()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property PROP_AXISFORMAT_TUPLE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;TupleFormat&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>PROP_AXISFORMAT_TUPLE <span class=\"k\">=</span> <span class=\"s\">\"TupleFormat\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;AxisFormat&lt;/code&gt; XML/A property </span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#property_PROP_AXISFORMAT\"&gt;PROP_AXISFORMAT&lt;/a&gt;&lt;/code&gt;) </span>","<span class=\"c\">*   in invocations of the &lt;code&gt;Execute&lt;/code&gt; method </span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#method_execute\"&gt;execute()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property PROP_AXISFORMAT_CLUSTER</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;ClusterFormat&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>PROP_AXISFORMAT_CLUSTER <span class=\"k\">=</span> <span class=\"s\">\"ClusterFormat\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the &lt;code&gt;AxisFormat&lt;/code&gt; XML/A property </span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#property_PROP_AXISFORMAT\"&gt;PROP_AXISFORMAT&lt;/a&gt;&lt;/code&gt;) </span>","<span class=\"c\">*   in invocations of the &lt;code&gt;Execute&lt;/code&gt; method </span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#method_execute\"&gt;execute()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property PROP_AXISFORMAT_CUSTOM</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;CustomFormat&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>PROP_AXISFORMAT_CUSTOM <span class=\"k\">=</span> <span class=\"s\">\"CustomFormat\"</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as key in the &lt;code&gt;properties&lt;/code&gt; member of the &lt;code&gt;options&lt;/code&gt; object </span>","<span class=\"c\">*   passed to the &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method </span>","<span class=\"c\">*   to specify the XML/A &lt;code&gt;Content&lt;/code&gt; property.</span>","<span class=\"c\">*   The XML/A &lt;code&gt;Content&lt;/code&gt; property specifies whether to return data and/or XML Schema metadata by the &lt;code&gt;Discover&lt;/code&gt; and &lt;code&gt;Execute&lt;/code&gt; invocations.</span>","<span class=\"c\">*   Valid values for the &lt;code&gt;Content&lt;/code&gt; property are available as the static final properties </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_PROP_CONTENT_DATA\"&gt;PROP_CONTENT_DATA&lt;/a&gt;&lt;/code&gt;, </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_PROP_CONTENT_NONE\"&gt;PROP_CONTENT_NONE&lt;/a&gt;&lt;/code&gt;, </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_PROP_CONTENT_SCHEMA\"&gt;PROP_CONTENT_SCHEMA&lt;/a&gt;&lt;/code&gt;, </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_PROP_CONTENT_SCHEMADATA\"&gt;PROP_CONTENT_SCHEMADATA&lt;/a&gt;&lt;/code&gt;.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   Note: This key is primarily intended for clients that use the low-level &lt;code&gt;&lt;a href=\"#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*   You should not set this property when calling the &lt;code&gt;&lt;a href=\"#method_request\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method, </span>","<span class=\"c\">*   the &lt;code&gt;&lt;a href=\"#method_execute\"&gt;execute()&lt;/a&gt;&lt;/code&gt; method, </span>","<span class=\"c\">*   or any of the &lt;code&gt;discoverXXX()&lt;/code&gt; methods. </span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property PROP_CONTENT</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;Content&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>PROP_CONTENT <span class=\"k\">=</span> <span class=\"s\">\"Content\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the XML/A &lt;code&gt;Content&lt;/code&gt; property </span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#property_PROP_CONTENT\"&gt;PROP_CONTENT&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*   This value specifies that the response should contain only data, but no XML Schema metadata.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   As the &lt;code&gt;Xmla&lt;/code&gt; class relies on the XML Schema metadata to construct Rowset and Resultset instances,</span>","<span class=\"c\">*   this option is primarily useful if you know how to process the XML response directly.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property PROP_CONTENT_DATA</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;Data&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>PROP_CONTENT_DATA <span class=\"k\">=</span> <span class=\"s\">\"Data\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the XML/A &lt;code&gt;Content&lt;/code&gt; property </span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#property_PROP_CONTENT\"&gt;PROP_CONTENT&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*   This value specifies that the response should contain neither data nor XML Schema metadata.</span>","<span class=\"c\">*   This is useful to check the validity of the request.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property PROP_CONTENT_NONE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;None&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>PROP_CONTENT_NONE <span class=\"k\">=</span> <span class=\"s\">\"None\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the XML/A &lt;code&gt;Content&lt;/code&gt; property </span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#property_PROP_CONTENT\"&gt;PROP_CONTENT&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*   This value specifies that the response should only return XML Schema metadata, but no data.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property PROP_CONTENT_SCHEMA</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;Schema&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>PROP_CONTENT_SCHEMA <span class=\"k\">=</span> <span class=\"s\">\"Schema\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can be used as value for the XML/A &lt;code&gt;Content&lt;/code&gt; property </span>","<span class=\"c\">*   (see: &lt;code&gt;&lt;a href=\"#property_PROP_CONTENT\"&gt;PROP_CONTENT&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*   This value specifies that the response should return both data as well as XML Schema metadata.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property PROP_CONTENT_SCHEMADATA</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;SchemaData&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>PROP_CONTENT_SCHEMADATA <span class=\"k\">=</span> <span class=\"s\">\"SchemaData\"</span><span class=\"k\">;</span>","","Xmla<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   This object stores listeners.</span>","<span class=\"c\">*   Each key is a listener type (see the static final &lt;code&gt;EVENT_XXX&lt;/code&gt; constants), </span>","<span class=\"c\">*   each value is an array of listener objects that are subscribed to that particular event.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property listeners</span>","<span class=\"c\">*   @protected</span>","<span class=\"c\">*   @type Object</span>","<span class=\"c\">*   @default &lt;pre&gt;</span>","<span class=\"c\">{</span>","<span class=\"c\">&amp;nbsp;     \"request\": []</span>","<span class=\"c\">&amp;nbsp;,   \"succss\": []</span>","<span class=\"c\">&amp;nbsp;,   \"error\": []</span>","<span class=\"c\">&amp;nbsp;,   \"discover\": []</span>","<span class=\"c\">&amp;nbsp;,   \"discoversuccss\": []</span>","<span class=\"c\">&amp;nbsp;,   \"discovererror\": []</span>","<span class=\"c\">&amp;nbsp;,   \"execute\": []</span>","<span class=\"c\">&amp;nbsp;,   \"executesuccss\": []</span>","<span class=\"c\">&amp;nbsp;,   \"executeerror\": []</span>","<span class=\"c\">}&lt;/pre&gt;</span>","<span class=\"c\">*/</span>","    listeners<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   The soap message sent in the last request to the server.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property soapMessage</span>","<span class=\"c\">*   @type {string}</span>","<span class=\"c\">*   @default &lt;code&gt;null&lt;/code&gt;</span>","<span class=\"c\">*/</span>","    soapMessage<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   This property is set to &lt;code&gt;null&lt;/code&gt; right before sending an XML/A request.</span>","<span class=\"c\">*   When a successfull response is received, it is processed and the response object is assigned to this property.</span>","<span class=\"c\">*   The response object is either a </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"Rowset.html#class_Rowset\"&gt;Rowset&lt;/a&gt;&lt;/code&gt; (after a successful invocation of XML/A &lt;code&gt;Discover&lt;/code&gt; method, see: &lt;code&gt;&lt;a href=\"method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt;) or a</span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"Resultset.html#class_Resultset\"&gt;Resultset&lt;/a&gt;&lt;/code&gt; (after a successful invocation of the XML/A &lt;code&gt;Execute&lt;/code&gt; method, see: &lt;code&gt;&lt;a href=\"method_execute\"&gt;executte()&lt;/a&gt;&lt;/code&gt;) </span>","<span class=\"c\">*   instance. </span>","<span class=\"c\">*</span>","<span class=\"c\">*   If you are interested in processing the raw response XML, see </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_responseXML\"&gt;responseXML&lt;/a&gt;&lt;/code&gt; and </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_responseText\"&gt;responseText&lt;/a&gt;&lt;/code&gt;.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   Note that it is not safe to read this property immediately after doing an asynchronous request.</span>","<span class=\"c\">*   For asynchronous requests, you can read this property by the time the &lt;code&gt;XXX_SUCCESS&lt;/code&gt; event handlers are notified (until it is set to &lt;code&gt;null&lt;/code&gt; again by a subsequent request).</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property response</span>","<span class=\"c\">*   @type Xmla.Rowset|Xmla.Resultset</span>","<span class=\"c\">*   @default &lt;code&gt;null&lt;/code&gt;</span>","<span class=\"c\">*/</span>","    response<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   This property is set to &lt;code&gt;null&lt;/code&gt; right before sending an XML/A request.</span>","<span class=\"c\">*   When a successfull response is received, the XML response is stored to this property as plain text.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   If you are interested in processing a DOM document rather than the raw XML text, see the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_responseXML\"&gt;responseXML&lt;/a&gt;&lt;/code&gt; property.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   If you are interested in traversing the dataset returned in the XML/A response, see the</span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_response\"&gt;response&lt;/a&gt;&lt;/code&gt; property.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   Note that it is not safe to read this property immediately after doing an asynchronous request.</span>","<span class=\"c\">*   For asynchronous requests, you can read this property by the time the &lt;code&gt;XXX_SUCCESS&lt;/code&gt; event handlers are notified (until it is set to &lt;code&gt;null&lt;/code&gt; again by a subsequent request).</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property responseText</span>","<span class=\"c\">*   @type {string}</span>","<span class=\"c\">*   @default &lt;code&gt;null&lt;/code&gt;</span>","<span class=\"c\">*/</span>","    responseText<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   This property is set to &lt;code&gt;null&lt;/code&gt; right before sending an XML/A request.</span>","<span class=\"c\">*   When a successfull response is received, the XML response is stored to this property as a DOM Document.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   If you are interested in processing the raw XML text rather than a DOM document, see the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_responseText\"&gt;responseText&lt;/a&gt;&lt;/code&gt; property.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   If you are interested in traversing the dataset returned in the XML/A response, see the</span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_response\"&gt;response&lt;/a&gt;&lt;/code&gt; property.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   Note that it is not safe to read this property immediately after doing an asynchronous request.</span>","<span class=\"c\">*   For asynchronous requests, you can read this property by the time the &lt;code&gt;XXX_SUCCESS&lt;/code&gt; event handlers are notified (until it is set to &lt;code&gt;null&lt;/code&gt; again by a subsequent request).</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property responseXML</span>","<span class=\"c\">*   @type {DOMDocument}</span>","<span class=\"c\">*   @default &lt;code&gt;null&lt;/code&gt;</span>","<span class=\"c\">*/</span>","    responseXML<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*\tThis method can be used to set a number of default options for the Xmla instance.</span>","<span class=\"c\">*\tThis is especially useful if you don't want to pass each and every option to each method call all the time. </span>","<span class=\"c\">*\tWhere appropriate, information that is missing from the parameter objects passed to the methods of the Xmla object</span>","<span class=\"c\">*   may be augmented with the values set through this method. </span>","<span class=\"c\">*\tFor example, if you plan to do a series of requests pertaining to one particular datasource, </span>","<span class=\"c\">*\tyou can set the mandatory options like url, async, datasource and catalog just once:</span>","<span class=\"c\">*\t&lt;pre&gt;</span>","<span class=\"c\">&amp;nbsp;   xml.setOptions({</span>","<span class=\"c\">&amp;nbsp;       url: \"http://localhost:8080/pentaho/Xmla\",</span>","<span class=\"c\">&amp;nbsp;       async: true,</span>","<span class=\"c\">&amp;nbsp;       properties: {</span>","<span class=\"c\">&amp;nbsp;           DataSourceInfo: \"Pentaho Analysis Services\",</span>","<span class=\"c\">&amp;nbsp;           Catalog: \"Foodmart\"</span>","<span class=\"c\">&amp;nbsp;       }</span>","<span class=\"c\">&amp;nbsp;   });</span>","<span class=\"c\">*\t&lt;/pre&gt;</span>","<span class=\"c\">*\tThen, a subsequent &lt;code&gt;&lt;/code&gt;</span>","<span class=\"c\">*\t@method setOptions</span>","<span class=\"c\">*\t@param Object</span>","<span class=\"c\">*/</span>\t","    setOptions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        _applyProps<span class=\"k\">(</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">,</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   This method can be used to register a listener to one or more events.</span>","<span class=\"c\">*   The &lt;code&gt;listener&lt;/code&gt; argument should have the following structure: &lt;pre&gt;{</span>","<span class=\"c\">*       events: [...event names...],</span>","<span class=\"c\">*       handler: function(eventName, eventData, xmla) {...code to run upon notification...},</span>","<span class=\"c\">*       scope: object</span>","<span class=\"c\">*   }&lt;/pre&gt;</span>","<span class=\"c\">*   &lt;dl&gt;</span>","<span class=\"c\">*       &lt;dt&gt;&lt;code&gt;events&lt;/code&gt;&lt;/dt&gt;</span>","<span class=\"c\">*       &lt;dd&gt;&lt;code&gt;string&lt;/code&gt;|&lt;code&gt;string[]&lt;/code&gt; REQUIRED. </span>","<span class=\"c\">*       The event or events to listen to. </span>","<span class=\"c\">*       You can specify a single event by using one of the &lt;code&gt;EVENT_XXX&lt;/code&gt; string constant values.</span>","<span class=\"c\">*       You can specify multiple events by using an array of &lt;code&gt;EVENT_XXX&lt;/code&gt; string constant values.</span>","<span class=\"c\">*       You can also use one of the predefined &lt;code&gt;EVENT_XXX&lt;/code&gt; array constant values, </span>","<span class=\"c\">*       or use array concatenation and compose a custom list of event names.</span>","<span class=\"c\">*       To listen to all events, either use &lt;code&gt;&lt;a href=\"#property_EVENT_ALL\"&gt;EVENT_ALL&lt;/a&gt;&lt;/code&gt;, </span>","<span class=\"c\">*       or otherwise the &lt;code&gt;string&lt;/code&gt; value &lt;code&gt;\"all\"&lt;/code&gt;.</span>","<span class=\"c\">*       &lt;/dd&gt;</span>","<span class=\"c\">*       &lt;dt&gt;&lt;code&gt;boolean handler(eventName, eventData, xmla)&lt;/code&gt;&lt;/dt&gt;</span>","<span class=\"c\">*       &lt;dd&gt;&lt;code&gt;function&lt;/code&gt; REQUIRED. This function will be called and notified whenever one of the specified events occurs.</span>","<span class=\"c\">*       The function is called in scope of the &lt;code&gt;scope&lt;/code&gt; property of the listener object. </span>","<span class=\"c\">*       If no &lt;code&gt;scope&lt;/code&gt; is specified, a global function (having brower built-in &lt;code&gt;window&lt;/code&gt; scope) is assumed.</span>","<span class=\"c\">*       The &lt;code&gt;handler&lt;/code&gt; function has the following arguments:</span>","<span class=\"c\">*           &lt;dl&gt;</span>","<span class=\"c\">*               &lt;dt&gt;&lt;code&gt;eventName&lt;/code&gt;&lt;/dt&gt;</span>","<span class=\"c\">*               &lt;dd&gt;&lt;code&gt;string&lt;/code&gt; The event for which notification is given. </span>","<span class=\"c\">*               This is useful to distinguish between events in case the same handler function is used for multiple events.</span>","<span class=\"c\">*               In this case, use the &lt;code&gt;EVENT_XXX&lt;/code&gt; constants to check the &lt;code&gt;eventName&lt;/code&gt;.&lt;/dd&gt;</span>","<span class=\"c\">*               &lt;dt&gt;&lt;code&gt;eventData&lt;/code&gt;&lt;/dt&gt;</span>","<span class=\"c\">*               &lt;dd&gt;&lt;code&gt;Object&lt;/code&gt; An object that conveys event-specific data.&lt;/dd&gt;</span>","<span class=\"c\">*               &lt;dt&gt;&lt;code&gt;xmla&lt;/code&gt;&lt;/dt&gt;</span>","<span class=\"c\">*               &lt;dd&gt;&lt;code&gt;&lt;a href=\"class_Xmla\"&gt;Xmla&lt;/a&gt;&lt;/code&gt; A reference to this &lt;code&gt;Xmla&lt;/code&gt; instance that is the source of the event. </span>","<span class=\"c\">*                   Listeners can obtain the response as well as the original SOAP message sent to the server through this instance.</span>","<span class=\"c\">*                   This allows one listener to be shared across multiple &lt;code&gt;Xmla&lt;/code&gt; instances without managing the context manually. </span>","<span class=\"c\">*               &lt;/dd&gt;</span>","<span class=\"c\">*           &lt;/dl&gt;</span>","<span class=\"c\">*       For events that are &lt;em&gt;cancelable&lt;/em&gt;, the handler should return a &lt;code&gt;boolean&lt;/code&gt;.</span>","<span class=\"c\">*       If the handler returns &lt;code&gt;false&lt;/code&gt; the respective operation will be canceled.</span>","<span class=\"c\">*       Otherwise, the operation continues (but may be canceled by another handler).</span>","<span class=\"c\">*       Currently, the following events are cancelable: </span>","<span class=\"c\">*       &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER\"&gt;EVENT_DISCOVER&lt;/a&gt;&lt;/code&gt;,</span>","<span class=\"c\">*       &lt;code&gt;&lt;a href=\"#property_EVENT_EXECUTE\"&gt;EVENT_EXECUTE&lt;/a&gt;&lt;/code&gt;, and</span>","<span class=\"c\">*       &lt;code&gt;&lt;a href=\"#property_EVENT_REQUEST\"&gt;EVENT_REQUEST&lt;/a&gt;&lt;/code&gt;. </span>","<span class=\"c\">*       &lt;/dd&gt;</span>","<span class=\"c\">*       &lt;dt&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/dt&gt;</span>","<span class=\"c\">*       &lt;dd&gt;&lt;code&gt;Object&lt;/code&gt; OPTIONAL When specified, this object is used as the &lt;code&gt;this&lt;/code&gt; object when calling the handler.</span>","<span class=\"c\">*           When not specified, the global &lt;code&gt;window&lt;/code&gt; is used.</span>","<span class=\"c\">*       &lt;/dd&gt;</span>","<span class=\"c\">*   &lt;/dl&gt;</span>","<span class=\"c\">*   @method addListener</span>","<span class=\"c\">*   @param {Object} listener An object that defines the events and the notification function to be called.</span>","<span class=\"c\">*/</span>    ","    addListener<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>listener<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> events <span class=\"k\">=</span> listener<span class=\"k\">.</span>events<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>events<span class=\"k\">)</span><span class=\"k\">{</span>","            Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                <span class=\"s\">\"NO_EVENTS_SPECIFIED\"</span><span class=\"k\">,</span>","                <span class=\"s\">\"Xmla.addListener\"</span><span class=\"k\">,</span>","                listener","            <span class=\"k\">).</span>_throw<span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>events<span class=\"k\">)===</span><span class=\"s\">\"string\"</span><span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>events<span class=\"k\">===</span><span class=\"s\">\"all\"</span><span class=\"k\">)</span><span class=\"k\">{</span>","                events <span class=\"k\">=</span> Xmla<span class=\"k\">.</span>EVENT_ALL<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                events <span class=\"k\">=</span> events<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">\",\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(!(</span>events <span class=\"k\">instanceof</span> Array<span class=\"k\">))</span><span class=\"k\">{</span>","            Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                <span class=\"s\">\"WRONG_EVENTS_FORMAT\"</span><span class=\"k\">,</span>","                <span class=\"s\">\"Xmla.addListener\"</span><span class=\"k\">,</span>","                listener","            <span class=\"k\">).</span>_throw<span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> numEvents <span class=\"k\">=</span> events<span class=\"k\">.</span>length<span class=\"k\">;</span>","        <span class=\"k\">var</span> eventName<span class=\"k\">,</span> myListeners<span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>numEvents<span class=\"k\">;</span> i <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","            eventName <span class=\"k\">=</span> events<span class=\"k\">[</span>i<span class=\"k\">].</span>replace<span class=\"k\">(</span><span class=\"s\">/\\s+/g</span><span class=\"k\">,</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","            myListeners <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>listeners<span class=\"k\">[</span>eventName<span class=\"k\">];</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>myListeners<span class=\"k\">)</span> <span class=\"k\">{</span>","                Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                    <span class=\"s\">\"UNKNOWN_EVENT\"</span><span class=\"k\">,</span>","                    <span class=\"s\">\"Xmla.addListener\"</span><span class=\"k\">,</span>","                    listener","                <span class=\"k\">).</span>_throw<span class=\"k\">();</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>listener<span class=\"k\">.</span>handler<span class=\"k\">)==</span><span class=\"s\">\"function\"</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span>listener<span class=\"k\">.</span>scope<span class=\"k\">)</span> <span class=\"k\">{</span>","                    listener<span class=\"k\">.</span>scope <span class=\"k\">=</span> window<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                myListeners<span class=\"k\">.</span>push<span class=\"k\">(</span>listener<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">{</span>","                Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                    <span class=\"s\">\"INVALID_EVENT_HANDLER\"</span><span class=\"k\">,</span>","                    <span class=\"s\">\"Xmla.addListener\"</span><span class=\"k\">,</span>","                    listener","                <span class=\"k\">).</span>_throw<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>    ","    _fireEvent<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>eventName<span class=\"k\">,</span> eventData<span class=\"k\">,</span> cancelable<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> listeners <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>listeners<span class=\"k\">[</span>eventName<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>listeners<span class=\"k\">)</span> <span class=\"k\">{</span>","            Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                <span class=\"s\">\"UNKNOWN_EVENT\"</span><span class=\"k\">,</span>","                <span class=\"s\">\"Xmla._fireEvent\"</span><span class=\"k\">,</span>","                eventName","            <span class=\"k\">).</span>_throw<span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> numListeners <span class=\"k\">=</span> listeners<span class=\"k\">.</span>length<span class=\"k\">;</span>","        <span class=\"k\">var</span> outcome <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>numListeners<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> listener<span class=\"k\">,</span> listenerResult<span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>numListeners<span class=\"k\">;</span> i <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                listener <span class=\"k\">=</span> listeners<span class=\"k\">[</span>i<span class=\"k\">];</span>","                listenerResult <span class=\"k\">=</span> listener<span class=\"k\">.</span>handler<span class=\"k\">.</span>call<span class=\"k\">(</span>","                    listener<span class=\"k\">.</span>scope<span class=\"k\">,</span>","                    eventName<span class=\"k\">,</span>","                    eventData<span class=\"k\">,</span>","                    <span class=\"k\">this</span>","                <span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>cancelable <span class=\"k\">&amp;&amp;</span> listenerResult<span class=\"k\">===</span><span class=\"k\">false</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    outcome <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> ","        <span class=\"k\">if</span> <span class=\"k\">(</span>eventName<span class=\"k\">===</span><span class=\"s\">\"error\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            eventData<span class=\"k\">.</span>exception<span class=\"k\">.</span>_throw<span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> outcome<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Sends a request to the XML/A server.</span>","<span class=\"c\">*   This method is rather low-level and allows full control over the request </span>","<span class=\"c\">*   by passing an options object. General properties of the options object are:</span>","<span class=\"c\">*   &lt;ul&gt;</span>","<span class=\"c\">*       &lt;li&gt;&lt;code&gt;method&lt;/code&gt; {string} REQUIRED the XML/A method to invoke. This should be one of the following constants:</span>","<span class=\"c\">*           &lt;dl&gt;</span>","<span class=\"c\">*               &lt;dt&gt;&lt;code&gt;&lt;a href=\"#property_METHOD_DISCOVER\"&gt;METHOD_DISCOVER&lt;/a&gt;&lt;/code&gt;&lt;/dt&gt;</span>","<span class=\"c\">*               &lt;dd&gt;</span>","<span class=\"c\">*                   &lt;p&gt;</span>","<span class=\"c\">*                   This method is used to obtain metadata from the XML/A service or XML/A provider. </span>","<span class=\"c\">*                   Metadata is returned in a tabular format called Schema Rowsets, which are represented by an instance of the </span>","<span class=\"c\">*                   &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#class_Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; class.</span>","<span class=\"c\">*                   For these types of requests, you must pass the &lt;code&gt;requestType&lt;/code&gt; option to specify which schema rowset you want to obtain.</span>","<span class=\"c\">*                   In addition, you can specify a &lt;code&gt;restrictions&lt;/code&gt; object that is used as filter criteria to restrict which rows will be returned in the rowset.</span>","<span class=\"c\">*                   &lt;/p&gt;</span>","<span class=\"c\">*                   &lt;p&gt;</span>","<span class=\"c\">*                   Instead of explicitly passing &lt;code&gt;METHOD_DISCOVER&lt;/code&gt; as the &lt;code&gt;requestType&lt;/code&gt;, you can also call the </span>","<span class=\"c\">*                   &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method (which requires you to explictly pass a &lt;code&gt;requestType&lt;/code&gt; option).</span>","<span class=\"c\">*                   Finally, you can also call one of the &lt;code&gt;discoverXXX()&lt;/code&gt; methods in order to request a particular schema rowset.</span>","<span class=\"c\">*                   &lt;/p&gt;</span>","<span class=\"c\">*               &lt;/dd&gt;</span>","<span class=\"c\">*               &lt;dt&gt;&lt;code&gt;&lt;a href=\"#property_METHOD_EXECUTE\"&gt;METHOD_EXECUTE&lt;/a&gt;&lt;/code&gt;&lt;/dt&gt;</span>","<span class=\"c\">*               &lt;dd&gt;</span>","<span class=\"c\">*                   &lt;p&gt;</span>","<span class=\"c\">*                   This method is used to send an MDX quey to the XML/A provider. </span>","<span class=\"c\">*                   Query results are returned in a multidimentsional format which is represented by an instance of the </span>","<span class=\"c\">*                   &lt;code&gt;&lt;a href=\"Xmla.Resultset.html#class_Xmla.Resultset\"&gt;Xmla.Resultset&lt;/a&gt;&lt;/code&gt; class.</span>","<span class=\"c\">*                   For these types of requests, you must pass the &lt;code&gt;statement&lt;/code&gt; option to specify the MDX query.</span>","<span class=\"c\">*                   &lt;/p&gt;</span>","<span class=\"c\">*                   &lt;p&gt;</span>","<span class=\"c\">*                   Instead of explicitly passing &lt;code&gt;METHOD_EXECUTE&lt;/code&gt; as the &lt;code&gt;requestType&lt;/code&gt;, you can also call the </span>","<span class=\"c\">*                   &lt;code&gt;&lt;a href=\"#method_execute\"&gt;execute()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*                   &lt;/p&gt;</span>","<span class=\"c\">*               &lt;/dd&gt;</span>","<span class=\"c\">*           &lt;/dl&gt;</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*       &lt;li&gt;&lt;code&gt;url&lt;/code&gt; {string} REQUIRED the URL of XML/A service, or of a XML/A datasource. </span>","<span class=\"c\">*           Typically, you first use the URL of a XML/A service (like &lt;code&gt;http://your.pentaho.server:8080/pentaho/Xmla?userid=joe&amp;amp;password=password&lt;/code&gt;) </span>","<span class=\"c\">*           and use that to retrieve the &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; rowset. </span>","<span class=\"c\">*           Then, you can connect to a XML/A datasource using the value returned by the &lt;code&gt;URL&lt;/code&gt; column of the &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; rowset </span>","<span class=\"c\">*           (typically, you also have to set a &lt;code&gt;DataSourceInfo&lt;/code&gt; property using the value found in the &lt;code&gt;DataSourceInfo&lt;/code&gt; column of the &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; rowset).</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*       &lt;li&gt;</span>","<span class=\"c\">*           &lt;code&gt;properties&lt;/code&gt; {Object} XML/A properties. </span>","<span class=\"c\">*           The appropriate types and values of XML/A properties are dependent upon the specific method and requestType.</span>","<span class=\"c\">*           The XML/A standard defines a set of pre-defined properties. </span>","<span class=\"c\">*           The &lt;code&gt;Xmla&lt;/code&gt; class defines a static final property for each of these (see the &lt;code&gt;PROP_XXX&lt;/code&gt; constants).</span>","<span class=\"c\">*           The list of all valid properties can be obtained from the &lt;code&gt;DISCOVER_PROPERTIES&lt;/code&gt; schema rowset </span>","<span class=\"c\">*           (see &lt;code&gt;&lt;a href=\"#method_discoverProperties()\"&gt;discoverProperties()&lt;/a&gt;&lt;/code&gt;). </span>","<span class=\"c\">*           Each javascript property of the &lt;code&gt;properties&lt;/code&gt; object is mapped literally to a XML/A property.</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*       &lt;li&gt;&lt;code&gt;async&lt;/code&gt; {boolean} </span>","<span class=\"c\">*           Determines how the request is performed:&lt;ul&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: The request is performed asynchronously: the call to &lt;code&gt;request()&lt;/code&gt; will not block and return immediately.</span>","<span class=\"c\">*               In this case, the return value of the &lt;code&gt;request()&lt;/code&gt; method is not defined, </span>","<span class=\"c\">*               and the response must be received by registering a listener </span>","<span class=\"c\">*               (see &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*               &lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: The request is performed synchronously: the call to &lt;code&gt;request()&lt;/code&gt; will block until it receives a response from the XML/A server or times out.</span>","<span class=\"c\">*               In this case, the &lt;code&gt;request()&lt;/code&gt; method returns </span>","<span class=\"c\">*               a &lt;code&gt;Rowset&lt;/code&gt; (for &lt;code&gt;Discover&lt;/code&gt; requests) or </span>","<span class=\"c\">*               a &lt;code&gt;Resultset&lt;/code&gt; (for &lt;code&gt;Execute&lt;/code&gt; requests).</span>","<span class=\"c\">*               If you registered any listeners (see &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;), </span>","<span class=\"c\">*               then these will still be notified of any events (such as receiving the response).</span>","<span class=\"c\">*               &lt;/li&gt;</span>","<span class=\"c\">*           &lt;/ul&gt;</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*   &lt;/ul&gt;</span>","<span class=\"c\">*   Other parts of the &lt;code&gt;options&lt;/code&gt; object are method-specific.</span>","<span class=\"c\">*   &lt;ul&gt;</span>","<span class=\"c\">*       &lt;li&gt;The following options are applicable in case the &lt;code&gt;method&lt;/code&gt; is &lt;code&gt;METHOD_DISCOVER&lt;/code&gt;:</span>","<span class=\"c\">*           &lt;ul&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;requestType&lt;/code&gt; - {string} Applies to the Discover method and indicates the kind of schema rowset to retrieve.</span>","<span class=\"c\">*                   You can use one of the &lt;code&gt;DISCOVER_XXX&lt;/code&gt;, &lt;code&gt;DBSCHEMA_XXX&lt;/code&gt; or &lt;code&gt;MDSCHEMA_XXX&lt;/code&gt; constants for this property.</span>","<span class=\"c\">*                   You can also dymically discover which values for &lt;code&gt;requestType&lt;/code&gt; are supported by the XML/A provider using the </span>","<span class=\"c\">*                   &lt;code&gt;DISCOVER_SCHEMA_ROWSETS&lt;/code&gt; rowset (see: &lt;code&gt;&lt;a href=\"method_discoverMDSchemaRowsets\"&gt;discoverMDSchemaRowsets()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*                   See the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method for more information.</span>","<span class=\"c\">*               &lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;</span>","<span class=\"c\">*                   &lt;code&gt;restrictions&lt;/code&gt; {Object} XML/A restrictions are used to filter the requested schema rowset. </span>","<span class=\"c\">*                   For more information on restrictions, see the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*               &lt;/li&gt;</span>","<span class=\"c\">*           &lt;/ul&gt;</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*       &lt;li&gt;The following options are applicable in case the &lt;code&gt;method&lt;/code&gt; is &lt;code&gt;METHOD_EXECUTE&lt;/code&gt;:</span>","<span class=\"c\">*           &lt;ul&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;statement&lt;/code&gt; - {string} Applies to the Execute method and specifies the MDX query to send to the server.</span>","<span class=\"c\">*               &lt;/li&gt;</span>","<span class=\"c\">*           &lt;/ul&gt;</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*   &lt;/ul&gt;</span>","<span class=\"c\">*   Instead of calling this method directly, consider calling </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; (to obtain a schema rowset),</span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_execute\"&gt;execute()&lt;/a&gt;&lt;/code&gt; (to issue a MDX query), </span>","<span class=\"c\">*   or one of the specialized &lt;code&gt;discoverXXX()&lt;/code&gt; methods (to obtain a particular schema rowset).</span>","<span class=\"c\">*   @method request</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the request. </span>","<span class=\"c\">*   @return {Xmla.Rowset|Xmla.Resultset} The result of the invoking the XML/A method. For an asynchronous request, the return value is not defined. For synchronous requests, &lt;code&gt;Discover&lt;/code&gt; requests return an instance of a &lt;code&gt;Xmla.Rowset&lt;/code&gt;, and &lt;code&gt;Execute&lt;/code&gt; results return an instance of a &lt;code&gt;Xmla.Resultset&lt;/code&gt;.</span>","<span class=\"c\">*/</span>","    request<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> ex<span class=\"k\">,</span> xmla <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>response <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>responseText <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>responseXML <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        ","\t\t<span class=\"k\">if</span> <span class=\"k\">(!</span>options<span class=\"k\">.</span>url<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>url<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t\t\toptions<span class=\"k\">.</span>url <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>url<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\tex <span class=\"k\">=</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","\t\t\t\t\t<span class=\"s\">\"MISSING_URL\"</span><span class=\"k\">,</span>","\t\t\t\t\t<span class=\"s\">\"Xmla.request\"</span><span class=\"k\">,</span>","\t\t\t\t\toptions","\t\t\t\t<span class=\"k\">);</span>","\t\t\t\tex<span class=\"k\">.</span>_throw<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","","        options<span class=\"k\">.</span>properties <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>options<span class=\"k\">.</span>properties<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>properties<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","        options<span class=\"k\">.</span>restrictions <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>options<span class=\"k\">.</span>restrictions<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>restrictions<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>_isUnd<span class=\"k\">(</span>options<span class=\"k\">.</span>async<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>_isUnd<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>async<span class=\"k\">))</span><span class=\"k\">{</span>","\t\t\toptions<span class=\"k\">.</span>async <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>async<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>_isUnd<span class=\"k\">(</span>options<span class=\"k\">.</span>requestTimeout<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>_isUnd<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>requestTimeout<span class=\"k\">))</span> <span class=\"k\">{</span>","\t\t\toptions<span class=\"k\">.</span>requestTimeout <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>requestTimeout<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>options<span class=\"k\">.</span>username <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>username<span class=\"k\">)</span><span class=\"k\">{</span>","            options<span class=\"k\">.</span>username <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>username<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>options<span class=\"k\">.</span>password <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>password<span class=\"k\">)</span><span class=\"k\">{</span>","            options<span class=\"k\">.</span>password <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>password<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">var</span> soapMessage <span class=\"k\">=</span> _getXmlaSoapMessage<span class=\"k\">(</span>options<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>soapMessage <span class=\"k\">=</span> soapMessage<span class=\"k\">;</span>","        <span class=\"k\">var</span> myXhr<span class=\"k\">;</span>","        <span class=\"k\">var</span> ajaxOptions <span class=\"k\">=</span> <span class=\"k\">{</span>","            async<span class=\"k\">:</span> options<span class=\"k\">.</span>async<span class=\"k\">,</span>","            timeout<span class=\"k\">:</span> options<span class=\"k\">.</span>requestTimeout<span class=\"k\">,</span>","            data<span class=\"k\">:</span> soapMessage<span class=\"k\">,</span>","            error<span class=\"k\">:</span>      <span class=\"k\">function</span><span class=\"k\">(</span>exception<span class=\"k\">)</span><span class=\"k\">{</span>","                            options<span class=\"k\">.</span>exception <span class=\"k\">=</span> exception<span class=\"k\">;</span>","                            xmla<span class=\"k\">.</span>_requestError<span class=\"k\">(</span>options<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">,</span>","            complete<span class=\"k\">:</span>   <span class=\"k\">function</span><span class=\"k\">(</span>xhr<span class=\"k\">)</span><span class=\"k\">{</span>","                            options<span class=\"k\">.</span>xhr <span class=\"k\">=</span> xhr<span class=\"k\">;</span>","                            xmla<span class=\"k\">.</span>_requestSuccess<span class=\"k\">(</span>options<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">,</span>","            url<span class=\"k\">:</span> options<span class=\"k\">.</span>url","        <span class=\"k\">}</span><span class=\"k\">;</span>        ","        <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>username<span class=\"k\">)</span><span class=\"k\">{</span>","            ajaxOptions<span class=\"k\">.</span>username <span class=\"k\">=</span> options<span class=\"k\">.</span>username<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>password<span class=\"k\">)</span><span class=\"k\">{</span>","            ajaxOptions<span class=\"k\">.</span>password <span class=\"k\">=</span> options<span class=\"k\">.</span>password<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">if</span>  <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_fireEvent<span class=\"k\">(</span>Xmla<span class=\"k\">.</span>EVENT_REQUEST<span class=\"k\">,</span> options<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","                <span class=\"k\">(</span>","                    <span class=\"k\">(</span>options<span class=\"k\">.</span>method <span class=\"k\">==</span> Xmla<span class=\"k\">.</span>METHOD_DISCOVER <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_fireEvent<span class=\"k\">(</span>Xmla<span class=\"k\">.</span>EVENT_DISCOVER<span class=\"k\">,</span> options<span class=\"k\">))</span> <span class=\"k\">||</span> ","                    <span class=\"k\">(</span>options<span class=\"k\">.</span>method <span class=\"k\">==</span> Xmla<span class=\"k\">.</span>METHOD_EXECUTE  <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_fireEvent<span class=\"k\">(</span>Xmla<span class=\"k\">.</span>EVENT_EXECUTE<span class=\"k\">,</span> options<span class=\"k\">))</span>","                <span class=\"k\">)</span> ","        <span class=\"k\">)</span> <span class=\"k\">{</span>","            myXhr <span class=\"k\">=</span> _ajax<span class=\"k\">(</span>ajaxOptions<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>response<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    _requestError<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_fireEvent<span class=\"k\">(</span><span class=\"s\">\"error\"</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    _requestSuccess<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>request<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> xhr <span class=\"k\">=</span> request<span class=\"k\">.</span>xhr<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>responseXML <span class=\"k\">=</span> xhr<span class=\"k\">.</span>responseXML<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>responseText <span class=\"k\">=</span> xhr<span class=\"k\">.</span>responseText<span class=\"k\">;</span>","","        <span class=\"k\">var</span> method <span class=\"k\">=</span> request<span class=\"k\">.</span>method<span class=\"k\">;</span>","        ","        <span class=\"k\">var</span> soapFault <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>responseXML<span class=\"k\">,</span> _xmlnsSOAPenvelope<span class=\"k\">,</span> _xmlnsSOAPenvelopePrefix<span class=\"k\">,</span> <span class=\"s\">\"Fault\"</span><span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>soapFault<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">//TODO: extract error info</span>","            soapFault <span class=\"k\">=</span> soapFault<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">);</span>","            request<span class=\"k\">.</span>exception <span class=\"k\">=</span> <span class=\"k\">new</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">(</span>","                Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>TYPE_ERROR<span class=\"k\">,</span>","                soapFault<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"faultcode\"</span><span class=\"k\">).</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">).</span>childNodes<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">).</span>data<span class=\"k\">,</span>","                soapFault<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"faultstring\"</span><span class=\"k\">).</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">).</span>childNodes<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">).</span>data<span class=\"k\">,</span>","                <span class=\"k\">null</span><span class=\"k\">,</span>","                <span class=\"s\">\"_requestSuccess\"</span><span class=\"k\">,</span>","                request","            <span class=\"k\">);</span>","            <span class=\"k\">switch</span><span class=\"k\">(</span>method<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">case</span> Xmla<span class=\"k\">.</span>METHOD_DISCOVER<span class=\"k\">:</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_fireEvent<span class=\"k\">(</span>Xmla<span class=\"k\">.</span>EVENT_DISCOVER_ERROR<span class=\"k\">,</span> request<span class=\"k\">);</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">case</span> Xmla<span class=\"k\">.</span>METHOD_EXECUTE<span class=\"k\">:</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_fireEvent<span class=\"k\">(</span>Xmla<span class=\"k\">.</span>EVENT_EXECUTE_ERROR<span class=\"k\">,</span> request<span class=\"k\">);</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_fireEvent<span class=\"k\">(</span>Xmla<span class=\"k\">.</span>EVENT_ERROR<span class=\"k\">,</span> request<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span>        ","            <span class=\"k\">switch</span><span class=\"k\">(</span>method<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">case</span> Xmla<span class=\"k\">.</span>METHOD_DISCOVER<span class=\"k\">:</span>","                    <span class=\"k\">var</span> rowset <span class=\"k\">=</span> <span class=\"k\">new</span> Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>responseXML<span class=\"k\">,</span> request<span class=\"k\">.</span>requestType<span class=\"k\">);</span>","                    request<span class=\"k\">.</span>rowset <span class=\"k\">=</span> rowset<span class=\"k\">;</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>response <span class=\"k\">=</span> rowset<span class=\"k\">;</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_fireEvent<span class=\"k\">(</span>Xmla<span class=\"k\">.</span>EVENT_DISCOVER_SUCCESS<span class=\"k\">,</span> request<span class=\"k\">);</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">case</span> Xmla<span class=\"k\">.</span>METHOD_EXECUTE<span class=\"k\">:</span>","                    <span class=\"k\">var</span> response<span class=\"k\">,</span> resultset <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">,</span> dataset <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                    <span class=\"k\">var</span> format <span class=\"k\">=</span> request<span class=\"k\">.</span>properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_FORMAT<span class=\"k\">];</span>","                    <span class=\"k\">switch</span><span class=\"k\">(</span>format<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">case</span> Xmla<span class=\"k\">.</span>PROP_FORMAT_TABULAR<span class=\"k\">:</span>","                            response <span class=\"k\">=</span> resultset <span class=\"k\">=</span> <span class=\"k\">new</span> Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>responseXML<span class=\"k\">);</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">case</span> Xmla<span class=\"k\">.</span>PROP_FORMAT_MULTIDIMENSIONAL<span class=\"k\">:</span>","                            response <span class=\"k\">=</span> dataset <span class=\"k\">=</span> <span class=\"k\">new</span> Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>responseXML<span class=\"k\">);</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>             ","                    request<span class=\"k\">.</span>resultset <span class=\"k\">=</span> resultset<span class=\"k\">;</span>","                    request<span class=\"k\">.</span>dataset <span class=\"k\">=</span> dataset<span class=\"k\">;</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>response <span class=\"k\">=</span> response<span class=\"k\">;</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_fireEvent<span class=\"k\">(</span>Xmla<span class=\"k\">.</span>EVENT_EXECUTE_SUCCESS<span class=\"k\">,</span> request<span class=\"k\">);</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_fireEvent<span class=\"k\">(</span>Xmla<span class=\"k\">.</span>EVENT_SUCCESS<span class=\"k\">,</span> request<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Sends an MDX query to a XML/A DataSource to invoke the XML/A &lt;code&gt;Execute&lt;/code&gt; method and obtain the multi-dimensional resultset.</span>","<span class=\"c\">*   Options are passed using a generic &lt;code&gt;options&lt;/code&gt; object.</span>","<span class=\"c\">*   Applicable properties of the &lt;code&gt;options&lt;/code&gt; object are:</span>","<span class=\"c\">*   &lt;ul&gt;</span>","<span class=\"c\">*       &lt;li&gt;&lt;code&gt;url&lt;/code&gt; {string} REQUIRED the URL of a XML/A datasource. </span>","<span class=\"c\">*           This should be a value obtained from the &lt;code&gt;URL&lt;/code&gt; column of the &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; rowset</span>","<span class=\"c\">*           (see: &lt;code&gt;&lt;a href=\"method_discoverDataSources\"&gt;discoverDataSources()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*       &lt;li&gt;&lt;code&gt;statement&lt;/code&gt; - {string} The MDX query to send to the server.</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*       &lt;li&gt;</span>","<span class=\"c\">*           &lt;code&gt;properties&lt;/code&gt; {Object} XML/A properties. </span>","<span class=\"c\">*           The list of all valid properties can be obtained from the &lt;code&gt;DISCOVER_PROPERTIES&lt;/code&gt; schema rowset </span>","<span class=\"c\">*           (see &lt;code&gt;&lt;a href=\"#method_discoverProperties()\"&gt;discoverProperties()&lt;/a&gt;&lt;/code&gt;). </span>","<span class=\"c\">*           Typically, &lt;code&gt;execute()&lt;/code&gt; requires these properties:&lt;dl&gt;</span>","<span class=\"c\">*               &lt;dt&gt;&lt;code&gt;DataSourceInfo&lt;/code&gt; property&lt;/dt&gt;</span>","<span class=\"c\">*               &lt;dd&gt;Identifies a data source managed by the XML/A server.</span>","<span class=\"c\">*                   To specify this property, you can use the static final constant</span>","<span class=\"c\">*                   &lt;code&gt;&lt;a href=\"#property_PROP_DATASOURCEINFO\"&gt;PROP_DATASOURCEINFO&lt;/a&gt;&lt;/code&gt;</span>","<span class=\"c\">*                   as key in the &lt;code&gt;properties&lt;/code&gt; object of the &lt;code&gt;options&lt;/code&gt; object passed to the &lt;code&gt;execute()&lt;/code&gt; method.</span>","<span class=\"c\">*                   Valid values for this property should be obtained from the &lt;code&gt;DataSourceInfo&lt;/code&gt; column </span>","<span class=\"c\">*                   of the &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; schema rowset (see: &lt;code&gt;&lt;a href=\"#method_discoverDataSources\"&gt;discoverDataSources()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*                   Note that the values for the &lt;code&gt;DataSourceInfo&lt;/code&gt; property and the &lt;code&gt;url&lt;/code&gt; must both be taken from the same row of the &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*               &lt;/dd&gt;</span>","<span class=\"c\">*               &lt;dt&gt;&lt;code&gt;Catalog&lt;/code&gt; property&lt;/dt&gt;</span>","<span class=\"c\">*               &lt;dd&gt;Identifies a catalog applicable for the datasource.</span>","<span class=\"c\">*                   To specify this property, you can use the static final constant</span>","<span class=\"c\">*                   &lt;code&gt;&lt;a href=\"#property_PROP_CATALOG\"&gt;PROP_CATALOG&lt;/a&gt;&lt;/code&gt;</span>","<span class=\"c\">*                   as key in the &lt;code&gt;properties&lt;/code&gt; object of the &lt;code&gt;options&lt;/code&gt; object passed to the &lt;code&gt;execute()&lt;/code&gt; method.</span>","<span class=\"c\">*                   Valid values for this property should be obtained from the &lt;code&gt;CATALOG_NAME&lt;/code&gt; column </span>","<span class=\"c\">*                   of the &lt;code&gt;DBSCHEMA_CATALOGS&lt;/code&gt; schema rowset (see: &lt;code&gt;&lt;a href=\"#method_discoverDBCatalogs\"&gt;discoverDBCatalogs()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*               &lt;/dd&gt;</span>","<span class=\"c\">*           &lt;/dl&gt;</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*       &lt;li&gt;&lt;code&gt;async&lt;/code&gt; {boolean} </span>","<span class=\"c\">*           Determines how the request is performed:&lt;ul&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: The request is performed asynchronously: the call to &lt;code&gt;request()&lt;/code&gt; will not block and return immediately.</span>","<span class=\"c\">*               In this case, the return value of the &lt;code&gt;request()&lt;/code&gt; method is not defined, </span>","<span class=\"c\">*               and the response must be received by registering a listener </span>","<span class=\"c\">*               (see &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*               &lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: The request is performed synchronously: the call to &lt;code&gt;execute()&lt;/code&gt; will block until it receives a response from the XML/A server or times out.</span>","<span class=\"c\">*               In this case, a &lt;code&gt;Resultset&lt;/code&gt; is returned that represents the multi-dimensional data set.</span>","<span class=\"c\">*               If you registered any &lt;code&gt;REQUEST_XXX&lt;/code&gt; and/or &lt;code&gt;EXECUTE_XXX&lt;/code&gt; listeners (see &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;), </span>","<span class=\"c\">*               then these will still be notified.</span>","<span class=\"c\">*               &lt;/li&gt;</span>","<span class=\"c\">*           &lt;/ul&gt;</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*   &lt;/ul&gt;</span>","<span class=\"c\">*   @method execute</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A &lt;code&gt;Execute&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Resultset|Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Execute&lt;/code&gt; method. For an asynchronous request, the return value is not defined. For synchronous requests, an instance of a &lt;code&gt;Xmla.Resultset&lt;/code&gt; that represents the multi-dimensional result set of the MDX query. If the &lt;code&gt;Format&lt;/code&gt; property in the request was set to &lt;code&gt;Tabular&lt;/code&gt;, then an instance of the </span>","<span class=\"c\">&lt;code&gt;&lt;a href=\"Xmla.Rowset#class_Xmla.Rowset\"&gt;Rowset&lt;/a&gt;&lt;/code&gt; class is returned to represent the &lt;code&gt;Resultset&lt;/code&gt;.</span>","<span class=\"c\">*/</span>","    execute<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> properties <span class=\"k\">=</span> options<span class=\"k\">.</span>properties<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>properties<span class=\"k\">)</span><span class=\"k\">{</span>","            properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            options<span class=\"k\">.</span>properties <span class=\"k\">=</span> properties<span class=\"k\">;</span>","        <span class=\"k\">}</span>","\t\t_applyProps<span class=\"k\">(</span>properties<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>properties<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">)</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_CONTENT<span class=\"k\">])</span><span class=\"k\">{</span>","            properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_CONTENT<span class=\"k\">]</span> <span class=\"k\">=</span> Xmla<span class=\"k\">.</span>PROP_CONTENT_SCHEMADATA<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_FORMAT<span class=\"k\">])</span><span class=\"k\">{</span>","            options<span class=\"k\">.</span>properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_FORMAT<span class=\"k\">]</span> <span class=\"k\">=</span> Xmla<span class=\"k\">.</span>PROP_FORMAT_MULTIDIMENSIONAL<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                method<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>METHOD_EXECUTE","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>request<span class=\"k\">(</span>request<span class=\"k\">);</span>         ","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Sends an MDX query to a XML/A DataSource to invoke the &lt;code&gt;&lt;a href=\"#method_execute&lt;/a&gt;&lt;/code&gt; method using &lt;code&gt;&lt;a href=\"#property_PROP_FORMAT_TABULAR\"&gt;PROP_FORMAT_TABULAR&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;&lt;a href=\"#property_PROP_FORMAT_TABULAR\"&gt;PROP_FORMAT&lt;/a&gt;&lt;/code&gt; property. This has the effect of obtaining the multi-dimensional resultset as a &lt;code&gt;&lt;a href=\"Xmla.Rowset#class_Xmla.Rowset\"&gt;Rowset&lt;/a&gt;&lt;/code&gt;.</span>","<span class=\"c\">*   @method executeTabular</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A &lt;code&gt;Execute&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Execute&lt;/code&gt; method. For an asynchronous request, the return value is not defined. For synchronous requests, an instance of a &lt;code&gt;Xmla.Rowset&lt;/code&gt; that represents the multi-dimensional result set of the MDX query. </span>","<span class=\"c\">*/</span>    ","    executeTabular<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>options<span class=\"k\">.</span>properties<span class=\"k\">)</span><span class=\"k\">{</span>","            options<span class=\"k\">.</span>properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        options<span class=\"k\">.</span>properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_FORMAT<span class=\"k\">]</span> <span class=\"k\">=</span> Xmla<span class=\"k\">.</span>PROP_FORMAT_TABULAR<span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>execute<span class=\"k\">(</span>options<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Sends an MDX query to a XML/A DataSource to invoke the &lt;code&gt;&lt;a href=\"#method_execute&lt;/a&gt;&lt;/code&gt; method using &lt;code&gt;&lt;a href=\"#property_PROP_FORMAT_MULTIDIMENSIONAL\"&gt;PROP_FORMAT_MULTIDIMENSIONAL&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;&lt;a href=\"#property_PROP_FORMAT_TABULAR\"&gt;PROP_FORMAT&lt;/a&gt;&lt;/code&gt; property. In this case, the result is available only as XML text or XML document in the &lt;code&gt;&lt;a href=\"#property_responseText\"&gt;responseText&lt;/a&gt;&lt;/code&gt;</span>","<span class=\"c\">and  &lt;code&gt;&lt;a href=\"#property_responseXML\"&gt;responseXML&lt;/a&gt;&lt;/code&gt; properties.</span>","<span class=\"c\">*   @method executeMultiDimensional</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A &lt;code&gt;Execute&lt;/code&gt; request. </span>","<span class=\"c\">*/</span>    ","    executeMultiDimensional<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>options<span class=\"k\">.</span>properties<span class=\"k\">)</span><span class=\"k\">{</span>","            options<span class=\"k\">.</span>properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        options<span class=\"k\">.</span>properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_FORMAT<span class=\"k\">]</span> <span class=\"k\">=</span> Xmla<span class=\"k\">.</span>PROP_FORMAT_MULTIDIMENSIONAL<span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>execute<span class=\"k\">(</span>options<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Sends a request to invoke the XML/A &lt;code&gt;Discover&lt;/code&gt; method and returns a schema rowset specified by the &lt;code&gt;requestType&lt;/code&gt; option.</span>","<span class=\"c\">*   Options are passed using a generic &lt;code&gt;options&lt;/code&gt; object.</span>","<span class=\"c\">*   Applicable properties of the &lt;code&gt;options&lt;/code&gt; object are:</span>","<span class=\"c\">*   &lt;ul&gt;</span>","<span class=\"c\">*       &lt;li&gt;&lt;code&gt;requestType&lt;/code&gt; - {string} Indicates the kind of schema rowset to retrieve.</span>","<span class=\"c\">*           You can use one of the following predefined XML for Analysis Schema Rowset constants:</span>","<span class=\"c\">*           &lt;ul&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_DISCOVER_DATASOURCES\"&gt;DISCOVER_DATASOURCES&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_DISCOVER_ENUMERATORS\"&gt;DISCOVER_ENUMERATORS&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_DISCOVER_KEYWORDS\"&gt;DISCOVER_KEYWORDS&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_DISCOVER_LITERALS\"&gt;DISCOVER_LITERALS&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_DISCOVER_PROPERTIES\"&gt;DISCOVER_PROPERTIES&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_DISCOVER_SCHEMA_ROWSETS\"&gt;DISCOVER_SCHEMA_ROWSETS&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*           &lt;/ul&gt;</span>","<span class=\"c\">*           Or one of the applicable OLE DB Schema Rowset constants: </span>","<span class=\"c\">*           &lt;ul&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_DBSCHEMA_CATALOGS\"&gt;DBSCHEMA_CATALOGS&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_DBSCHEMA_COLUMNS\"&gt;DBSCHEMA_COLUMNS&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_DBSCHEMA_PROVIDER_TYPES\"&gt;DBSCHEMA_PROVIDER_TYPES&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_DBSCHEMA_SCHEMATA\"&gt;DBSCHEMA_SCHEMATA&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_DBSCHEMA_TABLES\"&gt;DBSCHEMA_TABLES&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_DBSCHEMA_TABLES_INFO\"&gt;DBSCHEMA_TABLES_INFO&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*           &lt;/ul&gt;</span>","<span class=\"c\">*           Or one of the applicable OLE DB for OLAP Schema Rowset constants: </span>","<span class=\"c\">*           &lt;ul&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_MDSCHEMA_ACTIONS\"&gt;MDSCHEMA_ACTIONS&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_MDSCHEMA_CUBES\"&gt;MDSCHEMA_CUBES&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_MDSCHEMA_DIMENSIONS\"&gt;MDSCHEMA_DIMENSIONS&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_MDSCHEMA_FUNCTIONS\"&gt;MDSCHEMA_FUNCTIONS&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_MDSCHEMA_HIERARCHIES\"&gt;MDSCHEMA_HIERARCHIES&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_MDSCHEMA_MEASURES\"&gt;MDSCHEMA_MEASURES&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_MDSCHEMA_MEMBERS\"&gt;MDSCHEMA_MEMBERS&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_MDSCHEMA_PROPERTIES\"&gt;MDSCHEMA_PROPERTIES&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;&lt;a href=\"#property_MDSCHEMA_SETS\"&gt;MDSCHEMA_SETS&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;</span>","<span class=\"c\">*           &lt;/ul&gt;</span>","<span class=\"c\">*           You can also dymically discover which values for &lt;code&gt;requestType&lt;/code&gt; are supported by the XML/A provider.</span>","<span class=\"c\">*           To do that, refer to the &lt;code&gt;SchemaName&lt;/code&gt; column of the &lt;code&gt;DISCOVER_SCHEMA_ROWSETS&lt;/code&gt; rowset</span>","<span class=\"c\">*           (see: &lt;code&gt;&lt;a href=\"method_discoverMDSchemaRowsets\"&gt;discoverMDSchemaRowsets()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*       &lt;li&gt;&lt;code&gt;url&lt;/code&gt; {string} REQUIRED the url of the XML/A service or XML/A datasource.        </span>","<span class=\"c\">*           If the value for the &lt;code&gt;requestType&lt;/code&gt; option is one of the predefined XML/A &lt;code&gt;&lt;a href=\"\"&gt;DISCOVER_XXX&lt;/a&gt;&lt;/code&gt; constants, </span>","<span class=\"c\">*           then this should be the url of the XML/A service.</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*       &lt;li&gt;</span>","<span class=\"c\">*           &lt;code&gt;properties&lt;/code&gt; {Object} XML/A properties. </span>","<span class=\"c\">*           The appropriate types and values of XML/A properties are dependent upon the value passed as &lt;code&gt;requestType&lt;/code&gt;.</span>","<span class=\"c\">*           The XML/A standard defines a set of pre-defined properties. </span>","<span class=\"c\">*           The &lt;code&gt;Xmla&lt;/code&gt; class defines a static final property for each of these (see the &lt;code&gt;PROP_XXX&lt;/code&gt; constants).</span>","<span class=\"c\">*           The list of all valid properties can be obtained from the &lt;code&gt;DISCOVER_PROPERTIES&lt;/code&gt; schema rowset </span>","<span class=\"c\">*           (see &lt;code&gt;&lt;a href=\"#method_discoverProperties()\"&gt;discoverProperties()&lt;/a&gt;&lt;/code&gt;). </span>","<span class=\"c\">*           Each javascript property of the &lt;code&gt;properties&lt;/code&gt; object is mapped literally to a XML/A property.</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*       &lt;li&gt;</span>","<span class=\"c\">*           &lt;code&gt;restrictions&lt;/code&gt; {Object} XML/A restrictions.</span>","<span class=\"c\">*           These are used to specify a filter that will be applied to the data in the schema rowset.</span>","<span class=\"c\">*           Each javascript property of the &lt;code&gt;restrictions&lt;/code&gt; object is mapped to a column of the requested schema rowset.</span>","<span class=\"c\">*           The value for the restriction is sent with the request, and processed by the XML/A server to only return matching rows from the requested schema dataset.</span>","<span class=\"c\">*           The name, types and values of the restrictions are dependent upon which schema rowset is requested.</span>","<span class=\"c\">*           The available restrictions are specified by the &lt;code&gt;Restrictions&lt;/code&gt; column of the &lt;code&gt;DISCOVER_SCHEMA_ROWSETS&lt;/code&gt; schema rowset.</span>","<span class=\"c\">*           For a number of schema rowsets, the available restrictions are pre-defined. </span>","<span class=\"c\">*           These are documented together with each particular &lt;code&gt;discoverXXX()&lt;/code&gt; method.</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*       &lt;li&gt;&lt;code&gt;async&lt;/code&gt; {boolean} </span>","<span class=\"c\">*           Determines how the request is performed:&lt;ul&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: The request is performed asynchronously: the call to &lt;code&gt;request()&lt;/code&gt; will not block and return immediately.</span>","<span class=\"c\">*               In this case, the return value of the &lt;code&gt;request()&lt;/code&gt; method is not defined, </span>","<span class=\"c\">*               and the response must be received by registering a listener </span>","<span class=\"c\">*               (see &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*               &lt;/li&gt;</span>","<span class=\"c\">*               &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: The request is performed synchronously: the call to &lt;code&gt;execute()&lt;/code&gt; will block until it receives a response from the XML/A server or times out.</span>","<span class=\"c\">*               In this case, a &lt;code&gt;Resultset&lt;/code&gt; is returned that represents the multi-dimensional data set.</span>","<span class=\"c\">*               If you registered any &lt;code&gt;REQUEST_XXX&lt;/code&gt; and/or &lt;code&gt;EXECUTE_XXX&lt;/code&gt; listeners (see &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;), </span>","<span class=\"c\">*               then these will still be notified.</span>","<span class=\"c\">*               &lt;/li&gt;</span>","<span class=\"c\">*           &lt;/ul&gt;</span>","<span class=\"c\">*       &lt;/li&gt;</span>","<span class=\"c\">*   &lt;/ul&gt;</span>","<span class=\"c\">*   Instead of calling this method directly, consider calling </span>","<span class=\"c\">*   or one of the specialized &lt;code&gt;discoverXXX()&lt;/code&gt; methods to obtain a particular schema rowset.</span>","<span class=\"c\">*   @method discover</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A &lt;code&gt;Discover&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the requested schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>    ","    discover<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>        ","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                method<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>METHOD_DISCOVER","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(!</span>request<span class=\"k\">.</span>requestType<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t\trequest<span class=\"k\">.</span>requestType <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>requestType<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>request<span class=\"k\">(</span>request<span class=\"k\">);</span>         ","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using &lt;code&gt;&lt;a href=\"#property_DISCOVER_DATASOURCES\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               DataSourceName</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               string</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               A name that identifies this data source.</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Yes</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               No</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               DataSourceDescription</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               string</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Human readable description of the datasource </span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               No</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Yes</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               URL</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               string</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               URL to use to submit requests to this provider.</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Yes</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Yes</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               DataSourceInfo</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               string</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Connectstring</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               No</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Yes</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               ProviderName</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               string</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               A name indicating the product providing the XML/A implementation</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Yes</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Yes</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               ProviderType</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               string[]</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               The kind of data sets supported by this provider. </span>","<span class=\"c\">*               The following values are defined by the XML/A specification:</span>","<span class=\"c\">*               &lt;dl&gt;</span>","<span class=\"c\">*                   &lt;dt&gt;TDP&lt;/dt&gt;&lt;dd&gt;tabular data provider.&lt;/dd&gt;</span>","<span class=\"c\">*                   &lt;dt&gt;MDP&lt;/dt&gt;&lt;dd&gt;multidimensiona data provider.&lt;/dd&gt;</span>","<span class=\"c\">*                   &lt;dt&gt;DMP&lt;/dt&gt;&lt;dd&gt;data mining provider.&lt;/dd&gt;</span>","<span class=\"c\">*               &lt;/dl&gt;</span>","<span class=\"c\">*               Note: multiple values are possible.</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Yes</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               No</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               AuthenticationMode</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               string</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Type of security offered by the provider</span>","<span class=\"c\">*               The following values are defined by the XML/A specification:</span>","<span class=\"c\">*               &lt;dl&gt;</span>","<span class=\"c\">*                   &lt;dt&gt;Unauthenticated&lt;/dt&gt;&lt;dd&gt;no user ID or password needs to be sent.&lt;/dd&gt;</span>","<span class=\"c\">*                   &lt;dt&gt;Authenticated&lt;/dt&gt;&lt;dd&gt;User ID and password must be included in the information required for the connection.&lt;/dd&gt;</span>","<span class=\"c\">*                   &lt;dt&gt;Integrated&lt;/dt&gt;&lt;dd&gt; the data source uses the underlying security to determine authorization&lt;/dd&gt;</span>","<span class=\"c\">*               &lt;/dl&gt;</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Yes</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               No</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   </span>","<span class=\"c\">*   @method discoverDataSources</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>    ","    discoverDataSources<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>DISCOVER_DATASOURCES","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using &lt;code&gt;&lt;a href=\"#property_DISCOVER_PROPERTIES\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;DISCOVER_PROPERTIES&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   This rowset provides information on the properties that are supported by the XML/A provider.</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               PropertyName</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               string</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               The name of the property</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Yes (array)</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               No</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               PropertyDescription</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               string</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Human readable description of the property</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               No</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Yes</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               PropertyType</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               string</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               The property's datatype (as an XML Schema data type)</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               No</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Yes</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               PropertyAccessType</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               string</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               How the property may be accessed. Values defined by the XML/A spec are:</span>","<span class=\"c\">*               &lt;ul&gt;</span>","<span class=\"c\">*                   &lt;li&gt;Read&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;Write&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;ReadWrite&lt;/li&gt;</span>","<span class=\"c\">*               &lt;/ul&gt;</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               No</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               No</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               IsRequired</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               boolean</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               &lt;code&gt;true&lt;/code&gt; if the property is required, &lt;code&gt;false&lt;/code&gt; if not.</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               No</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Yes</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Value</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               string</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               The property's current value.</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               No</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*               Yes</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   </span>","<span class=\"c\">*   @method discoverProperties</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>    ","    discoverProperties<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>DISCOVER_PROPERTIES","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using &lt;code&gt;&lt;a href=\"#property_DISCOVER_SCHEMA_ROWSETS\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;DISCOVER_SCHEMA_ROWSETS&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   This rowset lists all possible request types supported by this provider.</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;SchemaName&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The requestType. &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;Restrictions&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;array&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;A list of columns that may be used to filter the schema rowset.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;Description&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;A human readable description of the schema rowset that is returned when using this requestType&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @method discoverSchemaRowsets</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;DISCOVER_SCHEMA_ROWSETS&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;DISCOVER_DATASOURCES&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>    ","    discoverSchemaRowsets<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","           options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>DISCOVER_SCHEMA_ROWSETS","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using &lt;code&gt;&lt;a href=\"#property_DISCOVER_ENUMERATORS\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;DISCOVER_ENUMERATORS&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   This rowset lists the names, data types, and enumeration values of enumerators supported by the XMLA Provider for a specific data source.</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;EnumName&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the enumerator. &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes (array)&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;EnumDescription&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;A human readable description of the enumerator&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;EnumType&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The XML Schema data type of this enumerator&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;ElementName&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The name of the enumerator entry&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;ElementDescription&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;A human readable description of this enumerator entry&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;ElementValue&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The value of this enumerator entry&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @method discoverEnumerators</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;DISCOVER_ENUMERATORS&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;DISCOVER_ENUMERATORS&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>    ","    discoverEnumerators<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>DISCOVER_ENUMERATORS","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using &lt;code&gt;&lt;a href=\"#property_DISCOVER_KEYWORDS\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;DISCOVER_KEYWORDS&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   This rowset is a list of reserved words for this XML/A provider.</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;Keyword&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the enumerator. &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes (array)&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @method discoverKeywords</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;DISCOVER_KEYWORDS&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;DISCOVER_ENUMERATORS&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>    ","    discoverKeywords<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>DISCOVER_KEYWORDS","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using &lt;code&gt;&lt;a href=\"#property_DISCOVER_LITERALS\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;DISCOVER_LITERALS&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   This rowset is a list of reserved words for this XML/A provider.</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;LiteralName&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the literal. &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes (array)&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;LiteralValue&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The actual literal value. &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;LiteralInvalidChars&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Characters that may not appear in the literal &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;LiteralInvalidStartingChars&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Characters that may not appear as first character in the literal &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;LiteralMaxLength&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;maximum number of characters for this literal, or -1 in case there is no maximum, or the maximum is unknown&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @method discoverLiterals</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;DISCOVER_LITERALS&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;DISCOVER_LITERALS&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>    ","    discoverLiterals<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>DISCOVER_LITERALS","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span> ","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_DBSCHEMA_CATALOGS\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;DBSCHEMA_CATALOGS&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CATALOG_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the catalog&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DESCRIPTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Human readable description&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;ROLES&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;A comma-separatd list of roles available to the current user.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DATE_MODIFIED&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Date&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The date this catalog was modified&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   @method discoverDBCatalogs</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;DBSCHEMA_CATALOGS&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;DBSCHEMA_CATALOGS&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverDBCatalogs<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>DBSCHEMA_CATALOGS","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_DBSCHEMA_COLUMNS\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;DBSCHEMA_COLUMNS&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   Provides column information for all columns meeting the provided restriction criteria.</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;TABLE_CATALOG&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The name of the Database.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;TABLE_SCHEMA&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;TABLE_NAME&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;COLUMN_NAME&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The name of the attribute hierarchy or measure.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;COLUMN_GUID&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;COLUMN_PROPID&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;ORDINAL_POSITION&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The position of the column, beginning with 1.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;COLUMN_HAS_DEFAULT&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;COLUMN_DEFAULT&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;COLUMN_FLAGS&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;A DBCOLUMNFLAGS bitmask indicating column properties. See 'DBCOLUMNFLAGS Enumerated Type' in IColumnsInfo::GetColumnInfo&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;IS_NULLABLE&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Always returns false.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;DATA_TYPE&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The data type of the column. Returns a string for dimension columns and a variant for measures.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;TYPE_GUID</span>","<span class=\"c\">*\t\t\t&lt;td&gt;srring&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;CHARACTER_MAXIMUM_LENGTH&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The maximum possible length of a value within the column. This is retrieved from the DataSize property in the DataItem.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;CHARACTER_OCTET_LENGTH&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The maximum possible length of a value within the column, in bytes, for character or binary columns. A value of zero (0) indicates the column has no maximum length. NULL will be returned for columns that do not return binary or character data types.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;NUMERIC_PRECISION&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The maximum precision of the column for numeric data types other than DBTYPE_VARNUMERIC.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;NUMERIC_SCALE&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The number of digits to the right of the decimal point for DBTYPE_DECIMAL, DBTYPE_NUMERIC, DBTYPE_VARNUMERIC. Otherwise, this is NULL.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;DATETIME_PRECISION&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;CHARACTER_SET_CATALOG&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;CHARACTER_SET_SCHEMA&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;CHARACTER_SET_NAME&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;COLLATION_CATALOG&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;COLLATION_SCHEMA&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;COLLATION_NAME&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;DOMAIN_CATALOG&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;DOMAIN_SCHEMA&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;DOMAIN_NAME&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;DESCRIPTION&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;COLUMN_OLAP_TYPE&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The OLAP type of the object. MEASURE indicates the object is a measure. ATTRIBUTE indicates the object is a dimension attribute.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*\tThe rowset is sorted on TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME.</span>","<span class=\"c\">*   @method discoverDBColumns</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;DBSCHEMA_COLUMNS&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;DBSCHEMA_COLUMNS&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverDBColumns<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>DBSCHEMA_COLUMNS","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_DBSCHEMA_PROVIDER_TYPES\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;DBSCHEMA_PROVIDER_TYPES&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   ...todo...</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;TYPE_NAME&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The provider-specific data type name.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;DATA_TYPE&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The indicator of the data type.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;COLUMN_SIZE&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt; The length of a non-numeric column or parameter that refers to either the maximum or the length defined for this type by the provider. For character data, this is the maximum or defined length in characters. For DateTime data types, this is the length of the string representation (assuming the maximum allowed precision of the fractional seconds component). If the data type is numeric, this is the upper bound on the maximum precision of the data type. &lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;LITERAL_PREFIX&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The character or characters used to prefix a literal of this type in a text command.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;LITERAL_SUFFIX&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The character or characters used to suffix a literal of this type in a text command.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;CREATE_PARAMS</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The creation parameters specified by the consumer when creating a column of this data type. For example, the SQL data type, DECIMAL, needs a precision and a scale. In this case, the creation parameters might be the string \"precision,scale\". In a text command to create a DECIMAL column with a precision of 10 and a scale of 2, the value of the TYPE_NAME column might be DECIMAL() and the complete type specification would be DECIMAL(10,2). The creation parameters appear as a comma-separated list of values, in the order they are to be supplied and with no surrounding parentheses. If a creation parameter is length, maximum length, precision, scale, seed, or increment, use \"length\", \"max length\", \"precision\", \"scale\", \"seed\", and \"increment\", respectively. If the creation parameter is some other value, the provider determines what text is to be used to describe the creation parameter. If the data type requires creation parameters, \"()\" usually appears in the type name. This indicates the position at which to insert the creation parameters. If the type name does not include \"()\", the creation parameters are enclosed in parentheses and appended to the data type name. &lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;IS_NULLABLE&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;A Boolean that indicates whether the data type is nullable. VARIANT_TRUE indicates that the data type is nullable. VARIANT_FALSE indicates that the data type is not nullable. NULL indicates that it is not known whether the data type is nullable.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;CASE_SENSITIVE&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;A Boolean that indicates whether the data type is a characters type and case-sensitive. VARIANT_TRUE indicates that the data type is a character type and is case-sensitive. VARIANT_FALSE indicates that the data type is not a character type or is not case-sensitive.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;SEARCHABLE&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;An integer indicating how the data type can be used in searches if the provider supports ICommandText; otherwise, NULL. This column can have the following values: DB_UNSEARCHABLE indicates that the data type cannot be used in a WHERE clause. DB_LIKE_ONLY indicates that the data type can be used in a WHERE clause only with the LIKE predicate.DB_ALL_EXCEPT_LIKE indicates that the data type can be used in a WHERE clause with all comparison operators except LIKE. DB_SEARCHABLE indicates that the data type can be used in a WHERE clause with any comparison operator.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;UNSIGNED_ATTRIBUTE&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;A Boolean that indicates whether the data type is unsigned.   VARIANT_TRUE indicates that the data type is unsigned. VARIANT_FALSE indicates that the data type is signed.NULL indicates that this is not applicable to the data type.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;FIXED_PREC_SCALE&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;A Boolean that indicates whether the data type has a fixed precision and scale.  VARIANT_TRUE indicates that the data type has a fixed precision and scale. VARIANT_FALSE indicates that the data type does not have a fixed precision and scale.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;AUTO_UNIQUE_VALUE&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;A Boolean that indicates whether the data type is autoincrementing. VARIANT_TRUE indicates that values of this type can be autoincrementing. VARIANT_FALSE indicates that values of this type cannot be autoincrementing. If this value is VARIANT_TRUE, whether or not a column of this type is always autoincrementing depends on the provider's DBPROP_COL_AUTOINCREMENT column property. If the DBPROP_COL_AUTOINCREMENT property is read/write, whether or not a column of this type is autoincrementing depends on the setting of the DBPROP_COL_AUTOINCREMENT property. If DBPROP_COL_AUTOINCREMENT is a read-only property, either all or none of the columns of this type are autoincrementing. &lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;LOCAL_TYPE_NAME&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The localized version of TYPE_NAME. NULL is returned if a localized name is not supported by the data provider.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;MINIMUM_SCALE&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;If the type indicator is DBTYPE_VARNUMERIC, DBTYPE_DECIMAL, or DBTYPE_NUMERIC, the minimum number of digits allowed to the right of the decimal point. Otherwise, NULL.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;MAXIMUM_SCALE&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The maximum number of digits allowed to the right of the decimal point if the type indicator is DBTYPE_VARNUMERIC, DBTYPE_DECIMAL, or DBTYPE_NUMERIC; otherwise, NULL.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;GUID&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;(Intended for future use) The GUID of the type, if the type is described in a type library. Otherwise, NULL.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;TYPELIB</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;(Intended for future use) The type library containing the description of the type, if the type is described in a type library. Otherwise, NULL.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;VERSION&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;(Intended for future use) The version of the type definition. Providers might want to version type definitions. Different providers might use different versioning schemes, such as a timestamp or number (integer or float). NULL if not supported.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;IS_LONG&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;A Boolean that indicates whether the data type is a binary large object (BLOB) and has very long data. VARIANT_TRUE indicates that the data type is a BLOB that contains very long data; the definition of very long data is provider-specific. VARIANT_FALSE indicates that the data type is a BLOB that does not contain very long data or is not a BLOB. This value determines the setting of the DBCOLUMNFLAGS_ISLONG flag returned by GetColumnInfo in IColumnsInfo and GetParameterInfo in ICommandWithParameters.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;BEST_MATCH&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;A Boolean that indicates whether the data type is a best match. VARIANT_TRUE indicates that the data type is the best match between all data types in the data store and the OLE DB data type indicated by the value in the DATA_TYPE column. VARIANT_FALSE indicates that the data type is not the best match. For each set of rows in which the value of the DATA_TYPE column is the same, the BEST_MATCH column is set to VARIANT_TRUE in only one row.&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t\t&lt;tr&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;IS_FIXEDLENGTH&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;A Boolean that indicates whether the column is fixed in length. VARIANT_TRUE indicates that columns of this type created by the data definition language (DDL) will be of fixed length. VARIANT_FALSE indicates that columns of this type created by the DDL will be of variable length. If the field is NULL, it is not known whether the provider will map this field with a fixed-length or variable-length column.</span>","<span class=\"c\">*\t\t\t&lt;td&gt;false&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;true&lt;/td&gt;</span>","<span class=\"c\">*\t\t&lt;/tr&gt;</span>","<span class=\"c\">*\t&lt;/table&gt;</span>","<span class=\"c\">*   @method discoverDBProviderTypes</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;DBSCHEMA_PROVIDER_TYPES&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;DBSCHEMA_PROVIDER_TYPES&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverDBProviderTypes<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>DBSCHEMA_PROVIDER_TYPES","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_DBSCHEMA_SCHEMATA\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;DBSCHEMA_SCHEMATA&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   ...todo...</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   @method discoverDBSchemata</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;DBSCHEMA_SCHEMATA&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;DBSCHEMA_SCHEMATA&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverDBSchemata<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>DBSCHEMA_SCHEMATA","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_DBSCHEMA_TABLES\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;DBSCHEMA_TABLES&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   ...todo...</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   @method discoverDBTables</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;DBSCHEMA_TABLES&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;DBSCHEMA_TABLES&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverDBTables<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>DBSCHEMA_TABLES","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_DBSCHEMA_TABLES_INFO\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;DBSCHEMA_TABLES_INFO&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   ...todo...</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   @method discoverDBTablesInfo</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;DBSCHEMA_TABLES_INFO&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;DBSCHEMA_TABLES_INFO&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverDBTablesInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>DBSCHEMA_TABLES_INFO","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_MDSCHEMA_ACTIONS\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;MDSCHEMA_ACTIONS&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   ...todo...</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   @method discoverMDActions</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;MDSCHEMA_ACTIONS&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;MDSCHEMA_ACTIONS&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverMDActions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>MDSCHEMA_ACTIONS","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_MDSCHEMA_CUBES\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;MDSCHEMA_CUBES&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   ...todo...</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CATALOG_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the catalog&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;SCHEMA_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Not supported&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CUBE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CUBE_TYPE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Type of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CUBE_GUID&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Not supported&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CREATED_ON&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Date&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Not supported&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;LAST_SCHEMA_UPDATE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Date&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The time that the cube was last processed.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;SCHEMA_UPDATED_BY&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;LAST_DATA_UPDATE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Date&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The time that the cube was last processed.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DATA_UPDATED_BY&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DESCRIPTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;A Human-readable description of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;IS_DRILLTHROUGH_ENABLED&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;IS_LINKABLE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;IS_WRITE_ENABLED&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;IS_SQL_ENABLED&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CUBE_CAPTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Caption for this cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;BASE_CUBE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the source cube (if this cube is a perspective cube).&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;ANNOTATIONS&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Notes in xml format&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   @method discoverMDCubes</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;MDSCHEMA_CUBES&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;MDSCHEMA_CUBES&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverMDCubes<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>MDSCHEMA_CUBES","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_MDSCHEMA_DIMENSIONS\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   ...todo...</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CATALOG_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the catalog&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;SCHEMA_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Not supported&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CUBE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the dimension.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_UNIQE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Unique name for this dimension.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_GUID&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_CAPTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_ORDINAL&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_TYPE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;</span>","<span class=\"c\">*\t\t\t\t&lt;ul&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_UNKNOWN (0)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_TIME (1)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_MEASURE (2)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_OTHER (3)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_QUANTITATIVE (5)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_ACCOUNTS (6)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_CUSTOMERS (7)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_PRODUCTS (8)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_SCENARIO (9)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_UTILIY (10)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_CURRENCY (11)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_RATES (12)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_CHANNEL (13)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_PROMOTION (14)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_ORGANIZATION (15)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_BILL_OF_MATERIALS (16)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t\t&lt;li&gt;MD_DIMTYPE_GEOGRAPHY (17)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t&lt;/ul&gt;</span>","<span class=\"c\">*\t\t\t&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_CARDINALITY&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DEFAULT_HIERARCHY&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DESCRIPTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;A Human-readable description of the dimension.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;IS_VIRTUAL&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;IS_READWRITE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_UNIQUE_SETTINGS&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_MASTER_UNIQUE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;IS_VISIBLE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   @method discoverMDDimensions</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverMDDimensions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>MDSCHEMA_DIMENSIONS","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_MDSCHEMA_FUNCTIONS\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;MDSCHEMA_FUNCTIONS&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   ...todo...</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   @method discoverMDFunctions</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;MDSCHEMA_FUNCTIONS&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;MDSCHEMA_FUNCTIONS&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverMDFunctions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>MDSCHEMA_FUNCTIONS","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_MDSCHEMA_HIERARCHIES\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   ...todo...</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CATALOG_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the catalog&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;SCHEMA_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Not supported&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CUBE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_UNIQE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Unique name for this dimension.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;HIERARCHY_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the hierarchy.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;HIERARCHY_UNIQE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Unique name for this hierarchy.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;HIERARCHY_GUID&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;HIERARCHY_CAPTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_TYPE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;HIERARCHY_CARDINALITY&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DEFAULT_MEMBER&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;ALL_MEMBER&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DESCRIPTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;A Human-readable description of the dimension.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;STRUCTURE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;IS_VIRTUAL&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;IS_READWRITE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_UNIQUE_SETTINGS&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_MASTER_UNIQUE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_IS_VISIBLE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;HIERARCHY_ORDINAL&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_IS_SHARED&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;HIERARCHY_IS_VISIBLE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;HIERARCHY_ORIGIN&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;HIERARCHY_DISPLAY_FOLDER&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;INSTANCE_SELECTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   @method discoverMDHierarchies</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverMDHierarchies<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>MDSCHEMA_HIERARCHIES","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_MDSCHEMA_LEVELS\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;MDSCHEMA_LEVELS&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   ...todo...</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;CATALOG_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">The name of the catalog to which this level belongs. NULL if the provider does not support catalogs.</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;SCHEMA_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">The name of the schema to which this level belongs. NULL if the provider does not support schemas.</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;CUBE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">The name of the cube to which this level belongs.</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;DIMENSION_UNIQUE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">The unique name of the dimension to which this level belongs. For providers that generate unique names by qualification, each component of this name is delimited.</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;HIERARCHY_UNIQUE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">The unique name of the hierarchy. If the level belongs to more than one hierarchy, there is one row for each hierarchy to which it belongs. For providers that generate unique names by qualification, each component of this name is delimited.</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">The name of the level.</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_UNIQUE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">The properly escaped unique name of the level.</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_GUID&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">Not supported.</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_CAPTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">A label or caption associated with the hierarchy. Used primarily for display purposes. If a caption does not exist, LEVEL_NAME is returned.</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_NUMBER&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">The distance of the level from the root of the hierarchy. Root level is zero (0).</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_CARDINALITY&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">The number of members in the level.</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_TYPE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Type of the level: </span>","<span class=\"c\">*\t\t\t\t&lt;ul&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_GEO_CONTINENT (0x2001)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_GEO_REGION (0x2002)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_GEO_COUNTRY (0x2003)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_GEO_STATE_OR_PROVINCE (0x2004)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_GEO_COUNTY (0x2005)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_GEO_CITY (0x2006)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_GEO_POSTALCODE (0x2007)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_GEO_POINT (0x2008)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_ORG_UNIT (0x1011)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_BOM_RESOURCE (0x1012)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_QUANTITATIVE (0x1013)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_ACCOUNT (0x1014)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_CUSTOMER (0x1021)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_CUSTOMER_GROUP (0x1022)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_CUSTOMER_HOUSEHOLD (0x1023)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_PRODUCT (0x1031)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_PRODUCT_GROUP (0x1032)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_SCENARIO (0x1015)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_UTILITY (0x1016)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_PERSON (0x1041)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_COMPANY (0x1042)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_CURRENCY_SOURCE (0x1051)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_CURRENCY_DESTINATION (0x1052)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_CHANNEL (0x1061)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_REPRESENTATIVE (0x1062)&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;MDLEVEL_TYPE_PROMOTION (0x1071)&lt;/li&gt;</span>","<span class=\"c\">*\t\t\t\t&lt;/ul&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;DESCRIPTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;A human-readable description of the level. NULL if no description exists.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;CUSTOM_ROLLUP_SETTINGS&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;A bitmap that specifies the custom rollup options: MDLEVELS_CUSTOM_ROLLUP_EXPRESSION (0x01) indicates an expression exists for this level. (Deprecated) MDLEVELS_CUSTOM_ROLLUP_COLUMN (0x02) indicates that there is a custom rollup column for this level. MDLEVELS_SKIPPED_LEVELS (0x04) indicates that there is a skipped level associated with members of this level.MDLEVELS_CUSTOM_MEMBER_PROPERTIES (0x08) indicates that members of the level have custom member properties. MDLEVELS_UNARY_OPERATOR (0x10) indicates that members on the level have unary operators.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_UNIQUE_SETTINGS&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;A bitmap that specifies which columns contain unique values, if the level only has members with unique names or keys. The Msmd.h file defines the following bit value constants for this bitmap: MDDIMENSIONS_MEMBER_KEY_UNIQUE (1) MDDIMENSIONS_MEMBER_NAME_UNIQUE (2)The key is always unique in Microsoft SQL Server 2005 Analysis Services (SSAS). The name will be unique if the setting on the attribute is UniqueInDimension or UniqueInAttribute&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_IS_VISIBLE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;bool&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;A Boolean that indicates whether the level is visible. Always returns True. If the level is not visible, it will not be included in the schema rowset.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_ORDERING_PROPERTY&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The ID of the attribute that the level is sorted on.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_DBTYPE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The DBTYPE enumeration of the member key column that is used for the level attribute. Null if concatenated keys are used as the member key column.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_MASTER_UNIQUE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Always returns NULL.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_NAME_SQL_COLUMN_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The SQL representation of the level member names.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_KEY_SQL_COLUMN_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The SQL representation of the level member key values.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_UNIQUE_NAME_SQL_COLUMN_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The SQL representation of the member unique names.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_ATTRIBUTE_HIERARCHY_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The name of the attribute hierarchy providing the source of the level.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_KEY_CARDINALITY&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;The number of columns in the level key.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*       \t&lt;td&gt;LEVEL_ORIGIN&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*\t\t\t&lt;td&gt;A bit map that defines how the level was sourced:MD_ORIGIN_USER_DEFINED identifies levels in a user defined hierarchy.MD_ORIGIN_ATTRIBUTE identifies levels in an attribute hierarchy.MD_ORIGIN_KEY_ATTRIBUTE identifies levels in a key attribute hierarchy.MD_ORIGIN_INTERNAL identifies levels in attribute hierarchies that are not enabled.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   @method discoverMDLevels</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;MDSCHEMA_LEVELS&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;MDSCHEMA_LEVELS&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverMDLevels<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>MDSCHEMA_LEVELS","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_MDSCHEMA_MEASURES\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;MDSCHEMA_MEASURES&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   ...todo...</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CATALOG_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the catalog&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;SCHEMA_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Not supported&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CUBE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEASURE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEASURE_UNIQUE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEASURE_CAPTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEASURE_GUID&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEASURE_AGGREGATOR&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DATA_TYPE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;NUMERIC_PRECISION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;NUMERIC_SCALE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DESCRIPTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;EXPRESSION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEASURE_IS_VISIBLE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;boolean&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;LEVELS_LIST&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEASURE_NAME_SQL_COLUMN_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEASURE_UNQUALIFIED_CAPTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEASUREGROUP_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEASURE_DISPLAY_FOLDER&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DEFAULT_FORMAT_STRING&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Name of the cube.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   @method discoverMDMeasures</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;MDSCHEMA_MEASURES&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;MDSCHEMA_MEASURES&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverMDMeasures<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>MDSCHEMA_MEASURES","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_MDSCHEMA_MEMBERS\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;MDSCHEMA_MEMBERS&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CATALOG_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The name of the catalog&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;SCHEMA_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The name of the schema&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CUBE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The name of the cube&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DIMENSION_UNIQUE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The unique name of the dimension&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;HIERARCHY_UNIQUE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The unique name of the hierarchy&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;LEVEL_UNIQUE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The unique name of the level&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;LEVEL_NUMBERr&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Distance of this level to the root&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEMBER_ORDINAL&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Deprecated: always 0&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEMBER_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The name of this member&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEMBER_UNIQUE_NAME&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The unique name of this member&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEMBER_TYPE&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;An integer constant indicating the type of this member. Can take on one of the following values:</span>","<span class=\"c\">*               &lt;ul&gt;</span>","<span class=\"c\">*                   &lt;li&gt;&lt;a href=\"Xmla.Rowset.html#property_MDMEMBER_TYPE_REGULAR\"&gt;MDMEMBER_TYPE_REGULAR&lt;/a&gt;&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;&lt;a href=\"Xmla.Rowset.html#property_MDMEMBER_TYPE_ALL\"&gt;MDMEMBER_TYPE_ALL&lt;/a&gt;&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;&lt;a href=\"Xmla.Rowset.html#property_MDMEMBER_TYPE_MEASURE\"&gt;MDMEMBER_TYPE_MEASURE&lt;/a&gt;&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;&lt;a href=\"Xmla.Rowset.html#property_MDMEMBER_TYPE_FORMULA\"&gt;MDMEMBER_TYPE_FORMULA&lt;/a&gt;&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;&lt;a href=\"Xmla.Rowset.html#property_MDMEMBER_TYPE_UNKNOWN\"&gt;MDMEMBER_TYPE_UNKNOWN&lt;/a&gt;&lt;/li&gt;</span>","<span class=\"c\">*                   &lt;li&gt;&lt;a href=\"Xmla.Rowset.html#property_MDMEMBER_TYPE_FORMULA\"&gt;MDMEMBER_TYPE_FORMULA&lt;/a&gt;&lt;/li&gt;</span>","<span class=\"c\">*               &lt;/ul&gt;</span>","<span class=\"c\">*           &lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEMBER_GUID&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The guid of this member&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEMBER_CAPTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;A label or caption associated with the member. Used primarily for display purposes. If a caption does not exist, MEMBER_NAME is returned.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;CHILDREN_CARDINALITY&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The number of childrend for this member&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;PARENT_LEVEL&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;int&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The distance of the member's parent from the root level of the hierarchy. The root level is zero (0).&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;DESCRIPTION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;This column always returns a NULL value. This column exists for backwards compatibility&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;EXPRESSION&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The expression for calculations, if the member is of type MDMEMBER_TYPE_FORMULA.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;td&gt;MEMBER_KEY&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;string&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;The value of the member's key column. Returns NULL if the member has a composite key.&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;Yes&lt;/td&gt;</span>","<span class=\"c\">*           &lt;td&gt;No&lt;/td&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   @method discoverMDMembers</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;MDSCHEMA_MEMBERS&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;MDSCHEMA_MEMBERS&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverMDMembers<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>MDSCHEMA_MEMBERS","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_MDSCHEMA_PROPERTIES\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;MDSCHEMA_PROPERTIES&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   ...todo...</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   @method discoverMDProperties</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;MDSCHEMA_PROPERTIES&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;MDSCHEMA_PROPERTIES&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverMDProperties<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>MDSCHEMA_PROPERTIES","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Invokes the &lt;code&gt;&lt;a href=\"#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt; method using </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#property_MDSCHEMA_SETS\"&gt;&lt;/a&gt;&lt;/code&gt; as value for the &lt;code&gt;requestType&lt;/code&gt;, </span>","<span class=\"c\">*   and retrieves the &lt;code&gt;MDSCHEMA_SETS&lt;/code&gt; schema rowset. </span>","<span class=\"c\">*   ...todo...</span>","<span class=\"c\">*   The rowset has the following columns:</span>","<span class=\"c\">*   &lt;table border=\"1\" class=\"schema-rowset\"&gt;</span>","<span class=\"c\">*       &lt;tr&gt;</span>","<span class=\"c\">*           &lt;th&gt;Column Name&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Type&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Description&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Restriction&lt;/th&gt;</span>","<span class=\"c\">*           &lt;th&gt;Nullable&lt;/th&gt;</span>","<span class=\"c\">*       &lt;/tr&gt;</span>","<span class=\"c\">*   &lt;/table&gt;</span>","<span class=\"c\">*   @method discoverMDSets</span>","<span class=\"c\">*   @param {Object} options An object whose properties convey the options for the XML/A a &lt;code&gt;MDSCHEMA_SETS&lt;/code&gt; request. </span>","<span class=\"c\">*   @return {Xmla.Rowset} The result of the invoking the XML/A &lt;code&gt;Discover&lt;/code&gt; method. For synchronous requests, an instance of a &lt;code&gt;&lt;a href=\"Xmla.Rowset.html#Xmla.Rowset\"&gt;Xmla.Rowset&lt;/a&gt;&lt;/code&gt; that represents the &lt;code&gt;MDSCHEMA_SETS&lt;/code&gt; schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: &lt;code&gt;&lt;a href=\"#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;) and listen for the &lt;code&gt;success&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_SUCCESS\"&gt;EVENT_SUCCESS&lt;/a&gt;&lt;/code&gt;) or &lt;code&gt;discoversuccess&lt;/code&gt; (see: &lt;code&gt;&lt;a href=\"#property_EVENT_DISCOVER_SUCCESS\"&gt;EVENT_DISCOVER_SUCCESS&lt;/a&gt;&lt;/code&gt;) events. </span>","<span class=\"c\">*/</span>        ","    discoverMDSets<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> request <span class=\"k\">=</span> _applyProps<span class=\"k\">(</span>","            options<span class=\"k\">,</span>","            <span class=\"k\">{</span>","                requestType<span class=\"k\">:</span> Xmla<span class=\"k\">.</span>MDSCHEMA_SETS","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">true</span>    ","        <span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>discover<span class=\"k\">(</span>request<span class=\"k\">);</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">function</span> _getComplexType<span class=\"k\">(</span>node<span class=\"k\">,</span> name<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">var</span> types <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span>","        node<span class=\"k\">,</span> _xmlnsSchema<span class=\"k\">,</span> _xmlnsSchemaPrefix<span class=\"k\">,</span> <span class=\"s\">\"complexType\"</span>","    <span class=\"k\">),</span>  numTypes <span class=\"k\">=</span> types<span class=\"k\">.</span>length<span class=\"k\">,</span> type<span class=\"k\">,</span> i","    <span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>numTypes<span class=\"k\">;</span> i <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","        type <span class=\"k\">=</span> types<span class=\"k\">.</span>item<span class=\"k\">(</span>i<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>type<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"name\"</span><span class=\"k\">)===</span>name<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> type<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   &lt;p&gt;</span>","<span class=\"c\">*   This class implements an XML/A Rowset object.</span>","<span class=\"c\">*   &lt;/p&gt;</span>","<span class=\"c\">*   &lt;p&gt;</span>","<span class=\"c\">*   You do not need to instantiate objects of this class yourself. </span>","<span class=\"c\">*   Rather, the &lt;code&gt;&lt;a href=\"Xmla.html#class_Xmla\"&gt;Xmla&lt;/a&gt;&lt;/code&gt; class will instantiate this class to convey the result of any of the various &lt;code&gt;discoverXXX()&lt;/code&gt; methods</span>","<span class=\"c\">*   (see &lt;code&gt;&lt;a href=\"Xmla.html#method_discover\"&gt;discover()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*   In addition, this class is also used to instantiate a Resultset for the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a name=\"Xmla.html#method_execute\"&gt;execute()&lt;/code&gt; method in case the </span>","<span class=\"c\">*   &lt;code&gt;Format&lt;/code&gt; property is set to &lt;code&gt;Tabular&lt;/code&gt;</span>","<span class=\"c\">*   (see &lt;code&gt;&lt;a name=\"Xmla.html#property_OPTION_FORMAT\"&gt;OPTION_FORMAT&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a name=\"Xmla.html#property_OPTION_FORMAT_TABULAR\"&gt;OPTION_FORMAT_TABULAR&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*   The &lt;code&gt;&lt;a href=\"Xmla.html#method_request\"&gt;request()&lt;/a&gt;&lt;/code&gt; method itself will also return an instance of this class in case the &lt;code&gt;method&lt;/code&gt; is used to do a </span>","<span class=\"c\">*   &lt;code&gt;Discover&lt;/code&gt; request, or in case it is used to do a &lt;code&gt;Execute&lt;/code&gt; request and the &lt;code&gt;Format&lt;/code&gt; property is set to &lt;code&gt;Tabular&lt;/code&gt;.</span>","<span class=\"c\">*   &lt;/p&gt;</span>","<span class=\"c\">*   &lt;p&gt;</span>","<span class=\"c\">*   An instance of the &lt;code&gt;Xmla.Rowset&lt;/code&gt; class is returned immediately as return value from the &lt;code&gt;disoverXXX()&lt;/code&gt; or &lt;code&gt;execute()&lt;/code&gt; method when doing a synchronous request. </span>","<span class=\"c\">*   In addition, the rowset is available in the eventdata passed to any registered listeners</span>","<span class=\"c\">*   (see &lt;code&gt;&lt;a href=\"Xmla.html#method_addListener\"&gt;addListener()&lt;/a&gt;&lt;/code&gt;).</span>","<span class=\"c\">*   Note that for asynchronous requests, the only way to obtain the returned &lt;code&gt;Rowset&lt;/code&gt; instance is through the listeners. </span>","<span class=\"c\">*   &lt;/p&gt;</span>","<span class=\"c\">*   </span>","<span class=\"c\">*   @class Xmla.Rowset</span>","<span class=\"c\">*   @constructor</span>","<span class=\"c\">*   @param {DOMDocument} node The responseXML result returned by server in response to a &lt;code&gt;Discover&lt;/code&gt; request. </span>","<span class=\"c\">*   @param {string} requestTtype The requestType identifying the particular schema rowset to construct. This facilitates implementing field getters for a few complex types.</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">,</span> requestType<span class=\"k\">)</span><span class=\"k\">{</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>_node <span class=\"k\">=</span> node<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_type <span class=\"k\">=</span> requestType<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_initData<span class=\"k\">();</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_UNKNOWN</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;0&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_UNKNOWN <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_TIME</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;1&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_TIME <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_MEASURE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;2&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_MEASURE <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_OTHER</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;3&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_OTHER <span class=\"k\">=</span> <span class=\"s\">3</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_QUANTITATIVE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;5&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_QUANTITATIVE <span class=\"k\">=</span> <span class=\"s\">5</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_ACCOUNTS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;6&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_ACCOUNTS <span class=\"k\">=</span> <span class=\"s\">6</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_CUSTOMERS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;7&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_CUSTOMERS <span class=\"k\">=</span> <span class=\"s\">7</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_PRODUCTS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;8&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_PRODUCTS <span class=\"k\">=</span> <span class=\"s\">8</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_SCENARIO</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;9&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_SCENARIO <span class=\"k\">=</span> <span class=\"s\">9</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_UTILIY</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;10&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_UTILIY <span class=\"k\">=</span> <span class=\"s\">10</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_CURRENCY</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;11&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_CURRENCY <span class=\"k\">=</span> <span class=\"s\">11</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_RATES</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;12&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_RATES <span class=\"k\">=</span> <span class=\"s\">12</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_CHANNEL</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;13&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_CHANNEL <span class=\"k\">=</span> <span class=\"s\">13</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_PROMOTION</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;14&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_PROMOTION <span class=\"k\">=</span> <span class=\"s\">14</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_ORGANIZATION</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;15&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_ORGANIZATION <span class=\"k\">=</span> <span class=\"s\">15</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_BILL_OF_MATERIALS</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;16&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_BILL_OF_MATERIALS <span class=\"k\">=</span> <span class=\"s\">16</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;DIMENSION_TYPE&lt;/code&gt; column that appears in the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_DIMENSIONS&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDDimensions\"&gt;discoverMDDimensions()&lt;/a&gt;&lt;/code&gt;) and </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowsets.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MD_DIMTYPE_GEOGRAPHY</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;17&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_DIMTYPE_GEOGRAPHY <span class=\"k\">=</span> <span class=\"s\">17</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*\tA possible value for the &lt;code&gt;STRUCTURE&lt;/code&gt; column of the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowset.</span>","<span class=\"c\">*\t@property MD_STRUCTURE_FULLYBALANCED</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;0&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_STRUCTURE_FULLYBALANCED <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*\tA possible value for the &lt;code&gt;STRUCTURE&lt;/code&gt; column of the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowset.</span>","<span class=\"c\">*\t@property MD_STRUCTURE_RAGGEDBALANCED</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;1&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_STRUCTURE_RAGGEDBALANCED <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*\tA possible value for the &lt;code&gt;STRUCTURE&lt;/code&gt; column of the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowset.</span>","<span class=\"c\">*\t@property MD_STRUCTURE_UNBALANCED</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;2&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_STRUCTURE_UNBALANCED <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*\tA possible value for the &lt;code&gt;STRUCTURE&lt;/code&gt; column of the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowset.</span>","<span class=\"c\">*\t@property MD_STRUCTURE_NETWORK</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;3&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_STRUCTURE_NETWORK <span class=\"k\">=</span> <span class=\"s\">3</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*\tA  bitmap value for the &lt;code&gt;HIERARCHY_ORIGIN&lt;/code&gt; column of the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowset.</span>","<span class=\"c\">*\tIdentifies user defined hierarchies.</span>","<span class=\"c\">*\t@property MD_USER_DEFINED</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;1&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_USER_DEFINED <span class=\"k\">=</span> <span class=\"s\">1</span>","<span class=\"c\">/**</span>","<span class=\"c\">*\tA  bitmap value for the &lt;code&gt;HIERARCHY_ORIGIN&lt;/code&gt; column of the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowset.</span>","<span class=\"c\">*\tidentifies attribute hierarchies.</span>","<span class=\"c\">*\t@property MD_SYSTEM_ENABLED</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;2&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_SYSTEM_ENABLED <span class=\"k\">=</span> <span class=\"s\">2</span>","<span class=\"c\">/**</span>","<span class=\"c\">*\tA  bitmap value for the &lt;code&gt;HIERARCHY_ORIGIN&lt;/code&gt; column of the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_HIERARCHIES&lt;/code&gt; (See: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDHierarchies\"&gt;discoverMDHierarchies()&lt;/a&gt;&lt;/code&gt;)rowset.</span>","<span class=\"c\">*\tidentifies attributes with no attribute hierarchies.</span>","<span class=\"c\">*\t@property MD_SYSTEM_INTERNAL</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;4&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MD_SYSTEM_INTERNAL <span class=\"k\">=</span> <span class=\"s\">4</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;MEMBER_TYPE&lt;/code&gt; column of the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_MEMBERS&lt;/code&gt; rowset (see: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDMembers\"&gt;discoverMDMembers()&lt;/a&gt;&lt;/code&gt;),</span>","<span class=\"c\">*   indicating a regular member.</span>","<span class=\"c\">*\t@property MDMEMBER_TYPE_REGULAR</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;1&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MDMEMBER_TYPE_REGULAR <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;MEMBER_TYPE&lt;/code&gt; column of the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_MEMBERS&lt;/code&gt; rowset (see: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDMembers\"&gt;discoverMDMembers()&lt;/a&gt;&lt;/code&gt;),</span>","<span class=\"c\">*   indicating an all member.</span>","<span class=\"c\">*\t@property MDMEMBER_TYPE_ALL</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;2&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MDMEMBER_TYPE_ALL <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;MEMBER_TYPE&lt;/code&gt; column of the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_MEMBERS&lt;/code&gt; rowset (see: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDMembers\"&gt;discoverMDMembers()&lt;/a&gt;&lt;/code&gt;),</span>","<span class=\"c\">*   indicating a formula member.</span>","<span class=\"c\">*\t@property MDMEMBER_TYPE_FORMULA</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;3&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MDMEMBER_TYPE_FORMULA <span class=\"k\">=</span> <span class=\"s\">3</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;MEMBER_TYPE&lt;/code&gt; column of the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_MEMBERS&lt;/code&gt; rowset (see: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDMembers\"&gt;discoverMDMembers()&lt;/a&gt;&lt;/code&gt;),</span>","<span class=\"c\">*   indicating a measure member.</span>","<span class=\"c\">*\t@property MDMEMBER_TYPE_MEASURE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;4&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MDMEMBER_TYPE_MEASURE <span class=\"k\">=</span> <span class=\"s\">4</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A possible value for the &lt;code&gt;MEMBER_TYPE&lt;/code&gt; column of the </span>","<span class=\"c\">*   &lt;code&gt;MDSCHEMA_MEMBERS&lt;/code&gt; rowset (see: &lt;code&gt;&lt;a href=\"Xmla.html#method_discoverMDMembers\"&gt;discoverMDMembers()&lt;/a&gt;&lt;/code&gt;),</span>","<span class=\"c\">*   indicating a member of unknown type</span>","<span class=\"c\">*\t@property MDMEMBER_TYPE_UNKNOWN</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type int</span>","<span class=\"c\">*   @default &lt;code&gt;0&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>MDMEMBER_TYPE_UNKNOWN <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>DBSCHEMA_CATALOGS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>DBSCHEMA_COLUMNS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"TABLE_CATALOG\"</span><span class=\"k\">,</span> <span class=\"s\">\"TABLE_NAME\"</span><span class=\"k\">,</span> <span class=\"s\">\"COLUMN_NAME\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>DBSCHEMA_PROVIDER_TYPES<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"TYPE_NAME\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>DBSCHEMA_SCHEMATA<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">,</span> <span class=\"s\">\"SCHEMA_NAME\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>DBSCHEMA_TABLES<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"TABLE_CATALOG\"</span><span class=\"k\">,</span> <span class=\"s\">\"TABLE_NAME\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>DBSCHEMA_TABLES_INFO<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"TABLE_CATALOG\"</span><span class=\"k\">,</span> <span class=\"s\">\"TABLE_NAME\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>DISCOVER_DATASOURCES<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"DataSourceName\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>DISCOVER_ENUMERATORS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"EnumName\"</span><span class=\"k\">,</span> <span class=\"s\">\"ElementName\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>DISCOVER_KEYWORDS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"Keyword\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>DISCOVER_LITERALS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"LiteralName\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>DISCOVER_PROPERTIES<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"PropertyName\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>DISCOVER_SCHEMA_ROWSETS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"SchemaName\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>MDSCHEMA_ACTIONS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">,</span> <span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">,</span> <span class=\"s\">\"ACTION_NAME\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>MDSCHEMA_CUBES<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>MDSCHEMA_DIMENSIONS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"DIMENSION_UNIQUE_NAME\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>MDSCHEMA_FUNCTIONS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"FUNCTION_NAME\"</span><span class=\"k\">,</span> <span class=\"s\">\"PARAMETER_LIST\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>MDSCHEMA_HIERARCHIES<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"DIMENSION_UNIQUE_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"HIERARCHY_UNIQUE_NAME\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>MDSCHEMA_LEVELS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"DIMENSION_UNIQUE_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"HIERARCHY_UNIQUE_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"LEVEL_UNIQUE_NAME\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>MDSCHEMA_MEASURES<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"MEASURE_NAME\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>MDSCHEMA_MEMBERS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"DIMENSION_UNIQUE_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"HIERARCHY_UNIQUE_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"LEVEL_UNIQUE_NAME\"</span><span class=\"k\">,</span><span class=\"s\">\"MEMBER_UNIQUE_NAME\"</span><span class=\"k\">];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>MDSCHEMA_PROPERTIES<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>MDSCHEMA_SETS<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","","","<span class=\"k\">function</span> _boolConverter<span class=\"k\">(</span>val<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">return</span> val<span class=\"k\">===</span><span class=\"s\">\"true\"</span><span class=\"k\">?</span><span class=\"k\">true</span><span class=\"k\">:</span><span class=\"k\">false</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> _intConverter<span class=\"k\">(</span>val<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">return</span> parseInt<span class=\"k\">(</span>val<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> _floatConverter<span class=\"k\">(</span>val<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">return</span> parseFloat<span class=\"k\">(</span>val<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> _textConverter <span class=\"k\">(</span>val<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">return</span> val<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> _dateTimeConverter <span class=\"k\">(</span>val<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">return</span> Date<span class=\"k\">.</span>parse<span class=\"k\">(</span>val<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> _restrictionsConverter<span class=\"k\">(</span>val<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">return</span> val<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> _arrayConverter<span class=\"k\">(</span>nodes<span class=\"k\">,</span> valueConverter<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">var</span> arr <span class=\"k\">=</span> <span class=\"k\">[],</span>","        numNodes <span class=\"k\">=</span> nodes<span class=\"k\">.</span>length<span class=\"k\">,</span>","        node","    <span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>numNodes<span class=\"k\">;</span> i <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","        node <span class=\"k\">=</span> nodes<span class=\"k\">.</span>item<span class=\"k\">(</span>i<span class=\"k\">);</span>","        arr<span class=\"k\">.</span>push<span class=\"k\">(</span>valueConverter<span class=\"k\">(</span>_getElementText<span class=\"k\">(</span>node<span class=\"k\">)));</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> arr<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> _getValueConverter<span class=\"k\">(</span>type<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">var</span> valueConverter <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">switch</span> <span class=\"k\">(</span>type<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:boolean\"</span><span class=\"k\">:</span>","            valueConverter<span class=\"k\">.</span>func <span class=\"k\">=</span> _boolConverter<span class=\"k\">;</span>","            valueConverter<span class=\"k\">.</span>jsType <span class=\"k\">=</span> <span class=\"s\">\"boolean\"</span><span class=\"k\">;</span>","            <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:decimal\"</span><span class=\"k\">:</span> <span class=\"c\">//FIXME: not sure if you can use parseFloat for this.</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:double\"</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:float\"</span><span class=\"k\">:</span>","            valueConverter<span class=\"k\">.</span>func <span class=\"k\">=</span> _floatConverter<span class=\"k\">;</span>","            valueConverter<span class=\"k\">.</span>jsType <span class=\"k\">=</span> <span class=\"s\">\"number\"</span><span class=\"k\">;</span>","            <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:int\"</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:integer\"</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:nonPositiveInteger\"</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:negativeInteger\"</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:nonNegativeInteger\"</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:positiveInteger\"</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:short\"</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:byte\"</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:long\"</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:unsignedLong\"</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:unsignedInt\"</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:unsignedShort\"</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:unsignedByte\"</span><span class=\"k\">:</span>","            valueConverter<span class=\"k\">.</span>func <span class=\"k\">=</span> _intConverter<span class=\"k\">;</span>","            valueConverter<span class=\"k\">.</span>jsType <span class=\"k\">=</span> <span class=\"s\">\"number\"</span><span class=\"k\">;</span>","            <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:string\"</span><span class=\"k\">:</span>","            valueConverter<span class=\"k\">.</span>func <span class=\"k\">=</span> _textConverter<span class=\"k\">;</span>","            valueConverter<span class=\"k\">.</span>jsType <span class=\"k\">=</span> <span class=\"s\">\"string\"</span><span class=\"k\">;</span>","            <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">case</span> <span class=\"s\">\"xsd:dateTime\"</span><span class=\"k\">:</span>","            valueConverter<span class=\"k\">.</span>func <span class=\"k\">=</span> _dateTimeConverter<span class=\"k\">;</span>","            valueConverter<span class=\"k\">.</span>jsType <span class=\"k\">=</span> <span class=\"s\">\"object\"</span><span class=\"k\">;</span>","            <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">case</span> <span class=\"s\">\"Restrictions\"</span><span class=\"k\">:</span>","            valueConverter<span class=\"k\">.</span>func <span class=\"k\">=</span> _restrictionsConverter<span class=\"k\">;</span>","            valueConverter<span class=\"k\">.</span>jsType <span class=\"k\">=</span> <span class=\"s\">\"object\"</span><span class=\"k\">;</span>","            <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">default</span><span class=\"k\">:</span>","            valueConverter<span class=\"k\">.</span>func <span class=\"k\">=</span> _textConverter<span class=\"k\">;</span>","            valueConverter<span class=\"k\">.</span>jsType <span class=\"k\">=</span> <span class=\"s\">\"object\"</span><span class=\"k\">;</span>","            <span class=\"k\">break</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> valueConverter<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> _getElementValue<span class=\"k\">(</span>el<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> txt <span class=\"k\">=</span> _getElementText<span class=\"k\">(</span>el<span class=\"k\">),</span>","        type <span class=\"k\">=</span> el<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"type\"</span><span class=\"k\">)</span>","        converter","        <span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>type<span class=\"k\">)</span><span class=\"k\">{</span>","        converter <span class=\"k\">=</span> _getValueConverter<span class=\"k\">(</span>type<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>converter<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> converter<span class=\"k\">.</span>func<span class=\"k\">(</span>txt<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> txt<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> txt<span class=\"k\">;</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","","Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","\t_node<span class=\"k\">:</span>  <span class=\"k\">null</span><span class=\"k\">,</span>","    _type<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _row<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _rows<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    numRows<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    fieldOrder<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    fields<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _fieldCount<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _initData<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_rows <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_node<span class=\"k\">,</span> _xmlnsRowset<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"s\">\"row\"</span><span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>numRows <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_rows<span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>_rows<span class=\"k\">.</span>length <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>reset<span class=\"k\">();</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>fieldOrder <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>fields <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_fieldCount <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> rowSchema <span class=\"k\">=</span> _getComplexType<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_node<span class=\"k\">,</span> <span class=\"s\">\"row\"</span><span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>rowSchema<span class=\"k\">)</span><span class=\"k\">{</span>    ","            <span class=\"k\">var</span> seq <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span>rowSchema<span class=\"k\">,</span> _xmlnsSchema<span class=\"k\">,</span> _xmlnsSchemaPrefix<span class=\"k\">,</span> <span class=\"s\">\"sequence\"</span><span class=\"k\">).</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">),</span>","                seqChildren <span class=\"k\">=</span> seq<span class=\"k\">.</span>childNodes<span class=\"k\">,</span> numChildren <span class=\"k\">=</span> seqChildren<span class=\"k\">.</span>length<span class=\"k\">,</span> seqChild<span class=\"k\">,</span>","                fieldLabel<span class=\"k\">,</span> fieldName<span class=\"k\">,</span> minOccurs<span class=\"k\">,</span> maxOccurs<span class=\"k\">,</span> type<span class=\"k\">,</span> valueConverter<span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>numChildren<span class=\"k\">;</span> i <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                seqChild <span class=\"k\">=</span> seqChildren<span class=\"k\">.</span>item<span class=\"k\">(</span>i<span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>seqChild<span class=\"k\">.</span>nodeType <span class=\"k\">!==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>  <span class=\"c\">//element node</span>","                    <span class=\"k\">continue</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                fieldLabel <span class=\"k\">=</span> _getAttributeNS<span class=\"k\">(</span>seqChild<span class=\"k\">,</span> _xmlnsSQL<span class=\"k\">,</span> _xmlnsSQLPrefix<span class=\"k\">,</span> <span class=\"s\">\"field\"</span><span class=\"k\">);</span>","                fieldName <span class=\"k\">=</span> seqChild<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"name\"</span><span class=\"k\">);</span>","                type <span class=\"k\">=</span> seqChild<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"type\"</span><span class=\"k\">);</span>   <span class=\"c\">//get the type from the xsd</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>type<span class=\"k\">===</span><span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_row<span class=\"k\">)</span> <span class=\"k\">{</span>           <span class=\"c\">//bummer, not defined there try to get it from xsi:type in the row</span>","                    <span class=\"k\">var</span> val <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_row<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span>fieldName<span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>val<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                        type <span class=\"k\">=</span> _getAttributeNS<span class=\"k\">(</span>","                            val<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">),</span> ","                            _xmlnsSchemaInstance<span class=\"k\">,</span> ","                            _xmlnsSchemaInstancePrefix<span class=\"k\">,</span> ","                            <span class=\"s\">\"type\"</span>","                        <span class=\"k\">);</span>","                    <span class=\"k\">}</span>                    ","                <span class=\"k\">}</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span>type <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_type<span class=\"k\">==</span>Xmla<span class=\"k\">.</span>DISCOVER_SCHEMA_ROWSETS <span class=\"k\">&amp;&amp;</span> fieldName<span class=\"k\">===</span><span class=\"s\">\"Restrictions\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    type <span class=\"k\">=</span> <span class=\"s\">\"Restrictions\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                minOccurs <span class=\"k\">=</span> seqChild<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"minOccurs\"</span><span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>minOccurs<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t\t\t\tminOccurs<span class=\"k\">=</span>parseInt<span class=\"k\">(</span>minOccurs<span class=\"k\">,</span><span class=\"s\">10</span><span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span> ","\t\t\t\t<span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\tminOccurs <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","                maxOccurs <span class=\"k\">=</span> seqChild<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"maxOccurs\"</span><span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>maxOccurs<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>maxOccurs<span class=\"k\">===</span><span class=\"s\">\"unbounded\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tmaxOccurs <span class=\"k\">=</span> Infinity<span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t<span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\t\tminOccurs<span class=\"k\">=</span>parseInt<span class=\"k\">(</span>maxOccurs<span class=\"k\">,</span><span class=\"s\">10</span><span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">}</span> ","\t\t\t\t<span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\tmaxOccurs <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","                valueConverter <span class=\"k\">=</span> _getValueConverter<span class=\"k\">(</span>type<span class=\"k\">);</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>fields<span class=\"k\">[</span>fieldLabel<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","                    name<span class=\"k\">:</span> fieldName<span class=\"k\">,</span>","                    label<span class=\"k\">:</span> fieldLabel<span class=\"k\">,</span>","                    index<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>_fieldCount<span class=\"k\">++,</span>","                    type<span class=\"k\">:</span> type<span class=\"k\">,</span>","                    jsType<span class=\"k\">:</span> valueConverter<span class=\"k\">.</span>jsType<span class=\"k\">,</span>","                    minOccurs<span class=\"k\">:</span> minOccurs<span class=\"k\">,</span>","                    maxOccurs<span class=\"k\">:</span> maxOccurs<span class=\"k\">,</span>","                    getter<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>_createFieldGetter<span class=\"k\">(</span>fieldName<span class=\"k\">,</span> valueConverter<span class=\"k\">.</span>func<span class=\"k\">,</span> minOccurs<span class=\"k\">,</span> maxOccurs<span class=\"k\">)</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>            ","                <span class=\"k\">this</span><span class=\"k\">.</span>fieldOrder<span class=\"k\">.</span>push<span class=\"k\">(</span>fieldLabel<span class=\"k\">);</span>","            <span class=\"k\">}</span>        ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span>","            Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                <span class=\"s\">\"ERROR_PARSING_RESPONSE\"</span><span class=\"k\">,</span>","                <span class=\"s\">\"Xmla.Rowset\"</span><span class=\"k\">,</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_node","            <span class=\"k\">).</span>_throw<span class=\"k\">();</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    _createFieldGetter<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>fieldName<span class=\"k\">,</span> valueConverter<span class=\"k\">,</span> minOccurs<span class=\"k\">,</span> maxOccurs<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> getter<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>maxOccurs<span class=\"k\">===</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>minOccurs<span class=\"k\">===</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                getter <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> els <span class=\"k\">=</span> _getElementsByTagNameNS <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_row<span class=\"k\">,</span> _xmlnsRowset<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> fieldName<span class=\"k\">);</span>","                    <span class=\"k\">return</span> valueConverter<span class=\"k\">(</span>_getElementText<span class=\"k\">(</span>els<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)));</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> ","            <span class=\"k\">if</span><span class=\"k\">(</span>minOccurs<span class=\"k\">===</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                getter <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> els <span class=\"k\">=</span> _getElementsByTagNameNS <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_row<span class=\"k\">,</span> _xmlnsRowset<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> fieldName<span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>els<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> valueConverter<span class=\"k\">(</span>_getElementText<span class=\"k\">(</span>els<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)));</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> ","        <span class=\"k\">if</span><span class=\"k\">(</span>minOccurs<span class=\"k\">===</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            getter <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> els <span class=\"k\">=</span> _getElementsByTagNameNS <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_row<span class=\"k\">,</span> _xmlnsRowset<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> fieldName<span class=\"k\">);</span>","                <span class=\"k\">return</span> _arrayConverter<span class=\"k\">(</span>els<span class=\"k\">,</span> valueConverter<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> ","        <span class=\"k\">if</span><span class=\"k\">(</span>minOccurs<span class=\"k\">===</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            getter <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> els <span class=\"k\">=</span> _getElementsByTagNameNS <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_row<span class=\"k\">,</span> _xmlnsRowset<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> fieldName<span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>els<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> _arrayConverter<span class=\"k\">(</span>els<span class=\"k\">,</span> valueConverter<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> getter<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Indicates the type of rowset. In most cases, this will be identical to the &lt;code&gt;requestType&lt;/code&gt; value that was used in the </span>","<span class=\"c\">*   &lt;code&gt;Discover&lt;/code&gt; request </span>","<span class=\"c\">*   </span>","<span class=\"c\">*   @method getType</span>","<span class=\"c\">*   @return &lt;code&gt;int&lt;/code&gt; One of the &lt;code&gt;DISCOVER_XXX&lt;/code&gt;, &lt;code&gt;DBSCHEMA_XXX&lt;/code&gt; or &lt;code&gt;MDSCHEMA_XXX&lt;/code&gt; constants</span>","<span class=\"c\">*/</span>    ","    getType<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_type<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Retrieve an array of &lt;code&gt;fieldDef&lt;/code&gt; objects that describes the fields of the rows in this rowset.</span>","<span class=\"c\">*   The position of the &lt;code&gt;fieldDef&lt;/code&gt; objects in the array corresponds to the column order of the rowset.</span>","<span class=\"c\">*   For a description of the &lt;code&gt;fieldDef&lt;/code&gt; object, see the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_fieldDef\"&gt;fieldDef()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @method getFields</span>","<span class=\"c\">*   @return &lt;code&gt;fieldDef[]&lt;/code&gt; An (ordered) array of field definition objects. </span>","<span class=\"c\">*/</span>    ","    getFields<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> f <span class=\"k\">=</span> <span class=\"k\">[],</span> ","            fieldCount <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_fieldCount<span class=\"k\">,</span>","            fieldOrder <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fieldOrder","        <span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>fieldCount<span class=\"k\">;</span> i <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","            f<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fieldDef<span class=\"k\">(</span>fieldOrder<span class=\"k\">[</span>i<span class=\"k\">]);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> f<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Retrieve an array of field names.</span>","<span class=\"c\">*   The position of the names in the array corresponds to the column order of the rowset.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @method getFieldNames</span>","<span class=\"c\">*   @return &lt;code&gt;string[]&lt;/code&gt; An (ordered) array of field names. </span>","<span class=\"c\">*/</span>    ","    getFieldNames<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> fieldNames <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span> count <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_fieldCount<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>count<span class=\"k\">;</span> i <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","            fieldNames<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fieldOrder<span class=\"k\">[</span>i<span class=\"k\">];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> fieldNames<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Indicates wheter the rowset that can be traversed.</span>","<span class=\"c\">*   You can use this method together with the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_next\"&gt;next()&lt;/a&gt;&lt;/code&gt; method</span>","<span class=\"c\">*   to drive a &lt;code&gt;while&lt;/code&gt; loop to traverse all rows in the rowset, like so:</span>","<span class=\"c\">    &lt;pre&gt;</span>","<span class=\"c\">&amp;nbsp;while(rowset.hasMoreRows()){</span>","<span class=\"c\">&amp;nbsp;    ...process row...</span>","<span class=\"c\">&amp;nbsp;    rowsete.next();</span>","<span class=\"c\">&amp;nbsp;}</span>","<span class=\"c\">    &lt;/pre&gt;</span>","<span class=\"c\">*   @method hasMoreRows</span>","<span class=\"c\">*   @return {bool} true in case there are more rows to traverse. false if all rows have been traversed.</span>","<span class=\"c\">*/</span>    ","    hasMoreRows<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>numRows <span class=\"k\">&gt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowIndex<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Moves the internal row index to the next row.</span>","<span class=\"c\">*   You can use this method together with the </span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_next\"&gt;hasMoreRows()&lt;/a&gt;&lt;/code&gt; method</span>","<span class=\"c\">*   to drive a &lt;code&gt;while&lt;/code&gt; loop to traverse all rows in the rowset.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @method next</span>","<span class=\"c\">*/</span>    ","    next<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>rowIndex <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_row <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_rows<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>rowIndex<span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowIndex<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Gets the value of the internal row index.</span>","<span class=\"c\">*   Note that no check is performed to ensure this points to a valid row:</span>","<span class=\"c\">*   you should call this function only when it is safe to do so.</span>","<span class=\"c\">*   This can be determined by calling &lt;code&gt;&lt;a href=\"method_hasMoreRows\"&gt;hasMoreRows()&lt;/a&gt;&lt;/code&gt;.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @method curr</span>","<span class=\"c\">*   @return int</span>","<span class=\"c\">*/</span>    ","    curr<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>rowIndex<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Returns the number of rows in the set.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @method rowCount</span>","<span class=\"c\">*   @return int</span>","<span class=\"c\">*/</span>    ","    rowCount<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>numRows<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Resets the internal row pointer so the resultset can be traversed again.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @method reset</span>","<span class=\"c\">*/</span>    ","    reset<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>rowIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_row <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasMoreRows<span class=\"k\">())</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>_rows<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>rowIndex<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Retrieves a &lt;code&gt;fieldDef&lt;/code&gt; object by name.</span>","<span class=\"c\">*   A fieldDef describes a field (column). It has the following properties:</span>","<span class=\"c\">*   &lt;dl&gt;</span>","<span class=\"c\">*       &lt;dt&gt;label&lt;/dt&gt;&lt;dd&gt;string. This is the human readable name for this field. You should use this name for display purposes and for building restrictions. This is also the name used for matching againstt the &lt;code&gt;name&lt;/code&gt; argument passed to the &lt;code&gt;fieldDef()&lt;/code&gt; method.&lt;/dd&gt;</span>","<span class=\"c\">*       &lt;dt&gt;name&lt;/dt&gt;&lt;dd&gt;string. This is the (possibly escaped) name of the field as it appears in the XML document&lt;/dd&gt;</span>","<span class=\"c\">*       &lt;dt&gt;index&lt;/dt&gt;&lt;dd&gt;int. The ordinal position of this field. Fields are numbered starting from 0.&lt;/dd&gt;</span>","<span class=\"c\">*       &lt;dt&gt;type&lt;/dt&gt;&lt;dd&gt;string. The name of the XML data type for the values that appear in this column&lt;/dd&gt;</span>","<span class=\"c\">*       &lt;dt&gt;minOccurs&lt;/dt&gt;&lt;dd&gt;string. The minimal number of occurrences of a value. \"0\" means the field is optional.&lt;/dd&gt;</span>","<span class=\"c\">*       &lt;dt&gt;maxOccurs&lt;/dt&gt;&lt;dd&gt;string. If this is parseable as an integer, that integer specifies the number of times a value can appear in this column. \"unbounded\" means there is no declared limit.&lt;/dd&gt;</span>","<span class=\"c\">*       &lt;dt&gt;getter&lt;/dt&gt;&lt;dd&gt;function. This function is used to extract a value from the XML document for this field.&lt;/dd&gt;</span>","<span class=\"c\">*   &lt;/dl&gt;</span>","<span class=\"c\">*   @method fieldDef</span>","<span class=\"c\">*   @param {string} name The name of the field to retrieve.</span>","<span class=\"c\">*   @return {fieldDef} The &lt;code&gt;fieldDef&lt;/code&gt; object that matches the argument.</span>","<span class=\"c\">*/</span>    ","    fieldDef<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> field <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fields<span class=\"k\">[</span>name<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>field<span class=\"k\">)</span><span class=\"k\">{</span>","            Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                <span class=\"s\">\"INVALID_FIELD\"</span><span class=\"k\">,</span>","                <span class=\"s\">\"Xmla.Rowset.fieldDef\"</span><span class=\"k\">,</span>","                name","            <span class=\"k\">).</span>_throw<span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> field<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Retrieves the index of a field by name.</span>","<span class=\"c\">*   Field indexes start at 0.</span>","<span class=\"c\">*   @method fieldIndex</span>","<span class=\"c\">*   @param {string} name The name of the field for which you want to retrieve the index.</span>","<span class=\"c\">*   @return {int} The ordinal position (starting at 0) of the field that matches the argument.</span>","<span class=\"c\">*/</span>    ","    fieldIndex<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>fieldDef<span class=\"k\">(</span>name<span class=\"k\">).</span>index<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Retrieves the name of a field by field Index.</span>","<span class=\"c\">*   Field indexes start at 0.</span>","<span class=\"c\">*   @method fieldName</span>","<span class=\"c\">*   @param {string} name The name of the field for which you want to retrieve the index.</span>","<span class=\"c\">*   @return {int} The ordinal position (starting at 0) of the field that matches the argument.</span>","<span class=\"c\">*/</span>    ","    fieldName<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>index<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> fieldName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fieldOrder<span class=\"k\">[</span>index<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>fieldName<span class=\"k\">)</span><span class=\"k\">{</span>","            Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                <span class=\"s\">\"INVALID_FIELD\"</span><span class=\"k\">,</span>","                <span class=\"s\">\"Xmla.Rowset.fieldDef\"</span><span class=\"k\">,</span>","                index","            <span class=\"k\">).</span>_throw<span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> fieldName<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Retrieves a value from the current row for the field having the name specified by the argument.</span>","<span class=\"c\">*   @method fieldVal</span>","<span class=\"c\">*   @param {string} name The name of the field for which you want to retrieve the value.</span>","<span class=\"c\">*   @return {array|boolean|float|int|string} From the current row, the value of the field that matches the argument.</span>","<span class=\"c\">*/</span>    ","    fieldVal<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>_isNum<span class=\"k\">(</span>name<span class=\"k\">))</span><span class=\"k\">{</span>","            name <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fieldName<span class=\"k\">(</span>name<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>fieldDef<span class=\"k\">(</span>name<span class=\"k\">).</span>getter<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Returns the number of fields in this rowset.</span>","<span class=\"c\">*   @method fieldCount</span>","<span class=\"c\">*   @return {int} The number of fields in this rowset.</span>","<span class=\"c\">*/</span>    ","    fieldCount<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_fieldCount<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Releases references to the DomDocument passed to the Rowset constructor.</span>","<span class=\"c\">*   This should facilitate automatic garbage collection by the browser.</span>","<span class=\"c\">*   @method close</span>","<span class=\"c\">*/</span>    ","    close<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>_node <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_row <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_rows <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Reads the current row and returns the result as a new array. </span>","<span class=\"c\">*   This method does not advance the internal row pointer, and does not check if there is a valid row.</span>","<span class=\"c\">*   This method exists mainly as a convience in case you want to use a custom way to extract data from the resultset using the</span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_fetchCustom\"&gt;fetchCustom()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*   If you just want to obtain the results as arrays, see</span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_fetchAsArray\"&gt;fetchAsArray()&lt;/a&gt;&lt;/code&gt;</span>","<span class=\"c\">*   and</span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_fetchAllAsArray\"&gt;fetchAllAsArray()&lt;/a&gt;&lt;/code&gt;.</span>","<span class=\"c\">*   @method readAsArray</span>","<span class=\"c\">*   @return {array}</span>","<span class=\"c\">*/</span>    ","    readAsArray<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> fields <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fields<span class=\"k\">,</span> fieldName<span class=\"k\">,</span> fieldDef<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>array<span class=\"k\">)</span><span class=\"k\">{</span>","            array <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>fieldName <span class=\"k\">in</span> fields<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>fields<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>fieldName<span class=\"k\">))</span><span class=\"k\">{</span>","                fieldDef <span class=\"k\">=</span> fields<span class=\"k\">[</span>fieldName<span class=\"k\">];</span>","                array<span class=\"k\">[</span>fieldDef<span class=\"k\">.</span>index<span class=\"k\">]</span> <span class=\"k\">=</span> fieldDef<span class=\"k\">.</span>getter<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> array<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Fetch all values from all fields from the current row, and return it in an array.</span>","<span class=\"c\">*   The position of the values in the array corresponds to the column order of the rowset.</span>","<span class=\"c\">*   The internal row pointer is also increased so the next call will read the next row.</span>","<span class=\"c\">*   The method returns false when there are no more rows to traverse. </span>","<span class=\"c\">*   You can use this method to drive a loop to travere all rows in the Rowset: </span>","<span class=\"c\">&lt;pre&gt;</span>","<span class=\"c\">while (rowArray = rowset.fetchAsArray()){</span>","<span class=\"c\">&amp;nbsp;   ...process array...</span>","<span class=\"c\">}</span>","<span class=\"c\">&lt;/pre&gt;</span>","<span class=\"c\">*   @method fetchAsArray </span>","<span class=\"c\">*   @return {array}</span>","<span class=\"c\">*/</span>    ","    fetchAsArray<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasMoreRows<span class=\"k\">())</span> <span class=\"k\">{</span>","            array <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>readAsArray<span class=\"k\">(</span>array<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>next<span class=\"k\">();</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            array <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> array<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Reads the current row and returns the result as a new object. </span>","<span class=\"c\">*   This method does not advance the internal row pointer, and does not check if there is a valid row.</span>","<span class=\"c\">*   This method exists mainly as a convience in case you want to use a custom way to extract data from the resultset using the</span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_fetchCustom\"&gt;fetchCustom()&lt;/a&gt;&lt;/code&gt; method.</span>","<span class=\"c\">*   If you just want to obtain the results as objects, see</span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_fetchAsArray\"&gt;fetchAsObject()&lt;/a&gt;&lt;/code&gt;</span>","<span class=\"c\">*   and</span>","<span class=\"c\">*   &lt;code&gt;&lt;a href=\"#method_fetchAllAsArray\"&gt;fetchAllAsObject()&lt;/a&gt;&lt;/code&gt;.</span>","<span class=\"c\">*   @method readAsObject</span>","<span class=\"c\">*   @return {object}</span>","<span class=\"c\">*/</span>    ","    readAsObject<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>object<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> fields <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fields<span class=\"k\">,</span> fieldName<span class=\"k\">,</span> fieldDef<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>object<span class=\"k\">)</span><span class=\"k\">{</span>","            object <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>fieldName <span class=\"k\">in</span> fields<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>fields<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>fieldName<span class=\"k\">))</span> <span class=\"k\">{</span>","                fieldDef <span class=\"k\">=</span> fields<span class=\"k\">[</span>fieldName<span class=\"k\">];</span>","                object<span class=\"k\">[</span>fieldName<span class=\"k\">]</span> <span class=\"k\">=</span> fieldDef<span class=\"k\">.</span>getter<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> object<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Fetch all values from all fields from the current row, and return it in an Object literal.</span>","<span class=\"c\">*   The property names of the returned object correspond to the fieldName (actually the fieldLabel), and the field value is assigned to its respective property.</span>","<span class=\"c\">*   The internal row pointer is also increased so the next call will read the next row.</span>","<span class=\"c\">*   The method returns false when there are no more rows to traverse. </span>","<span class=\"c\">*   You can use this method to drive a loop to travere all rows in the Rowset: </span>","<span class=\"c\">&lt;pre&gt;</span>","<span class=\"c\">while (rowObject = rowset.fetchAsObject()){</span>","<span class=\"c\">&amp;nbsp;   ...process object...</span>","<span class=\"c\">}</span>","<span class=\"c\">&lt;/pre&gt;</span>","<span class=\"c\">*   @method fetchAsObject </span>","<span class=\"c\">*   @return {Object|boolean}</span>","<span class=\"c\">*/</span>    ","    fetchAsObject<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>object<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasMoreRows<span class=\"k\">())</span><span class=\"k\">{</span>","            object <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>readAsObject<span class=\"k\">(</span>object<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>next<span class=\"k\">();</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            object <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> object<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Fetch the values using a custom callback function.</span>","<span class=\"c\">*   If there are rows to fetch, the custom function is called in scope of the rowset, so you can use &lt;code&gt;this&lt;/code&gt; inside the custom function to refer to the rowset object.</span>","<span class=\"c\">*   Then, the internal row pointer is increased so the next call will read the next row.</span>","<span class=\"c\">*   The method returns whatever object or value is returned by the custom function, or false when there are no more rows to traverse. </span>","<span class=\"c\">*</span>","<span class=\"c\">*   @method fetchCustom </span>","<span class=\"c\">*   @param function  a custom function to extract and return the data from the current row of the xml result.</span>","<span class=\"c\">*   @return {mixed|boolean}</span>","<span class=\"c\">*/</span>    ","    fetchCustom<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>func<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> object<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasMoreRows<span class=\"k\">())</span><span class=\"k\">{</span>","            object <span class=\"k\">=</span> func<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>next<span class=\"k\">();</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            object <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> object<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Fetch all values from all fields from all rows, and return it as an array of arrays.</span>","<span class=\"c\">*   See &lt;code&gt;&lt;a href=\"#method_fetchAsArray\"&gt;fetchAsArray()&lt;/a&gt;&lt;/code&gt;.</span>","<span class=\"c\">*   @method fetchAllAsArray </span>","<span class=\"c\">*   @param rows {array[]} OPTIONAL. An array to append the rows to. If not specified, a new array is created</span>","<span class=\"c\">*   @return array[]</span>","<span class=\"c\">*/</span>    ","    fetchAllAsArray<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>rows<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> row<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>rows<span class=\"k\">)</span><span class=\"k\">{</span>","            rows <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">while</span><span class=\"k\">((</span>row <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fetchAsArray<span class=\"k\">()))</span><span class=\"k\">{</span>","            rows<span class=\"k\">.</span>push<span class=\"k\">(</span>row<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> rows<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Fetch all values from all fields from all rows, and return it as an array of objects.</span>","<span class=\"c\">*   See &lt;code&gt;&lt;a href=\"#method_fetchAsObject\"&gt;fetchAsObject()&lt;/a&gt;&lt;/code&gt;.</span>","<span class=\"c\">*   @method fetchAllAsObject </span>","<span class=\"c\">*   @param rows {array[]} OPTIONAL. An array to append the rows to. If not specified, a new array is created</span>","<span class=\"c\">*   @return array[]</span>","<span class=\"c\">*/</span>    ","    fetchAllAsObject<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>rows<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> row<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>rows<span class=\"k\">)</span><span class=\"k\">{</span>","            rows <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">while</span><span class=\"k\">((</span>row <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fetchAsObject<span class=\"k\">()))</span><span class=\"k\">{</span>","            rows<span class=\"k\">.</span>push<span class=\"k\">(</span>row<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> rows<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Fetch all rows using a custom function, and return the return values as an array.</span>","<span class=\"c\">*   See &lt;code&gt;&lt;a href=\"#method_fetchCustom\"&gt;fetchCustom()&lt;/a&gt;&lt;/code&gt;.</span>","<span class=\"c\">*   @method fetchAllCustom </span>","<span class=\"c\">*   @param rows {array[]} OPTIONAL. An array to append the rows to. If not specified, a new array is created</span>","<span class=\"c\">*   @return array[]</span>","<span class=\"c\">*/</span>    ","    fetchAllCustom<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>rows<span class=\"k\">,</span> func<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> row<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>rows<span class=\"k\">)</span><span class=\"k\">{</span>","            rows <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">while</span><span class=\"k\">((</span>row <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fetchCustom<span class=\"k\">(</span>func<span class=\"k\">)))</span><span class=\"k\">{</span>","            rows<span class=\"k\">.</span>push<span class=\"k\">(</span>row<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> rows<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Fetch all row as an object, store it in nested objects according to values in the column identified by the key argument (which acts as map).</span>","<span class=\"c\">*   @method mapAsObject</span>","<span class=\"c\">*   @returns {object} a tree using column values as branch names, and storing a row or an array of rows at the leaves.</span>","<span class=\"c\">*/</span>    ","    mapAsObject<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>map<span class=\"k\">,</span> key<span class=\"k\">,</span> row<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> k<span class=\"k\">,</span> v<span class=\"k\">,</span> p<span class=\"k\">,</span> i<span class=\"k\">,</span> len <span class=\"k\">=</span> key<span class=\"k\">.</span>length<span class=\"k\">,</span> last <span class=\"k\">=</span> len <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">,</span> m <span class=\"k\">=</span> map<span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","            k <span class=\"k\">=</span> key<span class=\"k\">[</span>i<span class=\"k\">];</span> <span class=\"c\">//get the keypart</span>","            v <span class=\"k\">=</span> row<span class=\"k\">[</span>k<span class=\"k\">];</span> <span class=\"c\">//get the value for the key part</span>","            p <span class=\"k\">=</span> m<span class=\"k\">[</span>v<span class=\"k\">];</span>   <span class=\"c\">//get the property from the map for this keypart.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>p<span class=\"k\">)</span> <span class=\"k\">{</span>   ","                <span class=\"k\">if</span> <span class=\"k\">(</span>i <span class=\"k\">===</span> last<span class=\"k\">)</span> <span class=\"k\">{</span>   <span class=\"c\">//last, we need to store the row now.</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>p <span class=\"k\">instanceof</span> Array<span class=\"k\">)</span> <span class=\"k\">{</span>   <span class=\"c\">//already entries here, append</span>","                        p<span class=\"k\">.</span>push<span class=\"k\">(</span>row<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">else</span> <span class=\"k\">{</span>          <span class=\"c\">//single row store here. since we need multiple rows, add an array</span>","                        m<span class=\"k\">[</span>v<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span>p<span class=\"k\">,</span> row<span class=\"k\">];</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">else</span> <span class=\"k\">{</span>","                    m <span class=\"k\">=</span> p<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span>                <span class=\"c\">//property didnt exist for this key yet.         </span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>i <span class=\"k\">===</span> last<span class=\"k\">)</span> <span class=\"k\">{</span>   <span class=\"c\">//last keypart: store the row here</span>","                m<span class=\"k\">[</span>v<span class=\"k\">]</span> <span class=\"k\">=</span> row<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>            <span class=\"c\">//more keyparts to go: add a new map for this keypart</span>","                m <span class=\"k\">=</span> m<span class=\"k\">[</span>v<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Fetch all rows as an object, store them as proprties in an object (which acts as map).</span>","<span class=\"c\">*   See &lt;code&gt;&lt;a href=\"#method_fetchArray\"&gt;fetchArray()&lt;/a&gt;&lt;/code&gt;.</span>","<span class=\"c\">*   @method mapAllAsObject </span>","<span class=\"c\">*   @param map {object} OPTIONAL. The object that is used as map. Rows are added as properties to this map. If not specified, a new object is created</span>","<span class=\"c\">*   @key {string|array} OPTIONAL. A column name or an array of column names that will be used to generate property names for the map. If not specified, the default key is used. If there is no default key, all column names will be used.</span>","<span class=\"c\">*   @return {object}</span>","<span class=\"c\">*/</span>    ","    mapAllAsObject<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">,</span> map<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>map<span class=\"k\">)</span><span class=\"k\">{</span>","            map <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>key<span class=\"k\">)</span> <span class=\"k\">{</span>","            key <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getKey<span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> row<span class=\"k\">;</span>","        <span class=\"k\">while</span> <span class=\"k\">(</span>row <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fetchAsObject<span class=\"k\">())</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>mapAsObject<span class=\"k\">(</span>map<span class=\"k\">,</span> key<span class=\"k\">,</span> row<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> map<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    getKey<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> key<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_type<span class=\"k\">)</span><span class=\"k\">{</span>","            key <span class=\"k\">=</span> Xmla<span class=\"k\">.</span>Rowset<span class=\"k\">.</span>KEYS<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_type<span class=\"k\">];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span>","            key <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFieldNames<span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> key<span class=\"k\">;</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Xmla<span class=\"k\">.</span>Dataset <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>doc<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_initDataset<span class=\"k\">(</span>doc<span class=\"k\">);</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>AXIS_COLUMNS <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>AXIS_ROWS <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>AXIS_PAGES <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>AXIS_SECTIONS <span class=\"k\">=</span> <span class=\"s\">3</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>AXIS_CHAPTERS <span class=\"k\">=</span> <span class=\"s\">4</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>AXIS_SLICER <span class=\"k\">=</span> <span class=\"s\">\"SlicerAxis\"</span><span class=\"k\">;</span>","","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","\t_root<span class=\"k\">:</span>  <span class=\"k\">null</span><span class=\"k\">,</span>","    _axes<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _axesOrder<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _numAxes<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _slicer<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _cellset<span class=\"k\">:</span><span class=\"k\">null</span><span class=\"k\">,</span>","    _initDataset<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>doc<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_initRoot<span class=\"k\">(</span>doc<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>cubeName <span class=\"k\">=</span> _getElementText<span class=\"k\">(</span>","            _getElementsByTagNameNS<span class=\"k\">(</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_root<span class=\"k\">,</span> _xmlnsDataset<span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> <span class=\"s\">\"CubeName\"</span>","            <span class=\"k\">).</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)</span>","        <span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_initAxes<span class=\"k\">();</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_initCells<span class=\"k\">();</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    _initRoot<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>doc<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> root <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span>doc<span class=\"k\">,</span> _xmlnsDataset<span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> <span class=\"s\">\"root\"</span><span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>root<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_root <span class=\"k\">=</span> root<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span>","            Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                <span class=\"s\">\"ERROR_PARSING_RESPONSE\"</span><span class=\"k\">,</span>","                <span class=\"s\">\"Xmla.Dataset._initData\"</span><span class=\"k\">,</span>","                doc","            <span class=\"k\">).</span>_throw<span class=\"k\">();</span>        ","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    _initAxes<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> i<span class=\"k\">,</span> axis<span class=\"k\">,</span> axisNode<span class=\"k\">,</span> axisName<span class=\"k\">,</span> axisNodes<span class=\"k\">,</span> numAxisNodes<span class=\"k\">,</span> tmpAxes <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>_axes <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_axesOrder <span class=\"k\">=</span> <span class=\"k\">[];</span>","","        <span class=\"c\">//collect the axisInfo nodes</span>","        axisNodes <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_root<span class=\"k\">,</span> _xmlnsDataset<span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> <span class=\"s\">\"AxisInfo\"</span><span class=\"k\">);</span>","        numAxisNodes <span class=\"k\">=</span> axisNodes<span class=\"k\">.</span>length<span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>numAxisNodes<span class=\"k\">;</span> i<span class=\"k\">++)</span><span class=\"k\">{</span>","            axisNode <span class=\"k\">=</span> axisNodes<span class=\"k\">.</span>item<span class=\"k\">(</span>i<span class=\"k\">);</span>","            axisName <span class=\"k\">=</span> axisNode<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"name\"</span><span class=\"k\">);</span>","            tmpAxes<span class=\"k\">[</span>axisName<span class=\"k\">]</span> <span class=\"k\">=</span> axisNode<span class=\"k\">;</span>            ","        <span class=\"k\">}</span>","        <span class=\"c\">//collect the axis nodes</span>","        axisNodes <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_root<span class=\"k\">,</span> _xmlnsDataset<span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> <span class=\"s\">\"Axis\"</span><span class=\"k\">);</span>","        numAxisNodes <span class=\"k\">=</span> axisNodes<span class=\"k\">.</span>length<span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>numAxisNodes<span class=\"k\">;</span> i<span class=\"k\">++)</span><span class=\"k\">{</span>","            axisNode <span class=\"k\">=</span> axisNodes<span class=\"k\">.</span>item<span class=\"k\">(</span>i<span class=\"k\">);</span>","            axisName <span class=\"k\">=</span> axisNode<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"name\"</span><span class=\"k\">);</span>","            axis <span class=\"k\">=</span> <span class=\"k\">new</span> Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>Axis<span class=\"k\">(</span>tmpAxes<span class=\"k\">[</span>axisName<span class=\"k\">],</span> axisNode<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>axisName<span class=\"k\">==</span>Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>AXIS_SLICER<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_slicer <span class=\"k\">=</span> axis<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_axes<span class=\"k\">[</span>axisName<span class=\"k\">]</span> <span class=\"k\">=</span> axis<span class=\"k\">;</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_axesOrder<span class=\"k\">.</span>push<span class=\"k\">(</span>axis<span class=\"k\">);</span>","            <span class=\"k\">}</span>            ","        <span class=\"k\">}</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_numAxes <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_axesOrder<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    _initCells<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_cellset <span class=\"k\">=</span> <span class=\"k\">new</span> Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>Cellset<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    getAxisCount<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_numAxes<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    getAxis<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>nameOrIndex<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> name<span class=\"k\">,</span> axis<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>isNum<span class=\"k\">(</span>nameOrIndex<span class=\"k\">))</span><span class=\"k\">{</span>","            name <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_axesOrder<span class=\"k\">[</span>nameOrIndex<span class=\"k\">];</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>_isUnd<span class=\"k\">(</span>nameOrIndex<span class=\"k\">))</span><span class=\"k\">{</span>","                Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                    <span class=\"s\">\"INVALID_AXIS\"</span><span class=\"k\">,</span>","                    <span class=\"s\">\"Xmla.Dataset.getAxis\"</span><span class=\"k\">,</span>","                    name","                <span class=\"k\">).</span>_throw<span class=\"k\">();</span>            ","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span>","            name <span class=\"k\">=</span> nameOrIndex<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>name<span class=\"k\">==</span>Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>AXIS_SLICER<span class=\"k\">)</span> <span class=\"k\">{</span>","            axis <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_slicer<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span>        ","            axis <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_axes<span class=\"k\">[</span>name<span class=\"k\">];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> axis<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    getColumns<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>getAxis<span class=\"k\">(</span>Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>AXIS_COLUMNS<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    getRows<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>getAxis<span class=\"k\">(</span>Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>AXIS_ROWS<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    getSlicer<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_slicer<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    close<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_slicer<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_slicer<span class=\"k\">.</span>close<span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>_namAxes<span class=\"k\">;</span> i<span class=\"k\">++)</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>getAxis<span class=\"k\">(</span>i<span class=\"k\">).</span>close<span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_cellset<span class=\"k\">.</span>close<span class=\"k\">();</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_root <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_axes <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_axesOrder <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_numAxes <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_slicer <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>Axis <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>_axisInfoNode<span class=\"k\">,</span> _axisNode<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_initAxis<span class=\"k\">(</span>_axisInfoNode<span class=\"k\">,</span> _axisNode<span class=\"k\">);</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>Axis<span class=\"k\">.</span>MEMBER_UNIQUE_NAME <span class=\"k\">=</span> <span class=\"s\">\"UName\"</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>Axis<span class=\"k\">.</span>MEMBER_CAPTION <span class=\"k\">=</span> <span class=\"s\">\"Caption\"</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>Axis<span class=\"k\">.</span>MEMBER_LEVEL_NAME <span class=\"k\">=</span> <span class=\"s\">\"LName\"</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>Axis<span class=\"k\">.</span>MEMBER_LEVEL_NUMBER <span class=\"k\">=</span> <span class=\"s\">\"LNum\"</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>Axis<span class=\"k\">.</span>MEMBER_DISPLAY_INFO <span class=\"k\">=</span> <span class=\"s\">\"DisplayInfo\"</span><span class=\"k\">;</span>","","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>Axis<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>    ","    _tuples<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _members<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    numTuples<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    numHierarchies<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _tupleIndex<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _hierarchyOrder<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _hierarchyDefs<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _initHierarchies<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>_axisInfoNode<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> hierarchyInfoNodes <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span>","                _axisInfoNode<span class=\"k\">,</span>","                _xmlnsDataset<span class=\"k\">,</span> ","                <span class=\"s\">\"\"</span><span class=\"k\">,</span> ","                <span class=\"s\">\"HierarchyInfo\"</span>","            <span class=\"k\">),</span>","            numHierarchies <span class=\"k\">=</span> hierarchyInfoNodes<span class=\"k\">.</span>length<span class=\"k\">,</span> ","            i<span class=\"k\">,</span> j<span class=\"k\">,</span> hierarchyInfoNode<span class=\"k\">,</span> hierarchyName<span class=\"k\">,</span> hierarchyDef<span class=\"k\">,</span> ","            properties<span class=\"k\">,</span> numPropertyNodes<span class=\"k\">,</span> propertyNodes<span class=\"k\">,</span> propertyNode","        <span class=\"k\">;</span>        ","        <span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyDefs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyOrder <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>numHierarchies <span class=\"k\">=</span> numHierarchies<span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>numHierarchies<span class=\"k\">;</span> i<span class=\"k\">++)</span><span class=\"k\">{</span>","            hierarchyInfoNode <span class=\"k\">=</span> hierarchyInfoNodes<span class=\"k\">.</span>item<span class=\"k\">(</span>i<span class=\"k\">);</span>","            hierarchyName <span class=\"k\">=</span> hierarchyInfoNode<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"name\"</span><span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyOrder<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> hierarchyName<span class=\"k\">;</span>","            properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            propertyNodes <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span>","                _axisInfoNode<span class=\"k\">,</span>","                _xmlnsDataset<span class=\"k\">,</span> ","                <span class=\"s\">\"\"</span><span class=\"k\">,</span> ","                <span class=\"s\">\"*\"</span>","            <span class=\"k\">);</span>","            numPropertyNodes <span class=\"k\">=</span> propertyNodes<span class=\"k\">.</span>length<span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span>j<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> j<span class=\"k\">&lt;</span>numPropertyNodes<span class=\"k\">;</span> j<span class=\"k\">++)</span><span class=\"k\">{</span>","                propertyNode <span class=\"k\">=</span> propertyNodes<span class=\"k\">.</span>item<span class=\"k\">(</span>j<span class=\"k\">);</span>","                properties<span class=\"k\">[</span>propertyNode<span class=\"k\">.</span>tagName<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            hierarchyDef <span class=\"k\">=</span> <span class=\"k\">{</span>","                index<span class=\"k\">:</span> i<span class=\"k\">,</span>","                name<span class=\"k\">:</span> hierarchyName<span class=\"k\">,</span>","                properties<span class=\"k\">:</span> properties","            <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyDefs<span class=\"k\">[</span>hierarchyName<span class=\"k\">]</span> <span class=\"k\">=</span> hierarchyDef<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","    <span class=\"k\">}</span><span class=\"k\">,</span>","    _initAxis<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>_axisInfoNode<span class=\"k\">,</span> _axisNode<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>name <span class=\"k\">=</span> _axisNode<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"name\"</span><span class=\"k\">);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>_initHierarchies<span class=\"k\">(</span>_axisInfoNode<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_tuples <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span>_axisNode<span class=\"k\">,</span> _xmlnsDataset<span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> <span class=\"s\">\"Tuple\"</span><span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>numTuples <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tuples<span class=\"k\">.</span>length<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>reset<span class=\"k\">();</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    _getMembers<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>tupleIndex <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>numTuples<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> _getElementsByTagNameNS<span class=\"k\">(</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_tuples<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>tupleIndex<span class=\"k\">),</span> ","                _xmlnsDataset<span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> <span class=\"s\">\"Member\"</span>","            <span class=\"k\">);</span>","        <span class=\"k\">}</span> ","        <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    reset<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>tupleIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_members <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasMoreTuples<span class=\"k\">())</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getMembers<span class=\"k\">()</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    hasMoreTuples<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>numTuples <span class=\"k\">&gt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>tupleIndex<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    next<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>tupleIndex <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_members <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getMembers<span class=\"k\">();</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>tupleIndex<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    tupleCount<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>numTuples<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    getHierarchyNames<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> hierarchyNames <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span> count <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>numHierarchies<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>count<span class=\"k\">;</span> i <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","            hierarchyNames<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyOrder<span class=\"k\">[</span>i<span class=\"k\">];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> hierarchyNames<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    hierarchyCount<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>numHierarchies<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    hierarchyIndex<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>hierarchyName<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_hierarchiesNames<span class=\"k\">[</span>hierarchyName<span class=\"k\">];</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    hierarchyName<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>index<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyOrder<span class=\"k\">[</span>index<span class=\"k\">];</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    hierarchyDef<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> hierarchyDef <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyDefs<span class=\"k\">[</span>name<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>hierarchyDef<span class=\"k\">)</span><span class=\"k\">{</span>","            Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                <span class=\"s\">\"INVALID_HIERARCHY\"</span><span class=\"k\">,</span>","                <span class=\"s\">\"Xmla.Dataset.Axis.hierarchyDef\"</span><span class=\"k\">,</span>","                name","            <span class=\"k\">).</span>_throw<span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> hierarchyDef<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    member<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>indexOrHierarchy<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> index<span class=\"k\">,</span> hierarchyName<span class=\"k\">,</span> hierarchyDef<span class=\"k\">,</span> properties<span class=\"k\">,</span> property<span class=\"k\">,</span> memberNode<span class=\"k\">,</span> member <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">switch</span><span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>indexOrHierarchy<span class=\"k\">))</span><span class=\"k\">{</span>","            <span class=\"k\">case</span> <span class=\"s\">\"string\"</span><span class=\"k\">:</span>","                index <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>hierarchyIndex<span class=\"k\">(</span>indexOrHierarchy<span class=\"k\">);</span>","                hierarchyName <span class=\"k\">=</span> indexOrHierarchy<span class=\"k\">;</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">\"number\"</span><span class=\"k\">:</span>","                hierarchyName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>hierarchyName<span class=\"k\">(</span>indexOrHierarchy<span class=\"k\">);</span>","                index <span class=\"k\">=</span> indexOrHierarchy<span class=\"k\">;</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        hierarchyDef <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>hierarchyDef<span class=\"k\">(</span>hierarchyName<span class=\"k\">);</span>","        properties <span class=\"k\">=</span> hierarchyDef<span class=\"k\">.</span>properties<span class=\"k\">;</span>","        memberNode <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_members<span class=\"k\">.</span>item<span class=\"k\">(</span>index<span class=\"k\">);</span>","        member<span class=\"k\">.</span>hierarchy <span class=\"k\">=</span> hierarchyName<span class=\"k\">;</span> ","        member<span class=\"k\">.</span>index <span class=\"k\">=</span> index<span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>property <span class=\"k\">in</span> properties<span class=\"k\">)</span><span class=\"k\">{</span>","            el <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span>memberNode<span class=\"k\">,</span> _xmlnsDataset<span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> property<span class=\"k\">);</span>","            <span class=\"k\">switch</span> <span class=\"k\">(</span>el<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">case</span> <span class=\"s\">0</span><span class=\"k\">:</span> <span class=\"c\">//no element found for property, use the default</span>","                    member<span class=\"k\">[</span>property<span class=\"k\">]</span> <span class=\"k\">=</span> properties<span class=\"k\">[</span>property<span class=\"k\">]</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">case</span> <span class=\"s\">1</span><span class=\"k\">:</span> <span class=\"c\">//this is expected, single element for property, get value</span>","                    member<span class=\"k\">[</span>property<span class=\"k\">]</span> <span class=\"k\">=</span> _getElementText<span class=\"k\">(</span>el<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">));</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">default</span><span class=\"k\">:</span>","                    Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                        <span class=\"s\">\"UNEXPECTED_ERROR_READING_MEMBER\"</span><span class=\"k\">,</span>","                        <span class=\"s\">\"Xmla.Dataset.Axis.member\"</span><span class=\"k\">,</span>","                        property","                    <span class=\"k\">).</span>_throw<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> member<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    readAsArray<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>array<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>array<span class=\"k\">)</span><span class=\"k\">{</span>","            array <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>numHierarchies<span class=\"k\">;</span> i<span class=\"k\">++)</span><span class=\"k\">{</span>","            array<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>member<span class=\"k\">(</span>i<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> array<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    readAsObject<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>object<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>object<span class=\"k\">)</span><span class=\"k\">{</span>","            object <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>numHierarchies<span class=\"k\">;</span> i<span class=\"k\">++)</span><span class=\"k\">{</span>","            object<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyOrder<span class=\"k\">[</span>i<span class=\"k\">]]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>member<span class=\"k\">(</span>i<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> object<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    fetchAsArray<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> array<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasMoreTuples<span class=\"k\">())</span> <span class=\"k\">{</span>","            array <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>readAsArray<span class=\"k\">();</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>next<span class=\"k\">();</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            array <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> array<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    fetchAsObject<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> object<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasMoreTuples<span class=\"k\">())</span><span class=\"k\">{</span>","            object <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>readAsObject<span class=\"k\">();</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>next<span class=\"k\">();</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            object <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> object<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    fetchAllAsArray<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>rows<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> row<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>rows<span class=\"k\">)</span><span class=\"k\">{</span>","            rows <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">while</span><span class=\"k\">((</span>row <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fetchAsArray<span class=\"k\">()))</span><span class=\"k\">{</span>","            rows<span class=\"k\">.</span>push<span class=\"k\">(</span>row<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> rows<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    fetchAllAsObject<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>rows<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> row<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>rows<span class=\"k\">)</span><span class=\"k\">{</span>","            rows <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">while</span><span class=\"k\">((</span>row <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fetchAsObject<span class=\"k\">()))</span><span class=\"k\">{</span>","            rows<span class=\"k\">.</span>push<span class=\"k\">(</span>row<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> rows<span class=\"k\">;</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>Cellset <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>dataset<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_dataset <span class=\"k\">=</span> dataset<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_initCellset<span class=\"k\">();</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","Xmla<span class=\"k\">.</span>Dataset<span class=\"k\">.</span>Cellset<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","    _dataset<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _cellNodes<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _cellCount<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _cellNode<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _cellDefs<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _idx<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _ord<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _cellOrd<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _initCellset<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> root <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataset<span class=\"k\">.</span>_root<span class=\"k\">,</span>","            cellSchema<span class=\"k\">,</span> cellSchemaElements<span class=\"k\">,</span> numCellSchemaElements<span class=\"k\">,</span> cellSchemaElement<span class=\"k\">,</span> ","            cellInfoNodes<span class=\"k\">,</span> cellInfoNode<span class=\"k\">,</span> cellNodes<span class=\"k\">,</span> type<span class=\"k\">,</span> valueConverter<span class=\"k\">,</span> cellDef<span class=\"k\">,</span>","            propertyNodes<span class=\"k\">,</span> propertyNode<span class=\"k\">,</span> propertyNodeTagName<span class=\"k\">,</span> numPropertyNodes<span class=\"k\">,</span> i<span class=\"k\">,</span> j","        <span class=\"k\">;</span>","        cellSchema <span class=\"k\">=</span> _getComplexType<span class=\"k\">(</span>root<span class=\"k\">,</span> <span class=\"s\">\"CellData\"</span><span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>cellSchema<span class=\"k\">)</span><span class=\"k\">{</span>","            Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                <span class=\"s\">\"ERROR_PARSING_RESPONSE\"</span><span class=\"k\">,</span>","                <span class=\"s\">\"Xmla.Rowset\"</span><span class=\"k\">,</span>","                root","            <span class=\"k\">).</span>_throw<span class=\"k\">();</span>","        <span class=\"k\">}</span>        ","        cellSchemaElements <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span>","            cellSchema<span class=\"k\">,</span> _xmlnsSchema<span class=\"k\">,</span> _xmlnsSchemaPrefix<span class=\"k\">,</span> <span class=\"s\">\"element\"</span>","        <span class=\"k\">);</span>","        numCellSchemaElements <span class=\"k\">=</span> cellSchemaElements<span class=\"k\">.</span>length<span class=\"k\">;</span>","        cellInfoNodes <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span>","            root<span class=\"k\">,</span> _xmlnsDataset<span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> <span class=\"s\">\"CellInfo\"</span>","        <span class=\"k\">);</span> ","        <span class=\"k\">if</span> <span class=\"k\">(!</span>cellInfoNodes <span class=\"k\">||</span> cellInfoNodes<span class=\"k\">.</span>length<span class=\"k\">==</span><span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","            Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError<span class=\"k\">(</span>","                <span class=\"s\">\"ERROR_PARSING_RESPONSE\"</span><span class=\"k\">,</span>","                <span class=\"s\">\"Xmla.Rowset\"</span><span class=\"k\">,</span>","                root","            <span class=\"k\">).</span>_throw<span class=\"k\">();</span>","        <span class=\"k\">}</span>","        cellInfoNode <span class=\"k\">=</span> cellInfoNodes<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">);</span>","        propertyNodes <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span>","            cellInfoNode<span class=\"k\">,</span> _xmlnsDataset<span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> <span class=\"s\">\"*\"</span>","        <span class=\"k\">);</span>        ","        <span class=\"k\">this</span><span class=\"k\">.</span>_cellDefs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"c\">//examine cell property info so we can parse them</span>","        numPropertyNodes <span class=\"k\">=</span> propertyNodes<span class=\"k\">.</span>length<span class=\"k\">;</span>","        <span class=\"k\">for</span><span class=\"k\">(</span>i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>numPropertyNodes<span class=\"k\">;</span> i<span class=\"k\">+=</span><span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","            propertyNode <span class=\"k\">=</span> propertyNodes<span class=\"k\">.</span>item<span class=\"k\">(</span>i<span class=\"k\">);</span>","            propertyNodeTagName <span class=\"k\">=</span> propertyNode<span class=\"k\">.</span>tagName<span class=\"k\">;</span>","            <span class=\"c\">//find the xsd:element node that describes this property</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> j<span class=\"k\">&lt;</span>numCellSchemaElements<span class=\"k\">;</span> j<span class=\"k\">++)</span><span class=\"k\">{</span>","                cellSchemaElement <span class=\"k\">=</span> cellSchemaElements<span class=\"k\">.</span>item<span class=\"k\">(</span>j<span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>cellSchemaElement<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"name\"</span><span class=\"k\">)!==</span>propertyNodeTagName<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">continue</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                cellDef <span class=\"k\">=</span> <span class=\"k\">{</span>","                    name<span class=\"k\">:</span> propertyNodeTagName","                <span class=\"k\">}</span><span class=\"k\">;</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_cellDefs<span class=\"k\">[</span>propertyNodeTagName<span class=\"k\">]</span> <span class=\"k\">=</span> cellDef<span class=\"k\">;</span>","                type <span class=\"k\">=</span> cellSchemaElement<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"type\"</span><span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>type<span class=\"k\">)</span><span class=\"k\">{</span>","                    cellDef<span class=\"k\">.</span>type <span class=\"k\">=</span> type<span class=\"k\">;</span>","                    valueConverter <span class=\"k\">=</span> _getValueConverter<span class=\"k\">(</span>type<span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>valueConverter<span class=\"k\">)</span><span class=\"k\">{</span>","                        cellDef<span class=\"k\">.</span>jsType <span class=\"k\">=</span> valueConverter<span class=\"k\">.</span>jsType<span class=\"k\">;</span>","                        cellDef<span class=\"k\">.</span>converter <span class=\"k\">=</span> valueConverter<span class=\"k\">.</span>func<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>            ","        <span class=\"k\">}</span>        ","        <span class=\"k\">this</span><span class=\"k\">.</span>_cellNodes <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span>","            root<span class=\"k\">,</span> _xmlnsDataset<span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> <span class=\"s\">\"Cell\"</span>","        <span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_cellCount <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_cellNodes<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    _getCellNode<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_cellNode <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_cellNodes<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_idx<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_cellOrd <span class=\"k\">=</span> parseInt<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_cellNode<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"CellOrdinal\"</span><span class=\"k\">),</span> <span class=\"s\">10</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    reset<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_idx <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_getCellNode<span class=\"k\">();</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_ord <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    hasMoreCells<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_idx <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_cellCount<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    next<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>     ","        <span class=\"k\">this</span><span class=\"k\">.</span>_idx <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_cellOrd <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">.</span>_ord","        <span class=\"k\">&amp;&amp;</span>  <span class=\"k\">this</span><span class=\"k\">.</span>hasMoreCells<span class=\"k\">()</span>","        <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_getCellNode<span class=\"k\">();</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    curr<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_idx<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    cellValue<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> _getElementValue<span class=\"k\">(</span>","            _getElementsByTagNameNS<span class=\"k\">(</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_cellNode<span class=\"k\">,</span> _xmlnsDataset<span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> <span class=\"s\">\"Value\"</span>","            <span class=\"k\">).</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)</span>","        <span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    readAsObject<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> cell<span class=\"k\">,</span> cellProp<span class=\"k\">,</span> cellDef<span class=\"k\">,</span> converter<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_cellOrd <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">.</span>_ord<span class=\"k\">)</span><span class=\"k\">{</span>","            cell <span class=\"k\">=</span> <span class=\"k\">{</span>","                ordinal<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>_ord","            <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> p <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>_cellDefs<span class=\"k\">)</span><span class=\"k\">{</span>","                cellDef <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_cellDefs<span class=\"k\">[</span>p<span class=\"k\">];</span>","                cellProp <span class=\"k\">=</span> _getElementsByTagNameNS<span class=\"k\">(</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_cellNode<span class=\"k\">,</span> _xmlnsDataset<span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> p","                <span class=\"k\">).</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>cellDef<span class=\"k\">.</span>type<span class=\"k\">)</span><span class=\"k\">{</span>","                    converter <span class=\"k\">=</span> cellDef<span class=\"k\">.</span>converter<span class=\"k\">;</span>","                    cell<span class=\"k\">[</span>p<span class=\"k\">]</span> <span class=\"k\">=</span> converter<span class=\"k\">(</span>_getElementText<span class=\"k\">(</span>cellProp<span class=\"k\">));</span>","                <span class=\"k\">}</span>","                <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>p<span class=\"k\">===</span><span class=\"s\">\"Value\"</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    cell<span class=\"k\">[</span>p<span class=\"k\">]</span> <span class=\"k\">=</span> _getElementValue<span class=\"k\">(</span>cellProp<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">}</span>","                cell<span class=\"k\">[</span>p<span class=\"k\">]</span> <span class=\"k\">=</span> _getElementText<span class=\"k\">(</span>cellProp<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> ","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_cellOrd <span class=\"k\">&gt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_ord<span class=\"k\">)</span><span class=\"k\">{</span>","            cell <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> cell<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    close<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_dataset <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_cellNodes <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_cellNode <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","","","<span class=\"c\">/**</span>","<span class=\"c\">*   &lt;p&gt;</span>","<span class=\"c\">*   This class is used to indicate an runtime errors occurring in any of the methods of the xmla4js classes.</span>","<span class=\"c\">*   &lt;/p&gt;</span>","<span class=\"c\">*   &lt;p&gt;</span>","<span class=\"c\">*   You do not need to instantiate objects of this class yourself. </span>","<span class=\"c\">*   Rather, instances of this class are created and thrown at runtime whenever an error occurs.</span>","<span class=\"c\">*   The purpose is to provide a clean and clear way for applications that use xmla4js to recognize and handle Xmla4js specific runtime errors.</span>","<span class=\"c\">*   &lt;/p&gt;</span>","<span class=\"c\">*   &lt;p&gt;</span>","<span class=\"c\">*   To handle Xmla4js errors, you can use a &lt;code&gt;try...catch&lt;/code&gt; block like this:</span>","<span class=\"c\">*   &lt;/p&gt;</span>","<span class=\"c\">&lt;pre&gt;</span>","<span class=\"c\">&amp;nbsp;try {</span>","<span class=\"c\">&amp;nbsp;    ...general xmla4js work...</span>","<span class=\"c\">&amp;nbsp;} catch (exception) {</span>","<span class=\"c\">&amp;nbsp;    if (exception instanceof Xmla.Exception) {</span>","<span class=\"c\">&amp;nbsp;        ...use exception.code, exception.message and exception.data to handle the exception.</span>","<span class=\"c\">&amp;nbsp;    } else {</span>","<span class=\"c\">&amp;nbsp;        ...handle other errors...</span>","<span class=\"c\">&amp;nbsp;    }</span>","<span class=\"c\">&amp;nbsp;}</span>","<span class=\"c\">&lt;/pre&gt;</span>","<span class=\"c\">*   </span>","<span class=\"c\">*   @class Xmla.Exception</span>","<span class=\"c\">*   @constructor</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>type<span class=\"k\">,</span> code<span class=\"k\">,</span> message<span class=\"k\">,</span> helpfile<span class=\"k\">,</span> source<span class=\"k\">,</span> data<span class=\"k\">,</span> args<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> type<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>code <span class=\"k\">=</span> code<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>message <span class=\"k\">=</span> message<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>source <span class=\"k\">=</span> source<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>helpfile <span class=\"k\">=</span> helpfile<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>data <span class=\"k\">=</span> data<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>args <span class=\"k\">=</span> args<span class=\"k\">;</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Can appear as value for the &lt;code&gt;&lt;a href=\"#property_type\"&gt;type&lt;/a&gt;&lt;/code&gt; property of instances of the &lt;code&gt;&lt;a href=\"#class_Xmla.Exception\"&gt;Xmla.Exception&lt;/a&gt;&lt;/code&gt; class, </span>","<span class=\"c\">*   and indicates that this &lt;code&gt;Xmla.Exception&lt;/code&gt; signals a warning.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property TYPE_WARNING</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;warning&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>TYPE_WARNING <span class=\"k\">=</span> <span class=\"s\">\"warning\"</span><span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Can appear as value for the &lt;code&gt;&lt;a href=\"#property_type\"&gt;type&lt;/a&gt;&lt;/code&gt; property of instances of the &lt;code&gt;&lt;a href=\"#class_Xmla.Exception\"&gt;Xmla.Exception&lt;/a&gt;&lt;/code&gt; class, </span>","<span class=\"c\">*   and indicates that this &lt;code&gt;Xmla.Exception&lt;/code&gt; signals an error.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property TYPE_ERROR</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type string</span>","<span class=\"c\">*   @default &lt;code&gt;error&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>TYPE_ERROR <span class=\"k\">=</span> <span class=\"s\">\"error\"</span><span class=\"k\">;</span>","","<span class=\"k\">var</span> _exceptionHlp <span class=\"k\">=</span> <span class=\"s\">\"http://code.google.com/p/xmla4js/wiki/ExceptionCodes\"</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Exception code indicating a &lt;code&gt;requestType&lt;/code&gt; option was expected but ommitted.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MISSING_REQUEST_TYPE_CDE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type {int}</span>","<span class=\"c\">*   @default &lt;code&gt;-1&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_REQUEST_TYPE_CDE <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span> ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_REQUEST_TYPE_MSG <span class=\"k\">=</span> <span class=\"s\">\"Missing_Request_Type\"</span><span class=\"k\">;</span> ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_REQUEST_TYPE_HLP <span class=\"k\">=</span> _exceptionHlp <span class=\"k\">+</span> ","                                    <span class=\"s\">\"#\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_REQUEST_TYPE_CDE <span class=\"k\">+</span> ","                                    <span class=\"s\">\"_\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_REQUEST_TYPE_MSG<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Exception code indicating a &lt;code&gt;statement&lt;/code&gt; option was expected but ommitted.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MISSING_STATEMENT_CDE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type {int}</span>","<span class=\"c\">*   @default &lt;code&gt;-2&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_STATEMENT_CDE <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">;</span> ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_STATEMENT_MSG <span class=\"k\">=</span> <span class=\"s\">\"Missing_Statement\"</span><span class=\"k\">;</span> ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_STATEMENT_HLP <span class=\"k\">=</span> _exceptionHlp <span class=\"k\">+</span> ","                                    <span class=\"s\">\"#\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_STATEMENT_CDE <span class=\"k\">+</span> ","                                    <span class=\"s\">\"_\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_STATEMENT_MSG<span class=\"k\">;</span>","                                    ","<span class=\"c\">/**</span>","<span class=\"c\">*   Exception code indicating a &lt;code&gt;url&lt;/code&gt; option was expected but ommitted.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property MISSING_URL_CDE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type {int}</span>","<span class=\"c\">*   @default &lt;code&gt;-3&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_URL_CDE <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">3</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_URL_MSG <span class=\"k\">=</span> <span class=\"s\">\"Missing_URL\"</span><span class=\"k\">;</span> ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_URL_HLP <span class=\"k\">=</span> _exceptionHlp <span class=\"k\">+</span> ","                                    <span class=\"s\">\"#\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_URL_CDE <span class=\"k\">+</span> ","                                    <span class=\"s\">\"_\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>MISSING_URL_MSG<span class=\"k\">;</span>","                                    ","<span class=\"c\">/**</span>","<span class=\"c\">*   Exception code indicating a &lt;code&gt;events&lt;/code&gt; were expected but ommitted.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property NO_EVENTS_SPECIFIED_CDE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type {int}</span>","<span class=\"c\">*   @default &lt;code&gt;-4&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>NO_EVENTS_SPECIFIED_CDE <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">4</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>NO_EVENTS_SPECIFIED_MSG <span class=\"k\">=</span> <span class=\"s\">\"No_Events_Specified\"</span><span class=\"k\">;</span> ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>NO_EVENTS_SPECIFIED_HLP <span class=\"k\">=</span> _exceptionHlp <span class=\"k\">+</span> ","                                    <span class=\"s\">\"#\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>NO_EVENTS_SPECIFIED_CDE  <span class=\"k\">+</span> ","                                    <span class=\"s\">\"_\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>NO_EVENTS_SPECIFIED_MSG<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Exception code indicating a &lt;code&gt;events&lt;/code&gt; were specifeid in the wrong format.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property WRONG_EVENTS_FORMAT_CDE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type {int}</span>","<span class=\"c\">*   @default &lt;code&gt;-5&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>WRONG_EVENTS_FORMAT_CDE <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">5</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>WRONG_EVENTS_FORMAT_MSG <span class=\"k\">=</span> <span class=\"s\">\"Wrong_Events_Format\"</span><span class=\"k\">;</span> ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>WRONG_EVENTS_FORMAT_HLP <span class=\"k\">=</span> _exceptionHlp <span class=\"k\">+</span> ","                                    <span class=\"s\">\"#\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>NO_EVENTS_SPECIFIED_CDE  <span class=\"k\">+</span> ","                                    <span class=\"s\">\"_\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>NO_EVENTS_SPECIFIED_MSG<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Exception code indicating that the event name was unrecognized.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property UNKNOWN_EVENT_CDE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type {int}</span>","<span class=\"c\">*   @default &lt;code&gt;-6&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>UNKNOWN_EVENT_CDE <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">6</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>UNKNOWN_EVENT_MSG <span class=\"k\">=</span> <span class=\"s\">\"Unknown_Event\"</span><span class=\"k\">;</span> ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>UNKNOWN_EVENT_HLP <span class=\"k\">=</span> _exceptionHlp <span class=\"k\">+</span> ","                                    <span class=\"s\">\"#\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>UNKNOWN_EVENT_CDE  <span class=\"k\">+</span> ","                                    <span class=\"s\">\"_\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>UNKNOWN_EVENT_MSG<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Exception code indicating that no proper handler was passed for the events.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property INVALID_EVENT_HANDLER_CDE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type {int}</span>","<span class=\"c\">*   @default &lt;code&gt;-7&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_EVENT_HANDLER_CDE <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">7</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_EVENT_HANDLER_MSG <span class=\"k\">=</span> <span class=\"s\">\"Invalid_Events_Handler\"</span><span class=\"k\">;</span> ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_EVENT_HANDLER_HLP <span class=\"k\">=</span> _exceptionHlp <span class=\"k\">+</span> ","                                    <span class=\"s\">\"#\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_EVENT_HANDLER_CDE  <span class=\"k\">+</span> ","                                    <span class=\"s\">\"_\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_EVENT_HANDLER_MSG<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Exception code indicating that the rrepsonse could not be parsed</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property ERROR_PARSING_RESPONSE_CDE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type {int}</span>","<span class=\"c\">*   @default &lt;code&gt;-8&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>ERROR_PARSING_RESPONSE_CDE <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">8</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>ERROR_PARSING_RESPONSE_MSG <span class=\"k\">=</span> <span class=\"s\">\"Error_Parsing_Response\"</span><span class=\"k\">;</span> ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>ERROR_PARSING_RESPONSE_HLP <span class=\"k\">=</span> _exceptionHlp <span class=\"k\">+</span> ","                                    <span class=\"s\">\"#\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>ERROR_PARSING_RESPONSE_CDE  <span class=\"k\">+</span> ","                                    <span class=\"s\">\"_\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>ERROR_PARSING_RESPONSE_MSG <span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Exception code indicating the field name is not valid.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property INVALID_FIELD_CDE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type {int}</span>","<span class=\"c\">*   @default &lt;code&gt;-9&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_FIELD_CDE <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">9</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_FIELD_MSG <span class=\"k\">=</span> <span class=\"s\">\"Invalid_Field\"</span><span class=\"k\">;</span> ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_FIELD_HLP <span class=\"k\">=</span> _exceptionHlp <span class=\"k\">+</span> ","                                    <span class=\"s\">\"#\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_FIELD_CDE  <span class=\"k\">+</span> ","                                    <span class=\"s\">\"_\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_FIELD_MSG<span class=\"k\">;</span>","                                    ","<span class=\"c\">/**</span>","<span class=\"c\">*   Exception code indicating a general XMLHttpRequest error.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property HTTP_ERROR</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type {int}</span>","<span class=\"c\">*   @default &lt;code&gt;-10&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>HTTP_ERROR_CDE <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">10</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>HTTP_ERROR_MSG <span class=\"k\">=</span> <span class=\"s\">\"HTTP Error\"</span><span class=\"k\">;</span> ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>HTTP_ERROR_HLP <span class=\"k\">=</span> _exceptionHlp <span class=\"k\">+</span> ","                                    <span class=\"s\">\"#\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>HTTP_ERROR_CDE  <span class=\"k\">+</span> ","                                    <span class=\"s\">\"_\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>HTTP_ERROR_MSG<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Exception code indicating the hierarchy name is not valid.</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property INVALID_HIERARCHY_CDE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type {int}</span>","<span class=\"c\">*   @default &lt;code&gt;-11&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_HIERARCHY_CDE <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">11</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_HIERARCHY_MSG <span class=\"k\">=</span> <span class=\"s\">\"Invalid_Hierarchy\"</span><span class=\"k\">;</span> ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_HIERARCHY_HLP <span class=\"k\">=</span> _exceptionHlp <span class=\"k\">+</span> ","                                    <span class=\"s\">\"#\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_HIERARCHY_CDE  <span class=\"k\">+</span> ","                                    <span class=\"s\">\"_\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>INVALID_HIERARCHY_MSG<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Exception code indicating a problem reading a member property</span>","<span class=\"c\">*</span>","<span class=\"c\">*   @property UNEXPECTED_ERROR_READING_MEMBER_CDE</span>","<span class=\"c\">*   @static</span>","<span class=\"c\">*   @final</span>","<span class=\"c\">*   @type {int}</span>","<span class=\"c\">*   @default &lt;code&gt;-12&lt;/code&gt;</span>","<span class=\"c\">*/</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>UNEXPECTED_ERROR_READING_MEMBER_CDE <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">12</span><span class=\"k\">;</span>","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>UNEXPECTED_ERROR_READING_MEMBER_MSG <span class=\"k\">=</span> <span class=\"s\">\"Error_Reading_Member\"</span><span class=\"k\">;</span> ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>UNEXPECTED_ERROR_READING_MEMBER_HLP <span class=\"k\">=</span> _exceptionHlp <span class=\"k\">+</span> ","                                    <span class=\"s\">\"#\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>UNEXPECTED_ERROR_READING_MEMBER_CDE  <span class=\"k\">+</span> ","                                    <span class=\"s\">\"_\"</span> <span class=\"k\">+</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>UNEXPECTED_ERROR_READING_MEMBER_MSG<span class=\"k\">;</span>","","","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>_newError <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>codeName<span class=\"k\">,</span> source<span class=\"k\">,</span> data<span class=\"k\">)</span><span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">new</span> Xmla<span class=\"k\">.</span>Exception<span class=\"k\">(</span>","        Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>TYPE_ERROR<span class=\"k\">,</span>","        Xmla<span class=\"k\">.</span>Exception<span class=\"k\">[</span>codeName <span class=\"k\">+</span> <span class=\"s\">\"_CDE\"</span><span class=\"k\">],</span>","        Xmla<span class=\"k\">.</span>Exception<span class=\"k\">[</span>codeName <span class=\"k\">+</span> <span class=\"s\">\"_MSG\"</span><span class=\"k\">],</span>","        Xmla<span class=\"k\">.</span>Exception<span class=\"k\">[</span>codeName <span class=\"k\">+</span> <span class=\"s\">\"_HLP\"</span><span class=\"k\">],</span>","        source<span class=\"k\">,</span>","        data","    <span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","                                    ","Xmla<span class=\"k\">.</span>Exception<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   This propery indicates what kind of exception occurred. It can have one of the following values: &lt;dl&gt;</span>","<span class=\"c\">*       &lt;dt&gt;&lt;code&gt;&lt;a href=\"property_TYPE_WARNING\"&gt;TYPE_WARNING&lt;/a&gt;&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Indicates a warning&lt;/dd&gt;</span>","<span class=\"c\">*       &lt;dt&gt;&lt;code&gt;&lt;a href=\"property_TYPE_ERROR\"&gt;TYPE_ERROR&lt;/a&gt;&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Indicates an error&lt;/dd&gt;</span>","<span class=\"c\">*   &lt;/dl&gt;</span>","<span class=\"c\">*   @property type</span>","<span class=\"c\">*   @type {string}</span>","<span class=\"c\">*   @default {null}</span>","<span class=\"c\">*/</span>","    type<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A code that can be used to identify this particular kind of exception.</span>","<span class=\"c\">*   @property code</span>","<span class=\"c\">*   @type {int}</span>","<span class=\"c\">*   @default {null}</span>","<span class=\"c\">*/</span>","    code<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A human readable message that describes the nature of the error or warning.</span>","<span class=\"c\">*   @property message</span>","<span class=\"c\">*   @type {string}</span>","<span class=\"c\">*   @default {null}</span>","<span class=\"c\">*/</span>","    message<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A name that indicates in what component (on the client or server side) this error or warning occurred.</span>","<span class=\"c\">*   @property source</span>","<span class=\"c\">*   @type {string}</span>","<span class=\"c\">*   @default {null}</span>","<span class=\"c\">*/</span>","    source<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A path or url that points to a document that contains more information about this error.</span>","<span class=\"c\">*   @property helpfile</span>","<span class=\"c\">*   @type {string}</span>","<span class=\"c\">*   @default {null}</span>","<span class=\"c\">*/</span>","    helpfile<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   Additional data captured when the exception was instantiated.</span>","<span class=\"c\">*   The type of information stored here is dependent upon the nature of the error. </span>","<span class=\"c\">*   @property data</span>","<span class=\"c\">*   @type {string}</span>","<span class=\"c\">*   @default {null}</span>","<span class=\"c\">*/</span>","    data<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    _throw<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">throw</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   A reference to the built-in &lt;code&gt;arguments&lt;/code&gt; array of the function that is throwing the exception</span>","<span class=\"c\">*   This can be used to get a \"stack trace\" </span>","<span class=\"c\">*/</span>    ","    args<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","<span class=\"c\">/**</span>","<span class=\"c\">*   @method getStackTrace</span>","<span class=\"c\">*   @return an array of objects describing the function on the stack</span>","<span class=\"c\">*/</span>    ","    getStackTrace<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> funcstring<span class=\"k\">,</span> stack <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> regexp <span class=\"k\">=</span> <span class=\"s\">/^\\sfunction\\s*([^\\(]+)?\\s*\\(\\)$/</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>args<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> func <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>args<span class=\"k\">.</span>callee<span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>func<span class=\"k\">)</span><span class=\"k\">{</span>","                funcstring <span class=\"k\">=</span> String<span class=\"k\">(</span>func<span class=\"k\">);</span>","                func <span class=\"k\">=</span> func<span class=\"k\">.</span>caller<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> stack<span class=\"k\">;</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">}</span><span class=\"k\">());</span>"];
_$jscoverage['dataapi/Xmla.js'][30]++;
var Xmla;
_$jscoverage['dataapi/Xmla.js'][31]++;
(function () {
  _$jscoverage['dataapi/Xmla.js'][33]++;
  var _soap = "http://schemas.xmlsoap.org/soap/", _xmlnsSOAPenvelope = (_soap + "envelope/"), _xmlnsSOAPenvelopePrefix = "SOAP-ENV", _xmlnsIsSOAPenvelope = ("xmlns:" + _xmlnsSOAPenvelopePrefix + "=\"" + _xmlnsSOAPenvelope + "\""), _SOAPencodingStyle = (_xmlnsSOAPenvelopePrefix + ":encodingStyle=\"" + _soap + "encoding/\""), _ms = "urn:schemas-microsoft-com:", _xmlnsXmla = (_ms + "xml-analysis"), _xmlnsIsXmla = ("xmlns=\"" + _xmlnsXmla + "\""), _xmlnsSQLPrefix = "sql", _xmlnsSQL = (_ms + "xml-sql"), _xmlnsSchema = "http://www.w3.org/2001/XMLSchema", _xmlnsSchemaPrefix = "xsd", _xmlnsSchemaInstance = "http://www.w3.org/2001/XMLSchema-instance", _xmlnsSchemaInstancePrefix = "xsi", _xmlnsRowset = (_xmlnsXmla + ":rowset"), _xmlnsDataset = (_xmlnsXmla + ":mddataset"), _useAX = (window.ActiveXObject? true: false);
  _$jscoverage['dataapi/Xmla.js'][64]++;
  function _ajax(options) {
    _$jscoverage['dataapi/Xmla.js'][69]++;
    var xhr, handlerCalled = false, handler = (function () {
  _$jscoverage['dataapi/Xmla.js'][72]++;
  handlerCalled = true;
  _$jscoverage['dataapi/Xmla.js'][73]++;
  switch (xhr.readyState) {
  case 0:
    _$jscoverage['dataapi/Xmla.js'][75]++;
    options.aborted(xhr);
    _$jscoverage['dataapi/Xmla.js'][76]++;
    break;
  case 4:
    _$jscoverage['dataapi/Xmla.js'][78]++;
    if ((xhr.status === 200)) {
      _$jscoverage['dataapi/Xmla.js'][79]++;
      options.complete(xhr);
    }
    else {
      _$jscoverage['dataapi/Xmla.js'][82]++;
      options.error(Xmla.Exception._newError("HTTP_ERROR", "_ajax", options));
    }
    _$jscoverage['dataapi/Xmla.js'][90]++;
    break;
  }
});
    _$jscoverage['dataapi/Xmla.js'][93]++;
    if (_useAX) {
      _$jscoverage['dataapi/Xmla.js'][94]++;
      xhr = new ActiveXObject("MSXML2.XMLHTTP.3.0");
    }
    else {
      _$jscoverage['dataapi/Xmla.js'][97]++;
      xhr = new XMLHttpRequest();
    }
    _$jscoverage['dataapi/Xmla.js'][99]++;
    if ((options.username && options.password)) {
      _$jscoverage['dataapi/Xmla.js'][100]++;
      xhr.open("POST", options.url, options.async, options.username, options.password);
    }
    else {
      _$jscoverage['dataapi/Xmla.js'][105]++;
      xhr.open("POST", options.url, options.async);
    }
    _$jscoverage['dataapi/Xmla.js'][107]++;
    xhr.onreadystatechange = handler;
    _$jscoverage['dataapi/Xmla.js'][108]++;
    xhr.setRequestHeader("Accept", "text/xml, application/xml");
    _$jscoverage['dataapi/Xmla.js'][109]++;
    xhr.setRequestHeader("Content-Type", "text/xml");
    _$jscoverage['dataapi/Xmla.js'][110]++;
    xhr.send(options.data);
    _$jscoverage['dataapi/Xmla.js'][111]++;
    if (((! options.async) && (! handlerCalled))) {
      _$jscoverage['dataapi/Xmla.js'][112]++;
      handler.call(xhr);
    }
    _$jscoverage['dataapi/Xmla.js'][114]++;
    return xhr;
}
  _$jscoverage['dataapi/Xmla.js'][117]++;
  function _isUnd(arg) {
    _$jscoverage['dataapi/Xmla.js'][118]++;
    return ((typeof arg) === "undefined");
}
  _$jscoverage['dataapi/Xmla.js'][120]++;
  function _isNum(arg) {
    _$jscoverage['dataapi/Xmla.js'][121]++;
    return ((typeof arg) === "number");
}
  _$jscoverage['dataapi/Xmla.js'][123]++;
  function _xmlEncode(value) {
    _$jscoverage['dataapi/Xmla.js'][124]++;
    return value.replace(/\&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
  _$jscoverage['dataapi/Xmla.js'][127]++;
  var _getElementsByTagNameNS = (document.getElementsByTagNameNS? (function (node, ns, prefix, tagName) {
  _$jscoverage['dataapi/Xmla.js'][128]++;
  return node.getElementsByTagNameNS(ns, tagName);
}): (function (node, ns, prefix, tagName) {
  _$jscoverage['dataapi/Xmla.js'][131]++;
  if (prefix) {
    _$jscoverage['dataapi/Xmla.js'][132]++;
    return node.getElementsByTagName((prefix + ":" + tagName));
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][135]++;
    return node.getElementsByTagName(tagName);
  }
}));
  _$jscoverage['dataapi/Xmla.js'][139]++;
  var _getAttributeNS = (document.documentElement.getAttributeNS? (function (element, ns, prefix, attributeName) {
  _$jscoverage['dataapi/Xmla.js'][140]++;
  return element.getAttributeNS(ns, attributeName);
}): (function (element, ns, prefix, attributeName) {
  _$jscoverage['dataapi/Xmla.js'][143]++;
  if (prefix) {
    _$jscoverage['dataapi/Xmla.js'][144]++;
    return element.getAttribute((prefix + ":" + attributeName));
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][147]++;
    return element.getAttribute(attributeName);
  }
}));
  _$jscoverage['dataapi/Xmla.js'][150]++;
  function _getElementText(el) {
    _$jscoverage['dataapi/Xmla.js'][151]++;
    if (el.innerText) {
      _$jscoverage['dataapi/Xmla.js'][152]++;
      return el.innerText;
    }
    else {
      _$jscoverage['dataapi/Xmla.js'][155]++;
      if (el.textContent) {
        _$jscoverage['dataapi/Xmla.js'][156]++;
        return el.textContent;
      }
      else {
        _$jscoverage['dataapi/Xmla.js'][159]++;
        if (el.normalize) {
          _$jscoverage['dataapi/Xmla.js'][160]++;
          el.normalize();
          _$jscoverage['dataapi/Xmla.js'][161]++;
          if (el.firstChild) {
            _$jscoverage['dataapi/Xmla.js'][162]++;
            return el.firstChild.data;
          }
          else {
            _$jscoverage['dataapi/Xmla.js'][165]++;
            return null;
          }
        }
        else {
          _$jscoverage['dataapi/Xmla.js'][169]++;
          var text = "", childNodes = el.childNodes, numChildNodes = childNodes.length;
          _$jscoverage['dataapi/Xmla.js'][173]++;
          for (var i = 0; (i < numChildNodes); (i += 1)) {
            _$jscoverage['dataapi/Xmla.js'][174]++;
            text += childNodes.item(i).data;
}
          _$jscoverage['dataapi/Xmla.js'][176]++;
          return text;
        }
      }
    }
}
  _$jscoverage['dataapi/Xmla.js'][180]++;
  function _getXmlaSoapList(container, listType, items, indent) {
    _$jscoverage['dataapi/Xmla.js'][181]++;
    if ((! indent)) {
      _$jscoverage['dataapi/Xmla.js'][182]++;
      indent = "";
    }
    _$jscoverage['dataapi/Xmla.js'][184]++;
    var numItems, i, entry, property, item, msg = ("\n" + indent + "<" + container + ">");
    _$jscoverage['dataapi/Xmla.js'][185]++;
    if (items) {
      _$jscoverage['dataapi/Xmla.js'][186]++;
      msg += ("\n" + indent + " <" + listType + ">");
      _$jscoverage['dataapi/Xmla.js'][187]++;
      for (property in items) {
        _$jscoverage['dataapi/Xmla.js'][188]++;
        if (items.hasOwnProperty(property)) {
          _$jscoverage['dataapi/Xmla.js'][189]++;
          item = items[property];
          _$jscoverage['dataapi/Xmla.js'][190]++;
          msg += ("\n" + indent + "  <" + property + ">");
          _$jscoverage['dataapi/Xmla.js'][191]++;
          if (((typeof item) === "array")) {
            _$jscoverage['dataapi/Xmla.js'][192]++;
            for ((entry, (i = 0), (numItems = item.length)); (i < numItems); (i += 1)) {
              _$jscoverage['dataapi/Xmla.js'][193]++;
              entry = item[i];
              _$jscoverage['dataapi/Xmla.js'][194]++;
              msg += ("<Value>" + _xmlEncode(entry) + "</Value>");
}
          }
          else {
            _$jscoverage['dataapi/Xmla.js'][197]++;
            msg += _xmlEncode(item);
          }
          _$jscoverage['dataapi/Xmla.js'][199]++;
          msg += ("</" + property + ">");
        }
}
      _$jscoverage['dataapi/Xmla.js'][202]++;
      msg += ("\n" + indent + " </" + listType + ">");
    }
    _$jscoverage['dataapi/Xmla.js'][204]++;
    msg += ("\n" + indent + "</" + container + ">");
    _$jscoverage['dataapi/Xmla.js'][205]++;
    return msg;
}
  _$jscoverage['dataapi/Xmla.js'][208]++;
  var _xmlRequestType = "RequestType";
  _$jscoverage['dataapi/Xmla.js'][210]++;
  function _getXmlaSoapMessage(options) {
    _$jscoverage['dataapi/Xmla.js'][213]++;
    var method = options.method, exception = null, msg = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "\n<" + _xmlnsSOAPenvelopePrefix + ":Envelope" + " " + _xmlnsIsSOAPenvelope + " " + _SOAPencodingStyle + ">" + "\n <" + _xmlnsSOAPenvelopePrefix + ":Body>" + "\n  <" + method + " " + _xmlnsIsXmla + " " + _SOAPencodingStyle + ">");
    _$jscoverage['dataapi/Xmla.js'][221]++;
    switch (method) {
    case Xmla.METHOD_DISCOVER:
      _$jscoverage['dataapi/Xmla.js'][223]++;
      if (options.requestType) {
        _$jscoverage['dataapi/Xmla.js'][224]++;
        msg += ("\n   <" + _xmlRequestType + ">" + options.requestType + "</" + _xmlRequestType + ">" + _getXmlaSoapList("Restrictions", "RestrictionList", options.restrictions, "   ") + _getXmlaSoapList("Properties", "PropertyList", options.properties, "   "));
      }
      else {
        _$jscoverage['dataapi/Xmla.js'][230]++;
        exception = Xmla.Exception._newError("MISSING_REQUEST_TYPE", "Xmla._getXmlaSoapMessage", options);
      }
      _$jscoverage['dataapi/Xmla.js'][236]++;
      break;
    case Xmla.METHOD_EXECUTE:
      _$jscoverage['dataapi/Xmla.js'][238]++;
      if (options.statement) {
        _$jscoverage['dataapi/Xmla.js'][239]++;
        msg += ("" + "\n   <Command>" + "\n    <Statement>" + _xmlEncode(options.statement) + "</Statement>" + "\n   </Command>" + _getXmlaSoapList("Properties", "PropertyList", options.properties, "   "));
      }
      else {
        _$jscoverage['dataapi/Xmla.js'][247]++;
        exception = Xmla.Exception._newError("MISSING_REQUEST_TYPE", "Xmla._getXmlaSoapMessage", options);
      }
      _$jscoverage['dataapi/Xmla.js'][253]++;
      break;
    default:
    }
    _$jscoverage['dataapi/Xmla.js'][259]++;
    if ((exception !== null)) {
      _$jscoverage['dataapi/Xmla.js'][260]++;
      exception._throw();
    }
    _$jscoverage['dataapi/Xmla.js'][262]++;
    msg += ("\n  </" + method + ">" + "\n </" + _xmlnsSOAPenvelopePrefix + ":Body>" + "\n</" + _xmlnsSOAPenvelopePrefix + ":Envelope>");
    _$jscoverage['dataapi/Xmla.js'][266]++;
    return msg;
}
  _$jscoverage['dataapi/Xmla.js'][269]++;
  function _applyProps(object, properties, overwrite) {
    _$jscoverage['dataapi/Xmla.js'][270]++;
    if ((properties && (! object))) {
      _$jscoverage['dataapi/Xmla.js'][271]++;
      object = {};
    }
    _$jscoverage['dataapi/Xmla.js'][273]++;
    for (var property in properties) {
      _$jscoverage['dataapi/Xmla.js'][274]++;
      if (properties.hasOwnProperty(property)) {
        _$jscoverage['dataapi/Xmla.js'][275]++;
        if ((overwrite || _isUnd(object[property]))) {
          _$jscoverage['dataapi/Xmla.js'][276]++;
          object[property] = properties[property];
        }
      }
}
    _$jscoverage['dataapi/Xmla.js'][280]++;
    return object;
}
  _$jscoverage['dataapi/Xmla.js'][296]++;
  Xmla = (function (options) {
  _$jscoverage['dataapi/Xmla.js'][298]++;
  this.listeners = {};
  _$jscoverage['dataapi/Xmla.js'][299]++;
  this.listeners[Xmla.EVENT_REQUEST] = [];
  _$jscoverage['dataapi/Xmla.js'][300]++;
  this.listeners[Xmla.EVENT_SUCCESS] = [];
  _$jscoverage['dataapi/Xmla.js'][301]++;
  this.listeners[Xmla.EVENT_ERROR] = [];
  _$jscoverage['dataapi/Xmla.js'][303]++;
  this.listeners[Xmla.EVENT_DISCOVER] = [];
  _$jscoverage['dataapi/Xmla.js'][304]++;
  this.listeners[Xmla.EVENT_DISCOVER_SUCCESS] = [];
  _$jscoverage['dataapi/Xmla.js'][305]++;
  this.listeners[Xmla.EVENT_DISCOVER_ERROR] = [];
  _$jscoverage['dataapi/Xmla.js'][307]++;
  this.listeners[Xmla.EVENT_EXECUTE] = [];
  _$jscoverage['dataapi/Xmla.js'][308]++;
  this.listeners[Xmla.EVENT_EXECUTE_SUCCESS] = [];
  _$jscoverage['dataapi/Xmla.js'][309]++;
  this.listeners[Xmla.EVENT_EXECUTE_ERROR] = [];
  _$jscoverage['dataapi/Xmla.js'][311]++;
  this.options = _applyProps(_applyProps({}, Xmla.defaultOptions, true), options, true);
  _$jscoverage['dataapi/Xmla.js'][320]++;
  return this;
});
  _$jscoverage['dataapi/Xmla.js'][323]++;
  Xmla.defaultOptions = {requestTimeout: 30000, async: false};
  _$jscoverage['dataapi/Xmla.js'][339]++;
  Xmla.METHOD_DISCOVER = "Discover";
  _$jscoverage['dataapi/Xmla.js'][351]++;
  Xmla.METHOD_EXECUTE = "Execute";
  _$jscoverage['dataapi/Xmla.js'][353]++;
  var _xmlaDISCOVER = "DISCOVER_";
  _$jscoverage['dataapi/Xmla.js'][354]++;
  var _xmlaMDSCHEMA = "MDSCHEMA_";
  _$jscoverage['dataapi/Xmla.js'][355]++;
  var _xmlaDBSCHEMA = "DBSCHEMA_";
  _$jscoverage['dataapi/Xmla.js'][370]++;
  Xmla.DISCOVER_DATASOURCES = (_xmlaDISCOVER + "DATASOURCES");
  _$jscoverage['dataapi/Xmla.js'][384]++;
  Xmla.DISCOVER_PROPERTIES = (_xmlaDISCOVER + "PROPERTIES");
  _$jscoverage['dataapi/Xmla.js'][398]++;
  Xmla.DISCOVER_SCHEMA_ROWSETS = (_xmlaDISCOVER + "SCHEMA_ROWSETS");
  _$jscoverage['dataapi/Xmla.js'][412]++;
  Xmla.DISCOVER_ENUMERATORS = (_xmlaDISCOVER + "ENUMERATORS");
  _$jscoverage['dataapi/Xmla.js'][426]++;
  Xmla.DISCOVER_KEYWORDS = (_xmlaDISCOVER + "KEYWORDS");
  _$jscoverage['dataapi/Xmla.js'][440]++;
  Xmla.DISCOVER_LITERALS = (_xmlaDISCOVER + "LITERALS");
  _$jscoverage['dataapi/Xmla.js'][454]++;
  Xmla.DBSCHEMA_CATALOGS = (_xmlaDBSCHEMA + "CATALOGS");
  _$jscoverage['dataapi/Xmla.js'][468]++;
  Xmla.DBSCHEMA_COLUMNS = (_xmlaDBSCHEMA + "COLUMNS");
  _$jscoverage['dataapi/Xmla.js'][482]++;
  Xmla.DBSCHEMA_PROVIDER_TYPES = (_xmlaDBSCHEMA + "PROVIDER_TYPES");
  _$jscoverage['dataapi/Xmla.js'][496]++;
  Xmla.DBSCHEMA_SCHEMATA = (_xmlaDBSCHEMA + "SCHEMATA");
  _$jscoverage['dataapi/Xmla.js'][510]++;
  Xmla.DBSCHEMA_TABLES = (_xmlaDBSCHEMA + "TABLES");
  _$jscoverage['dataapi/Xmla.js'][525]++;
  Xmla.DBSCHEMA_TABLES_INFO = (_xmlaDBSCHEMA + "TABLES_INFO");
  _$jscoverage['dataapi/Xmla.js'][540]++;
  Xmla.MDSCHEMA_ACTIONS = (_xmlaMDSCHEMA + "ACTIONS");
  _$jscoverage['dataapi/Xmla.js'][557]++;
  Xmla.MDSCHEMA_CUBES = (_xmlaMDSCHEMA + "CUBES");
  _$jscoverage['dataapi/Xmla.js'][574]++;
  Xmla.MDSCHEMA_DIMENSIONS = (_xmlaMDSCHEMA + "DIMENSIONS");
  _$jscoverage['dataapi/Xmla.js'][591]++;
  Xmla.MDSCHEMA_FUNCTIONS = (_xmlaMDSCHEMA + "FUNCTIONS");
  _$jscoverage['dataapi/Xmla.js'][608]++;
  Xmla.MDSCHEMA_HIERARCHIES = (_xmlaMDSCHEMA + "HIERARCHIES");
  _$jscoverage['dataapi/Xmla.js'][625]++;
  Xmla.MDSCHEMA_LEVELS = (_xmlaMDSCHEMA + "LEVELS");
  _$jscoverage['dataapi/Xmla.js'][642]++;
  Xmla.MDSCHEMA_MEASURES = (_xmlaMDSCHEMA + "MEASURES");
  _$jscoverage['dataapi/Xmla.js'][659]++;
  Xmla.MDSCHEMA_MEMBERS = (_xmlaMDSCHEMA + "MEMBERS");
  _$jscoverage['dataapi/Xmla.js'][676]++;
  Xmla.MDSCHEMA_PROPERTIES = (_xmlaMDSCHEMA + "PROPERTIES");
  _$jscoverage['dataapi/Xmla.js'][693]++;
  Xmla.MDSCHEMA_SETS = (_xmlaMDSCHEMA + "SETS");
  _$jscoverage['dataapi/Xmla.js'][713]++;
  Xmla.EVENT_REQUEST = "request";
  _$jscoverage['dataapi/Xmla.js'][731]++;
  Xmla.EVENT_SUCCESS = "success";
  _$jscoverage['dataapi/Xmla.js'][745]++;
  Xmla.EVENT_ERROR = "error";
  _$jscoverage['dataapi/Xmla.js'][764]++;
  Xmla.EVENT_EXECUTE = "execute";
  _$jscoverage['dataapi/Xmla.js'][780]++;
  Xmla.EVENT_EXECUTE_SUCCESS = "executesuccess";
  _$jscoverage['dataapi/Xmla.js'][794]++;
  Xmla.EVENT_EXECUTE_ERROR = "executeerror";
  _$jscoverage['dataapi/Xmla.js'][813]++;
  Xmla.EVENT_DISCOVER = "discover";
  _$jscoverage['dataapi/Xmla.js'][829]++;
  Xmla.EVENT_DISCOVER_SUCCESS = "discoversuccess";
  _$jscoverage['dataapi/Xmla.js'][844]++;
  Xmla.EVENT_DISCOVER_ERROR = "discovererror";
  _$jscoverage['dataapi/Xmla.js'][858]++;
  Xmla.EVENT_GENERAL = [Xmla.EVENT_REQUEST, Xmla.EVENT_SUCCESS, Xmla.EVENT_ERROR];
  _$jscoverage['dataapi/Xmla.js'][875]++;
  Xmla.EVENT_DISCOVER_ALL = [Xmla.EVENT_DISCOVER, Xmla.EVENT_DISCOVER_SUCCESS, Xmla.EVENT_DISCOVER_ERROR];
  _$jscoverage['dataapi/Xmla.js'][892]++;
  Xmla.EVENT_EXECUTE_ALL = [Xmla.EVENT_EXECUTE, Xmla.EVENT_EXECUTE_SUCCESS, Xmla.EVENT_EXECUTE_ERROR];
  _$jscoverage['dataapi/Xmla.js'][908]++;
  Xmla.EVENT_ALL = [].concat(Xmla.EVENT_GENERAL, Xmla.EVENT_DISCOVER_ALL, Xmla.EVENT_EXECUTE_ALL);
  _$jscoverage['dataapi/Xmla.js'][930]++;
  Xmla.PROP_DATASOURCEINFO = "DataSourceInfo";
  _$jscoverage['dataapi/Xmla.js'][946]++;
  Xmla.PROP_CATALOG = "Catalog";
  _$jscoverage['dataapi/Xmla.js'][947]++;
  Xmla.PROP_CUBE = "Cube";
  _$jscoverage['dataapi/Xmla.js'][961]++;
  Xmla.PROP_FORMAT = "Format";
  _$jscoverage['dataapi/Xmla.js'][978]++;
  Xmla.PROP_FORMAT_TABULAR = "Tabular";
  _$jscoverage['dataapi/Xmla.js'][997]++;
  Xmla.PROP_FORMAT_MULTIDIMENSIONAL = "Multidimensional";
  _$jscoverage['dataapi/Xmla.js'][1015]++;
  Xmla.PROP_AXISFORMAT = "AxisFormat";
  _$jscoverage['dataapi/Xmla.js'][1028]++;
  Xmla.PROP_AXISFORMAT_TUPLE = "TupleFormat";
  _$jscoverage['dataapi/Xmla.js'][1041]++;
  Xmla.PROP_AXISFORMAT_CLUSTER = "ClusterFormat";
  _$jscoverage['dataapi/Xmla.js'][1054]++;
  Xmla.PROP_AXISFORMAT_CUSTOM = "CustomFormat";
  _$jscoverage['dataapi/Xmla.js'][1078]++;
  Xmla.PROP_CONTENT = "Content";
  _$jscoverage['dataapi/Xmla.js'][1093]++;
  Xmla.PROP_CONTENT_DATA = "Data";
  _$jscoverage['dataapi/Xmla.js'][1106]++;
  Xmla.PROP_CONTENT_NONE = "None";
  _$jscoverage['dataapi/Xmla.js'][1118]++;
  Xmla.PROP_CONTENT_SCHEMA = "Schema";
  _$jscoverage['dataapi/Xmla.js'][1130]++;
  Xmla.PROP_CONTENT_SCHEMADATA = "SchemaData";
  _$jscoverage['dataapi/Xmla.js'][1132]++;
  Xmla.prototype = {listeners: null, soapMessage: null, response: null, responseText: null, responseXML: null, setOptions: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][1241]++;
  _applyProps(this.options, options, true);
}), addListener: (function (listener) {
  _$jscoverage['dataapi/Xmla.js'][1300]++;
  var events = listener.events;
  _$jscoverage['dataapi/Xmla.js'][1301]++;
  if ((! events)) {
    _$jscoverage['dataapi/Xmla.js'][1302]++;
    Xmla.Exception._newError("NO_EVENTS_SPECIFIED", "Xmla.addListener", listener)._throw();
  }
  _$jscoverage['dataapi/Xmla.js'][1308]++;
  if (((typeof events) === "string")) {
    _$jscoverage['dataapi/Xmla.js'][1309]++;
    if ((events === "all")) {
      _$jscoverage['dataapi/Xmla.js'][1310]++;
      events = Xmla.EVENT_ALL;
    }
    else {
      _$jscoverage['dataapi/Xmla.js'][1312]++;
      events = events.split(",");
    }
  }
  _$jscoverage['dataapi/Xmla.js'][1315]++;
  if ((! (events instanceof Array))) {
    _$jscoverage['dataapi/Xmla.js'][1316]++;
    Xmla.Exception._newError("WRONG_EVENTS_FORMAT", "Xmla.addListener", listener)._throw();
  }
  _$jscoverage['dataapi/Xmla.js'][1322]++;
  var numEvents = events.length;
  _$jscoverage['dataapi/Xmla.js'][1323]++;
  var eventName, myListeners;
  _$jscoverage['dataapi/Xmla.js'][1324]++;
  for (var i = 0; (i < numEvents); (i += 1)) {
    _$jscoverage['dataapi/Xmla.js'][1325]++;
    eventName = events[i].replace(/\s+/g, "");
    _$jscoverage['dataapi/Xmla.js'][1326]++;
    myListeners = this.listeners[eventName];
    _$jscoverage['dataapi/Xmla.js'][1327]++;
    if ((! myListeners)) {
      _$jscoverage['dataapi/Xmla.js'][1328]++;
      Xmla.Exception._newError("UNKNOWN_EVENT", "Xmla.addListener", listener)._throw();
    }
    _$jscoverage['dataapi/Xmla.js'][1334]++;
    if (((typeof listener.handler) == "function")) {
      _$jscoverage['dataapi/Xmla.js'][1335]++;
      if ((! listener.scope)) {
        _$jscoverage['dataapi/Xmla.js'][1336]++;
        listener.scope = window;
      }
      _$jscoverage['dataapi/Xmla.js'][1338]++;
      myListeners.push(listener);
    }
    else {
      _$jscoverage['dataapi/Xmla.js'][1341]++;
      Xmla.Exception._newError("INVALID_EVENT_HANDLER", "Xmla.addListener", listener)._throw();
    }
}
}), _fireEvent: (function (eventName, eventData, cancelable) {
  _$jscoverage['dataapi/Xmla.js'][1350]++;
  var listeners = this.listeners[eventName];
  _$jscoverage['dataapi/Xmla.js'][1351]++;
  if ((! listeners)) {
    _$jscoverage['dataapi/Xmla.js'][1352]++;
    Xmla.Exception._newError("UNKNOWN_EVENT", "Xmla._fireEvent", eventName)._throw();
  }
  _$jscoverage['dataapi/Xmla.js'][1358]++;
  var numListeners = listeners.length;
  _$jscoverage['dataapi/Xmla.js'][1359]++;
  var outcome = true;
  _$jscoverage['dataapi/Xmla.js'][1360]++;
  if (numListeners) {
    _$jscoverage['dataapi/Xmla.js'][1361]++;
    var listener, listenerResult;
    _$jscoverage['dataapi/Xmla.js'][1362]++;
    for (var i = 0; (i < numListeners); (i += 1)) {
      _$jscoverage['dataapi/Xmla.js'][1363]++;
      listener = listeners[i];
      _$jscoverage['dataapi/Xmla.js'][1364]++;
      listenerResult = listener.handler.call(listener.scope, eventName, eventData, this);
      _$jscoverage['dataapi/Xmla.js'][1370]++;
      if ((cancelable && (listenerResult === false))) {
        _$jscoverage['dataapi/Xmla.js'][1371]++;
        outcome = false;
        _$jscoverage['dataapi/Xmla.js'][1372]++;
        break;
      }
}
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][1377]++;
    if ((eventName === "error")) {
      _$jscoverage['dataapi/Xmla.js'][1378]++;
      eventData.exception._throw();
    }
  }
  _$jscoverage['dataapi/Xmla.js'][1380]++;
  return outcome;
}), request: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][1483]++;
  var ex, xmla = this;
  _$jscoverage['dataapi/Xmla.js'][1485]++;
  this.response = null;
  _$jscoverage['dataapi/Xmla.js'][1486]++;
  this.responseText = null;
  _$jscoverage['dataapi/Xmla.js'][1487]++;
  this.responseXML = null;
  _$jscoverage['dataapi/Xmla.js'][1489]++;
  if ((! options.url)) {
    _$jscoverage['dataapi/Xmla.js'][1490]++;
    if (this.options.url) {
      _$jscoverage['dataapi/Xmla.js'][1491]++;
      options.url = this.options.url;
    }
    else {
      _$jscoverage['dataapi/Xmla.js'][1494]++;
      ex = Xmla.Exception._newError("MISSING_URL", "Xmla.request", options);
      _$jscoverage['dataapi/Xmla.js'][1499]++;
      ex._throw();
    }
  }
  _$jscoverage['dataapi/Xmla.js'][1503]++;
  options.properties = _applyProps(options.properties, this.options.properties, false);
  _$jscoverage['dataapi/Xmla.js'][1504]++;
  options.restrictions = _applyProps(options.restrictions, this.options.restrictions, false);
  _$jscoverage['dataapi/Xmla.js'][1505]++;
  if ((_isUnd(options.async) && (! _isUnd(this.options.async)))) {
    _$jscoverage['dataapi/Xmla.js'][1506]++;
    options.async = this.options.async;
  }
  _$jscoverage['dataapi/Xmla.js'][1508]++;
  if ((_isUnd(options.requestTimeout) && (! _isUnd(this.options.requestTimeout)))) {
    _$jscoverage['dataapi/Xmla.js'][1509]++;
    options.requestTimeout = this.options.requestTimeout;
  }
  _$jscoverage['dataapi/Xmla.js'][1511]++;
  if (((! options.username) && this.options.username)) {
    _$jscoverage['dataapi/Xmla.js'][1512]++;
    options.username = this.options.username;
  }
  _$jscoverage['dataapi/Xmla.js'][1514]++;
  if (((! options.password) && this.options.password)) {
    _$jscoverage['dataapi/Xmla.js'][1515]++;
    options.password = this.options.password;
  }
  _$jscoverage['dataapi/Xmla.js'][1518]++;
  var soapMessage = _getXmlaSoapMessage(options);
  _$jscoverage['dataapi/Xmla.js'][1519]++;
  this.soapMessage = soapMessage;
  _$jscoverage['dataapi/Xmla.js'][1520]++;
  var myXhr;
  _$jscoverage['dataapi/Xmla.js'][1521]++;
  var ajaxOptions = {async: options.async, timeout: options.requestTimeout, data: soapMessage, error: (function (exception) {
  _$jscoverage['dataapi/Xmla.js'][1526]++;
  options.exception = exception;
  _$jscoverage['dataapi/Xmla.js'][1527]++;
  xmla._requestError(options);
}), complete: (function (xhr) {
  _$jscoverage['dataapi/Xmla.js'][1530]++;
  options.xhr = xhr;
  _$jscoverage['dataapi/Xmla.js'][1531]++;
  xmla._requestSuccess(options);
}), url: options.url};
  _$jscoverage['dataapi/Xmla.js'][1535]++;
  if (options.username) {
    _$jscoverage['dataapi/Xmla.js'][1536]++;
    ajaxOptions.username = options.username;
  }
  _$jscoverage['dataapi/Xmla.js'][1538]++;
  if (options.password) {
    _$jscoverage['dataapi/Xmla.js'][1539]++;
    ajaxOptions.password = options.password;
  }
  _$jscoverage['dataapi/Xmla.js'][1542]++;
  if ((this._fireEvent(Xmla.EVENT_REQUEST, options, true) && (((options.method == Xmla.METHOD_DISCOVER) && this._fireEvent(Xmla.EVENT_DISCOVER, options)) || ((options.method == Xmla.METHOD_EXECUTE) && this._fireEvent(Xmla.EVENT_EXECUTE, options))))) {
    _$jscoverage['dataapi/Xmla.js'][1548]++;
    myXhr = _ajax(ajaxOptions);
  }
  _$jscoverage['dataapi/Xmla.js'][1550]++;
  return this.response;
}), _requestError: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][1553]++;
  this._fireEvent("error", options);
}), _requestSuccess: (function (request) {
  _$jscoverage['dataapi/Xmla.js'][1556]++;
  var xhr = request.xhr;
  _$jscoverage['dataapi/Xmla.js'][1557]++;
  this.responseXML = xhr.responseXML;
  _$jscoverage['dataapi/Xmla.js'][1558]++;
  this.responseText = xhr.responseText;
  _$jscoverage['dataapi/Xmla.js'][1560]++;
  var method = request.method;
  _$jscoverage['dataapi/Xmla.js'][1562]++;
  var soapFault = _getElementsByTagNameNS(this.responseXML, _xmlnsSOAPenvelope, _xmlnsSOAPenvelopePrefix, "Fault");
  _$jscoverage['dataapi/Xmla.js'][1563]++;
  if (soapFault.length) {
    _$jscoverage['dataapi/Xmla.js'][1565]++;
    soapFault = soapFault.item(0);
    _$jscoverage['dataapi/Xmla.js'][1566]++;
    request.exception = new (Xmla.Exception)(Xmla.Exception.TYPE_ERROR, soapFault.getElementsByTagName("faultcode").item(0).childNodes.item(0).data, soapFault.getElementsByTagName("faultstring").item(0).childNodes.item(0).data, null, "_requestSuccess", request);
    _$jscoverage['dataapi/Xmla.js'][1574]++;
    switch (method) {
    case Xmla.METHOD_DISCOVER:
      _$jscoverage['dataapi/Xmla.js'][1576]++;
      this._fireEvent(Xmla.EVENT_DISCOVER_ERROR, request);
      _$jscoverage['dataapi/Xmla.js'][1577]++;
      break;
    case Xmla.METHOD_EXECUTE:
      _$jscoverage['dataapi/Xmla.js'][1579]++;
      this._fireEvent(Xmla.EVENT_EXECUTE_ERROR, request);
      _$jscoverage['dataapi/Xmla.js'][1580]++;
      break;
    }
    _$jscoverage['dataapi/Xmla.js'][1582]++;
    this._fireEvent(Xmla.EVENT_ERROR, request);
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][1585]++;
    switch (method) {
    case Xmla.METHOD_DISCOVER:
      _$jscoverage['dataapi/Xmla.js'][1587]++;
      var rowset = new (Xmla.Rowset)(this.responseXML, request.requestType);
      _$jscoverage['dataapi/Xmla.js'][1588]++;
      request.rowset = rowset;
      _$jscoverage['dataapi/Xmla.js'][1589]++;
      this.response = rowset;
      _$jscoverage['dataapi/Xmla.js'][1590]++;
      this._fireEvent(Xmla.EVENT_DISCOVER_SUCCESS, request);
      _$jscoverage['dataapi/Xmla.js'][1591]++;
      break;
    case Xmla.METHOD_EXECUTE:
      _$jscoverage['dataapi/Xmla.js'][1593]++;
      var response, resultset = null, dataset = null;
      _$jscoverage['dataapi/Xmla.js'][1594]++;
      var format = request.properties[Xmla.PROP_FORMAT];
      _$jscoverage['dataapi/Xmla.js'][1595]++;
      switch (format) {
      case Xmla.PROP_FORMAT_TABULAR:
        _$jscoverage['dataapi/Xmla.js'][1597]++;
        response = (resultset = new (Xmla.Rowset)(this.responseXML));
        _$jscoverage['dataapi/Xmla.js'][1598]++;
        break;
      case Xmla.PROP_FORMAT_MULTIDIMENSIONAL:
        _$jscoverage['dataapi/Xmla.js'][1600]++;
        response = (dataset = new (Xmla.Dataset)(this.responseXML));
        _$jscoverage['dataapi/Xmla.js'][1601]++;
        break;
      }
      _$jscoverage['dataapi/Xmla.js'][1603]++;
      request.resultset = resultset;
      _$jscoverage['dataapi/Xmla.js'][1604]++;
      request.dataset = dataset;
      _$jscoverage['dataapi/Xmla.js'][1605]++;
      this.response = response;
      _$jscoverage['dataapi/Xmla.js'][1606]++;
      this._fireEvent(Xmla.EVENT_EXECUTE_SUCCESS, request);
      _$jscoverage['dataapi/Xmla.js'][1607]++;
      break;
    }
    _$jscoverage['dataapi/Xmla.js'][1609]++;
    this._fireEvent(Xmla.EVENT_SUCCESS, request);
  }
}), execute: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][1668]++;
  var properties = options.properties;
  _$jscoverage['dataapi/Xmla.js'][1669]++;
  if ((! properties)) {
    _$jscoverage['dataapi/Xmla.js'][1670]++;
    properties = {};
    _$jscoverage['dataapi/Xmla.js'][1671]++;
    options.properties = properties;
  }
  _$jscoverage['dataapi/Xmla.js'][1673]++;
  _applyProps(properties, this.options.properties, false);
  _$jscoverage['dataapi/Xmla.js'][1674]++;
  if ((! properties[Xmla.PROP_CONTENT])) {
    _$jscoverage['dataapi/Xmla.js'][1675]++;
    properties[Xmla.PROP_CONTENT] = Xmla.PROP_CONTENT_SCHEMADATA;
  }
  _$jscoverage['dataapi/Xmla.js'][1677]++;
  if ((! properties[Xmla.PROP_FORMAT])) {
    _$jscoverage['dataapi/Xmla.js'][1678]++;
    options.properties[Xmla.PROP_FORMAT] = Xmla.PROP_FORMAT_MULTIDIMENSIONAL;
  }
  _$jscoverage['dataapi/Xmla.js'][1680]++;
  var request = _applyProps(options, {method: Xmla.METHOD_EXECUTE}, true);
  _$jscoverage['dataapi/Xmla.js'][1687]++;
  return this.request(request);
}), executeTabular: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][1696]++;
  if ((! options.properties)) {
    _$jscoverage['dataapi/Xmla.js'][1697]++;
    options.properties = {};
  }
  _$jscoverage['dataapi/Xmla.js'][1699]++;
  options.properties[Xmla.PROP_FORMAT] = Xmla.PROP_FORMAT_TABULAR;
  _$jscoverage['dataapi/Xmla.js'][1700]++;
  return this.execute(options);
}), executeMultiDimensional: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][1709]++;
  if ((! options.properties)) {
    _$jscoverage['dataapi/Xmla.js'][1710]++;
    options.properties = {};
  }
  _$jscoverage['dataapi/Xmla.js'][1712]++;
  options.properties[Xmla.PROP_FORMAT] = Xmla.PROP_FORMAT_MULTIDIMENSIONAL;
  _$jscoverage['dataapi/Xmla.js'][1713]++;
  return this.execute(options);
}), discover: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][1800]++;
  var request = _applyProps(options, {method: Xmla.METHOD_DISCOVER}, true);
  _$jscoverage['dataapi/Xmla.js'][1807]++;
  if ((! request.requestType)) {
    _$jscoverage['dataapi/Xmla.js'][1808]++;
    request.requestType = this.options.requestType;
  }
  _$jscoverage['dataapi/Xmla.js'][1810]++;
  return this.request(request);
}), discoverDataSources: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][1963]++;
  var request = _applyProps(options, {requestType: Xmla.DISCOVER_DATASOURCES}, true);
  _$jscoverage['dataapi/Xmla.js'][1970]++;
  return this.discover(request);
}), discoverProperties: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][2099]++;
  var request = _applyProps(options, {requestType: Xmla.DISCOVER_PROPERTIES}, true);
  _$jscoverage['dataapi/Xmla.js'][2106]++;
  return this.discover(request);
}), discoverSchemaRowsets: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][2149]++;
  var request = _applyProps(options, {requestType: Xmla.DISCOVER_SCHEMA_ROWSETS}, true);
  _$jscoverage['dataapi/Xmla.js'][2156]++;
  return this.discover(request);
}), discoverEnumerators: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][2220]++;
  var request = _applyProps(options, {requestType: Xmla.DISCOVER_ENUMERATORS}, true);
  _$jscoverage['dataapi/Xmla.js'][2227]++;
  return this.discover(request);
}), discoverKeywords: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][2256]++;
  var request = _applyProps(options, {requestType: Xmla.DISCOVER_KEYWORDS}, true);
  _$jscoverage['dataapi/Xmla.js'][2263]++;
  return this.discover(request);
}), discoverLiterals: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][2320]++;
  var request = _applyProps(options, {requestType: Xmla.DISCOVER_LITERALS}, true);
  _$jscoverage['dataapi/Xmla.js'][2327]++;
  return this.discover(request);
}), discoverDBCatalogs: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][2376]++;
  var request = _applyProps(options, {requestType: Xmla.DBSCHEMA_CATALOGS}, true);
  _$jscoverage['dataapi/Xmla.js'][2383]++;
  return this.discover(request);
}), discoverDBColumns: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][2609]++;
  var request = _applyProps(options, {requestType: Xmla.DBSCHEMA_COLUMNS}, true);
  _$jscoverage['dataapi/Xmla.js'][2616]++;
  return this.discover(request);
}), discoverDBProviderTypes: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][2785]++;
  var request = _applyProps(options, {requestType: Xmla.DBSCHEMA_PROVIDER_TYPES}, true);
  _$jscoverage['dataapi/Xmla.js'][2792]++;
  return this.discover(request);
}), discoverDBSchemata: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][2814]++;
  var request = _applyProps(options, {requestType: Xmla.DBSCHEMA_SCHEMATA}, true);
  _$jscoverage['dataapi/Xmla.js'][2821]++;
  return this.discover(request);
}), discoverDBTables: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][2843]++;
  var request = _applyProps(options, {requestType: Xmla.DBSCHEMA_TABLES}, true);
  _$jscoverage['dataapi/Xmla.js'][2850]++;
  return this.discover(request);
}), discoverDBTablesInfo: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][2872]++;
  var request = _applyProps(options, {requestType: Xmla.DBSCHEMA_TABLES_INFO}, true);
  _$jscoverage['dataapi/Xmla.js'][2879]++;
  return this.discover(request);
}), discoverMDActions: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][2901]++;
  var request = _applyProps(options, {requestType: Xmla.MDSCHEMA_ACTIONS}, true);
  _$jscoverage['dataapi/Xmla.js'][2908]++;
  return this.discover(request);
}), discoverMDCubes: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][3056]++;
  var request = _applyProps(options, {requestType: Xmla.MDSCHEMA_CUBES}, true);
  _$jscoverage['dataapi/Xmla.js'][3063]++;
  return this.discover(request);
}), discoverMDDimensions: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][3224]++;
  var request = _applyProps(options, {requestType: Xmla.MDSCHEMA_DIMENSIONS}, true);
  _$jscoverage['dataapi/Xmla.js'][3231]++;
  return this.discover(request);
}), discoverMDFunctions: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][3253]++;
  var request = _applyProps(options, {requestType: Xmla.MDSCHEMA_FUNCTIONS}, true);
  _$jscoverage['dataapi/Xmla.js'][3260]++;
  return this.discover(request);
}), discoverMDHierarchies: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][3457]++;
  var request = _applyProps(options, {requestType: Xmla.MDSCHEMA_HIERARCHIES}, true);
  _$jscoverage['dataapi/Xmla.js'][3464]++;
  return this.discover(request);
}), discoverMDLevels: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][3688]++;
  var request = _applyProps(options, {requestType: Xmla.MDSCHEMA_LEVELS}, true);
  _$jscoverage['dataapi/Xmla.js'][3695]++;
  return this.discover(request);
}), discoverMDMeasures: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][3857]++;
  var request = _applyProps(options, {requestType: Xmla.MDSCHEMA_MEASURES}, true);
  _$jscoverage['dataapi/Xmla.js'][3864]++;
  return this.discover(request);
}), discoverMDMembers: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][4020]++;
  var request = _applyProps(options, {requestType: Xmla.MDSCHEMA_MEMBERS}, true);
  _$jscoverage['dataapi/Xmla.js'][4027]++;
  return this.discover(request);
}), discoverMDProperties: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][4049]++;
  var request = _applyProps(options, {requestType: Xmla.MDSCHEMA_PROPERTIES}, true);
  _$jscoverage['dataapi/Xmla.js'][4056]++;
  return this.discover(request);
}), discoverMDSets: (function (options) {
  _$jscoverage['dataapi/Xmla.js'][4078]++;
  var request = _applyProps(options, {requestType: Xmla.MDSCHEMA_SETS}, true);
  _$jscoverage['dataapi/Xmla.js'][4085]++;
  return this.discover(request);
})};
  _$jscoverage['dataapi/Xmla.js'][4089]++;
  function _getComplexType(node, name) {
    _$jscoverage['dataapi/Xmla.js'][4090]++;
    var types = _getElementsByTagNameNS(node, _xmlnsSchema, _xmlnsSchemaPrefix, "complexType"), numTypes = types.length, type, i;
    _$jscoverage['dataapi/Xmla.js'][4094]++;
    for (i = 0; (i < numTypes); (i += 1)) {
      _$jscoverage['dataapi/Xmla.js'][4095]++;
      type = types.item(i);
      _$jscoverage['dataapi/Xmla.js'][4096]++;
      if ((type.getAttribute("name") === name)) {
        _$jscoverage['dataapi/Xmla.js'][4097]++;
        return type;
      }
}
    _$jscoverage['dataapi/Xmla.js'][4100]++;
    return null;
}
  _$jscoverage['dataapi/Xmla.js'][4130]++;
  Xmla.Rowset = (function (node, requestType) {
  _$jscoverage['dataapi/Xmla.js'][4131]++;
  this._node = node;
  _$jscoverage['dataapi/Xmla.js'][4132]++;
  this._type = requestType;
  _$jscoverage['dataapi/Xmla.js'][4133]++;
  this._initData();
  _$jscoverage['dataapi/Xmla.js'][4134]++;
  return this;
});
  _$jscoverage['dataapi/Xmla.js'][4148]++;
  Xmla.Rowset.MD_DIMTYPE_UNKNOWN = 0;
  _$jscoverage['dataapi/Xmla.js'][4160]++;
  Xmla.Rowset.MD_DIMTYPE_TIME = 1;
  _$jscoverage['dataapi/Xmla.js'][4172]++;
  Xmla.Rowset.MD_DIMTYPE_MEASURE = 2;
  _$jscoverage['dataapi/Xmla.js'][4184]++;
  Xmla.Rowset.MD_DIMTYPE_OTHER = 3;
  _$jscoverage['dataapi/Xmla.js'][4196]++;
  Xmla.Rowset.MD_DIMTYPE_QUANTITATIVE = 5;
  _$jscoverage['dataapi/Xmla.js'][4208]++;
  Xmla.Rowset.MD_DIMTYPE_ACCOUNTS = 6;
  _$jscoverage['dataapi/Xmla.js'][4220]++;
  Xmla.Rowset.MD_DIMTYPE_CUSTOMERS = 7;
  _$jscoverage['dataapi/Xmla.js'][4232]++;
  Xmla.Rowset.MD_DIMTYPE_PRODUCTS = 8;
  _$jscoverage['dataapi/Xmla.js'][4244]++;
  Xmla.Rowset.MD_DIMTYPE_SCENARIO = 9;
  _$jscoverage['dataapi/Xmla.js'][4256]++;
  Xmla.Rowset.MD_DIMTYPE_UTILIY = 10;
  _$jscoverage['dataapi/Xmla.js'][4268]++;
  Xmla.Rowset.MD_DIMTYPE_CURRENCY = 11;
  _$jscoverage['dataapi/Xmla.js'][4280]++;
  Xmla.Rowset.MD_DIMTYPE_RATES = 12;
  _$jscoverage['dataapi/Xmla.js'][4292]++;
  Xmla.Rowset.MD_DIMTYPE_CHANNEL = 13;
  _$jscoverage['dataapi/Xmla.js'][4304]++;
  Xmla.Rowset.MD_DIMTYPE_PROMOTION = 14;
  _$jscoverage['dataapi/Xmla.js'][4316]++;
  Xmla.Rowset.MD_DIMTYPE_ORGANIZATION = 15;
  _$jscoverage['dataapi/Xmla.js'][4328]++;
  Xmla.Rowset.MD_DIMTYPE_BILL_OF_MATERIALS = 16;
  _$jscoverage['dataapi/Xmla.js'][4340]++;
  Xmla.Rowset.MD_DIMTYPE_GEOGRAPHY = 17;
  _$jscoverage['dataapi/Xmla.js'][4351]++;
  Xmla.Rowset.MD_STRUCTURE_FULLYBALANCED = 0;
  _$jscoverage['dataapi/Xmla.js'][4361]++;
  Xmla.Rowset.MD_STRUCTURE_RAGGEDBALANCED = 1;
  _$jscoverage['dataapi/Xmla.js'][4371]++;
  Xmla.Rowset.MD_STRUCTURE_UNBALANCED = 2;
  _$jscoverage['dataapi/Xmla.js'][4381]++;
  Xmla.Rowset.MD_STRUCTURE_NETWORK = 3;
  _$jscoverage['dataapi/Xmla.js'][4393]++;
  Xmla.Rowset.MD_USER_DEFINED = 1;
  _$jscoverage['dataapi/Xmla.js'][4404]++;
  Xmla.Rowset.MD_SYSTEM_ENABLED = 2;
  _$jscoverage['dataapi/Xmla.js'][4415]++;
  Xmla.Rowset.MD_SYSTEM_INTERNAL = 4;
  _$jscoverage['dataapi/Xmla.js'][4427]++;
  Xmla.Rowset.MDMEMBER_TYPE_REGULAR = 1;
  _$jscoverage['dataapi/Xmla.js'][4438]++;
  Xmla.Rowset.MDMEMBER_TYPE_ALL = 2;
  _$jscoverage['dataapi/Xmla.js'][4449]++;
  Xmla.Rowset.MDMEMBER_TYPE_FORMULA = 3;
  _$jscoverage['dataapi/Xmla.js'][4460]++;
  Xmla.Rowset.MDMEMBER_TYPE_MEASURE = 4;
  _$jscoverage['dataapi/Xmla.js'][4471]++;
  Xmla.Rowset.MDMEMBER_TYPE_UNKNOWN = 0;
  _$jscoverage['dataapi/Xmla.js'][4473]++;
  Xmla.Rowset.KEYS = {};
  _$jscoverage['dataapi/Xmla.js'][4474]++;
  Xmla.Rowset.KEYS[Xmla.DBSCHEMA_CATALOGS] = ["CATALOG_NAME"];
  _$jscoverage['dataapi/Xmla.js'][4475]++;
  Xmla.Rowset.KEYS[Xmla.DBSCHEMA_COLUMNS] = ["TABLE_CATALOG", "TABLE_NAME", "COLUMN_NAME"];
  _$jscoverage['dataapi/Xmla.js'][4476]++;
  Xmla.Rowset.KEYS[Xmla.DBSCHEMA_PROVIDER_TYPES] = ["TYPE_NAME"];
  _$jscoverage['dataapi/Xmla.js'][4477]++;
  Xmla.Rowset.KEYS[Xmla.DBSCHEMA_SCHEMATA] = ["CATALOG_NAME", "SCHEMA_NAME"];
  _$jscoverage['dataapi/Xmla.js'][4478]++;
  Xmla.Rowset.KEYS[Xmla.DBSCHEMA_TABLES] = ["TABLE_CATALOG", "TABLE_NAME"];
  _$jscoverage['dataapi/Xmla.js'][4479]++;
  Xmla.Rowset.KEYS[Xmla.DBSCHEMA_TABLES_INFO] = ["TABLE_CATALOG", "TABLE_NAME"];
  _$jscoverage['dataapi/Xmla.js'][4480]++;
  Xmla.Rowset.KEYS[Xmla.DISCOVER_DATASOURCES] = ["DataSourceName"];
  _$jscoverage['dataapi/Xmla.js'][4481]++;
  Xmla.Rowset.KEYS[Xmla.DISCOVER_ENUMERATORS] = ["EnumName", "ElementName"];
  _$jscoverage['dataapi/Xmla.js'][4482]++;
  Xmla.Rowset.KEYS[Xmla.DISCOVER_KEYWORDS] = ["Keyword"];
  _$jscoverage['dataapi/Xmla.js'][4483]++;
  Xmla.Rowset.KEYS[Xmla.DISCOVER_LITERALS] = ["LiteralName"];
  _$jscoverage['dataapi/Xmla.js'][4484]++;
  Xmla.Rowset.KEYS[Xmla.DISCOVER_PROPERTIES] = ["PropertyName"];
  _$jscoverage['dataapi/Xmla.js'][4485]++;
  Xmla.Rowset.KEYS[Xmla.DISCOVER_SCHEMA_ROWSETS] = ["SchemaName"];
  _$jscoverage['dataapi/Xmla.js'][4486]++;
  Xmla.Rowset.KEYS[Xmla.MDSCHEMA_ACTIONS] = ["CATALOG_NAME", "CUBE_NAME", "ACTION_NAME"];
  _$jscoverage['dataapi/Xmla.js'][4487]++;
  Xmla.Rowset.KEYS[Xmla.MDSCHEMA_CUBES] = ["CATALOG_NAME", "CUBE_NAME"];
  _$jscoverage['dataapi/Xmla.js'][4488]++;
  Xmla.Rowset.KEYS[Xmla.MDSCHEMA_DIMENSIONS] = ["CATALOG_NAME", "CUBE_NAME", "DIMENSION_UNIQUE_NAME"];
  _$jscoverage['dataapi/Xmla.js'][4489]++;
  Xmla.Rowset.KEYS[Xmla.MDSCHEMA_FUNCTIONS] = ["FUNCTION_NAME", "PARAMETER_LIST"];
  _$jscoverage['dataapi/Xmla.js'][4490]++;
  Xmla.Rowset.KEYS[Xmla.MDSCHEMA_HIERARCHIES] = ["CATALOG_NAME", "CUBE_NAME", "DIMENSION_UNIQUE_NAME", "HIERARCHY_UNIQUE_NAME"];
  _$jscoverage['dataapi/Xmla.js'][4491]++;
  Xmla.Rowset.KEYS[Xmla.MDSCHEMA_LEVELS] = ["CATALOG_NAME", "CUBE_NAME", "DIMENSION_UNIQUE_NAME", "HIERARCHY_UNIQUE_NAME", "LEVEL_UNIQUE_NAME"];
  _$jscoverage['dataapi/Xmla.js'][4492]++;
  Xmla.Rowset.KEYS[Xmla.MDSCHEMA_MEASURES] = ["CATALOG_NAME", "CUBE_NAME", "MEASURE_NAME"];
  _$jscoverage['dataapi/Xmla.js'][4493]++;
  Xmla.Rowset.KEYS[Xmla.MDSCHEMA_MEMBERS] = ["CATALOG_NAME", "CUBE_NAME", "DIMENSION_UNIQUE_NAME", "HIERARCHY_UNIQUE_NAME", "LEVEL_UNIQUE_NAME", "MEMBER_UNIQUE_NAME"];
  _$jscoverage['dataapi/Xmla.js'][4494]++;
  Xmla.Rowset.KEYS[Xmla.MDSCHEMA_PROPERTIES] = [];
  _$jscoverage['dataapi/Xmla.js'][4495]++;
  Xmla.Rowset.KEYS[Xmla.MDSCHEMA_SETS] = [];
  _$jscoverage['dataapi/Xmla.js'][4498]++;
  function _boolConverter(val) {
    _$jscoverage['dataapi/Xmla.js'][4499]++;
    return ((val === "true")? true: false);
}
  _$jscoverage['dataapi/Xmla.js'][4502]++;
  function _intConverter(val) {
    _$jscoverage['dataapi/Xmla.js'][4503]++;
    return parseInt(val, 10);
}
  _$jscoverage['dataapi/Xmla.js'][4506]++;
  function _floatConverter(val) {
    _$jscoverage['dataapi/Xmla.js'][4507]++;
    return parseFloat(val, 10);
}
  _$jscoverage['dataapi/Xmla.js'][4510]++;
  function _textConverter(val) {
    _$jscoverage['dataapi/Xmla.js'][4511]++;
    return val;
}
  _$jscoverage['dataapi/Xmla.js'][4514]++;
  function _dateTimeConverter(val) {
    _$jscoverage['dataapi/Xmla.js'][4515]++;
    return Date.parse(val);
}
  _$jscoverage['dataapi/Xmla.js'][4518]++;
  function _restrictionsConverter(val) {
    _$jscoverage['dataapi/Xmla.js'][4519]++;
    return val;
}
  _$jscoverage['dataapi/Xmla.js'][4522]++;
  function _arrayConverter(nodes, valueConverter) {
    _$jscoverage['dataapi/Xmla.js'][4523]++;
    var arr = [], numNodes = nodes.length, node;
    _$jscoverage['dataapi/Xmla.js'][4527]++;
    for (var i = 0; (i < numNodes); (i += 1)) {
      _$jscoverage['dataapi/Xmla.js'][4528]++;
      node = nodes.item(i);
      _$jscoverage['dataapi/Xmla.js'][4529]++;
      arr.push(valueConverter(_getElementText(node)));
}
    _$jscoverage['dataapi/Xmla.js'][4531]++;
    return arr;
}
  _$jscoverage['dataapi/Xmla.js'][4534]++;
  function _getValueConverter(type) {
    _$jscoverage['dataapi/Xmla.js'][4535]++;
    var valueConverter = {};
    _$jscoverage['dataapi/Xmla.js'][4536]++;
    switch (type) {
    case "xsd:boolean":
      _$jscoverage['dataapi/Xmla.js'][4538]++;
      valueConverter.func = _boolConverter;
      _$jscoverage['dataapi/Xmla.js'][4539]++;
      valueConverter.jsType = "boolean";
      _$jscoverage['dataapi/Xmla.js'][4540]++;
      break;
    case "xsd:decimal":
    case "xsd:double":
    case "xsd:float":
      _$jscoverage['dataapi/Xmla.js'][4544]++;
      valueConverter.func = _floatConverter;
      _$jscoverage['dataapi/Xmla.js'][4545]++;
      valueConverter.jsType = "number";
      _$jscoverage['dataapi/Xmla.js'][4546]++;
      break;
    case "xsd:int":
    case "xsd:integer":
    case "xsd:nonPositiveInteger":
    case "xsd:negativeInteger":
    case "xsd:nonNegativeInteger":
    case "xsd:positiveInteger":
    case "xsd:short":
    case "xsd:byte":
    case "xsd:long":
    case "xsd:unsignedLong":
    case "xsd:unsignedInt":
    case "xsd:unsignedShort":
    case "xsd:unsignedByte":
      _$jscoverage['dataapi/Xmla.js'][4560]++;
      valueConverter.func = _intConverter;
      _$jscoverage['dataapi/Xmla.js'][4561]++;
      valueConverter.jsType = "number";
      _$jscoverage['dataapi/Xmla.js'][4562]++;
      break;
    case "xsd:string":
      _$jscoverage['dataapi/Xmla.js'][4564]++;
      valueConverter.func = _textConverter;
      _$jscoverage['dataapi/Xmla.js'][4565]++;
      valueConverter.jsType = "string";
      _$jscoverage['dataapi/Xmla.js'][4566]++;
      break;
    case "xsd:dateTime":
      _$jscoverage['dataapi/Xmla.js'][4568]++;
      valueConverter.func = _dateTimeConverter;
      _$jscoverage['dataapi/Xmla.js'][4569]++;
      valueConverter.jsType = "object";
      _$jscoverage['dataapi/Xmla.js'][4570]++;
      break;
    case "Restrictions":
      _$jscoverage['dataapi/Xmla.js'][4572]++;
      valueConverter.func = _restrictionsConverter;
      _$jscoverage['dataapi/Xmla.js'][4573]++;
      valueConverter.jsType = "object";
      _$jscoverage['dataapi/Xmla.js'][4574]++;
      break;
    default:
      _$jscoverage['dataapi/Xmla.js'][4576]++;
      valueConverter.func = _textConverter;
      _$jscoverage['dataapi/Xmla.js'][4577]++;
      valueConverter.jsType = "object";
      _$jscoverage['dataapi/Xmla.js'][4578]++;
      break;
    }
    _$jscoverage['dataapi/Xmla.js'][4580]++;
    return valueConverter;
}
  _$jscoverage['dataapi/Xmla.js'][4583]++;
  function _getElementValue(el) {
    _$jscoverage['dataapi/Xmla.js'][4584]++;
    var txt = _getElementText(el), type = el.getAttribute("type");
    _$jscoverage['dataapi/Xmla.js'][4586]++;
    converter;
    _$jscoverage['dataapi/Xmla.js'][4588]++;
    if (type) {
      _$jscoverage['dataapi/Xmla.js'][4589]++;
      converter = _getValueConverter(type);
      _$jscoverage['dataapi/Xmla.js'][4590]++;
      if (converter) {
        _$jscoverage['dataapi/Xmla.js'][4591]++;
        return converter.func(txt);
      }
      else {
        _$jscoverage['dataapi/Xmla.js'][4594]++;
        return txt;
      }
    }
    else {
      _$jscoverage['dataapi/Xmla.js'][4598]++;
      return txt;
    }
}
  _$jscoverage['dataapi/Xmla.js'][4602]++;
  Xmla.Rowset.prototype = {_node: null, _type: null, _row: null, _rows: null, numRows: null, fieldOrder: null, fields: null, _fieldCount: null, _initData: (function () {
  _$jscoverage['dataapi/Xmla.js'][4612]++;
  this._rows = _getElementsByTagNameNS(this._node, _xmlnsRowset, null, "row");
  _$jscoverage['dataapi/Xmla.js'][4613]++;
  this.numRows = (this._rows? this._rows.length: 0);
  _$jscoverage['dataapi/Xmla.js'][4614]++;
  this.reset();
  _$jscoverage['dataapi/Xmla.js'][4615]++;
  this.fieldOrder = [];
  _$jscoverage['dataapi/Xmla.js'][4616]++;
  this.fields = {};
  _$jscoverage['dataapi/Xmla.js'][4617]++;
  this._fieldCount = 0;
  _$jscoverage['dataapi/Xmla.js'][4618]++;
  var rowSchema = _getComplexType(this._node, "row");
  _$jscoverage['dataapi/Xmla.js'][4619]++;
  if (rowSchema) {
    _$jscoverage['dataapi/Xmla.js'][4620]++;
    var seq = _getElementsByTagNameNS(rowSchema, _xmlnsSchema, _xmlnsSchemaPrefix, "sequence").item(0), seqChildren = seq.childNodes, numChildren = seqChildren.length, seqChild, fieldLabel, fieldName, minOccurs, maxOccurs, type, valueConverter;
    _$jscoverage['dataapi/Xmla.js'][4623]++;
    for (var i = 0; (i < numChildren); (i += 1)) {
      _$jscoverage['dataapi/Xmla.js'][4624]++;
      seqChild = seqChildren.item(i);
      _$jscoverage['dataapi/Xmla.js'][4625]++;
      if ((seqChild.nodeType !== 1)) {
        _$jscoverage['dataapi/Xmla.js'][4626]++;
        continue;
      }
      _$jscoverage['dataapi/Xmla.js'][4628]++;
      fieldLabel = _getAttributeNS(seqChild, _xmlnsSQL, _xmlnsSQLPrefix, "field");
      _$jscoverage['dataapi/Xmla.js'][4629]++;
      fieldName = seqChild.getAttribute("name");
      _$jscoverage['dataapi/Xmla.js'][4630]++;
      type = seqChild.getAttribute("type");
      _$jscoverage['dataapi/Xmla.js'][4631]++;
      if (((type === null) && this._row)) {
        _$jscoverage['dataapi/Xmla.js'][4632]++;
        var val = this._row.getElementsByTagName(fieldName);
        _$jscoverage['dataapi/Xmla.js'][4633]++;
        if (val.length) {
          _$jscoverage['dataapi/Xmla.js'][4634]++;
          type = _getAttributeNS(val.item(0), _xmlnsSchemaInstance, _xmlnsSchemaInstancePrefix, "type");
        }
      }
      _$jscoverage['dataapi/Xmla.js'][4642]++;
      if (((! type) && (this._type == Xmla.DISCOVER_SCHEMA_ROWSETS) && (fieldName === "Restrictions"))) {
        _$jscoverage['dataapi/Xmla.js'][4643]++;
        type = "Restrictions";
      }
      _$jscoverage['dataapi/Xmla.js'][4645]++;
      minOccurs = seqChild.getAttribute("minOccurs");
      _$jscoverage['dataapi/Xmla.js'][4646]++;
      if (minOccurs) {
        _$jscoverage['dataapi/Xmla.js'][4647]++;
        minOccurs = parseInt(minOccurs, 10);
      }
      else {
        _$jscoverage['dataapi/Xmla.js'][4650]++;
        minOccurs = 1;
      }
      _$jscoverage['dataapi/Xmla.js'][4652]++;
      maxOccurs = seqChild.getAttribute("maxOccurs");
      _$jscoverage['dataapi/Xmla.js'][4653]++;
      if (maxOccurs) {
        _$jscoverage['dataapi/Xmla.js'][4654]++;
        if ((maxOccurs === "unbounded")) {
          _$jscoverage['dataapi/Xmla.js'][4655]++;
          maxOccurs = Infinity;
        }
        else {
          _$jscoverage['dataapi/Xmla.js'][4658]++;
          minOccurs = parseInt(maxOccurs, 10);
        }
      }
      else {
        _$jscoverage['dataapi/Xmla.js'][4662]++;
        maxOccurs = 1;
      }
      _$jscoverage['dataapi/Xmla.js'][4664]++;
      valueConverter = _getValueConverter(type);
      _$jscoverage['dataapi/Xmla.js'][4665]++;
      this.fields[fieldLabel] = {name: fieldName, label: fieldLabel, index: (this._fieldCount++), type: type, jsType: valueConverter.jsType, minOccurs: minOccurs, maxOccurs: maxOccurs, getter: this._createFieldGetter(fieldName, valueConverter.func, minOccurs, maxOccurs)};
      _$jscoverage['dataapi/Xmla.js'][4675]++;
      this.fieldOrder.push(fieldLabel);
}
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][4679]++;
    Xmla.Exception._newError("ERROR_PARSING_RESPONSE", "Xmla.Rowset", this._node)._throw();
  }
}), _createFieldGetter: (function (fieldName, valueConverter, minOccurs, maxOccurs) {
  _$jscoverage['dataapi/Xmla.js'][4687]++;
  var me = this;
  _$jscoverage['dataapi/Xmla.js'][4688]++;
  var getter;
  _$jscoverage['dataapi/Xmla.js'][4689]++;
  if ((maxOccurs === 1)) {
    _$jscoverage['dataapi/Xmla.js'][4690]++;
    if ((minOccurs === 1)) {
      _$jscoverage['dataapi/Xmla.js'][4691]++;
      getter = (function () {
  _$jscoverage['dataapi/Xmla.js'][4692]++;
  var els = _getElementsByTagNameNS(this._row, _xmlnsRowset, null, fieldName);
  _$jscoverage['dataapi/Xmla.js'][4693]++;
  return valueConverter(_getElementText(els.item(0)));
});
    }
    else {
      _$jscoverage['dataapi/Xmla.js'][4697]++;
      if ((minOccurs === 0)) {
        _$jscoverage['dataapi/Xmla.js'][4698]++;
        getter = (function () {
  _$jscoverage['dataapi/Xmla.js'][4699]++;
  var els = _getElementsByTagNameNS(this._row, _xmlnsRowset, null, fieldName);
  _$jscoverage['dataapi/Xmla.js'][4700]++;
  if (els.length) {
    _$jscoverage['dataapi/Xmla.js'][4701]++;
    return valueConverter(_getElementText(els.item(0)));
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][4704]++;
    return null;
  }
});
      }
    }
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][4710]++;
    if ((minOccurs === 1)) {
      _$jscoverage['dataapi/Xmla.js'][4711]++;
      getter = (function () {
  _$jscoverage['dataapi/Xmla.js'][4712]++;
  var els = _getElementsByTagNameNS(this._row, _xmlnsRowset, null, fieldName);
  _$jscoverage['dataapi/Xmla.js'][4713]++;
  return _arrayConverter(els, valueConverter);
});
    }
    else {
      _$jscoverage['dataapi/Xmla.js'][4717]++;
      if ((minOccurs === 0)) {
        _$jscoverage['dataapi/Xmla.js'][4718]++;
        getter = (function () {
  _$jscoverage['dataapi/Xmla.js'][4719]++;
  var els = _getElementsByTagNameNS(this._row, _xmlnsRowset, null, fieldName);
  _$jscoverage['dataapi/Xmla.js'][4720]++;
  if (els.length) {
    _$jscoverage['dataapi/Xmla.js'][4721]++;
    return _arrayConverter(els, valueConverter);
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][4724]++;
    return null;
  }
});
      }
    }
  }
  _$jscoverage['dataapi/Xmla.js'][4728]++;
  return getter;
}), getType: (function () {
  _$jscoverage['dataapi/Xmla.js'][4738]++;
  return this._type;
}), getFields: (function () {
  _$jscoverage['dataapi/Xmla.js'][4750]++;
  var f = [], fieldCount = this._fieldCount, fieldOrder = this.fieldOrder;
  _$jscoverage['dataapi/Xmla.js'][4754]++;
  for (var i = 0; (i < fieldCount); (i += 1)) {
    _$jscoverage['dataapi/Xmla.js'][4755]++;
    f[i] = this.fieldDef(fieldOrder[i]);
}
  _$jscoverage['dataapi/Xmla.js'][4757]++;
  return f;
}), getFieldNames: (function () {
  _$jscoverage['dataapi/Xmla.js'][4767]++;
  var fieldNames = [];
  _$jscoverage['dataapi/Xmla.js'][4768]++;
  for (var i = 0, count = this._fieldCount; (i < count); (i += 1)) {
    _$jscoverage['dataapi/Xmla.js'][4769]++;
    fieldNames[i] = this.fieldOrder[i];
}
  _$jscoverage['dataapi/Xmla.js'][4771]++;
  return fieldNames;
}), hasMoreRows: (function () {
  _$jscoverage['dataapi/Xmla.js'][4788]++;
  return (this.numRows > this.rowIndex);
}), next: (function () {
  _$jscoverage['dataapi/Xmla.js'][4799]++;
  this.rowIndex += 1;
  _$jscoverage['dataapi/Xmla.js'][4800]++;
  this._row = this._rows.item(this.rowIndex);
  _$jscoverage['dataapi/Xmla.js'][4801]++;
  return this.rowIndex;
}), curr: (function () {
  _$jscoverage['dataapi/Xmla.js'][4813]++;
  return this.rowIndex;
}), rowCount: (function () {
  _$jscoverage['dataapi/Xmla.js'][4822]++;
  return this.numRows;
}), reset: (function () {
  _$jscoverage['dataapi/Xmla.js'][4830]++;
  this.rowIndex = 0;
  _$jscoverage['dataapi/Xmla.js'][4831]++;
  this._row = (this.hasMoreRows()? this._rows.item(this.rowIndex): null);
}), fieldDef: (function (name) {
  _$jscoverage['dataapi/Xmla.js'][4850]++;
  var field = this.fields[name];
  _$jscoverage['dataapi/Xmla.js'][4851]++;
  if ((! field)) {
    _$jscoverage['dataapi/Xmla.js'][4852]++;
    Xmla.Exception._newError("INVALID_FIELD", "Xmla.Rowset.fieldDef", name)._throw();
  }
  _$jscoverage['dataapi/Xmla.js'][4858]++;
  return field;
}), fieldIndex: (function (name) {
  _$jscoverage['dataapi/Xmla.js'][4868]++;
  return this.fieldDef(name).index;
}), fieldName: (function (index) {
  _$jscoverage['dataapi/Xmla.js'][4878]++;
  var fieldName = this.fieldOrder[index];
  _$jscoverage['dataapi/Xmla.js'][4879]++;
  if ((! fieldName)) {
    _$jscoverage['dataapi/Xmla.js'][4880]++;
    Xmla.Exception._newError("INVALID_FIELD", "Xmla.Rowset.fieldDef", index)._throw();
  }
  _$jscoverage['dataapi/Xmla.js'][4886]++;
  return fieldName;
}), fieldVal: (function (name) {
  _$jscoverage['dataapi/Xmla.js'][4895]++;
  if (_isNum(name)) {
    _$jscoverage['dataapi/Xmla.js'][4896]++;
    name = this.fieldName(name);
  }
  _$jscoverage['dataapi/Xmla.js'][4898]++;
  return this.fieldDef(name).getter.call(this);
}), fieldCount: (function () {
  _$jscoverage['dataapi/Xmla.js'][4906]++;
  return this._fieldCount;
}), close: (function () {
  _$jscoverage['dataapi/Xmla.js'][4914]++;
  this._node = null;
  _$jscoverage['dataapi/Xmla.js'][4915]++;
  this._row = null;
  _$jscoverage['dataapi/Xmla.js'][4916]++;
  this._rows = null;
}), readAsArray: (function (array) {
  _$jscoverage['dataapi/Xmla.js'][4931]++;
  var fields = this.fields, fieldName, fieldDef;
  _$jscoverage['dataapi/Xmla.js'][4932]++;
  if ((! array)) {
    _$jscoverage['dataapi/Xmla.js'][4933]++;
    array = [];
  }
  _$jscoverage['dataapi/Xmla.js'][4935]++;
  for (fieldName in fields) {
    _$jscoverage['dataapi/Xmla.js'][4936]++;
    if (fields.hasOwnProperty(fieldName)) {
      _$jscoverage['dataapi/Xmla.js'][4937]++;
      fieldDef = fields[fieldName];
      _$jscoverage['dataapi/Xmla.js'][4938]++;
      array[fieldDef.index] = fieldDef.getter.call(this);
    }
}
  _$jscoverage['dataapi/Xmla.js'][4941]++;
  return array;
}), fetchAsArray: (function (array) {
  _$jscoverage['dataapi/Xmla.js'][4958]++;
  if (this.hasMoreRows()) {
    _$jscoverage['dataapi/Xmla.js'][4959]++;
    array = this.readAsArray(array);
    _$jscoverage['dataapi/Xmla.js'][4960]++;
    this.next();
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][4962]++;
    array = false;
  }
  _$jscoverage['dataapi/Xmla.js'][4964]++;
  return array;
}), readAsObject: (function (object) {
  _$jscoverage['dataapi/Xmla.js'][4979]++;
  var fields = this.fields, fieldName, fieldDef;
  _$jscoverage['dataapi/Xmla.js'][4980]++;
  if ((! object)) {
    _$jscoverage['dataapi/Xmla.js'][4981]++;
    object = {};
  }
  _$jscoverage['dataapi/Xmla.js'][4983]++;
  for (fieldName in fields) {
    _$jscoverage['dataapi/Xmla.js'][4984]++;
    if (fields.hasOwnProperty(fieldName)) {
      _$jscoverage['dataapi/Xmla.js'][4985]++;
      fieldDef = fields[fieldName];
      _$jscoverage['dataapi/Xmla.js'][4986]++;
      object[fieldName] = fieldDef.getter.call(this);
    }
}
  _$jscoverage['dataapi/Xmla.js'][4989]++;
  return object;
}), fetchAsObject: (function (object) {
  _$jscoverage['dataapi/Xmla.js'][5006]++;
  if (this.hasMoreRows()) {
    _$jscoverage['dataapi/Xmla.js'][5007]++;
    object = this.readAsObject(object);
    _$jscoverage['dataapi/Xmla.js'][5008]++;
    this.next();
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][5010]++;
    object = false;
  }
  _$jscoverage['dataapi/Xmla.js'][5012]++;
  return object;
}), fetchCustom: (function (func) {
  _$jscoverage['dataapi/Xmla.js'][5025]++;
  var object;
  _$jscoverage['dataapi/Xmla.js'][5026]++;
  if (this.hasMoreRows()) {
    _$jscoverage['dataapi/Xmla.js'][5027]++;
    object = func.call(this);
    _$jscoverage['dataapi/Xmla.js'][5028]++;
    this.next();
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][5030]++;
    object = false;
  }
  _$jscoverage['dataapi/Xmla.js'][5032]++;
  return object;
}), fetchAllAsArray: (function (rows) {
  _$jscoverage['dataapi/Xmla.js'][5042]++;
  var row;
  _$jscoverage['dataapi/Xmla.js'][5043]++;
  if ((! rows)) {
    _$jscoverage['dataapi/Xmla.js'][5044]++;
    rows = [];
  }
  _$jscoverage['dataapi/Xmla.js'][5046]++;
  while ((row = this.fetchAsArray())) {
    _$jscoverage['dataapi/Xmla.js'][5047]++;
    rows.push(row);
}
  _$jscoverage['dataapi/Xmla.js'][5049]++;
  return rows;
}), fetchAllAsObject: (function (rows) {
  _$jscoverage['dataapi/Xmla.js'][5059]++;
  var row;
  _$jscoverage['dataapi/Xmla.js'][5060]++;
  if ((! rows)) {
    _$jscoverage['dataapi/Xmla.js'][5061]++;
    rows = [];
  }
  _$jscoverage['dataapi/Xmla.js'][5063]++;
  while ((row = this.fetchAsObject())) {
    _$jscoverage['dataapi/Xmla.js'][5064]++;
    rows.push(row);
}
  _$jscoverage['dataapi/Xmla.js'][5066]++;
  return rows;
}), fetchAllCustom: (function (rows, func) {
  _$jscoverage['dataapi/Xmla.js'][5076]++;
  var row;
  _$jscoverage['dataapi/Xmla.js'][5077]++;
  if ((! rows)) {
    _$jscoverage['dataapi/Xmla.js'][5078]++;
    rows = [];
  }
  _$jscoverage['dataapi/Xmla.js'][5080]++;
  while ((row = this.fetchCustom(func))) {
    _$jscoverage['dataapi/Xmla.js'][5081]++;
    rows.push(row);
}
  _$jscoverage['dataapi/Xmla.js'][5083]++;
  return rows;
}), mapAsObject: (function (map, key, row) {
  _$jscoverage['dataapi/Xmla.js'][5091]++;
  var k, v, p, i, len = key.length, last = (len - 1), m = map;
  _$jscoverage['dataapi/Xmla.js'][5092]++;
  for (i = 0; (i < len); (i += 1)) {
    _$jscoverage['dataapi/Xmla.js'][5093]++;
    k = key[i];
    _$jscoverage['dataapi/Xmla.js'][5094]++;
    v = row[k];
    _$jscoverage['dataapi/Xmla.js'][5095]++;
    p = m[v];
    _$jscoverage['dataapi/Xmla.js'][5096]++;
    if (p) {
      _$jscoverage['dataapi/Xmla.js'][5097]++;
      if ((i === last)) {
        _$jscoverage['dataapi/Xmla.js'][5098]++;
        if ((p instanceof Array)) {
          _$jscoverage['dataapi/Xmla.js'][5099]++;
          p.push(row);
        }
        else {
          _$jscoverage['dataapi/Xmla.js'][5102]++;
          m[v] = [p, row];
        }
      }
      else {
        _$jscoverage['dataapi/Xmla.js'][5106]++;
        m = p;
      }
    }
    else {
      _$jscoverage['dataapi/Xmla.js'][5110]++;
      if ((i === last)) {
        _$jscoverage['dataapi/Xmla.js'][5111]++;
        m[v] = row;
      }
      else {
        _$jscoverage['dataapi/Xmla.js'][5113]++;
        m = (m[v] = {});
      }
    }
}
}), mapAllAsObject: (function (key, map) {
  _$jscoverage['dataapi/Xmla.js'][5126]++;
  if ((! map)) {
    _$jscoverage['dataapi/Xmla.js'][5127]++;
    map = {};
  }
  _$jscoverage['dataapi/Xmla.js'][5129]++;
  if ((! key)) {
    _$jscoverage['dataapi/Xmla.js'][5130]++;
    key = this.getKey();
  }
  _$jscoverage['dataapi/Xmla.js'][5132]++;
  var row;
  _$jscoverage['dataapi/Xmla.js'][5133]++;
  while ((row = this.fetchAsObject())) {
    _$jscoverage['dataapi/Xmla.js'][5134]++;
    this.mapAsObject(map, key, row);
}
  _$jscoverage['dataapi/Xmla.js'][5136]++;
  return map;
}), getKey: (function () {
  _$jscoverage['dataapi/Xmla.js'][5139]++;
  var key;
  _$jscoverage['dataapi/Xmla.js'][5140]++;
  if (this._type) {
    _$jscoverage['dataapi/Xmla.js'][5141]++;
    key = Xmla.Rowset.KEYS[this._type];
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][5144]++;
    key = this.getFieldNames();
  }
  _$jscoverage['dataapi/Xmla.js'][5146]++;
  return key;
})};
  _$jscoverage['dataapi/Xmla.js'][5150]++;
  Xmla.Dataset = (function (doc) {
  _$jscoverage['dataapi/Xmla.js'][5151]++;
  this._initDataset(doc);
  _$jscoverage['dataapi/Xmla.js'][5152]++;
  return this;
});
  _$jscoverage['dataapi/Xmla.js'][5155]++;
  Xmla.Dataset.AXIS_COLUMNS = 0;
  _$jscoverage['dataapi/Xmla.js'][5156]++;
  Xmla.Dataset.AXIS_ROWS = 1;
  _$jscoverage['dataapi/Xmla.js'][5157]++;
  Xmla.Dataset.AXIS_PAGES = 2;
  _$jscoverage['dataapi/Xmla.js'][5158]++;
  Xmla.Dataset.AXIS_SECTIONS = 3;
  _$jscoverage['dataapi/Xmla.js'][5159]++;
  Xmla.Dataset.AXIS_CHAPTERS = 4;
  _$jscoverage['dataapi/Xmla.js'][5160]++;
  Xmla.Dataset.AXIS_SLICER = "SlicerAxis";
  _$jscoverage['dataapi/Xmla.js'][5162]++;
  Xmla.Dataset.prototype = {_root: null, _axes: null, _axesOrder: null, _numAxes: null, _slicer: null, _cellset: null, _initDataset: (function (doc) {
  _$jscoverage['dataapi/Xmla.js'][5170]++;
  this._initRoot(doc);
  _$jscoverage['dataapi/Xmla.js'][5171]++;
  this.cubeName = _getElementText(_getElementsByTagNameNS(this._root, _xmlnsDataset, "", "CubeName").item(0));
  _$jscoverage['dataapi/Xmla.js'][5176]++;
  this._initAxes();
  _$jscoverage['dataapi/Xmla.js'][5177]++;
  this._initCells();
}), _initRoot: (function (doc) {
  _$jscoverage['dataapi/Xmla.js'][5180]++;
  var root = _getElementsByTagNameNS(doc, _xmlnsDataset, "", "root");
  _$jscoverage['dataapi/Xmla.js'][5181]++;
  if (root.length) {
    _$jscoverage['dataapi/Xmla.js'][5182]++;
    this._root = root.item(0);
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][5185]++;
    Xmla.Exception._newError("ERROR_PARSING_RESPONSE", "Xmla.Dataset._initData", doc)._throw();
  }
}), _initAxes: (function () {
  _$jscoverage['dataapi/Xmla.js'][5193]++;
  var i, axis, axisNode, axisName, axisNodes, numAxisNodes, tmpAxes = {};
  _$jscoverage['dataapi/Xmla.js'][5195]++;
  this._axes = {};
  _$jscoverage['dataapi/Xmla.js'][5196]++;
  this._axesOrder = [];
  _$jscoverage['dataapi/Xmla.js'][5199]++;
  axisNodes = _getElementsByTagNameNS(this._root, _xmlnsDataset, "", "AxisInfo");
  _$jscoverage['dataapi/Xmla.js'][5200]++;
  numAxisNodes = axisNodes.length;
  _$jscoverage['dataapi/Xmla.js'][5201]++;
  for (i = 0; (i < numAxisNodes); (i++)) {
    _$jscoverage['dataapi/Xmla.js'][5202]++;
    axisNode = axisNodes.item(i);
    _$jscoverage['dataapi/Xmla.js'][5203]++;
    axisName = axisNode.getAttribute("name");
    _$jscoverage['dataapi/Xmla.js'][5204]++;
    tmpAxes[axisName] = axisNode;
}
  _$jscoverage['dataapi/Xmla.js'][5207]++;
  axisNodes = _getElementsByTagNameNS(this._root, _xmlnsDataset, "", "Axis");
  _$jscoverage['dataapi/Xmla.js'][5208]++;
  numAxisNodes = axisNodes.length;
  _$jscoverage['dataapi/Xmla.js'][5209]++;
  for (i = 0; (i < numAxisNodes); (i++)) {
    _$jscoverage['dataapi/Xmla.js'][5210]++;
    axisNode = axisNodes.item(i);
    _$jscoverage['dataapi/Xmla.js'][5211]++;
    axisName = axisNode.getAttribute("name");
    _$jscoverage['dataapi/Xmla.js'][5212]++;
    axis = new (Xmla.Dataset.Axis)(tmpAxes[axisName], axisNode);
    _$jscoverage['dataapi/Xmla.js'][5213]++;
    if ((axisName == Xmla.Dataset.AXIS_SLICER)) {
      _$jscoverage['dataapi/Xmla.js'][5214]++;
      this._slicer = axis;
    }
    else {
      _$jscoverage['dataapi/Xmla.js'][5217]++;
      this._axes[axisName] = axis;
      _$jscoverage['dataapi/Xmla.js'][5218]++;
      this._axesOrder.push(axis);
    }
}
  _$jscoverage['dataapi/Xmla.js'][5221]++;
  this._numAxes = this._axesOrder.length;
}), _initCells: (function () {
  _$jscoverage['dataapi/Xmla.js'][5224]++;
  this._cellset = new (Xmla.Dataset.Cellset)(this);
}), getAxisCount: (function () {
  _$jscoverage['dataapi/Xmla.js'][5227]++;
  return this._numAxes;
}), getAxis: (function (nameOrIndex) {
  _$jscoverage['dataapi/Xmla.js'][5230]++;
  var name, axis;
  _$jscoverage['dataapi/Xmla.js'][5231]++;
  if (isNum(nameOrIndex)) {
    _$jscoverage['dataapi/Xmla.js'][5232]++;
    name = this._axesOrder[nameOrIndex];
    _$jscoverage['dataapi/Xmla.js'][5233]++;
    if (_isUnd(nameOrIndex)) {
      _$jscoverage['dataapi/Xmla.js'][5234]++;
      Xmla.Exception._newError("INVALID_AXIS", "Xmla.Dataset.getAxis", name)._throw();
    }
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][5242]++;
    name = nameOrIndex;
  }
  _$jscoverage['dataapi/Xmla.js'][5244]++;
  if ((name == Xmla.Dataset.AXIS_SLICER)) {
    _$jscoverage['dataapi/Xmla.js'][5245]++;
    axis = this._slicer;
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][5248]++;
    axis = this._axes[name];
  }
  _$jscoverage['dataapi/Xmla.js'][5250]++;
  return axis;
}), getColumns: (function () {
  _$jscoverage['dataapi/Xmla.js'][5253]++;
  return this.getAxis(Xmla.Dataset.AXIS_COLUMNS);
}), getRows: (function () {
  _$jscoverage['dataapi/Xmla.js'][5256]++;
  return this.getAxis(Xmla.Dataset.AXIS_ROWS);
}), getSlicer: (function () {
  _$jscoverage['dataapi/Xmla.js'][5259]++;
  return this._slicer;
}), close: (function () {
  _$jscoverage['dataapi/Xmla.js'][5262]++;
  if (this._slicer) {
    _$jscoverage['dataapi/Xmla.js'][5263]++;
    this._slicer.close();
  }
  _$jscoverage['dataapi/Xmla.js'][5265]++;
  for (var i = 0; (i < this._namAxes); (i++)) {
    _$jscoverage['dataapi/Xmla.js'][5266]++;
    this.getAxis(i).close();
}
  _$jscoverage['dataapi/Xmla.js'][5268]++;
  this._cellset.close();
  _$jscoverage['dataapi/Xmla.js'][5269]++;
  this._root = null;
  _$jscoverage['dataapi/Xmla.js'][5270]++;
  this._axes = null;
  _$jscoverage['dataapi/Xmla.js'][5271]++;
  this._axesOrder = null;
  _$jscoverage['dataapi/Xmla.js'][5272]++;
  this._numAxes = null;
  _$jscoverage['dataapi/Xmla.js'][5273]++;
  this._slicer = null;
})};
  _$jscoverage['dataapi/Xmla.js'][5277]++;
  Xmla.Dataset.Axis = (function (_axisInfoNode, _axisNode) {
  _$jscoverage['dataapi/Xmla.js'][5278]++;
  this._initAxis(_axisInfoNode, _axisNode);
  _$jscoverage['dataapi/Xmla.js'][5279]++;
  return this;
});
  _$jscoverage['dataapi/Xmla.js'][5282]++;
  Xmla.Dataset.Axis.MEMBER_UNIQUE_NAME = "UName";
  _$jscoverage['dataapi/Xmla.js'][5283]++;
  Xmla.Dataset.Axis.MEMBER_CAPTION = "Caption";
  _$jscoverage['dataapi/Xmla.js'][5284]++;
  Xmla.Dataset.Axis.MEMBER_LEVEL_NAME = "LName";
  _$jscoverage['dataapi/Xmla.js'][5285]++;
  Xmla.Dataset.Axis.MEMBER_LEVEL_NUMBER = "LNum";
  _$jscoverage['dataapi/Xmla.js'][5286]++;
  Xmla.Dataset.Axis.MEMBER_DISPLAY_INFO = "DisplayInfo";
  _$jscoverage['dataapi/Xmla.js'][5288]++;
  Xmla.Dataset.Axis.prototype = {_tuples: null, _members: null, numTuples: null, numHierarchies: null, _tupleIndex: null, _hierarchyOrder: null, _hierarchyDefs: null, _initHierarchies: (function (_axisInfoNode) {
  _$jscoverage['dataapi/Xmla.js'][5297]++;
  var hierarchyInfoNodes = _getElementsByTagNameNS(_axisInfoNode, _xmlnsDataset, "", "HierarchyInfo"), numHierarchies = hierarchyInfoNodes.length, i, j, hierarchyInfoNode, hierarchyName, hierarchyDef, properties, numPropertyNodes, propertyNodes, propertyNode;
  _$jscoverage['dataapi/Xmla.js'][5307]++;
  this._hierarchyDefs = {};
  _$jscoverage['dataapi/Xmla.js'][5308]++;
  this._hierarchyOrder = [];
  _$jscoverage['dataapi/Xmla.js'][5309]++;
  this.numHierarchies = numHierarchies;
  _$jscoverage['dataapi/Xmla.js'][5310]++;
  for (i = 0; (i < numHierarchies); (i++)) {
    _$jscoverage['dataapi/Xmla.js'][5311]++;
    hierarchyInfoNode = hierarchyInfoNodes.item(i);
    _$jscoverage['dataapi/Xmla.js'][5312]++;
    hierarchyName = hierarchyInfoNode.getAttribute("name");
    _$jscoverage['dataapi/Xmla.js'][5313]++;
    this._hierarchyOrder[i] = hierarchyName;
    _$jscoverage['dataapi/Xmla.js'][5314]++;
    properties = {};
    _$jscoverage['dataapi/Xmla.js'][5315]++;
    propertyNodes = _getElementsByTagNameNS(_axisInfoNode, _xmlnsDataset, "", "*");
    _$jscoverage['dataapi/Xmla.js'][5321]++;
    numPropertyNodes = propertyNodes.length;
    _$jscoverage['dataapi/Xmla.js'][5322]++;
    for (j = 0; (j < numPropertyNodes); (j++)) {
      _$jscoverage['dataapi/Xmla.js'][5323]++;
      propertyNode = propertyNodes.item(j);
      _$jscoverage['dataapi/Xmla.js'][5324]++;
      properties[propertyNode.tagName] = null;
}
    _$jscoverage['dataapi/Xmla.js'][5326]++;
    hierarchyDef = {index: i, name: hierarchyName, properties: properties};
    _$jscoverage['dataapi/Xmla.js'][5331]++;
    this._hierarchyDefs[hierarchyName] = hierarchyDef;
}
}), _initAxis: (function (_axisInfoNode, _axisNode) {
  _$jscoverage['dataapi/Xmla.js'][5336]++;
  this.name = _axisNode.getAttribute("name");
  _$jscoverage['dataapi/Xmla.js'][5338]++;
  this._initHierarchies(_axisInfoNode);
  _$jscoverage['dataapi/Xmla.js'][5339]++;
  this._tuples = _getElementsByTagNameNS(_axisNode, _xmlnsDataset, "", "Tuple");
  _$jscoverage['dataapi/Xmla.js'][5340]++;
  this.numTuples = this._tuples.length;
  _$jscoverage['dataapi/Xmla.js'][5341]++;
  this.reset();
}), _getMembers: (function () {
  _$jscoverage['dataapi/Xmla.js'][5344]++;
  if ((this.tupleIndex < this.numTuples)) {
    _$jscoverage['dataapi/Xmla.js'][5345]++;
    return _getElementsByTagNameNS(this._tuples.item(this.tupleIndex), _xmlnsDataset, "", "Member");
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][5351]++;
    return null;
  }
}), reset: (function () {
  _$jscoverage['dataapi/Xmla.js'][5355]++;
  this.tupleIndex = 0;
  _$jscoverage['dataapi/Xmla.js'][5356]++;
  this._members = (this.hasMoreTuples()? this._getMembers(): null);
}), hasMoreTuples: (function () {
  _$jscoverage['dataapi/Xmla.js'][5359]++;
  return (this.numTuples > this.tupleIndex);
}), next: (function () {
  _$jscoverage['dataapi/Xmla.js'][5362]++;
  this.tupleIndex += 1;
  _$jscoverage['dataapi/Xmla.js'][5363]++;
  this._members = this._getMembers();
  _$jscoverage['dataapi/Xmla.js'][5364]++;
  return this.tupleIndex;
}), tupleCount: (function () {
  _$jscoverage['dataapi/Xmla.js'][5367]++;
  return this.numTuples;
}), getHierarchyNames: (function () {
  _$jscoverage['dataapi/Xmla.js'][5370]++;
  var hierarchyNames = [];
  _$jscoverage['dataapi/Xmla.js'][5371]++;
  for (var i = 0, count = this.numHierarchies; (i < count); (i += 1)) {
    _$jscoverage['dataapi/Xmla.js'][5372]++;
    hierarchyNames[i] = this._hierarchyOrder[i];
}
  _$jscoverage['dataapi/Xmla.js'][5374]++;
  return hierarchyNames;
}), hierarchyCount: (function () {
  _$jscoverage['dataapi/Xmla.js'][5377]++;
  return this.numHierarchies;
}), hierarchyIndex: (function (hierarchyName) {
  _$jscoverage['dataapi/Xmla.js'][5380]++;
  return this._hierarchiesNames[hierarchyName];
}), hierarchyName: (function (index) {
  _$jscoverage['dataapi/Xmla.js'][5383]++;
  return this._hierarchyOrder[index];
}), hierarchyDef: (function (name) {
  _$jscoverage['dataapi/Xmla.js'][5386]++;
  var hierarchyDef = this._hierarchyDefs[name];
  _$jscoverage['dataapi/Xmla.js'][5387]++;
  if ((! hierarchyDef)) {
    _$jscoverage['dataapi/Xmla.js'][5388]++;
    Xmla.Exception._newError("INVALID_HIERARCHY", "Xmla.Dataset.Axis.hierarchyDef", name)._throw();
  }
  _$jscoverage['dataapi/Xmla.js'][5394]++;
  return hierarchyDef;
}), member: (function (indexOrHierarchy) {
  _$jscoverage['dataapi/Xmla.js'][5397]++;
  var index, hierarchyName, hierarchyDef, properties, property, memberNode, member = {};
  _$jscoverage['dataapi/Xmla.js'][5398]++;
  switch ((typeof indexOrHierarchy)) {
  case "string":
    _$jscoverage['dataapi/Xmla.js'][5400]++;
    index = this.hierarchyIndex(indexOrHierarchy);
    _$jscoverage['dataapi/Xmla.js'][5401]++;
    hierarchyName = indexOrHierarchy;
    _$jscoverage['dataapi/Xmla.js'][5402]++;
    break;
  case "number":
    _$jscoverage['dataapi/Xmla.js'][5404]++;
    hierarchyName = this.hierarchyName(indexOrHierarchy);
    _$jscoverage['dataapi/Xmla.js'][5405]++;
    index = indexOrHierarchy;
    _$jscoverage['dataapi/Xmla.js'][5406]++;
    break;
  }
  _$jscoverage['dataapi/Xmla.js'][5408]++;
  hierarchyDef = this.hierarchyDef(hierarchyName);
  _$jscoverage['dataapi/Xmla.js'][5409]++;
  properties = hierarchyDef.properties;
  _$jscoverage['dataapi/Xmla.js'][5410]++;
  memberNode = this._members.item(index);
  _$jscoverage['dataapi/Xmla.js'][5411]++;
  member.hierarchy = hierarchyName;
  _$jscoverage['dataapi/Xmla.js'][5412]++;
  member.index = index;
  _$jscoverage['dataapi/Xmla.js'][5413]++;
  for (property in properties) {
    _$jscoverage['dataapi/Xmla.js'][5414]++;
    el = _getElementsByTagNameNS(memberNode, _xmlnsDataset, "", property);
    _$jscoverage['dataapi/Xmla.js'][5415]++;
    switch (el.length) {
    case 0:
      _$jscoverage['dataapi/Xmla.js'][5417]++;
      member[property] = properties[property];
      _$jscoverage['dataapi/Xmla.js'][5418]++;
      break;
    case 1:
      _$jscoverage['dataapi/Xmla.js'][5420]++;
      member[property] = _getElementText(el.item(0));
      _$jscoverage['dataapi/Xmla.js'][5421]++;
      break;
    default:
      _$jscoverage['dataapi/Xmla.js'][5423]++;
      Xmla.Exception._newError("UNEXPECTED_ERROR_READING_MEMBER", "Xmla.Dataset.Axis.member", property)._throw();
    }
}
  _$jscoverage['dataapi/Xmla.js'][5430]++;
  return member;
}), readAsArray: (function (array) {
  _$jscoverage['dataapi/Xmla.js'][5433]++;
  if ((! array)) {
    _$jscoverage['dataapi/Xmla.js'][5434]++;
    array = [];
  }
  _$jscoverage['dataapi/Xmla.js'][5436]++;
  for (var i = 0; (i < this.numHierarchies); (i++)) {
    _$jscoverage['dataapi/Xmla.js'][5437]++;
    array[i] = this.member(i);
}
  _$jscoverage['dataapi/Xmla.js'][5439]++;
  return array;
}), readAsObject: (function (object) {
  _$jscoverage['dataapi/Xmla.js'][5442]++;
  if ((! object)) {
    _$jscoverage['dataapi/Xmla.js'][5443]++;
    object = {};
  }
  _$jscoverage['dataapi/Xmla.js'][5445]++;
  for (var i = 0; (i < this.numHierarchies); (i++)) {
    _$jscoverage['dataapi/Xmla.js'][5446]++;
    object[this._hierarchyOrder[i]] = this.member(i);
}
  _$jscoverage['dataapi/Xmla.js'][5448]++;
  return object;
}), fetchAsArray: (function () {
  _$jscoverage['dataapi/Xmla.js'][5451]++;
  var array;
  _$jscoverage['dataapi/Xmla.js'][5452]++;
  if (this.hasMoreTuples()) {
    _$jscoverage['dataapi/Xmla.js'][5453]++;
    array = this.readAsArray();
    _$jscoverage['dataapi/Xmla.js'][5454]++;
    this.next();
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][5456]++;
    array = false;
  }
  _$jscoverage['dataapi/Xmla.js'][5458]++;
  return array;
}), fetchAsObject: (function () {
  _$jscoverage['dataapi/Xmla.js'][5461]++;
  var object;
  _$jscoverage['dataapi/Xmla.js'][5462]++;
  if (this.hasMoreTuples()) {
    _$jscoverage['dataapi/Xmla.js'][5463]++;
    object = this.readAsObject();
    _$jscoverage['dataapi/Xmla.js'][5464]++;
    this.next();
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][5466]++;
    object = false;
  }
  _$jscoverage['dataapi/Xmla.js'][5468]++;
  return object;
}), fetchAllAsArray: (function (rows) {
  _$jscoverage['dataapi/Xmla.js'][5471]++;
  var row;
  _$jscoverage['dataapi/Xmla.js'][5472]++;
  if ((! rows)) {
    _$jscoverage['dataapi/Xmla.js'][5473]++;
    rows = [];
  }
  _$jscoverage['dataapi/Xmla.js'][5475]++;
  while ((row = this.fetchAsArray())) {
    _$jscoverage['dataapi/Xmla.js'][5476]++;
    rows.push(row);
}
  _$jscoverage['dataapi/Xmla.js'][5478]++;
  return rows;
}), fetchAllAsObject: (function (rows) {
  _$jscoverage['dataapi/Xmla.js'][5481]++;
  var row;
  _$jscoverage['dataapi/Xmla.js'][5482]++;
  if ((! rows)) {
    _$jscoverage['dataapi/Xmla.js'][5483]++;
    rows = [];
  }
  _$jscoverage['dataapi/Xmla.js'][5485]++;
  while ((row = this.fetchAsObject())) {
    _$jscoverage['dataapi/Xmla.js'][5486]++;
    rows.push(row);
}
  _$jscoverage['dataapi/Xmla.js'][5488]++;
  return rows;
})};
  _$jscoverage['dataapi/Xmla.js'][5492]++;
  Xmla.Dataset.Cellset = (function (dataset) {
  _$jscoverage['dataapi/Xmla.js'][5493]++;
  this._dataset = dataset;
  _$jscoverage['dataapi/Xmla.js'][5494]++;
  this._initCellset();
  _$jscoverage['dataapi/Xmla.js'][5495]++;
  return this;
});
  _$jscoverage['dataapi/Xmla.js'][5498]++;
  Xmla.Dataset.Cellset.prototype = {_dataset: null, _cellNodes: null, _cellCount: null, _cellNode: null, _cellDefs: null, _idx: null, _ord: null, _cellOrd: null, _initCellset: (function () {
  _$jscoverage['dataapi/Xmla.js'][5508]++;
  var root = this._dataset._root, cellSchema, cellSchemaElements, numCellSchemaElements, cellSchemaElement, cellInfoNodes, cellInfoNode, cellNodes, type, valueConverter, cellDef, propertyNodes, propertyNode, propertyNodeTagName, numPropertyNodes, i, j;
  _$jscoverage['dataapi/Xmla.js'][5513]++;
  cellSchema = _getComplexType(root, "CellData");
  _$jscoverage['dataapi/Xmla.js'][5514]++;
  if ((! cellSchema)) {
    _$jscoverage['dataapi/Xmla.js'][5515]++;
    Xmla.Exception._newError("ERROR_PARSING_RESPONSE", "Xmla.Rowset", root)._throw();
  }
  _$jscoverage['dataapi/Xmla.js'][5521]++;
  cellSchemaElements = _getElementsByTagNameNS(cellSchema, _xmlnsSchema, _xmlnsSchemaPrefix, "element");
  _$jscoverage['dataapi/Xmla.js'][5524]++;
  numCellSchemaElements = cellSchemaElements.length;
  _$jscoverage['dataapi/Xmla.js'][5525]++;
  cellInfoNodes = _getElementsByTagNameNS(root, _xmlnsDataset, "", "CellInfo");
  _$jscoverage['dataapi/Xmla.js'][5528]++;
  if (((! cellInfoNodes) || (cellInfoNodes.length == 0))) {
    _$jscoverage['dataapi/Xmla.js'][5529]++;
    Xmla.Exception._newError("ERROR_PARSING_RESPONSE", "Xmla.Rowset", root)._throw();
  }
  _$jscoverage['dataapi/Xmla.js'][5535]++;
  cellInfoNode = cellInfoNodes.item(0);
  _$jscoverage['dataapi/Xmla.js'][5536]++;
  propertyNodes = _getElementsByTagNameNS(cellInfoNode, _xmlnsDataset, "", "*");
  _$jscoverage['dataapi/Xmla.js'][5539]++;
  this._cellDefs = {};
  _$jscoverage['dataapi/Xmla.js'][5541]++;
  numPropertyNodes = propertyNodes.length;
  _$jscoverage['dataapi/Xmla.js'][5542]++;
  for (i = 0; (i < numPropertyNodes); (i += 1)) {
    _$jscoverage['dataapi/Xmla.js'][5543]++;
    propertyNode = propertyNodes.item(i);
    _$jscoverage['dataapi/Xmla.js'][5544]++;
    propertyNodeTagName = propertyNode.tagName;
    _$jscoverage['dataapi/Xmla.js'][5546]++;
    for (var j = 0; (j < numCellSchemaElements); (j++)) {
      _$jscoverage['dataapi/Xmla.js'][5547]++;
      cellSchemaElement = cellSchemaElements.item(j);
      _$jscoverage['dataapi/Xmla.js'][5548]++;
      if ((cellSchemaElement.getAttribute("name") !== propertyNodeTagName)) {
        _$jscoverage['dataapi/Xmla.js'][5549]++;
        continue;
      }
      _$jscoverage['dataapi/Xmla.js'][5551]++;
      cellDef = {name: propertyNodeTagName};
      _$jscoverage['dataapi/Xmla.js'][5554]++;
      this._cellDefs[propertyNodeTagName] = cellDef;
      _$jscoverage['dataapi/Xmla.js'][5555]++;
      type = cellSchemaElement.getAttribute("type");
      _$jscoverage['dataapi/Xmla.js'][5556]++;
      if (type) {
        _$jscoverage['dataapi/Xmla.js'][5557]++;
        cellDef.type = type;
        _$jscoverage['dataapi/Xmla.js'][5558]++;
        valueConverter = _getValueConverter(type);
        _$jscoverage['dataapi/Xmla.js'][5559]++;
        if (valueConverter) {
          _$jscoverage['dataapi/Xmla.js'][5560]++;
          cellDef.jsType = valueConverter.jsType;
          _$jscoverage['dataapi/Xmla.js'][5561]++;
          cellDef.converter = valueConverter.func;
        }
      }
      _$jscoverage['dataapi/Xmla.js'][5564]++;
      break;
}
}
  _$jscoverage['dataapi/Xmla.js'][5567]++;
  this._cellNodes = _getElementsByTagNameNS(root, _xmlnsDataset, "", "Cell");
  _$jscoverage['dataapi/Xmla.js'][5570]++;
  this._cellCount = this._cellNodes.length;
}), _getCellNode: (function () {
  _$jscoverage['dataapi/Xmla.js'][5573]++;
  this._cellNode = this._cellNodes.item(this._idx);
  _$jscoverage['dataapi/Xmla.js'][5574]++;
  this._cellOrd = parseInt(this._cellNode.getAttribute("CellOrdinal"), 10);
}), reset: (function () {
  _$jscoverage['dataapi/Xmla.js'][5577]++;
  this._idx = 0;
  _$jscoverage['dataapi/Xmla.js'][5578]++;
  this._getCellNode();
  _$jscoverage['dataapi/Xmla.js'][5579]++;
  this._ord = 0;
}), hasMoreCells: (function () {
  _$jscoverage['dataapi/Xmla.js'][5582]++;
  return (this._idx < this._cellCount);
}), next: (function () {
  _$jscoverage['dataapi/Xmla.js'][5585]++;
  this._idx += 1;
  _$jscoverage['dataapi/Xmla.js'][5586]++;
  if (((this._cellOrd === this._ord) && this.hasMoreCells())) {
    _$jscoverage['dataapi/Xmla.js'][5589]++;
    this._getCellNode();
  }
}), curr: (function () {
  _$jscoverage['dataapi/Xmla.js'][5593]++;
  return this._idx;
}), cellValue: (function () {
  _$jscoverage['dataapi/Xmla.js'][5596]++;
  return _getElementValue(_getElementsByTagNameNS(this._cellNode, _xmlnsDataset, "", "Value").item(0));
}), readAsObject: (function () {
  _$jscoverage['dataapi/Xmla.js'][5603]++;
  var cell, cellProp, cellDef, converter;
  _$jscoverage['dataapi/Xmla.js'][5604]++;
  if ((this._cellOrd === this._ord)) {
    _$jscoverage['dataapi/Xmla.js'][5605]++;
    cell = {ordinal: this._ord};
    _$jscoverage['dataapi/Xmla.js'][5608]++;
    for (var p in this._cellDefs) {
      _$jscoverage['dataapi/Xmla.js'][5609]++;
      cellDef = this._cellDefs[p];
      _$jscoverage['dataapi/Xmla.js'][5610]++;
      cellProp = _getElementsByTagNameNS(this._cellNode, _xmlnsDataset, "", p).item(0);
      _$jscoverage['dataapi/Xmla.js'][5613]++;
      if (cellDef.type) {
        _$jscoverage['dataapi/Xmla.js'][5614]++;
        converter = cellDef.converter;
        _$jscoverage['dataapi/Xmla.js'][5615]++;
        cell[p] = converter(_getElementText(cellProp));
      }
      else {
        _$jscoverage['dataapi/Xmla.js'][5617]++;
        if ((p === "Value")) {
          _$jscoverage['dataapi/Xmla.js'][5618]++;
          cell[p] = _getElementValue(cellProp);
        }
        else {
        }
      }
      _$jscoverage['dataapi/Xmla.js'][5622]++;
      cell[p] = _getElementText(cellProp);
}
  }
  else {
    _$jscoverage['dataapi/Xmla.js'][5626]++;
    if ((this._cellOrd > this._ord)) {
      _$jscoverage['dataapi/Xmla.js'][5627]++;
      cell = null;
    }
  }
  _$jscoverage['dataapi/Xmla.js'][5629]++;
  return cell;
}), close: (function () {
  _$jscoverage['dataapi/Xmla.js'][5632]++;
  this._dataset = null;
  _$jscoverage['dataapi/Xmla.js'][5633]++;
  this._cellNodes = null;
  _$jscoverage['dataapi/Xmla.js'][5634]++;
  this._cellNode = null;
})};
  _$jscoverage['dataapi/Xmla.js'][5666]++;
  Xmla.Exception = (function (type, code, message, helpfile, source, data, args) {
  _$jscoverage['dataapi/Xmla.js'][5667]++;
  this.type = type;
  _$jscoverage['dataapi/Xmla.js'][5668]++;
  this.code = code;
  _$jscoverage['dataapi/Xmla.js'][5669]++;
  this.message = message;
  _$jscoverage['dataapi/Xmla.js'][5670]++;
  this.source = source;
  _$jscoverage['dataapi/Xmla.js'][5671]++;
  this.helpfile = helpfile;
  _$jscoverage['dataapi/Xmla.js'][5672]++;
  this.data = data;
  _$jscoverage['dataapi/Xmla.js'][5673]++;
  this.args = args;
  _$jscoverage['dataapi/Xmla.js'][5674]++;
  return this;
});
  _$jscoverage['dataapi/Xmla.js'][5687]++;
  Xmla.Exception.TYPE_WARNING = "warning";
  _$jscoverage['dataapi/Xmla.js'][5698]++;
  Xmla.Exception.TYPE_ERROR = "error";
  _$jscoverage['dataapi/Xmla.js'][5700]++;
  var _exceptionHlp = "http://code.google.com/p/xmla4js/wiki/ExceptionCodes";
  _$jscoverage['dataapi/Xmla.js'][5711]++;
  Xmla.Exception.MISSING_REQUEST_TYPE_CDE = -1;
  _$jscoverage['dataapi/Xmla.js'][5712]++;
  Xmla.Exception.MISSING_REQUEST_TYPE_MSG = "Missing_Request_Type";
  _$jscoverage['dataapi/Xmla.js'][5713]++;
  Xmla.Exception.MISSING_REQUEST_TYPE_HLP = (_exceptionHlp + "#" + Xmla.Exception.MISSING_REQUEST_TYPE_CDE + "_" + Xmla.Exception.MISSING_REQUEST_TYPE_MSG);
  _$jscoverage['dataapi/Xmla.js'][5725]++;
  Xmla.Exception.MISSING_STATEMENT_CDE = -2;
  _$jscoverage['dataapi/Xmla.js'][5726]++;
  Xmla.Exception.MISSING_STATEMENT_MSG = "Missing_Statement";
  _$jscoverage['dataapi/Xmla.js'][5727]++;
  Xmla.Exception.MISSING_STATEMENT_HLP = (_exceptionHlp + "#" + Xmla.Exception.MISSING_STATEMENT_CDE + "_" + Xmla.Exception.MISSING_STATEMENT_MSG);
  _$jscoverage['dataapi/Xmla.js'][5740]++;
  Xmla.Exception.MISSING_URL_CDE = -3;
  _$jscoverage['dataapi/Xmla.js'][5741]++;
  Xmla.Exception.MISSING_URL_MSG = "Missing_URL";
  _$jscoverage['dataapi/Xmla.js'][5742]++;
  Xmla.Exception.MISSING_URL_HLP = (_exceptionHlp + "#" + Xmla.Exception.MISSING_URL_CDE + "_" + Xmla.Exception.MISSING_URL_MSG);
  _$jscoverage['dataapi/Xmla.js'][5755]++;
  Xmla.Exception.NO_EVENTS_SPECIFIED_CDE = -4;
  _$jscoverage['dataapi/Xmla.js'][5756]++;
  Xmla.Exception.NO_EVENTS_SPECIFIED_MSG = "No_Events_Specified";
  _$jscoverage['dataapi/Xmla.js'][5757]++;
  Xmla.Exception.NO_EVENTS_SPECIFIED_HLP = (_exceptionHlp + "#" + Xmla.Exception.NO_EVENTS_SPECIFIED_CDE + "_" + Xmla.Exception.NO_EVENTS_SPECIFIED_MSG);
  _$jscoverage['dataapi/Xmla.js'][5770]++;
  Xmla.Exception.WRONG_EVENTS_FORMAT_CDE = -5;
  _$jscoverage['dataapi/Xmla.js'][5771]++;
  Xmla.Exception.WRONG_EVENTS_FORMAT_MSG = "Wrong_Events_Format";
  _$jscoverage['dataapi/Xmla.js'][5772]++;
  Xmla.Exception.WRONG_EVENTS_FORMAT_HLP = (_exceptionHlp + "#" + Xmla.Exception.NO_EVENTS_SPECIFIED_CDE + "_" + Xmla.Exception.NO_EVENTS_SPECIFIED_MSG);
  _$jscoverage['dataapi/Xmla.js'][5785]++;
  Xmla.Exception.UNKNOWN_EVENT_CDE = -6;
  _$jscoverage['dataapi/Xmla.js'][5786]++;
  Xmla.Exception.UNKNOWN_EVENT_MSG = "Unknown_Event";
  _$jscoverage['dataapi/Xmla.js'][5787]++;
  Xmla.Exception.UNKNOWN_EVENT_HLP = (_exceptionHlp + "#" + Xmla.Exception.UNKNOWN_EVENT_CDE + "_" + Xmla.Exception.UNKNOWN_EVENT_MSG);
  _$jscoverage['dataapi/Xmla.js'][5799]++;
  Xmla.Exception.INVALID_EVENT_HANDLER_CDE = -7;
  _$jscoverage['dataapi/Xmla.js'][5800]++;
  Xmla.Exception.INVALID_EVENT_HANDLER_MSG = "Invalid_Events_Handler";
  _$jscoverage['dataapi/Xmla.js'][5801]++;
  Xmla.Exception.INVALID_EVENT_HANDLER_HLP = (_exceptionHlp + "#" + Xmla.Exception.INVALID_EVENT_HANDLER_CDE + "_" + Xmla.Exception.INVALID_EVENT_HANDLER_MSG);
  _$jscoverage['dataapi/Xmla.js'][5813]++;
  Xmla.Exception.ERROR_PARSING_RESPONSE_CDE = -8;
  _$jscoverage['dataapi/Xmla.js'][5814]++;
  Xmla.Exception.ERROR_PARSING_RESPONSE_MSG = "Error_Parsing_Response";
  _$jscoverage['dataapi/Xmla.js'][5815]++;
  Xmla.Exception.ERROR_PARSING_RESPONSE_HLP = (_exceptionHlp + "#" + Xmla.Exception.ERROR_PARSING_RESPONSE_CDE + "_" + Xmla.Exception.ERROR_PARSING_RESPONSE_MSG);
  _$jscoverage['dataapi/Xmla.js'][5827]++;
  Xmla.Exception.INVALID_FIELD_CDE = -9;
  _$jscoverage['dataapi/Xmla.js'][5828]++;
  Xmla.Exception.INVALID_FIELD_MSG = "Invalid_Field";
  _$jscoverage['dataapi/Xmla.js'][5829]++;
  Xmla.Exception.INVALID_FIELD_HLP = (_exceptionHlp + "#" + Xmla.Exception.INVALID_FIELD_CDE + "_" + Xmla.Exception.INVALID_FIELD_MSG);
  _$jscoverage['dataapi/Xmla.js'][5842]++;
  Xmla.Exception.HTTP_ERROR_CDE = -10;
  _$jscoverage['dataapi/Xmla.js'][5843]++;
  Xmla.Exception.HTTP_ERROR_MSG = "HTTP Error";
  _$jscoverage['dataapi/Xmla.js'][5844]++;
  Xmla.Exception.HTTP_ERROR_HLP = (_exceptionHlp + "#" + Xmla.Exception.HTTP_ERROR_CDE + "_" + Xmla.Exception.HTTP_ERROR_MSG);
  _$jscoverage['dataapi/Xmla.js'][5857]++;
  Xmla.Exception.INVALID_HIERARCHY_CDE = -11;
  _$jscoverage['dataapi/Xmla.js'][5858]++;
  Xmla.Exception.INVALID_HIERARCHY_MSG = "Invalid_Hierarchy";
  _$jscoverage['dataapi/Xmla.js'][5859]++;
  Xmla.Exception.INVALID_HIERARCHY_HLP = (_exceptionHlp + "#" + Xmla.Exception.INVALID_HIERARCHY_CDE + "_" + Xmla.Exception.INVALID_HIERARCHY_MSG);
  _$jscoverage['dataapi/Xmla.js'][5872]++;
  Xmla.Exception.UNEXPECTED_ERROR_READING_MEMBER_CDE = -12;
  _$jscoverage['dataapi/Xmla.js'][5873]++;
  Xmla.Exception.UNEXPECTED_ERROR_READING_MEMBER_MSG = "Error_Reading_Member";
  _$jscoverage['dataapi/Xmla.js'][5874]++;
  Xmla.Exception.UNEXPECTED_ERROR_READING_MEMBER_HLP = (_exceptionHlp + "#" + Xmla.Exception.UNEXPECTED_ERROR_READING_MEMBER_CDE + "_" + Xmla.Exception.UNEXPECTED_ERROR_READING_MEMBER_MSG);
  _$jscoverage['dataapi/Xmla.js'][5879]++;
  Xmla.Exception._newError = (function (codeName, source, data) {
  _$jscoverage['dataapi/Xmla.js'][5880]++;
  return new (Xmla.Exception)(Xmla.Exception.TYPE_ERROR, Xmla.Exception[(codeName + "_CDE")], Xmla.Exception[(codeName + "_MSG")], Xmla.Exception[(codeName + "_HLP")], source, data);
});
  _$jscoverage['dataapi/Xmla.js'][5890]++;
  Xmla.Exception.prototype = {type: null, code: null, message: null, source: null, helpfile: null, data: null, _throw: (function () {
  _$jscoverage['dataapi/Xmla.js'][5938]++;
  throw this;
}), args: null, getStackTrace: (function () {
  _$jscoverage['dataapi/Xmla.js'][5950]++;
  var funcstring, stack = "", regexp = /^\sfunction\s*([^\(]+)?\s*\(\)$/;
  _$jscoverage['dataapi/Xmla.js'][5951]++;
  if (this.args) {
    _$jscoverage['dataapi/Xmla.js'][5952]++;
    var func = this.args.callee;
    _$jscoverage['dataapi/Xmla.js'][5953]++;
    while (func) {
      _$jscoverage['dataapi/Xmla.js'][5954]++;
      funcstring = String(func);
      _$jscoverage['dataapi/Xmla.js'][5955]++;
      func = func.caller;
}
  }
  _$jscoverage['dataapi/Xmla.js'][5958]++;
  return stack;
})};
})();
