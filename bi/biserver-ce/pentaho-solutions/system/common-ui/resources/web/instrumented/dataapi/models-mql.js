/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['dataapi/models-mql.js']) {
  _$jscoverage['dataapi/models-mql.js'] = [];
  _$jscoverage['dataapi/models-mql.js'][4] = 0;
  _$jscoverage['dataapi/models-mql.js'][5] = 0;
  _$jscoverage['dataapi/models-mql.js'][6] = 0;
  _$jscoverage['dataapi/models-mql.js'][7] = 0;
  _$jscoverage['dataapi/models-mql.js'][10] = 0;
  _$jscoverage['dataapi/models-mql.js'][12] = 0;
  _$jscoverage['dataapi/models-mql.js'][13] = 0;
  _$jscoverage['dataapi/models-mql.js'][14] = 0;
  _$jscoverage['dataapi/models-mql.js'][15] = 0;
  _$jscoverage['dataapi/models-mql.js'][16] = 0;
  _$jscoverage['dataapi/models-mql.js'][17] = 0;
  _$jscoverage['dataapi/models-mql.js'][18] = 0;
  _$jscoverage['dataapi/models-mql.js'][19] = 0;
  _$jscoverage['dataapi/models-mql.js'][22] = 0;
  _$jscoverage['dataapi/models-mql.js'][23] = 0;
  _$jscoverage['dataapi/models-mql.js'][24] = 0;
  _$jscoverage['dataapi/models-mql.js'][25] = 0;
  _$jscoverage['dataapi/models-mql.js'][26] = 0;
  _$jscoverage['dataapi/models-mql.js'][37] = 0;
  _$jscoverage['dataapi/models-mql.js'][38] = 0;
  _$jscoverage['dataapi/models-mql.js'][39] = 0;
  _$jscoverage['dataapi/models-mql.js'][40] = 0;
  _$jscoverage['dataapi/models-mql.js'][43] = 0;
  _$jscoverage['dataapi/models-mql.js'][45] = 0;
  _$jscoverage['dataapi/models-mql.js'][46] = 0;
  _$jscoverage['dataapi/models-mql.js'][47] = 0;
  _$jscoverage['dataapi/models-mql.js'][48] = 0;
  _$jscoverage['dataapi/models-mql.js'][49] = 0;
  _$jscoverage['dataapi/models-mql.js'][50] = 0;
  _$jscoverage['dataapi/models-mql.js'][51] = 0;
  _$jscoverage['dataapi/models-mql.js'][52] = 0;
  _$jscoverage['dataapi/models-mql.js'][53] = 0;
  _$jscoverage['dataapi/models-mql.js'][54] = 0;
  _$jscoverage['dataapi/models-mql.js'][56] = 0;
  _$jscoverage['dataapi/models-mql.js'][57] = 0;
  _$jscoverage['dataapi/models-mql.js'][67] = 0;
  _$jscoverage['dataapi/models-mql.js'][69] = 0;
  _$jscoverage['dataapi/models-mql.js'][70] = 0;
  _$jscoverage['dataapi/models-mql.js'][71] = 0;
  _$jscoverage['dataapi/models-mql.js'][72] = 0;
  _$jscoverage['dataapi/models-mql.js'][73] = 0;
  _$jscoverage['dataapi/models-mql.js'][74] = 0;
  _$jscoverage['dataapi/models-mql.js'][77] = 0;
  _$jscoverage['dataapi/models-mql.js'][80] = 0;
  _$jscoverage['dataapi/models-mql.js'][81] = 0;
  _$jscoverage['dataapi/models-mql.js'][84] = 0;
  _$jscoverage['dataapi/models-mql.js'][85] = 0;
  _$jscoverage['dataapi/models-mql.js'][86] = 0;
  _$jscoverage['dataapi/models-mql.js'][87] = 0;
  _$jscoverage['dataapi/models-mql.js'][88] = 0;
  _$jscoverage['dataapi/models-mql.js'][90] = 0;
  _$jscoverage['dataapi/models-mql.js'][91] = 0;
  _$jscoverage['dataapi/models-mql.js'][94] = 0;
  _$jscoverage['dataapi/models-mql.js'][95] = 0;
  _$jscoverage['dataapi/models-mql.js'][96] = 0;
  _$jscoverage['dataapi/models-mql.js'][98] = 0;
  _$jscoverage['dataapi/models-mql.js'][102] = 0;
  _$jscoverage['dataapi/models-mql.js'][103] = 0;
  _$jscoverage['dataapi/models-mql.js'][104] = 0;
  _$jscoverage['dataapi/models-mql.js'][105] = 0;
  _$jscoverage['dataapi/models-mql.js'][106] = 0;
  _$jscoverage['dataapi/models-mql.js'][107] = 0;
  _$jscoverage['dataapi/models-mql.js'][108] = 0;
  _$jscoverage['dataapi/models-mql.js'][109] = 0;
  _$jscoverage['dataapi/models-mql.js'][111] = 0;
  _$jscoverage['dataapi/models-mql.js'][112] = 0;
  _$jscoverage['dataapi/models-mql.js'][113] = 0;
  _$jscoverage['dataapi/models-mql.js'][117] = 0;
  _$jscoverage['dataapi/models-mql.js'][118] = 0;
  _$jscoverage['dataapi/models-mql.js'][120] = 0;
  _$jscoverage['dataapi/models-mql.js'][121] = 0;
  _$jscoverage['dataapi/models-mql.js'][122] = 0;
  _$jscoverage['dataapi/models-mql.js'][123] = 0;
  _$jscoverage['dataapi/models-mql.js'][124] = 0;
  _$jscoverage['dataapi/models-mql.js'][125] = 0;
  _$jscoverage['dataapi/models-mql.js'][126] = 0;
  _$jscoverage['dataapi/models-mql.js'][127] = 0;
  _$jscoverage['dataapi/models-mql.js'][128] = 0;
  _$jscoverage['dataapi/models-mql.js'][129] = 0;
  _$jscoverage['dataapi/models-mql.js'][130] = 0;
  _$jscoverage['dataapi/models-mql.js'][132] = 0;
  _$jscoverage['dataapi/models-mql.js'][133] = 0;
  _$jscoverage['dataapi/models-mql.js'][134] = 0;
  _$jscoverage['dataapi/models-mql.js'][137] = 0;
  _$jscoverage['dataapi/models-mql.js'][140] = 0;
  _$jscoverage['dataapi/models-mql.js'][141] = 0;
  _$jscoverage['dataapi/models-mql.js'][142] = 0;
  _$jscoverage['dataapi/models-mql.js'][143] = 0;
  _$jscoverage['dataapi/models-mql.js'][146] = 0;
  _$jscoverage['dataapi/models-mql.js'][149] = 0;
  _$jscoverage['dataapi/models-mql.js'][150] = 0;
  _$jscoverage['dataapi/models-mql.js'][151] = 0;
  _$jscoverage['dataapi/models-mql.js'][152] = 0;
  _$jscoverage['dataapi/models-mql.js'][155] = 0;
  _$jscoverage['dataapi/models-mql.js'][158] = 0;
  _$jscoverage['dataapi/models-mql.js'][159] = 0;
  _$jscoverage['dataapi/models-mql.js'][160] = 0;
  _$jscoverage['dataapi/models-mql.js'][161] = 0;
  _$jscoverage['dataapi/models-mql.js'][168] = 0;
  _$jscoverage['dataapi/models-mql.js'][169] = 0;
  _$jscoverage['dataapi/models-mql.js'][171] = 0;
  _$jscoverage['dataapi/models-mql.js'][172] = 0;
  _$jscoverage['dataapi/models-mql.js'][173] = 0;
  _$jscoverage['dataapi/models-mql.js'][174] = 0;
  _$jscoverage['dataapi/models-mql.js'][175] = 0;
  _$jscoverage['dataapi/models-mql.js'][176] = 0;
  _$jscoverage['dataapi/models-mql.js'][177] = 0;
  _$jscoverage['dataapi/models-mql.js'][180] = 0;
  _$jscoverage['dataapi/models-mql.js'][182] = 0;
  _$jscoverage['dataapi/models-mql.js'][185] = 0;
  _$jscoverage['dataapi/models-mql.js'][186] = 0;
  _$jscoverage['dataapi/models-mql.js'][187] = 0;
  _$jscoverage['dataapi/models-mql.js'][189] = 0;
  _$jscoverage['dataapi/models-mql.js'][190] = 0;
  _$jscoverage['dataapi/models-mql.js'][192] = 0;
  _$jscoverage['dataapi/models-mql.js'][193] = 0;
  _$jscoverage['dataapi/models-mql.js'][196] = 0;
  _$jscoverage['dataapi/models-mql.js'][197] = 0;
  _$jscoverage['dataapi/models-mql.js'][199] = 0;
  _$jscoverage['dataapi/models-mql.js'][200] = 0;
  _$jscoverage['dataapi/models-mql.js'][201] = 0;
  _$jscoverage['dataapi/models-mql.js'][202] = 0;
  _$jscoverage['dataapi/models-mql.js'][203] = 0;
  _$jscoverage['dataapi/models-mql.js'][204] = 0;
  _$jscoverage['dataapi/models-mql.js'][205] = 0;
  _$jscoverage['dataapi/models-mql.js'][206] = 0;
  _$jscoverage['dataapi/models-mql.js'][208] = 0;
  _$jscoverage['dataapi/models-mql.js'][210] = 0;
  _$jscoverage['dataapi/models-mql.js'][211] = 0;
  _$jscoverage['dataapi/models-mql.js'][213] = 0;
  _$jscoverage['dataapi/models-mql.js'][215] = 0;
  _$jscoverage['dataapi/models-mql.js'][216] = 0;
  _$jscoverage['dataapi/models-mql.js'][217] = 0;
  _$jscoverage['dataapi/models-mql.js'][218] = 0;
  _$jscoverage['dataapi/models-mql.js'][219] = 0;
  _$jscoverage['dataapi/models-mql.js'][220] = 0;
  _$jscoverage['dataapi/models-mql.js'][221] = 0;
  _$jscoverage['dataapi/models-mql.js'][222] = 0;
  _$jscoverage['dataapi/models-mql.js'][223] = 0;
  _$jscoverage['dataapi/models-mql.js'][224] = 0;
  _$jscoverage['dataapi/models-mql.js'][225] = 0;
  _$jscoverage['dataapi/models-mql.js'][226] = 0;
  _$jscoverage['dataapi/models-mql.js'][227] = 0;
  _$jscoverage['dataapi/models-mql.js'][228] = 0;
  _$jscoverage['dataapi/models-mql.js'][230] = 0;
  _$jscoverage['dataapi/models-mql.js'][231] = 0;
  _$jscoverage['dataapi/models-mql.js'][232] = 0;
  _$jscoverage['dataapi/models-mql.js'][235] = 0;
  _$jscoverage['dataapi/models-mql.js'][245] = 0;
  _$jscoverage['dataapi/models-mql.js'][246] = 0;
  _$jscoverage['dataapi/models-mql.js'][248] = 0;
  _$jscoverage['dataapi/models-mql.js'][249] = 0;
  _$jscoverage['dataapi/models-mql.js'][250] = 0;
  _$jscoverage['dataapi/models-mql.js'][253] = 0;
  _$jscoverage['dataapi/models-mql.js'][256] = 0;
  _$jscoverage['dataapi/models-mql.js'][257] = 0;
  _$jscoverage['dataapi/models-mql.js'][258] = 0;
  _$jscoverage['dataapi/models-mql.js'][259] = 0;
  _$jscoverage['dataapi/models-mql.js'][260] = 0;
  _$jscoverage['dataapi/models-mql.js'][261] = 0;
  _$jscoverage['dataapi/models-mql.js'][264] = 0;
  _$jscoverage['dataapi/models-mql.js'][267] = 0;
  _$jscoverage['dataapi/models-mql.js'][268] = 0;
  _$jscoverage['dataapi/models-mql.js'][272] = 0;
  _$jscoverage['dataapi/models-mql.js'][274] = 0;
  _$jscoverage['dataapi/models-mql.js'][276] = 0;
  _$jscoverage['dataapi/models-mql.js'][277] = 0;
  _$jscoverage['dataapi/models-mql.js'][278] = 0;
  _$jscoverage['dataapi/models-mql.js'][284] = 0;
  _$jscoverage['dataapi/models-mql.js'][285] = 0;
  _$jscoverage['dataapi/models-mql.js'][287] = 0;
  _$jscoverage['dataapi/models-mql.js'][290] = 0;
  _$jscoverage['dataapi/models-mql.js'][292] = 0;
  _$jscoverage['dataapi/models-mql.js'][296] = 0;
  _$jscoverage['dataapi/models-mql.js'][297] = 0;
  _$jscoverage['dataapi/models-mql.js'][299] = 0;
  _$jscoverage['dataapi/models-mql.js'][300] = 0;
  _$jscoverage['dataapi/models-mql.js'][301] = 0;
  _$jscoverage['dataapi/models-mql.js'][302] = 0;
  _$jscoverage['dataapi/models-mql.js'][304] = 0;
  _$jscoverage['dataapi/models-mql.js'][305] = 0;
  _$jscoverage['dataapi/models-mql.js'][306] = 0;
  _$jscoverage['dataapi/models-mql.js'][308] = 0;
  _$jscoverage['dataapi/models-mql.js'][311] = 0;
  _$jscoverage['dataapi/models-mql.js'][313] = 0;
  _$jscoverage['dataapi/models-mql.js'][314] = 0;
  _$jscoverage['dataapi/models-mql.js'][316] = 0;
  _$jscoverage['dataapi/models-mql.js'][317] = 0;
  _$jscoverage['dataapi/models-mql.js'][318] = 0;
  _$jscoverage['dataapi/models-mql.js'][321] = 0;
  _$jscoverage['dataapi/models-mql.js'][323] = 0;
  _$jscoverage['dataapi/models-mql.js'][330] = 0;
  _$jscoverage['dataapi/models-mql.js'][331] = 0;
  _$jscoverage['dataapi/models-mql.js'][333] = 0;
  _$jscoverage['dataapi/models-mql.js'][334] = 0;
  _$jscoverage['dataapi/models-mql.js'][337] = 0;
  _$jscoverage['dataapi/models-mql.js'][339] = 0;
  _$jscoverage['dataapi/models-mql.js'][340] = 0;
  _$jscoverage['dataapi/models-mql.js'][342] = 0;
  _$jscoverage['dataapi/models-mql.js'][343] = 0;
  _$jscoverage['dataapi/models-mql.js'][344] = 0;
  _$jscoverage['dataapi/models-mql.js'][345] = 0;
  _$jscoverage['dataapi/models-mql.js'][347] = 0;
  _$jscoverage['dataapi/models-mql.js'][348] = 0;
  _$jscoverage['dataapi/models-mql.js'][350] = 0;
  _$jscoverage['dataapi/models-mql.js'][352] = 0;
  _$jscoverage['dataapi/models-mql.js'][359] = 0;
  _$jscoverage['dataapi/models-mql.js'][360] = 0;
  _$jscoverage['dataapi/models-mql.js'][361] = 0;
  _$jscoverage['dataapi/models-mql.js'][362] = 0;
  _$jscoverage['dataapi/models-mql.js'][363] = 0;
  _$jscoverage['dataapi/models-mql.js'][364] = 0;
  _$jscoverage['dataapi/models-mql.js'][365] = 0;
  _$jscoverage['dataapi/models-mql.js'][367] = 0;
  _$jscoverage['dataapi/models-mql.js'][368] = 0;
  _$jscoverage['dataapi/models-mql.js'][370] = 0;
  _$jscoverage['dataapi/models-mql.js'][371] = 0;
  _$jscoverage['dataapi/models-mql.js'][372] = 0;
  _$jscoverage['dataapi/models-mql.js'][374] = 0;
  _$jscoverage['dataapi/models-mql.js'][375] = 0;
  _$jscoverage['dataapi/models-mql.js'][376] = 0;
  _$jscoverage['dataapi/models-mql.js'][378] = 0;
  _$jscoverage['dataapi/models-mql.js'][379] = 0;
  _$jscoverage['dataapi/models-mql.js'][382] = 0;
  _$jscoverage['dataapi/models-mql.js'][383] = 0;
  _$jscoverage['dataapi/models-mql.js'][384] = 0;
  _$jscoverage['dataapi/models-mql.js'][386] = 0;
  _$jscoverage['dataapi/models-mql.js'][389] = 0;
  _$jscoverage['dataapi/models-mql.js'][390] = 0;
  _$jscoverage['dataapi/models-mql.js'][391] = 0;
  _$jscoverage['dataapi/models-mql.js'][392] = 0;
  _$jscoverage['dataapi/models-mql.js'][393] = 0;
  _$jscoverage['dataapi/models-mql.js'][394] = 0;
  _$jscoverage['dataapi/models-mql.js'][395] = 0;
  _$jscoverage['dataapi/models-mql.js'][397] = 0;
  _$jscoverage['dataapi/models-mql.js'][398] = 0;
  _$jscoverage['dataapi/models-mql.js'][400] = 0;
  _$jscoverage['dataapi/models-mql.js'][403] = 0;
  _$jscoverage['dataapi/models-mql.js'][410] = 0;
  _$jscoverage['dataapi/models-mql.js'][431] = 0;
  _$jscoverage['dataapi/models-mql.js'][433] = 0;
  _$jscoverage['dataapi/models-mql.js'][434] = 0;
  _$jscoverage['dataapi/models-mql.js'][435] = 0;
  _$jscoverage['dataapi/models-mql.js'][436] = 0;
  _$jscoverage['dataapi/models-mql.js'][437] = 0;
  _$jscoverage['dataapi/models-mql.js'][438] = 0;
  _$jscoverage['dataapi/models-mql.js'][439] = 0;
  _$jscoverage['dataapi/models-mql.js'][440] = 0;
  _$jscoverage['dataapi/models-mql.js'][442] = 0;
  _$jscoverage['dataapi/models-mql.js'][443] = 0;
  _$jscoverage['dataapi/models-mql.js'][446] = 0;
  _$jscoverage['dataapi/models-mql.js'][448] = 0;
  _$jscoverage['dataapi/models-mql.js'][450] = 0;
  _$jscoverage['dataapi/models-mql.js'][451] = 0;
  _$jscoverage['dataapi/models-mql.js'][452] = 0;
  _$jscoverage['dataapi/models-mql.js'][453] = 0;
  _$jscoverage['dataapi/models-mql.js'][454] = 0;
  _$jscoverage['dataapi/models-mql.js'][455] = 0;
  _$jscoverage['dataapi/models-mql.js'][456] = 0;
  _$jscoverage['dataapi/models-mql.js'][457] = 0;
  _$jscoverage['dataapi/models-mql.js'][458] = 0;
  _$jscoverage['dataapi/models-mql.js'][460] = 0;
  _$jscoverage['dataapi/models-mql.js'][461] = 0;
  _$jscoverage['dataapi/models-mql.js'][462] = 0;
  _$jscoverage['dataapi/models-mql.js'][463] = 0;
  _$jscoverage['dataapi/models-mql.js'][464] = 0;
  _$jscoverage['dataapi/models-mql.js'][466] = 0;
  _$jscoverage['dataapi/models-mql.js'][470] = 0;
  _$jscoverage['dataapi/models-mql.js'][472] = 0;
  _$jscoverage['dataapi/models-mql.js'][474] = 0;
  _$jscoverage['dataapi/models-mql.js'][475] = 0;
  _$jscoverage['dataapi/models-mql.js'][478] = 0;
  _$jscoverage['dataapi/models-mql.js'][479] = 0;
  _$jscoverage['dataapi/models-mql.js'][480] = 0;
  _$jscoverage['dataapi/models-mql.js'][482] = 0;
  _$jscoverage['dataapi/models-mql.js'][483] = 0;
  _$jscoverage['dataapi/models-mql.js'][484] = 0;
  _$jscoverage['dataapi/models-mql.js'][486] = 0;
  _$jscoverage['dataapi/models-mql.js'][487] = 0;
  _$jscoverage['dataapi/models-mql.js'][488] = 0;
  _$jscoverage['dataapi/models-mql.js'][489] = 0;
  _$jscoverage['dataapi/models-mql.js'][493] = 0;
  _$jscoverage['dataapi/models-mql.js'][495] = 0;
  _$jscoverage['dataapi/models-mql.js'][496] = 0;
  _$jscoverage['dataapi/models-mql.js'][498] = 0;
  _$jscoverage['dataapi/models-mql.js'][499] = 0;
  _$jscoverage['dataapi/models-mql.js'][500] = 0;
  _$jscoverage['dataapi/models-mql.js'][501] = 0;
  _$jscoverage['dataapi/models-mql.js'][502] = 0;
  _$jscoverage['dataapi/models-mql.js'][505] = 0;
  _$jscoverage['dataapi/models-mql.js'][506] = 0;
  _$jscoverage['dataapi/models-mql.js'][507] = 0;
  _$jscoverage['dataapi/models-mql.js'][510] = 0;
  _$jscoverage['dataapi/models-mql.js'][512] = 0;
  _$jscoverage['dataapi/models-mql.js'][514] = 0;
  _$jscoverage['dataapi/models-mql.js'][515] = 0;
  _$jscoverage['dataapi/models-mql.js'][516] = 0;
  _$jscoverage['dataapi/models-mql.js'][517] = 0;
  _$jscoverage['dataapi/models-mql.js'][518] = 0;
  _$jscoverage['dataapi/models-mql.js'][519] = 0;
  _$jscoverage['dataapi/models-mql.js'][520] = 0;
  _$jscoverage['dataapi/models-mql.js'][521] = 0;
  _$jscoverage['dataapi/models-mql.js'][522] = 0;
  _$jscoverage['dataapi/models-mql.js'][525] = 0;
  _$jscoverage['dataapi/models-mql.js'][528] = 0;
  _$jscoverage['dataapi/models-mql.js'][529] = 0;
  _$jscoverage['dataapi/models-mql.js'][530] = 0;
  _$jscoverage['dataapi/models-mql.js'][531] = 0;
  _$jscoverage['dataapi/models-mql.js'][532] = 0;
  _$jscoverage['dataapi/models-mql.js'][534] = 0;
  _$jscoverage['dataapi/models-mql.js'][537] = 0;
  _$jscoverage['dataapi/models-mql.js'][538] = 0;
  _$jscoverage['dataapi/models-mql.js'][539] = 0;
  _$jscoverage['dataapi/models-mql.js'][540] = 0;
  _$jscoverage['dataapi/models-mql.js'][541] = 0;
  _$jscoverage['dataapi/models-mql.js'][542] = 0;
  _$jscoverage['dataapi/models-mql.js'][543] = 0;
  _$jscoverage['dataapi/models-mql.js'][544] = 0;
  _$jscoverage['dataapi/models-mql.js'][545] = 0;
  _$jscoverage['dataapi/models-mql.js'][546] = 0;
  _$jscoverage['dataapi/models-mql.js'][548] = 0;
  _$jscoverage['dataapi/models-mql.js'][558] = 0;
  _$jscoverage['dataapi/models-mql.js'][559] = 0;
  _$jscoverage['dataapi/models-mql.js'][561] = 0;
  _$jscoverage['dataapi/models-mql.js'][574] = 0;
  _$jscoverage['dataapi/models-mql.js'][579] = 0;
  _$jscoverage['dataapi/models-mql.js'][582] = 0;
  _$jscoverage['dataapi/models-mql.js'][584] = 0;
  _$jscoverage['dataapi/models-mql.js'][585] = 0;
  _$jscoverage['dataapi/models-mql.js'][588] = 0;
  _$jscoverage['dataapi/models-mql.js'][589] = 0;
  _$jscoverage['dataapi/models-mql.js'][592] = 0;
  _$jscoverage['dataapi/models-mql.js'][593] = 0;
  _$jscoverage['dataapi/models-mql.js'][596] = 0;
  _$jscoverage['dataapi/models-mql.js'][600] = 0;
  _$jscoverage['dataapi/models-mql.js'][601] = 0;
  _$jscoverage['dataapi/models-mql.js'][612] = 0;
  _$jscoverage['dataapi/models-mql.js'][615] = 0;
  _$jscoverage['dataapi/models-mql.js'][616] = 0;
  _$jscoverage['dataapi/models-mql.js'][622] = 0;
  _$jscoverage['dataapi/models-mql.js'][625] = 0;
  _$jscoverage['dataapi/models-mql.js'][626] = 0;
  _$jscoverage['dataapi/models-mql.js'][636] = 0;
  _$jscoverage['dataapi/models-mql.js'][639] = 0;
  _$jscoverage['dataapi/models-mql.js'][640] = 0;
  _$jscoverage['dataapi/models-mql.js'][648] = 0;
  _$jscoverage['dataapi/models-mql.js'][651] = 0;
  _$jscoverage['dataapi/models-mql.js'][652] = 0;
  _$jscoverage['dataapi/models-mql.js'][653] = 0;
  _$jscoverage['dataapi/models-mql.js'][654] = 0;
  _$jscoverage['dataapi/models-mql.js'][655] = 0;
  _$jscoverage['dataapi/models-mql.js'][656] = 0;
  _$jscoverage['dataapi/models-mql.js'][657] = 0;
  _$jscoverage['dataapi/models-mql.js'][658] = 0;
  _$jscoverage['dataapi/models-mql.js'][659] = 0;
  _$jscoverage['dataapi/models-mql.js'][661] = 0;
  _$jscoverage['dataapi/models-mql.js'][664] = 0;
  _$jscoverage['dataapi/models-mql.js'][665] = 0;
  _$jscoverage['dataapi/models-mql.js'][666] = 0;
  _$jscoverage['dataapi/models-mql.js'][667] = 0;
  _$jscoverage['dataapi/models-mql.js'][668] = 0;
  _$jscoverage['dataapi/models-mql.js'][669] = 0;
  _$jscoverage['dataapi/models-mql.js'][670] = 0;
  _$jscoverage['dataapi/models-mql.js'][671] = 0;
  _$jscoverage['dataapi/models-mql.js'][672] = 0;
  _$jscoverage['dataapi/models-mql.js'][674] = 0;
  _$jscoverage['dataapi/models-mql.js'][677] = 0;
  _$jscoverage['dataapi/models-mql.js'][678] = 0;
  _$jscoverage['dataapi/models-mql.js'][679] = 0;
  _$jscoverage['dataapi/models-mql.js'][680] = 0;
  _$jscoverage['dataapi/models-mql.js'][681] = 0;
  _$jscoverage['dataapi/models-mql.js'][682] = 0;
  _$jscoverage['dataapi/models-mql.js'][683] = 0;
  _$jscoverage['dataapi/models-mql.js'][684] = 0;
  _$jscoverage['dataapi/models-mql.js'][685] = 0;
  _$jscoverage['dataapi/models-mql.js'][686] = 0;
  _$jscoverage['dataapi/models-mql.js'][688] = 0;
  _$jscoverage['dataapi/models-mql.js'][690] = 0;
  _$jscoverage['dataapi/models-mql.js'][691] = 0;
  _$jscoverage['dataapi/models-mql.js'][692] = 0;
  _$jscoverage['dataapi/models-mql.js'][694] = 0;
  _$jscoverage['dataapi/models-mql.js'][695] = 0;
  _$jscoverage['dataapi/models-mql.js'][697] = 0;
  _$jscoverage['dataapi/models-mql.js'][700] = 0;
  _$jscoverage['dataapi/models-mql.js'][701] = 0;
  _$jscoverage['dataapi/models-mql.js'][702] = 0;
  _$jscoverage['dataapi/models-mql.js'][703] = 0;
  _$jscoverage['dataapi/models-mql.js'][704] = 0;
  _$jscoverage['dataapi/models-mql.js'][705] = 0;
  _$jscoverage['dataapi/models-mql.js'][706] = 0;
  _$jscoverage['dataapi/models-mql.js'][707] = 0;
  _$jscoverage['dataapi/models-mql.js'][708] = 0;
  _$jscoverage['dataapi/models-mql.js'][709] = 0;
  _$jscoverage['dataapi/models-mql.js'][710] = 0;
  _$jscoverage['dataapi/models-mql.js'][713] = 0;
  _$jscoverage['dataapi/models-mql.js'][714] = 0;
  _$jscoverage['dataapi/models-mql.js'][717] = 0;
  _$jscoverage['dataapi/models-mql.js'][718] = 0;
  _$jscoverage['dataapi/models-mql.js'][721] = 0;
  _$jscoverage['dataapi/models-mql.js'][722] = 0;
  _$jscoverage['dataapi/models-mql.js'][725] = 0;
  _$jscoverage['dataapi/models-mql.js'][726] = 0;
  _$jscoverage['dataapi/models-mql.js'][729] = 0;
  _$jscoverage['dataapi/models-mql.js'][730] = 0;
  _$jscoverage['dataapi/models-mql.js'][733] = 0;
  _$jscoverage['dataapi/models-mql.js'][734] = 0;
  _$jscoverage['dataapi/models-mql.js'][737] = 0;
  _$jscoverage['dataapi/models-mql.js'][738] = 0;
  _$jscoverage['dataapi/models-mql.js'][741] = 0;
  _$jscoverage['dataapi/models-mql.js'][742] = 0;
  _$jscoverage['dataapi/models-mql.js'][745] = 0;
  _$jscoverage['dataapi/models-mql.js'][746] = 0;
  _$jscoverage['dataapi/models-mql.js'][747] = 0;
  _$jscoverage['dataapi/models-mql.js'][748] = 0;
  _$jscoverage['dataapi/models-mql.js'][749] = 0;
  _$jscoverage['dataapi/models-mql.js'][750] = 0;
  _$jscoverage['dataapi/models-mql.js'][751] = 0;
  _$jscoverage['dataapi/models-mql.js'][752] = 0;
  _$jscoverage['dataapi/models-mql.js'][754] = 0;
  _$jscoverage['dataapi/models-mql.js'][755] = 0;
  _$jscoverage['dataapi/models-mql.js'][756] = 0;
  _$jscoverage['dataapi/models-mql.js'][758] = 0;
  _$jscoverage['dataapi/models-mql.js'][759] = 0;
  _$jscoverage['dataapi/models-mql.js'][760] = 0;
  _$jscoverage['dataapi/models-mql.js'][761] = 0;
  _$jscoverage['dataapi/models-mql.js'][763] = 0;
  _$jscoverage['dataapi/models-mql.js'][764] = 0;
  _$jscoverage['dataapi/models-mql.js'][765] = 0;
  _$jscoverage['dataapi/models-mql.js'][766] = 0;
  _$jscoverage['dataapi/models-mql.js'][767] = 0;
  _$jscoverage['dataapi/models-mql.js'][770] = 0;
  _$jscoverage['dataapi/models-mql.js'][773] = 0;
  _$jscoverage['dataapi/models-mql.js'][774] = 0;
  _$jscoverage['dataapi/models-mql.js'][775] = 0;
  _$jscoverage['dataapi/models-mql.js'][776] = 0;
  _$jscoverage['dataapi/models-mql.js'][778] = 0;
  _$jscoverage['dataapi/models-mql.js'][779] = 0;
  _$jscoverage['dataapi/models-mql.js'][780] = 0;
  _$jscoverage['dataapi/models-mql.js'][783] = 0;
  _$jscoverage['dataapi/models-mql.js'][784] = 0;
  _$jscoverage['dataapi/models-mql.js'][785] = 0;
  _$jscoverage['dataapi/models-mql.js'][786] = 0;
  _$jscoverage['dataapi/models-mql.js'][787] = 0;
  _$jscoverage['dataapi/models-mql.js'][788] = 0;
  _$jscoverage['dataapi/models-mql.js'][789] = 0;
  _$jscoverage['dataapi/models-mql.js'][791] = 0;
  _$jscoverage['dataapi/models-mql.js'][793] = 0;
  _$jscoverage['dataapi/models-mql.js'][795] = 0;
  _$jscoverage['dataapi/models-mql.js'][797] = 0;
  _$jscoverage['dataapi/models-mql.js'][798] = 0;
  _$jscoverage['dataapi/models-mql.js'][799] = 0;
  _$jscoverage['dataapi/models-mql.js'][800] = 0;
  _$jscoverage['dataapi/models-mql.js'][803] = 0;
  _$jscoverage['dataapi/models-mql.js'][804] = 0;
  _$jscoverage['dataapi/models-mql.js'][806] = 0;
  _$jscoverage['dataapi/models-mql.js'][807] = 0;
  _$jscoverage['dataapi/models-mql.js'][808] = 0;
  _$jscoverage['dataapi/models-mql.js'][812] = 0;
  _$jscoverage['dataapi/models-mql.js'][813] = 0;
  _$jscoverage['dataapi/models-mql.js'][814] = 0;
  _$jscoverage['dataapi/models-mql.js'][816] = 0;
  _$jscoverage['dataapi/models-mql.js'][818] = 0;
  _$jscoverage['dataapi/models-mql.js'][819] = 0;
  _$jscoverage['dataapi/models-mql.js'][820] = 0;
  _$jscoverage['dataapi/models-mql.js'][821] = 0;
  _$jscoverage['dataapi/models-mql.js'][823] = 0;
  _$jscoverage['dataapi/models-mql.js'][825] = 0;
  _$jscoverage['dataapi/models-mql.js'][827] = 0;
  _$jscoverage['dataapi/models-mql.js'][828] = 0;
  _$jscoverage['dataapi/models-mql.js'][830] = 0;
  _$jscoverage['dataapi/models-mql.js'][831] = 0;
  _$jscoverage['dataapi/models-mql.js'][833] = 0;
  _$jscoverage['dataapi/models-mql.js'][834] = 0;
  _$jscoverage['dataapi/models-mql.js'][836] = 0;
  _$jscoverage['dataapi/models-mql.js'][839] = 0;
  _$jscoverage['dataapi/models-mql.js'][840] = 0;
  _$jscoverage['dataapi/models-mql.js'][841] = 0;
  _$jscoverage['dataapi/models-mql.js'][842] = 0;
  _$jscoverage['dataapi/models-mql.js'][843] = 0;
  _$jscoverage['dataapi/models-mql.js'][844] = 0;
  _$jscoverage['dataapi/models-mql.js'][846] = 0;
  _$jscoverage['dataapi/models-mql.js'][847] = 0;
  _$jscoverage['dataapi/models-mql.js'][848] = 0;
  _$jscoverage['dataapi/models-mql.js'][850] = 0;
  _$jscoverage['dataapi/models-mql.js'][851] = 0;
  _$jscoverage['dataapi/models-mql.js'][852] = 0;
  _$jscoverage['dataapi/models-mql.js'][854] = 0;
  _$jscoverage['dataapi/models-mql.js'][858] = 0;
  _$jscoverage['dataapi/models-mql.js'][859] = 0;
  _$jscoverage['dataapi/models-mql.js'][860] = 0;
  _$jscoverage['dataapi/models-mql.js'][862] = 0;
  _$jscoverage['dataapi/models-mql.js'][863] = 0;
  _$jscoverage['dataapi/models-mql.js'][864] = 0;
  _$jscoverage['dataapi/models-mql.js'][865] = 0;
  _$jscoverage['dataapi/models-mql.js'][866] = 0;
  _$jscoverage['dataapi/models-mql.js'][867] = 0;
  _$jscoverage['dataapi/models-mql.js'][868] = 0;
  _$jscoverage['dataapi/models-mql.js'][871] = 0;
  _$jscoverage['dataapi/models-mql.js'][872] = 0;
  _$jscoverage['dataapi/models-mql.js'][873] = 0;
  _$jscoverage['dataapi/models-mql.js'][874] = 0;
  _$jscoverage['dataapi/models-mql.js'][875] = 0;
  _$jscoverage['dataapi/models-mql.js'][876] = 0;
  _$jscoverage['dataapi/models-mql.js'][877] = 0;
  _$jscoverage['dataapi/models-mql.js'][880] = 0;
  _$jscoverage['dataapi/models-mql.js'][881] = 0;
  _$jscoverage['dataapi/models-mql.js'][882] = 0;
  _$jscoverage['dataapi/models-mql.js'][883] = 0;
  _$jscoverage['dataapi/models-mql.js'][884] = 0;
  _$jscoverage['dataapi/models-mql.js'][885] = 0;
  _$jscoverage['dataapi/models-mql.js'][886] = 0;
  _$jscoverage['dataapi/models-mql.js'][887] = 0;
  _$jscoverage['dataapi/models-mql.js'][890] = 0;
  _$jscoverage['dataapi/models-mql.js'][891] = 0;
  _$jscoverage['dataapi/models-mql.js'][892] = 0;
  _$jscoverage['dataapi/models-mql.js'][893] = 0;
  _$jscoverage['dataapi/models-mql.js'][894] = 0;
  _$jscoverage['dataapi/models-mql.js'][895] = 0;
  _$jscoverage['dataapi/models-mql.js'][896] = 0;
  _$jscoverage['dataapi/models-mql.js'][898] = 0;
  _$jscoverage['dataapi/models-mql.js'][899] = 0;
  _$jscoverage['dataapi/models-mql.js'][901] = 0;
  _$jscoverage['dataapi/models-mql.js'][902] = 0;
  _$jscoverage['dataapi/models-mql.js'][904] = 0;
  _$jscoverage['dataapi/models-mql.js'][905] = 0;
  _$jscoverage['dataapi/models-mql.js'][907] = 0;
  _$jscoverage['dataapi/models-mql.js'][908] = 0;
  _$jscoverage['dataapi/models-mql.js'][910] = 0;
  _$jscoverage['dataapi/models-mql.js'][911] = 0;
  _$jscoverage['dataapi/models-mql.js'][913] = 0;
  _$jscoverage['dataapi/models-mql.js'][914] = 0;
  _$jscoverage['dataapi/models-mql.js'][916] = 0;
  _$jscoverage['dataapi/models-mql.js'][917] = 0;
  _$jscoverage['dataapi/models-mql.js'][919] = 0;
  _$jscoverage['dataapi/models-mql.js'][920] = 0;
  _$jscoverage['dataapi/models-mql.js'][922] = 0;
  _$jscoverage['dataapi/models-mql.js'][923] = 0;
  _$jscoverage['dataapi/models-mql.js'][925] = 0;
  _$jscoverage['dataapi/models-mql.js'][926] = 0;
  _$jscoverage['dataapi/models-mql.js'][928] = 0;
  _$jscoverage['dataapi/models-mql.js'][929] = 0;
  _$jscoverage['dataapi/models-mql.js'][931] = 0;
  _$jscoverage['dataapi/models-mql.js'][932] = 0;
  _$jscoverage['dataapi/models-mql.js'][936] = 0;
  _$jscoverage['dataapi/models-mql.js'][937] = 0;
  _$jscoverage['dataapi/models-mql.js'][938] = 0;
  _$jscoverage['dataapi/models-mql.js'][940] = 0;
  _$jscoverage['dataapi/models-mql.js'][943] = 0;
  _$jscoverage['dataapi/models-mql.js'][944] = 0;
  _$jscoverage['dataapi/models-mql.js'][946] = 0;
  _$jscoverage['dataapi/models-mql.js'][947] = 0;
  _$jscoverage['dataapi/models-mql.js'][948] = 0;
  _$jscoverage['dataapi/models-mql.js'][950] = 0;
  _$jscoverage['dataapi/models-mql.js'][953] = 0;
  _$jscoverage['dataapi/models-mql.js'][956] = 0;
  _$jscoverage['dataapi/models-mql.js'][958] = 0;
  _$jscoverage['dataapi/models-mql.js'][959] = 0;
  _$jscoverage['dataapi/models-mql.js'][960] = 0;
  _$jscoverage['dataapi/models-mql.js'][961] = 0;
  _$jscoverage['dataapi/models-mql.js'][963] = 0;
  _$jscoverage['dataapi/models-mql.js'][965] = 0;
  _$jscoverage['dataapi/models-mql.js'][967] = 0;
  _$jscoverage['dataapi/models-mql.js'][968] = 0;
  _$jscoverage['dataapi/models-mql.js'][970] = 0;
  _$jscoverage['dataapi/models-mql.js'][971] = 0;
  _$jscoverage['dataapi/models-mql.js'][973] = 0;
  _$jscoverage['dataapi/models-mql.js'][974] = 0;
  _$jscoverage['dataapi/models-mql.js'][976] = 0;
}
_$jscoverage['dataapi/models-mql.js'].source = ["<span class=\"c\">/*</span>","<span class=\"c\">                         pentaho.pda.MqlHandler</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>MqlHandler <span class=\"k\">=</span> <span class=\"k\">function</span> mqlHandler<span class=\"k\">(</span>sandbox<span class=\"k\">)</span> <span class=\"k\">{</span>","\tpentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Handler<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> sandbox<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>SOURCE_TYPE_MQL<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>METADATA_SERVICE_URL <span class=\"k\">=</span> <span class=\"s\">'../../../../content/ws-run/metadataService'</span><span class=\"k\">;</span> ","<span class=\"k\">}</span>","","inheritPrototype<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>MqlHandler<span class=\"k\">,</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Handler<span class=\"k\">);</span> <span class=\"c\">//borrow the parent's methods</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>MqlHandler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getSources <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>callback<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","\toptions <span class=\"k\">=</span> options <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> filter <span class=\"k\">=</span> options<span class=\"k\">[</span><span class=\"s\">'filter'</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> _sources <span class=\"k\">=</span> <span class=\"k\">[],</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>j<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span> each<span class=\"k\">;</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>sources<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>filter <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>j<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>sources<span class=\"k\">.</span>length<span class=\"k\">;</span>i<span class=\"k\">&lt;</span>j<span class=\"k\">;</span>i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\t\t\tcallback<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>sources<span class=\"k\">[</span>i<span class=\"k\">]);</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>j<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>sources<span class=\"k\">.</span>length<span class=\"k\">;</span>i<span class=\"k\">&lt;</span>j<span class=\"k\">;</span>i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\t\t\teach <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>sources<span class=\"k\">[</span>i<span class=\"k\">];</span>","\t\t\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>each<span class=\"k\">[</span>filter<span class=\"k\">.</span>property<span class=\"k\">]</span> <span class=\"k\">==</span> filter<span class=\"k\">.</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tcallback<span class=\"k\">(</span>each<span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"c\">//just move on to next</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    ","        <span class=\"c\">//try {</span>","            <span class=\"c\">// get the info about the models from the server</span>","            <span class=\"k\">var</span> url <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>METADATA_SERVICE_URL<span class=\"k\">+</span><span class=\"s\">'/listBusinessModels'</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> contextName <span class=\"k\">=</span> options<span class=\"k\">[</span><span class=\"s\">'context'</span><span class=\"k\">];</span>","            <span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"s\">\"domainName=&amp;\"</span><span class=\"k\">+((</span>contextName<span class=\"k\">)?</span> <span class=\"s\">'context='</span><span class=\"k\">+</span>contextName <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> result <span class=\"k\">=</span> pentahoGet<span class=\"k\">(</span> url<span class=\"k\">,</span> query <span class=\"k\">);</span>","","            <span class=\"c\">// parse the XML</span>","            <span class=\"k\">var</span> xml <span class=\"k\">=</span> parseXML<span class=\"k\">(</span> result <span class=\"k\">),</span> ","            nodes <span class=\"k\">=</span> xml<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'return'</span><span class=\"k\">);</span>","            <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>nodes<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                each <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>addModelInfoFromNode<span class=\"k\">(</span> nodes<span class=\"k\">[</span>idx<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t\t\t\teach<span class=\"k\">.</span>addCapability<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>CAPABILITIES<span class=\"k\">.</span>HAS_DOWN_AXIS<span class=\"k\">);</span>","\t\t\t\teach<span class=\"k\">.</span>addCapability<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>CAPABILITIES<span class=\"k\">.</span>IS_DOWN_CUSTOM<span class=\"k\">);</span>","\t\t\t\teach<span class=\"k\">.</span>addCapability<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>CAPABILITIES<span class=\"k\">.</span>HAS_FILTERS<span class=\"k\">);</span>","\t\t\t\teach<span class=\"k\">.</span>addCapability<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>CAPABILITIES<span class=\"k\">.</span>IS_FILTER_CUSTOM<span class=\"k\">);</span>","\t\t\t\teach<span class=\"k\">.</span>addCapability<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>CAPABILITIES<span class=\"k\">.</span>CAN_SORT<span class=\"k\">);</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>sources<span class=\"k\">.</span>push<span class=\"k\">(</span>each<span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>filter <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tcallback<span class=\"k\">(</span>each<span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>each<span class=\"k\">[</span>filter<span class=\"k\">.</span>property<span class=\"k\">]</span> <span class=\"k\">==</span> filter<span class=\"k\">.</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tcallback<span class=\"k\">(</span>each<span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"c\">//} catch (e) {</span>","            <span class=\"c\">//alert( e.message );</span>","        <span class=\"c\">//}</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>  <span class=\"c\">//end discoverModels</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>MqlHandler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getModelInfoFromNode <span class=\"k\">=</span> <span class=\"k\">function</span> getModelInfoFromNode<span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","","\t<span class=\"k\">var</span> model <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    model<span class=\"k\">.</span>domainId <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'domainId'</span> <span class=\"k\">);</span> ","    model<span class=\"k\">.</span>modelId  <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'modelId'</span> <span class=\"k\">);</span>","    model<span class=\"k\">.</span>id       <span class=\"k\">=</span> model<span class=\"k\">.</span>domainId <span class=\"k\">+</span><span class=\"s\">':'</span><span class=\"k\">+</span> model<span class=\"k\">.</span>modelId<span class=\"k\">;</span>","\tmodel<span class=\"k\">.</span>name     <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'modelName'</span> <span class=\"k\">);</span>","\tmodel<span class=\"k\">.</span>type     <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>SOURCE_TYPE_MQL<span class=\"k\">,</span>","    model<span class=\"k\">.</span>description <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'modelDescription'</span> <span class=\"k\">);</span>","\t\t","    <span class=\"k\">return</span> model<span class=\"k\">;</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>MqlHandler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addModelInfoFromNode <span class=\"k\">=</span> <span class=\"k\">function</span> addModelInfoFromNode<span class=\"k\">(</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>mql<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>getModelInfoFromNode<span class=\"k\">(</span>node<span class=\"k\">),</span> <span class=\"k\">this</span><span class=\"k\">);</span>","<span class=\"k\">}</span> <span class=\"c\">//end addModelInfoFromNode</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>MqlHandler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getModelFromNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> node<span class=\"k\">,</span> modelAccess<span class=\"k\">,</span> datasourceConfig <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> id <span class=\"k\">=</span> datasourceConfig<span class=\"k\">.</span>id<span class=\"k\">;</span>","        <span class=\"k\">var</span> name <span class=\"k\">=</span> datasourceConfig<span class=\"k\">.</span>name<span class=\"k\">;</span>","        <span class=\"k\">var</span> description <span class=\"k\">=</span> datasourceConfig<span class=\"k\">.</span>description<span class=\"k\">;</span>","        <span class=\"k\">var</span> model <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">(</span> id<span class=\"k\">,</span> name<span class=\"k\">,</span> modelAccess<span class=\"k\">,</span> datasourceConfig <span class=\"k\">);</span>","        <span class=\"c\">// get the model attributes</span>","        model<span class=\"k\">.</span>domainId <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'domainId'</span> <span class=\"k\">);</span>","        model<span class=\"k\">.</span>modelId <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'id'</span> <span class=\"k\">);</span>","        ","        <span class=\"c\">// get the categories</span>","        <span class=\"k\">var</span> nodes <span class=\"k\">=</span> node<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'categories'</span><span class=\"k\">);</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>nodes<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addCategoryFromNode<span class=\"k\">(</span> nodes<span class=\"k\">[</span>idx<span class=\"k\">],</span> model <span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> model<span class=\"k\">;</span>","    ","<span class=\"k\">}</span>  <span class=\"c\">//end getModelFromNode</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>MqlHandler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addCategoryFromNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> node<span class=\"k\">,</span> model <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> category <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>dataelement<span class=\"k\">();</span>","        category<span class=\"k\">.</span>dataType <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>NONE<span class=\"k\">;</span>","        category<span class=\"k\">.</span>elementType <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>CATEGORY<span class=\"k\">;</span>","        category<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'id'</span> <span class=\"k\">);</span>","        category<span class=\"k\">.</span>name <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'name'</span> <span class=\"k\">);</span>","        category<span class=\"k\">.</span>isQueryElement <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        model<span class=\"k\">.</span>addElement<span class=\"k\">(</span> category <span class=\"k\">);</span>","        <span class=\"c\">// get the columns</span>","        <span class=\"k\">var</span> nodes <span class=\"k\">=</span> node<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'columns'</span><span class=\"k\">);</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>nodes<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addColumnFromNode<span class=\"k\">(</span> nodes<span class=\"k\">[</span>idx<span class=\"k\">],</span> model<span class=\"k\">,</span> category <span class=\"k\">);</span>","        <span class=\"k\">}</span>","<span class=\"k\">}</span> <span class=\"c\">//addCategoryFromNode</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>MqlHandler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addColumnFromNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> node<span class=\"k\">,</span> model<span class=\"k\">,</span> category <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> element <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>dataelement<span class=\"k\">();</span>","        ","        element<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'id'</span> <span class=\"k\">);</span>","        element<span class=\"k\">.</span>name <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'name'</span> <span class=\"k\">);</span>","        element<span class=\"k\">.</span>elementType <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'fieldType'</span> <span class=\"k\">);</span>","        element<span class=\"k\">.</span>dataType <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'type'</span> <span class=\"k\">);</span>","        element<span class=\"k\">.</span>horzizontalAlignment <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'horizontalAlignment'</span> <span class=\"k\">);</span>","        element<span class=\"k\">.</span>formatMask <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'formatMask'</span> <span class=\"k\">);</span>","        element<span class=\"k\">.</span>selectedAggregation <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'selectedAggType'</span> <span class=\"k\">);</span>","        element<span class=\"k\">.</span>defaultAggregation <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">,</span> <span class=\"s\">'defaultAggType'</span> <span class=\"k\">);</span>","        element<span class=\"k\">.</span>parent <span class=\"k\">=</span> category<span class=\"k\">;</span>","        element<span class=\"k\">.</span>isQueryElement <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        category<span class=\"k\">.</span>addChild<span class=\"k\">(</span>element<span class=\"k\">);</span>","        ","        <span class=\"k\">var</span> nodes <span class=\"k\">=</span> node<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'aggTypes'</span><span class=\"k\">);</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>nodes<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            element<span class=\"k\">.</span>availableAggregations<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>getText<span class=\"k\">(</span> nodes<span class=\"k\">[</span>idx<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        model<span class=\"k\">.</span>addElement<span class=\"k\">(</span> element <span class=\"k\">);</span>","<span class=\"k\">}</span> <span class=\"c\">//addColumnFromNode</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>MqlHandler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getNodeText <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> node<span class=\"k\">,</span> tag <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>node<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>node<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>idx<span class=\"k\">].</span>nodeName <span class=\"k\">==</span> tag<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>getText<span class=\"k\">(</span> node<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>idx<span class=\"k\">]</span> <span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","<span class=\"k\">}</span> <span class=\"c\">//getNodeText</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>MqlHandler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getNodeTextOfChild <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> node<span class=\"k\">,</span> tag1<span class=\"k\">,</span> tag2 <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>node<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>node<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>idx<span class=\"k\">].</span>nodeName <span class=\"k\">==</span> tag1<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> node<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>idx<span class=\"k\">],</span> tag2 <span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","<span class=\"k\">}</span> <span class=\"c\">//getNodeTextOfChild</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>MqlHandler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getText <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span><span class=\"k\">(!</span>node <span class=\"k\">||</span> <span class=\"k\">!</span>node<span class=\"k\">.</span>firstChild<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>node<span class=\"k\">.</span>textContent<span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">return</span> node<span class=\"k\">.</span>textContent<span class=\"k\">;</span>","      <span class=\"k\">return</span> node<span class=\"k\">.</span>firstChild<span class=\"k\">.</span>nodeValue<span class=\"k\">;</span>","<span class=\"k\">}</span> <span class=\"c\">//getText</span>","","<span class=\"c\">/* ******************************************</span>","<span class=\"c\">                        pentaho.pda.model.mql</span>","<span class=\"c\">   ******************************************\t\t\t\t\t\t</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>mql <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">,</span> handler<span class=\"k\">)</span> <span class=\"k\">{</span>","\tpentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> obj<span class=\"k\">);</span> <span class=\"c\">//call parent object</span>","\t","    <span class=\"k\">this</span><span class=\"k\">.</span>categories <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">();</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>domainId <span class=\"k\">=</span> obj<span class=\"k\">.</span>domainId<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>modelId <span class=\"k\">=</span> obj<span class=\"k\">.</span>modelId<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>modelName <span class=\"k\">=</span> obj<span class=\"k\">.</span>modelName <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>modelDescription <span class=\"k\">=</span> obj<span class=\"k\">.</span>modelDescription <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>handler <span class=\"k\">=</span> handler<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'mql'</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","inheritPrototype<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>mql<span class=\"k\">,</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">);</span> <span class=\"c\">//borrow the parent's methods</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>discoverModelDetail <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","\t<span class=\"c\">// get the info about the models from the server</span>","\t<span class=\"k\">var</span> url <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>handler<span class=\"k\">.</span>METADATA_SERVICE_URL<span class=\"k\">+</span><span class=\"s\">'/loadModel'</span><span class=\"k\">;</span>","\t<span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"s\">'domainId='</span><span class=\"k\">+</span>escape<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>domainId<span class=\"k\">)+</span><span class=\"s\">'&amp;modelId='</span><span class=\"k\">+</span>escape<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>modelId<span class=\"k\">);</span>","\t<span class=\"k\">var</span> result <span class=\"k\">=</span> pentahoGet<span class=\"k\">(</span> url<span class=\"k\">,</span> query <span class=\"k\">);</span>","\t<span class=\"c\">// parse the XML</span>","\t<span class=\"k\">var</span> xml <span class=\"k\">=</span> parseXML<span class=\"k\">(</span> result <span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>categories <span class=\"k\">=</span> <span class=\"k\">[];</span>","    ","\t<span class=\"k\">var</span> nodes <span class=\"k\">=</span> xml<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'return'</span><span class=\"k\">);</span>","\t<span class=\"k\">if</span><span class=\"k\">(</span> nodes <span class=\"k\">&amp;&amp;</span> nodes<span class=\"k\">.</span>length<span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">//return this.getDetailFromNode( nodes[0], modelAccess, datasourceConfig );</span>","        <span class=\"c\">// get the categories</span>","        <span class=\"k\">var</span> catnodes <span class=\"k\">=</span> nodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'categories'</span><span class=\"k\">);</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>catnodes<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">//this.addCategoryFromNode( nodes[idx], model );</span>","\t\t\t<span class=\"k\">var</span> category <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>dataelement<span class=\"k\">();</span>","\t\t\tcategory<span class=\"k\">.</span>dataType <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>NONE<span class=\"k\">;</span>","\t\t\tcategory<span class=\"k\">.</span>elementType <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>CATEGORY<span class=\"k\">;</span>","\t\t\tcategory<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> catnodes<span class=\"k\">[</span>idx<span class=\"k\">],</span> <span class=\"s\">'id'</span> <span class=\"k\">);</span>","\t\t\tcategory<span class=\"k\">.</span>name <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> catnodes<span class=\"k\">[</span>idx<span class=\"k\">],</span> <span class=\"s\">'name'</span> <span class=\"k\">);</span>","            category<span class=\"k\">.</span>description <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> catnodes<span class=\"k\">[</span>idx<span class=\"k\">],</span> <span class=\"s\">'description'</span> <span class=\"k\">);</span>","\t\t\tcategory<span class=\"k\">.</span>isQueryElement <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>categories<span class=\"k\">.</span>push<span class=\"k\">(</span>category<span class=\"k\">);</span>","\t\t\t<span class=\"c\">//console.log(category);</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>addElement<span class=\"k\">(</span> category <span class=\"k\">);</span>","\t\t\t<span class=\"c\">// get the columns</span>","\t\t\t<span class=\"k\">var</span> colnodes <span class=\"k\">=</span> catnodes<span class=\"k\">[</span>idx<span class=\"k\">].</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'columns'</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx2<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx2<span class=\"k\">&lt;</span>colnodes<span class=\"k\">.</span>length<span class=\"k\">;</span> idx2<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">//this.addColumnFromNode( nodes[idx], model, category );</span>","\t\t\t\t<span class=\"k\">var</span> element <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>dataelement<span class=\"k\">();</span>","\t\t\t\t","\t\t\t\telement<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> colnodes<span class=\"k\">[</span>idx2<span class=\"k\">],</span> <span class=\"s\">'id'</span> <span class=\"k\">);</span>","\t\t\t\telement<span class=\"k\">.</span>name <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> colnodes<span class=\"k\">[</span>idx2<span class=\"k\">],</span> <span class=\"s\">'name'</span> <span class=\"k\">);</span>","                element<span class=\"k\">.</span>description <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> colnodes<span class=\"k\">[</span>idx2<span class=\"k\">],</span> <span class=\"s\">'description'</span> <span class=\"k\">);</span>","\t\t\t\telement<span class=\"k\">.</span>elementType <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> colnodes<span class=\"k\">[</span>idx2<span class=\"k\">],</span> <span class=\"s\">'fieldType'</span> <span class=\"k\">);</span>","\t\t\t\telement<span class=\"k\">.</span>dataType <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> colnodes<span class=\"k\">[</span>idx2<span class=\"k\">],</span> <span class=\"s\">'type'</span> <span class=\"k\">);</span>","\t\t\t\telement<span class=\"k\">.</span>horizontalAlignment <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> colnodes<span class=\"k\">[</span>idx2<span class=\"k\">],</span> <span class=\"s\">'horizontalAlignment'</span> <span class=\"k\">);</span>","\t\t\t\telement<span class=\"k\">.</span>formatMask <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> colnodes<span class=\"k\">[</span>idx2<span class=\"k\">],</span> <span class=\"s\">'formatMask'</span> <span class=\"k\">);</span>","\t\t\t\telement<span class=\"k\">.</span>selectedAggregation <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> colnodes<span class=\"k\">[</span>idx2<span class=\"k\">],</span> <span class=\"s\">'selectedAggType'</span> <span class=\"k\">);</span>","\t\t\t\telement<span class=\"k\">.</span>defaultAggregation <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> colnodes<span class=\"k\">[</span>idx2<span class=\"k\">],</span> <span class=\"s\">'defaultAggType'</span> <span class=\"k\">);</span>","\t\t\t\telement<span class=\"k\">.</span>hiddenForUser <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNodeText<span class=\"k\">(</span> colnodes<span class=\"k\">[</span>idx2<span class=\"k\">],</span> <span class=\"s\">'hiddenForUser'</span> <span class=\"k\">);</span>","\t\t\t\telement<span class=\"k\">.</span>parent <span class=\"k\">=</span> category<span class=\"k\">;</span>","\t\t\t\telement<span class=\"k\">.</span>isQueryElement <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                                element<span class=\"k\">.</span>category <span class=\"k\">=</span> category<span class=\"k\">;</span>","\t\t\t\tcategory<span class=\"k\">.</span>addChild<span class=\"k\">(</span>element<span class=\"k\">);</span>","\t\t\t\t","\t\t\t\t<span class=\"k\">var</span> aggnodes <span class=\"k\">=</span> colnodes<span class=\"k\">[</span>idx2<span class=\"k\">].</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'aggTypes'</span><span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx3<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx3<span class=\"k\">&lt;</span>aggnodes<span class=\"k\">.</span>length<span class=\"k\">;</span> idx3<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\telement<span class=\"k\">.</span>availableAggregations<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>getText<span class=\"k\">(</span> aggnodes<span class=\"k\">[</span>idx3<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>addElement<span class=\"k\">(</span> element <span class=\"k\">);</span>","\t\t\t\t","\t\t\t<span class=\"k\">}</span>","\t\t\t","        <span class=\"k\">}</span>","\t\t","\t<span class=\"k\">}</span>","\t<span class=\"c\">// return the number of models loaded</span>","<span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getAllColumns <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> columns <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">();</span>","","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx2 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> idx2<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>elements<span class=\"k\">.</span>length<span class=\"k\">;</span> idx2<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>elements<span class=\"k\">[</span>idx2<span class=\"k\">].</span>elementType <span class=\"k\">!=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>CATEGORY<span class=\"k\">)</span> <span class=\"k\">{</span>","                columns<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>elements<span class=\"k\">[</span>idx2<span class=\"k\">]</span> <span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> columns<span class=\"k\">;</span>","<span class=\"k\">}</span>","        ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>searchColumn <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> column<span class=\"k\">,</span> searchStr<span class=\"k\">,</span> rowLimit<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createQuery<span class=\"k\">();</span>","        <span class=\"k\">var</span> selection <span class=\"k\">=</span> query<span class=\"k\">.</span>addSelectionById<span class=\"k\">(</span> column<span class=\"k\">.</span>id <span class=\"k\">);</span>","        <span class=\"k\">var</span> sort <span class=\"k\">=</span> query<span class=\"k\">.</span>addSortById<span class=\"k\">(</span> column<span class=\"k\">.</span>id<span class=\"k\">,</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>SORT_TYPES<span class=\"k\">.</span>ASCENDING <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> searchStr <span class=\"k\">)</span> <span class=\"k\">{</span>","            query<span class=\"k\">.</span>addConditionById<span class=\"k\">(</span>column<span class=\"k\">.</span>id<span class=\"k\">,</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>CONTAINS<span class=\"k\">,</span>searchStr<span class=\"k\">,</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>OPERATOR_TYPES<span class=\"k\">.</span>OR<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"c\">// TODO submit this thru CDA</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>submitQuery<span class=\"k\">(</span> query<span class=\"k\">,</span> rowLimit<span class=\"k\">,</span> callback <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getAllValuesForColumn <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> column<span class=\"k\">,</span> rowLimit <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>searchColumn<span class=\"k\">(</span> column<span class=\"k\">,</span> undefined<span class=\"k\">,</span> rowLimit <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// create a new query</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createQuery <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","    <span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","","    query<span class=\"k\">.</span>setDomainId<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>domainId <span class=\"k\">);</span>","    query<span class=\"k\">.</span>setModelId<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>modelId <span class=\"k\">);</span>","    <span class=\"k\">return</span> query<span class=\"k\">;</span>","<span class=\"k\">}</span>","","    <span class=\"c\">// get the results of the query</span>","<span class=\"c\">// This is a synchronous call unless a callback is provided. see pentaho-ajax's pentahoAction() documentation</span>","<span class=\"c\">// for types of callbacks.</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>submitQuery <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> queryObject<span class=\"k\">,</span> rowLimit<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> json <span class=\"k\">=</span> queryObject<span class=\"k\">.</span>getJson<span class=\"k\">();</span> ","<span class=\"c\">//        alert(json);</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>submit<span class=\"k\">(</span>json<span class=\"k\">,</span> rowLimit<span class=\"k\">,</span> callback<span class=\"k\">);</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>submit <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> jsonString<span class=\"k\">,</span> rowLimit<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","    ","        <span class=\"k\">var</span> results <span class=\"k\">=</span> <span class=\"k\">{</span>","            metadata<span class=\"k\">:[],</span>","            resultset<span class=\"k\">:[]</span>","        <span class=\"k\">}</span>            ","        <span class=\"k\">if</span> <span class=\"k\">(!</span>rowLimit<span class=\"k\">)</span> <span class=\"k\">{</span>","            rowLimit <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> handleResultCallback <span class=\"k\">=</span> dojo<span class=\"k\">.</span>hitch<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>resultXml<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> result <span class=\"k\">=</span> parseXML<span class=\"k\">(</span> resultXml <span class=\"k\">);</span>","          <span class=\"k\">var</span> nodes <span class=\"k\">=</span> result<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'return'</span><span class=\"k\">);</span>","          resultJson <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getText<span class=\"k\">(</span> nodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">);</span>","<span class=\"c\">//          alert(resultJson);</span>","          <span class=\"k\">var</span> result <span class=\"k\">=</span> eval<span class=\"k\">(</span><span class=\"s\">'('</span><span class=\"k\">+</span>resultJson<span class=\"k\">+</span><span class=\"s\">')'</span><span class=\"k\">);</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>callback<span class=\"k\">)</span> <span class=\"k\">{</span>","            callback<span class=\"k\">(</span>result<span class=\"k\">);</span>","          <span class=\"k\">}</span>","          <span class=\"k\">return</span> result<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        ","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"c\">// get the info about the models from the server</span>","            <span class=\"k\">var</span> url <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>handler<span class=\"k\">.</span>METADATA_SERVICE_URL<span class=\"k\">+</span><span class=\"s\">'/doJsonQueryToCdaJson'</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"s\">'json='</span><span class=\"k\">+</span>escape<span class=\"k\">(</span>jsonString<span class=\"k\">)+</span><span class=\"s\">'&amp;rowLimit='</span><span class=\"k\">+</span>rowLimit<span class=\"k\">;</span>","","            <span class=\"k\">var</span> resultXml <span class=\"k\">=</span> pentahoGet<span class=\"k\">(</span> url<span class=\"k\">,</span> query<span class=\"k\">,</span> callback <span class=\"k\">?</span> handleResultCallback <span class=\"k\">:</span> undefined<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>callback<span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"k\">return</span> handleResultCallback<span class=\"k\">(</span>resultXml<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            alert<span class=\"k\">(</span>e<span class=\"k\">.</span>message<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        ","<span class=\"c\">//        alert( query.serialize() );</span>","","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// get the results of the query by submiting XML</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>submitXmlQuery <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> queryObject<span class=\"k\">,</span> rowLimit <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> xml <span class=\"k\">=</span> queryObject<span class=\"k\">.</span>serialize<span class=\"k\">();</span> ","<span class=\"c\">//        alert(json);</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>rowLimit<span class=\"k\">)</span> <span class=\"k\">{</span>","            rowLimit <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    ","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"c\">// get the info about the models from the server</span>","            <span class=\"k\">var</span> url <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>handler<span class=\"k\">.</span>METADATA_SERVICE_URL<span class=\"k\">+</span><span class=\"s\">'/doXmlQueryToCdaJson'</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"s\">'xml='</span><span class=\"k\">+</span>escape<span class=\"k\">(</span>xml<span class=\"k\">)+</span><span class=\"s\">'&amp;rowLimit='</span><span class=\"k\">+</span>rowLimit<span class=\"k\">;</span>","","            <span class=\"k\">var</span> resultXml <span class=\"k\">=</span> pentahoGet<span class=\"k\">(</span> url<span class=\"k\">,</span> query <span class=\"k\">);</span>","            <span class=\"k\">var</span> result <span class=\"k\">=</span> parseXML<span class=\"k\">(</span> resultXml <span class=\"k\">);</span>","            <span class=\"k\">var</span> nodes <span class=\"k\">=</span> result<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'return'</span><span class=\"k\">);</span>","            resultJson <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getText<span class=\"k\">(</span> nodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">);</span>","<span class=\"c\">//            alert(resultJson);</span>","            <span class=\"k\">var</span> result <span class=\"k\">=</span> eval<span class=\"k\">(</span><span class=\"s\">'('</span><span class=\"k\">+</span>resultJson<span class=\"k\">+</span><span class=\"s\">')'</span><span class=\"k\">);</span>","            <span class=\"k\">return</span> result<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            alert<span class=\"k\">(</span>e<span class=\"k\">.</span>message<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        ","<span class=\"c\">//        alert( query.toString() );</span>","","    <span class=\"k\">}</span>","","<span class=\"c\">// parse the results XML into a MetadataQuery.Results object</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>parseResultSetXml <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>xml<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> oXML  <span class=\"k\">=</span> parseXML<span class=\"k\">(</span>xml<span class=\"k\">);</span>","\t\t<span class=\"k\">var</span> rowNodes <span class=\"k\">=</span> oXML<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'rows'</span><span class=\"k\">);</span>        <span class=\"c\">//initialize array of all DATA-ROW returned in SOAP</span>","\t\t<span class=\"k\">var</span> colNameNodes <span class=\"k\">=</span> oXML<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'columnNames'</span><span class=\"k\">);</span> <span class=\"c\">//initialize arry of all COLUMN-HDR-ITEM in SOAP</span>","\t\t<span class=\"k\">var</span> colTypeNodes <span class=\"k\">=</span> oXML<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'columnTypes'</span><span class=\"k\">);</span> <span class=\"c\">//initialize arry of all COLUMN-HDR-ITEM in SOAP</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>colNameNodes <span class=\"k\">||</span> colNameNodes<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        colNameNodes <span class=\"k\">=</span> colNameNodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'names'</span><span class=\"k\">);</span>","        colTypeNodes <span class=\"k\">=</span> colTypeNodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'columnType'</span><span class=\"k\">);</span>","","\t\t<span class=\"k\">var</span> results <span class=\"k\">=</span> <span class=\"k\">new</span> MetadataQuery<span class=\"k\">.</span>Results<span class=\"k\">();</span>     <span class=\"c\">// create a new results object</span>","        <span class=\"k\">var</span> columnNames <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">();</span>","        <span class=\"k\">var</span> columns <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">();</span>","        <span class=\"c\">// store the column names, and the column objects (if the model is populated)</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>colNameNodes<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            columnNames<span class=\"k\">.</span>push<span class=\"k\">(</span> colNameNodes<span class=\"k\">[</span>i<span class=\"k\">].</span>firstChild<span class=\"k\">.</span>nodeValue <span class=\"k\">);</span>","            columns<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>getColumnById<span class=\"k\">(</span> columnNames<span class=\"k\">[</span>columnNames<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","        results<span class=\"k\">.</span>columnNames <span class=\"k\">=</span> columnNames<span class=\"k\">;</span>","        results<span class=\"k\">.</span>columns <span class=\"k\">=</span> columns<span class=\"k\">;</span>","        ","        <span class=\"c\">// store the column types</span>","        <span class=\"k\">var</span> columnTypes <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">();</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>colTypeNodes<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            columnTypes<span class=\"k\">.</span>push<span class=\"k\">(</span> colTypeNodes<span class=\"k\">[</span>i<span class=\"k\">].</span>firstChild<span class=\"k\">.</span>nodeValue <span class=\"k\">);</span>","        <span class=\"k\">}</span>","        results<span class=\"k\">.</span>columnTypes <span class=\"k\">=</span> columnTypes<span class=\"k\">;</span>","        ","        <span class=\"c\">// store the data values as a 2D array</span>","        results<span class=\"k\">.</span>rows <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">();</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>rowNodes<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\t\tcellNodes <span class=\"k\">=</span> rowNodes<span class=\"k\">[</span>i<span class=\"k\">].</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'cell'</span><span class=\"k\">);</span> <span class=\"c\">//get the next row</span>","\t\t\tresults<span class=\"k\">.</span>rows<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">();</span> <span class=\"c\">//initialize each row with an empty array</span>","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> j<span class=\"k\">&lt;</span>cellNodes<span class=\"k\">.</span>length<span class=\"k\">;</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> cellNodes<span class=\"k\">[</span>j<span class=\"k\">].</span>firstChild <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> value <span class=\"k\">=</span> cellNodes<span class=\"k\">[</span>j<span class=\"k\">].</span>firstChild<span class=\"k\">.</span>nodeValue<span class=\"k\">;</span>","                    <span class=\"c\">// TODO convert data types                    </span>","                    <span class=\"k\">if</span><span class=\"k\">(</span> results<span class=\"k\">.</span>columnTypes<span class=\"k\">[</span>j<span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"s\">'decimal'</span> <span class=\"k\">||</span> results<span class=\"k\">.</span>columnTypes<span class=\"k\">[</span>j<span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"s\">'double'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                        value <span class=\"k\">=</span> parseFloat<span class=\"k\">(</span> value <span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    results<span class=\"k\">.</span>rows<span class=\"k\">[</span>i<span class=\"k\">].</span>push<span class=\"k\">(</span> value <span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"c\">// this cell is null</span>","                    results<span class=\"k\">.</span>rows<span class=\"k\">[</span>i<span class=\"k\">].</span>push<span class=\"k\">(</span> <span class=\"s\">'null'</span> <span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t\t","        <span class=\"c\">// TODO set the sorting information on the result set</span>","        ","\t\t<span class=\"k\">return</span> results<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","<span class=\"c\">/*</span>","<span class=\"c\">Category = function() {</span>","<span class=\"c\">    this.categoryId;</span>","<span class=\"c\">    this.categoryName;</span>","<span class=\"c\">    this.columns = new Array();</span>","<span class=\"c\">}</span>","","<span class=\"c\">Column = function() {</span>","<span class=\"c\">    this.id;</span>","<span class=\"c\">    this.name;</span>","<span class=\"c\">    this.fieldType = pentaho.pda.Column.ELEMENT_TYPES.UNKNOWN;</span>","<span class=\"c\">    this.dataType;</span>","<span class=\"c\">    this.selectedAggType;</span>","<span class=\"c\">    this.defaultAggType;</span>","<span class=\"c\">    this.category;</span>","<span class=\"c\">    this.aggTypes = new Array();</span>","<span class=\"c\">}</span>","<span class=\"c\">*/</span>","<span class=\"c\">// this helps show values from columns for the user to select from during parameter creation</span>","FilterHelper <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> filterColumn<span class=\"k\">,</span> filterEditBoxId<span class=\"k\">,</span> filterParameterState<span class=\"k\">,</span> model <span class=\"k\">)</span> <span class=\"k\">{</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>filterEditBoxId <span class=\"k\">=</span> filterEditBoxId<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>filterColumn <span class=\"k\">=</span> filterColumn<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState <span class=\"k\">=</span> filterParameterState<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>model <span class=\"k\">=</span> model<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>filterKeyTimeout <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>filterId <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>endFilterSelection <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">'none'</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>handleFilterKeyUp <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> evt <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">var</span> code <span class=\"k\">=</span> evt<span class=\"k\">.</span>keyCode<span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>code<span class=\"k\">==</span><span class=\"s\">13</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">}</span><span class=\"k\">;</span> <span class=\"c\">// return</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>code<span class=\"k\">==</span><span class=\"s\">37</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">}</span><span class=\"k\">;</span> <span class=\"c\">// left</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>code<span class=\"k\">==</span><span class=\"s\">38</span><span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">}</span><span class=\"k\">;</span> <span class=\"c\">// up</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>code<span class=\"k\">==</span><span class=\"s\">39</span><span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">}</span><span class=\"k\">;</span> <span class=\"c\">// right</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>code<span class=\"k\">==</span><span class=\"s\">27</span><span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>endFilterSelection<span class=\"k\">();</span> <span class=\"k\">return</span> <span class=\"k\">}</span><span class=\"k\">;</span> <span class=\"c\">// escape</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>code<span class=\"k\">==</span><span class=\"s\">40</span><span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"c\">// down</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>focus<span class=\"k\">();</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>selectedIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>\t","        <span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState<span class=\"k\">.</span>value <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterEditBoxId <span class=\"k\">).</span>value<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState<span class=\"k\">.</span>defaultValue <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState<span class=\"k\">.</span>value<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterColumn <span class=\"k\">!=</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterKeyTimeout <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                clearTimeout<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterKeyTimeout <span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>filterKeyTimeout <span class=\"k\">=</span> setTimeout<span class=\"k\">(</span> <span class=\"s\">\"filterHelper.searchFilterValues()\"</span><span class=\"k\">,</span> <span class=\"s\">500</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>filterListKeyUp <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> evt <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">var</span> code <span class=\"k\">=</span> evt<span class=\"k\">.</span>keyCode<span class=\"k\">;</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> code <span class=\"k\">==</span> <span class=\"s\">27</span> <span class=\"k\">)</span> <span class=\"k\">{</span>  <span class=\"c\">// escape</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">'none'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>code<span class=\"k\">==</span><span class=\"s\">38</span><span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"c\">// up arrow</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>selectedIndex <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> editbox <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterEditBoxId <span class=\"k\">);</span>","            editbox<span class=\"k\">.</span>focus<span class=\"k\">();</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>selectedIndex <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> code<span class=\"k\">==</span><span class=\"s\">13</span> <span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// return</span>","            <span class=\"k\">var</span> editbox <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterEditBoxId <span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>selectFilterValue<span class=\"k\">();</span>","            editbox<span class=\"k\">.</span>focus<span class=\"k\">();</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>searchFilterValues <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterKeyTimeout <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            clearTimeout<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterKeyTimeout <span class=\"k\">);</span>","        <span class=\"k\">}</span>   ","        <span class=\"k\">this</span><span class=\"k\">.</span>filterKeyTimeout <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>options<span class=\"k\">.</span>length <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterEditBoxId <span class=\"k\">).</span>value<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> value <span class=\"k\">==</span> <span class=\"s\">''</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>searchColumn<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterColumn<span class=\"k\">,</span> value <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>result <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> editbox <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> filterEditBoxId <span class=\"k\">);</span>","","        <span class=\"k\">var</span> pos <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>findPosition<span class=\"k\">(</span>editbox<span class=\"k\">);</span>","    ","        <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv<span class=\"k\">.</span>style<span class=\"k\">.</span>left <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">+</span>pos<span class=\"k\">.</span>x<span class=\"k\">+</span><span class=\"s\">'px'</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv<span class=\"k\">.</span>style<span class=\"k\">.</span>width <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">+</span>editbox<span class=\"k\">.</span>style<span class=\"k\">.</span>width<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv<span class=\"k\">.</span>style<span class=\"k\">.</span>top <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">+(</span>pos<span class=\"k\">.</span>y<span class=\"k\">+</span>parseInt<span class=\"k\">(</span>editbox<span class=\"k\">.</span>style<span class=\"k\">.</span>height<span class=\"k\">))+</span><span class=\"s\">'px'</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> rows <span class=\"k\">=</span> result<span class=\"k\">.</span>resultset<span class=\"k\">;</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>rows<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> option <span class=\"k\">=</span> <span class=\"k\">new</span> Option<span class=\"k\">(</span> rows<span class=\"k\">[</span>idx<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>options<span class=\"k\">[</span> <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>options<span class=\"k\">.</span>length <span class=\"k\">]</span> <span class=\"k\">=</span> option","            <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>options<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">9</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>size <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>options<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span> <span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv<span class=\"k\">.</span>style<span class=\"k\">.</span>display<span class=\"k\">=</span><span class=\"s\">'block'</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>findPosition <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> p <span class=\"k\">=</span> <span class=\"k\">{</span>x<span class=\"k\">:</span> element<span class=\"k\">.</span>offsetLeft <span class=\"k\">||</span> <span class=\"s\">0</span><span class=\"k\">,</span> y<span class=\"k\">:</span>element<span class=\"k\">.</span>offsetTop <span class=\"k\">||</span> <span class=\"s\">0</span><span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">while</span> <span class=\"k\">(</span>element <span class=\"k\">=</span> element<span class=\"k\">.</span>offsetParent<span class=\"k\">)</span> <span class=\"k\">{</span>","            p<span class=\"k\">.</span>x <span class=\"k\">+=</span> element<span class=\"k\">.</span>offsetLeft<span class=\"k\">;</span>","            p<span class=\"k\">.</span>y <span class=\"k\">+=</span> element<span class=\"k\">.</span>offsetTop<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> p<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>selectFilterValue <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> idx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>selectedIndex<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> idx <span class=\"k\">&gt;=</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>searchListElement<span class=\"k\">.</span>options<span class=\"k\">[</span>idx<span class=\"k\">].</span>value<span class=\"k\">;</span>","            <span class=\"k\">var</span> editbox <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> filterEditBoxId <span class=\"k\">);</span>","            editbox<span class=\"k\">.</span>value <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState<span class=\"k\">.</span>value <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState<span class=\"k\">.</span>defaultValue <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState<span class=\"k\">.</span>value<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>filterValueSelected <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>filterValueSelected<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>filterParameterState<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>searchListDiv<span class=\"k\">.</span>style<span class=\"k\">.</span>display<span class=\"k\">=</span><span class=\"s\">'none'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","<span class=\"k\">}</span>","","<span class=\"c\">/* ******************************************</span>","<span class=\"c\">                        pentaho.pda.query.mql</span>","<span class=\"c\">   ******************************************\t\t\t\t\t\t</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>model<span class=\"k\">)</span> <span class=\"k\">{</span>","\tpentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span>model<span class=\"k\">);</span> <span class=\"c\">//call parent object</span>","\t","    <span class=\"k\">this</span><span class=\"k\">.</span>state <span class=\"k\">=</span> <span class=\"k\">{</span>","        <span class=\"s\">\"class\"</span> <span class=\"k\">:</span> <span class=\"s\">\"org.pentaho.common.ui.metadata.model.impl.Query\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"domainName\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","        <span class=\"s\">\"modelId\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","        <span class=\"s\">\"disableDistinct\"</span> <span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","        <span class=\"s\">\"columns\"</span> <span class=\"k\">:</span> <span class=\"k\">[],</span>","        <span class=\"s\">\"defaultParameterMap\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","        <span class=\"s\">\"conditions\"</span><span class=\"k\">:</span> <span class=\"k\">[],</span>","        <span class=\"s\">\"orders\"</span><span class=\"k\">:</span> <span class=\"k\">[],</span>","        <span class=\"s\">\"parameters\"</span> <span class=\"k\">:</span> <span class=\"k\">[]</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"c\">// XML Attribute values must not include: &lt;, &amp; or \"   (http://www.w3.org/TR/xml/#NT-AttValue)</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>XML_CHARACTER_MAPPING <span class=\"k\">=</span> <span class=\"k\">{</span>","        <span class=\"s\">'&amp;'</span><span class=\"k\">:</span> <span class=\"s\">'&amp;amp;'</span><span class=\"k\">,</span> ","        <span class=\"s\">'&lt;'</span><span class=\"k\">:</span> <span class=\"s\">'&amp;lt;'</span><span class=\"k\">,</span> ","        <span class=\"s\">'\"'</span><span class=\"k\">:</span> <span class=\"s\">'&amp;quot;'</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>XML_ILLEGAL_CHARACTERS_PATTERN <span class=\"k\">=</span> <span class=\"s\">/[&amp;&lt;\"]/g</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","inheritPrototype<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">,</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">);</span> <span class=\"c\">//borrow the parent's methods</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>canQueryReturnData <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>columns<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>setDomainId <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>domainName<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>domainName <span class=\"k\">=</span> domainName<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>setModelId <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>modelId<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>modelId <span class=\"k\">=</span> modelId<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>prepare <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"c\">// nothing to do here</span>","    <span class=\"k\">}</span>    ","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createSelection <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> selection <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">\"class\"</span><span class=\"k\">:</span><span class=\"s\">\"org.pentaho.common.ui.metadata.model.impl.Column\"</span><span class=\"k\">,</span>","            <span class=\"s\">\"aggTypes\"</span><span class=\"k\">:[],</span>","            <span class=\"s\">\"category\"</span><span class=\"k\">:</span><span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"defaultAggType\"</span><span class=\"k\">:</span><span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"fieldType\"</span><span class=\"k\">:</span><span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"id\"</span><span class=\"k\">:</span><span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"name\"</span><span class=\"k\">:</span><span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"selectedAggType\"</span><span class=\"k\">:</span><span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"type\"</span><span class=\"k\">:</span><span class=\"k\">null</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> selection<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createSort <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> sort <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">\"class\"</span> <span class=\"k\">:</span> <span class=\"s\">\"org.pentaho.common.ui.metadata.model.impl.Order\"</span><span class=\"k\">,</span>","            <span class=\"s\">\"category\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"column\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"orderType\"</span> <span class=\"k\">:</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>SORT_TYPES<span class=\"k\">.</span>ASCENDING","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> sort<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createCondition <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> condition <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">\"class\"</span> <span class=\"k\">:</span> <span class=\"s\">\"org.pentaho.common.ui.metadata.model.impl.Condition\"</span><span class=\"k\">,</span>","            <span class=\"s\">\"category\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"column\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"operator\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"value\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"combinationType\"</span> <span class=\"k\">:</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>OPERATOR_TYPES<span class=\"k\">.</span>AND<span class=\"k\">,</span>","            <span class=\"s\">\"parameterized\"</span><span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","            <span class=\"s\">\"selectedAggType\"</span><span class=\"k\">:</span> <span class=\"k\">null</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> condition<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createParameter <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> parameter <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">\"class\"</span> <span class=\"k\">:</span> <span class=\"s\">\"org.pentaho.common.ui.metadata.model.impl.Parameter\"</span><span class=\"k\">,</span>","            <span class=\"s\">\"column\"</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"name\"</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"type\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"value\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"defaultValue\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> parameter<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addSelectionById <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> columnId <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> column <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>getColumnById<span class=\"k\">(</span> columnId <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>column <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> selection <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createSelection<span class=\"k\">();</span>","            selection<span class=\"k\">.</span>id <span class=\"k\">=</span> columnId<span class=\"k\">;</span>","            selection<span class=\"k\">.</span>category <span class=\"k\">=</span> column<span class=\"k\">.</span>parent<span class=\"k\">.</span>id<span class=\"k\">;</span>","            selection<span class=\"k\">.</span>selectedAggType <span class=\"k\">=</span> selection<span class=\"k\">.</span>defaultAggType <span class=\"k\">=</span> column<span class=\"k\">.</span>defaultAggregation<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addSelection<span class=\"k\">(</span> selection <span class=\"k\">);</span>","            <span class=\"k\">return</span> selection<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addSortById <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> columnId<span class=\"k\">,</span> orderType <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> column <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>getColumnById<span class=\"k\">(</span> columnId <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>column <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> sort <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createSort<span class=\"k\">();</span>","            sort<span class=\"k\">.</span>column <span class=\"k\">=</span> columnId<span class=\"k\">;</span>","            sort<span class=\"k\">.</span>category <span class=\"k\">=</span> column<span class=\"k\">.</span>parent<span class=\"k\">.</span>id<span class=\"k\">;</span>","            sort<span class=\"k\">.</span>orderType <span class=\"k\">=</span> orderType<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addSort<span class=\"k\">(</span> sort <span class=\"k\">);</span>","            <span class=\"k\">return</span> sort<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addConditionById <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnId<span class=\"k\">,</span> operator<span class=\"k\">,</span> value<span class=\"k\">,</span> combinationType<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> selectedAggType<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> column <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>getColumnById<span class=\"k\">(</span> columnId <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>column <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> condition <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createCondition<span class=\"k\">();</span>","            condition<span class=\"k\">.</span>column <span class=\"k\">=</span> columnId<span class=\"k\">;</span>","            condition<span class=\"k\">.</span>category <span class=\"k\">=</span> column<span class=\"k\">.</span>parent<span class=\"k\">.</span>id<span class=\"k\">;</span>","            condition<span class=\"k\">.</span>operator <span class=\"k\">=</span> operator<span class=\"k\">;</span>","            condition<span class=\"k\">.</span>parameterized <span class=\"k\">=</span> <span class=\"k\">true</span> <span class=\"k\">===</span> parameterized<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">typeof</span> value <span class=\"k\">==</span> <span class=\"s\">'object'</span> <span class=\"k\">&amp;&amp;</span> value<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                condition<span class=\"k\">.</span>value <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                condition<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"k\">[</span> value <span class=\"k\">];</span>","            <span class=\"k\">}</span>","            condition<span class=\"k\">.</span>combinationType <span class=\"k\">=</span> combinationType<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>selectedAggType <span class=\"k\">&amp;&amp;</span> column<span class=\"k\">.</span>defaultAggregation <span class=\"k\">!==</span> selectedAggType <span class=\"k\">&amp;&amp;</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>AGG_TYPE_MAP<span class=\"k\">[</span>selectedAggType<span class=\"k\">])</span> <span class=\"k\">{</span>","                condition<span class=\"k\">.</span>selectedAggType <span class=\"k\">=</span> selectedAggType<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addCondition<span class=\"k\">(</span> condition <span class=\"k\">);</span>","            <span class=\"k\">return</span> condition<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addParameterById <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnId<span class=\"k\">,</span> name<span class=\"k\">,</span> value<span class=\"k\">,</span> defaultValue<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> column <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>getColumnById<span class=\"k\">(</span> columnId <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>column <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> parameter <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createParameter<span class=\"k\">();</span>","            parameter<span class=\"k\">.</span>column <span class=\"k\">=</span> columnId<span class=\"k\">;</span>","            parameter<span class=\"k\">.</span>name <span class=\"k\">=</span> name<span class=\"k\">;</span>","            parameter<span class=\"k\">.</span>type <span class=\"k\">=</span> column<span class=\"k\">.</span>dataType<span class=\"k\">;</span>","            parameter<span class=\"k\">.</span>value <span class=\"k\">=</span> value<span class=\"k\">;</span>","            parameter<span class=\"k\">.</span>defaultValue <span class=\"k\">=</span> defaultValue<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>parameter<span class=\"k\">.</span>defaultValue <span class=\"k\">==</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","              parameter<span class=\"k\">.</span>defaultValue <span class=\"k\">=</span> parameter<span class=\"k\">.</span>value<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>addParameter<span class=\"k\">(</span>parameter<span class=\"k\">);</span>","        <span class=\"k\">return</span> parameter<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>couldReturnData <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>columns<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addSelection <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> selection <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>columns<span class=\"k\">.</span>push<span class=\"k\">(</span> selection <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addSort <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> sort <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>orders<span class=\"k\">.</span>push<span class=\"k\">(</span> sort <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addCondition <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> condition <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">.</span>push<span class=\"k\">(</span> condition <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addParameter <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> parameter <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>parameters<span class=\"k\">.</span>push<span class=\"k\">(</span> parameter <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getJson <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> dojo<span class=\"k\">.</span>toJson<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getQueryStr <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>getJson<span class=\"k\">();</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>serialize <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> xml <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;mql&gt;</span><span class=\"t\">\\n</span><span class=\"s\">&lt;domain_type&gt;relational&lt;/domain_type&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;domain_id&gt;'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>domainId<span class=\"k\">+</span><span class=\"s\">'&lt;/domain_id&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;model_id&gt;'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>modelId<span class=\"k\">+</span><span class=\"s\">'&lt;/model_id&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;options&gt;</span><span class=\"t\">\\n</span><span class=\"s\">\"</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;disable_distinct&gt;\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>disableDistinct <span class=\"k\">+</span> <span class=\"s\">\"&lt;/disable_distinct&gt;</span><span class=\"t\">\\n</span><span class=\"s\">\"</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;/options&gt;</span><span class=\"t\">\\n</span><span class=\"s\">\"</span><span class=\"k\">;</span>","","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;parameters&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>parameters<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            xml <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getParameterXML<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>parameters<span class=\"k\">[</span>idx<span class=\"k\">]</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;/parameters&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;selections&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>columns<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            xml <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getSelectionXML<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>columns<span class=\"k\">[</span>idx<span class=\"k\">]</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;/selections&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;constraints&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">[</span>idx<span class=\"k\">].</span>value<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'::mql::'</span><span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","            xml <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getMQLFilterXML<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">[</span>idx<span class=\"k\">].</span>value<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">'::mql::'</span><span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">));</span>","          <span class=\"k\">}</span>","          <span class=\"k\">else</span><span class=\"k\">{</span>","            xml <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFilterXML<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">[</span>idx<span class=\"k\">],</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>parameters <span class=\"k\">);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;/constraints&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;orders&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>orders<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            xml <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getSortXML<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>orders<span class=\"k\">[</span>idx<span class=\"k\">]</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;/orders&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;/mql&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> xml<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getParameterXML <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> parameter <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> xml <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> column <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>getColumnById<span class=\"k\">(</span>parameter<span class=\"k\">.</span>column<span class=\"k\">);</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;parameter defaultValue=\"'</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> defaultValue<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>parameter<span class=\"k\">.</span>value <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            defaultValue <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getParameterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> parameter<span class=\"k\">.</span>value<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            defaultValue <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getParameterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> parameter<span class=\"k\">.</span>defaultValue<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>   column<span class=\"k\">.</span>dataType <span class=\"k\">===</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>STRING","            <span class=\"k\">||</span> column<span class=\"k\">.</span>dataType <span class=\"k\">===</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>UNKNOWN<span class=\"k\">)</span> <span class=\"k\">{</span>","            defaultValue <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>encodeXmlAttribute<span class=\"k\">(</span>defaultValue<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        xml <span class=\"k\">+=</span> defaultValue<span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'\" name=\"'</span><span class=\"k\">+</span>parameter<span class=\"k\">.</span>name<span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'\" type=\"'</span><span class=\"k\">+</span>parameter<span class=\"k\">.</span>type<span class=\"k\">+</span><span class=\"s\">'\"/&gt;'</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> xml<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>encodeXmlAttribute <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>value<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"c\">// XML Attribute values must not include: &lt;, &amp; or \"   (http://www.w3.org/TR/xml/#NT-AttValue)</span>","    <span class=\"k\">var</span> mapping <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>XML_CHARACTER_MAPPING<span class=\"k\">;</span>","    <span class=\"k\">return</span> value<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>XML_ILLEGAL_CHARACTERS_PATTERN<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>c<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> mapping<span class=\"k\">[</span>c<span class=\"k\">];</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getParameterValueString <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span> column<span class=\"k\">,</span> value <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">||</span> value <span class=\"k\">==</span> <span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> value<span class=\"k\">.</span>constructor<span class=\"k\">.</span>toString<span class=\"k\">().</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"Array\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// we have an array of values</span>","            <span class=\"k\">var</span> str <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","            <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>value<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> idx <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    str <span class=\"k\">+=</span> <span class=\"s\">'|'</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                str <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getParameterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span>value<span class=\"k\">[</span>idx<span class=\"k\">]);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> str<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> column<span class=\"k\">.</span>dataType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>DATE <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">+</span>value<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> column<span class=\"k\">.</span>dataType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>NUMERIC <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">+</span>value<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> column<span class=\"k\">.</span>dataType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>BOOLEAN <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">+</span>value<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"s\">'\"'</span><span class=\"k\">+</span>value<span class=\"k\">+</span><span class=\"s\">'\"'</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getSelectionXML <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> selection <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> selection <span class=\"k\">&amp;&amp;</span> selection<span class=\"k\">.</span>id <span class=\"k\">&amp;&amp;</span> selection<span class=\"k\">.</span>category <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> xml <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","            xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;selection&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","            xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;table&gt;'</span><span class=\"k\">+</span>selection<span class=\"k\">.</span>category<span class=\"k\">+</span><span class=\"s\">'&lt;/table&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","            xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;column&gt;'</span><span class=\"k\">+</span>selection<span class=\"k\">.</span>id<span class=\"k\">+</span><span class=\"s\">'&lt;/column&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","            <span class=\"c\">// MQL Editor requires a selection to have an aggregation type</span>","            <span class=\"k\">var</span> aggType <span class=\"k\">=</span> selection<span class=\"k\">.</span>selectedAggType<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>aggType<span class=\"k\">)</span> <span class=\"k\">{</span>","              aggType <span class=\"k\">=</span> selection<span class=\"k\">.</span>defaultAggType<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;aggregation&gt;'</span><span class=\"k\">+</span>aggType<span class=\"k\">+</span><span class=\"s\">'&lt;/aggregation&gt;'</span><span class=\"k\">;</span>","            xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;/selection&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","            <span class=\"k\">return</span> xml<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getSortXML <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> sort <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>sort <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> xml <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;order&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;direction&gt;'</span><span class=\"k\">+</span>sort<span class=\"k\">.</span>orderType<span class=\"k\">+</span><span class=\"s\">'&lt;/direction&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;view_id&gt;'</span><span class=\"k\">+</span>sort<span class=\"k\">.</span>category<span class=\"k\">+</span><span class=\"s\">'&lt;/view_id&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;column_id&gt;'</span><span class=\"k\">+</span>sort<span class=\"k\">.</span>column<span class=\"k\">+</span><span class=\"s\">'&lt;/column_id&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;/order&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> xml<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getFilterXML <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> filter<span class=\"k\">,</span> parameters <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> xml <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;constraint&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;operator&gt;'</span><span class=\"k\">+</span>filter<span class=\"k\">.</span>combinationType<span class=\"k\">+</span><span class=\"s\">'&lt;/operator&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;condition&gt;&lt;![CDATA['</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterConditionString<span class=\"k\">(</span> filter<span class=\"k\">.</span>column<span class=\"k\">,</span> filter<span class=\"k\">.</span>category<span class=\"k\">,</span> filter<span class=\"k\">.</span>operator<span class=\"k\">,</span> filter<span class=\"k\">.</span>value<span class=\"k\">,</span> filter<span class=\"k\">.</span>parameterized<span class=\"k\">,</span> parameters<span class=\"k\">,</span> filter<span class=\"k\">.</span>selectedAggType <span class=\"k\">)+</span><span class=\"s\">']]&gt;&lt;/condition&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;/constraint&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> xml<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getMQLFilterXML <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>mqlCondition<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> combinationType <span class=\"k\">=</span> <span class=\"s\">'AND'</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> xml <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","  xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;constraint&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","  xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;operator&gt;'</span><span class=\"k\">+</span>combinationType<span class=\"k\">+</span><span class=\"s\">'&lt;/operator&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","  xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;condition&gt;&lt;![CDATA['</span><span class=\"k\">+</span>mqlCondition<span class=\"k\">+</span><span class=\"s\">']]&gt;&lt;/condition&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","  xml <span class=\"k\">+=</span> <span class=\"s\">'&lt;/constraint&gt;</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","  <span class=\"k\">return</span> xml<span class=\"k\">;</span>","<span class=\"k\">}</span>    ","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getFilterConditionString <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> columnId<span class=\"k\">,</span> category<span class=\"k\">,</span> operator<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">,</span> aggregationType <span class=\"k\">)</span> <span class=\"k\">{</span>","        operator <span class=\"k\">=</span> operator<span class=\"k\">.</span>toUpperCase<span class=\"k\">();</span>","        <span class=\"k\">var</span> column <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>getColumnById<span class=\"k\">(</span> columnId <span class=\"k\">);</span>","        <span class=\"k\">var</span> operand <span class=\"k\">=</span> <span class=\"s\">'['</span> <span class=\"k\">+</span> category <span class=\"k\">+</span> <span class=\"s\">'.'</span> <span class=\"k\">+</span> columnId <span class=\"k\">+</span> <span class=\"k\">(</span>aggregationType <span class=\"k\">?</span> <span class=\"s\">'.'</span> <span class=\"k\">+</span> aggregationType <span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">']'</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> isArrayValues <span class=\"k\">=</span> value<span class=\"k\">.</span>constructor<span class=\"k\">.</span>toString<span class=\"k\">().</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"Array\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>LIKE <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'LIKE('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">';\"%'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">)+</span><span class=\"s\">'%\")'</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>EQUAL <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>isArrayValues <span class=\"k\">||</span> value<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'EQUALS('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">';'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">')'</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>EQUAL <span class=\"k\">&amp;&amp;</span> isArrayValues<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'IN('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">';'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">)+</span><span class=\"s\">\")\"</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>LESS_THAN <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> operand<span class=\"k\">+</span><span class=\"s\">' &lt;'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">);</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>LESS_THAN_OR_EQUAL <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> operand<span class=\"k\">+</span><span class=\"s\">' &lt;='</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">);</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>MORE_THAN <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> operand<span class=\"k\">+</span><span class=\"s\">' &gt;'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">);</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>MORE_THAN_OR_EQUAL <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> operand<span class=\"k\">+</span><span class=\"s\">' &gt;='</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">);</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>CONTAINS<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'CONTAINS('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">';'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">)+</span><span class=\"s\">\")\"</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>NOT_CONTAINS<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'NOT(CONTAINS('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">';'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">)+</span><span class=\"s\">\"))\"</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>BEGINSWITH<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'BEGINSWITH('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">';'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">)+</span><span class=\"s\">\")\"</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>ENDSWITH<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'ENDSWITH('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">';'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters<span class=\"k\">)+</span><span class=\"s\">\")\"</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>IS_NULL<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'ISNA('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">')'</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> operator <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>CONDITION_TYPES<span class=\"k\">.</span>NOT_NULL<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'NOT(ISNA('</span><span class=\"k\">+</span>operand<span class=\"k\">+</span><span class=\"s\">'))'</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>mql<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getFilterValueString <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> column<span class=\"k\">,</span> value<span class=\"k\">,</span> parameterized<span class=\"k\">,</span> parameters <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>parameterized<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"c\">// If this filter is parameterized it's value is the name of the parameter</span>","          <span class=\"c\">// see if we have parameters</span>","          <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>parameters<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++)</span> <span class=\"k\">{</span>","              <span class=\"k\">if</span><span class=\"k\">(</span> parameters<span class=\"k\">[</span>idx<span class=\"k\">].</span>name <span class=\"k\">===</span> value<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                  <span class=\"c\">// this has a parameter</span>","                  <span class=\"k\">var</span> param <span class=\"k\">=</span> <span class=\"s\">'[param:'</span><span class=\"k\">+</span>parameters<span class=\"k\">[</span>idx<span class=\"k\">].</span>name<span class=\"k\">+</span><span class=\"s\">']'</span><span class=\"k\">;</span>","                  <span class=\"k\">if</span><span class=\"k\">(</span> column<span class=\"k\">.</span>dataType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>DATE <span class=\"k\">)</span> <span class=\"k\">{</span>","                    param <span class=\"k\">=</span> <span class=\"s\">'DATEVALUE('</span><span class=\"k\">+</span>param<span class=\"k\">+</span><span class=\"s\">')'</span><span class=\"k\">;</span>","                  <span class=\"k\">}</span>","                  <span class=\"k\">return</span> param<span class=\"k\">;</span>","              <span class=\"k\">}</span>","          <span class=\"k\">}</span>","          <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"unable to find parameter '\"</span> <span class=\"k\">+</span> value <span class=\"k\">+</span> <span class=\"s\">\"' for condition on column \"</span> <span class=\"k\">+</span> column <span class=\"k\">+</span> <span class=\"s\">\".\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(</span> value<span class=\"k\">.</span>constructor<span class=\"k\">.</span>toString<span class=\"k\">().</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"Array\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// we have an array of values</span>","            <span class=\"k\">var</span> str <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","            <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>value<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> idx <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    str <span class=\"k\">+=</span> <span class=\"s\">';'</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                str <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFilterValueString<span class=\"k\">(</span>column<span class=\"k\">,</span>value<span class=\"k\">[</span>idx<span class=\"k\">]);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> str<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> column<span class=\"k\">.</span>dataType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>NUMERIC <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">+</span>value<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> column<span class=\"k\">.</span>dataType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>DATE <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">'DATEVALUE(\"'</span><span class=\"k\">+</span>value<span class=\"k\">+</span><span class=\"s\">'\")'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> column<span class=\"k\">.</span>dataType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>BOOLEAN <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">+</span>value<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"s\">'\"'</span><span class=\"k\">+</span>value<span class=\"k\">+</span><span class=\"s\">'\"'</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>"];
_$jscoverage['dataapi/models-mql.js'][4]++;
pentaho.pda.MqlHandler = (function mqlHandler(sandbox) {
  _$jscoverage['dataapi/models-mql.js'][5]++;
  pentaho.pda.Handler.call(this, sandbox);
  _$jscoverage['dataapi/models-mql.js'][6]++;
  this.type = pentaho.pda.SOURCE_TYPE_MQL;
  _$jscoverage['dataapi/models-mql.js'][7]++;
  this.METADATA_SERVICE_URL = "../../../../content/ws-run/metadataService";
});
_$jscoverage['dataapi/models-mql.js'][10]++;
inheritPrototype(pentaho.pda.MqlHandler, pentaho.pda.Handler);
_$jscoverage['dataapi/models-mql.js'][12]++;
pentaho.pda.MqlHandler.prototype.getSources = (function (callback, options) {
  _$jscoverage['dataapi/models-mql.js'][13]++;
  options = (options || {});
  _$jscoverage['dataapi/models-mql.js'][14]++;
  var filter = options.filter;
  _$jscoverage['dataapi/models-mql.js'][15]++;
  var _sources = [], i = 0, j = 0, each;
  _$jscoverage['dataapi/models-mql.js'][16]++;
  if ((this.sources.length > 0)) {
    _$jscoverage['dataapi/models-mql.js'][17]++;
    if ((filter == null)) {
      _$jscoverage['dataapi/models-mql.js'][18]++;
      for (var i = 0, j = this.sources.length; (i < j); (i++)) {
        _$jscoverage['dataapi/models-mql.js'][19]++;
        callback(this.sources[i]);
}
    }
    else {
      _$jscoverage['dataapi/models-mql.js'][22]++;
      for (var i = 0, j = this.sources.length; (i < j); (i++)) {
        _$jscoverage['dataapi/models-mql.js'][23]++;
        each = this.sources[i];
        _$jscoverage['dataapi/models-mql.js'][24]++;
        try {
          _$jscoverage['dataapi/models-mql.js'][25]++;
          if ((each[filter.property] == filter.value)) {
            _$jscoverage['dataapi/models-mql.js'][26]++;
            callback(each);
          }
        }
        catch (e) {
        }
}
    }
  }
  else {
    _$jscoverage['dataapi/models-mql.js'][37]++;
    var url = (this.METADATA_SERVICE_URL + "/listBusinessModels");
    _$jscoverage['dataapi/models-mql.js'][38]++;
    var contextName = options.context;
    _$jscoverage['dataapi/models-mql.js'][39]++;
    var query = ("domainName=&" + (contextName? ("context=" + contextName): ""));
    _$jscoverage['dataapi/models-mql.js'][40]++;
    var result = pentahoGet(url, query);
    _$jscoverage['dataapi/models-mql.js'][43]++;
    var xml = parseXML(result), nodes = xml.getElementsByTagName("return");
    _$jscoverage['dataapi/models-mql.js'][45]++;
    for (var idx = 0; (idx < nodes.length); (idx++)) {
      _$jscoverage['dataapi/models-mql.js'][46]++;
      each = (this.addModelInfoFromNode(nodes[idx]) || {});
      _$jscoverage['dataapi/models-mql.js'][47]++;
      each.addCapability(pentaho.pda.CAPABILITIES.HAS_DOWN_AXIS);
      _$jscoverage['dataapi/models-mql.js'][48]++;
      each.addCapability(pentaho.pda.CAPABILITIES.IS_DOWN_CUSTOM);
      _$jscoverage['dataapi/models-mql.js'][49]++;
      each.addCapability(pentaho.pda.CAPABILITIES.HAS_FILTERS);
      _$jscoverage['dataapi/models-mql.js'][50]++;
      each.addCapability(pentaho.pda.CAPABILITIES.IS_FILTER_CUSTOM);
      _$jscoverage['dataapi/models-mql.js'][51]++;
      each.addCapability(pentaho.pda.CAPABILITIES.CAN_SORT);
      _$jscoverage['dataapi/models-mql.js'][52]++;
      this.sources.push(each);
      _$jscoverage['dataapi/models-mql.js'][53]++;
      if ((filter == null)) {
        _$jscoverage['dataapi/models-mql.js'][54]++;
        callback(each);
      }
      else {
        _$jscoverage['dataapi/models-mql.js'][56]++;
        if ((each[filter.property] == filter.value)) {
          _$jscoverage['dataapi/models-mql.js'][57]++;
          callback(each);
        }
      }
}
  }
});
_$jscoverage['dataapi/models-mql.js'][67]++;
pentaho.pda.MqlHandler.prototype.getModelInfoFromNode = (function getModelInfoFromNode(node) {
  _$jscoverage['dataapi/models-mql.js'][69]++;
  var model = {};
  _$jscoverage['dataapi/models-mql.js'][70]++;
  model.domainId = this.getNodeText(node, "domainId");
  _$jscoverage['dataapi/models-mql.js'][71]++;
  model.modelId = this.getNodeText(node, "modelId");
  _$jscoverage['dataapi/models-mql.js'][72]++;
  model.id = (model.domainId + ":" + model.modelId);
  _$jscoverage['dataapi/models-mql.js'][73]++;
  model.name = this.getNodeText(node, "modelName");
  _$jscoverage['dataapi/models-mql.js'][74]++;
  ((model.type = pentaho.pda.SOURCE_TYPE_MQL), (model.description = this.getNodeText(node, "modelDescription")));
  _$jscoverage['dataapi/models-mql.js'][77]++;
  return model;
});
_$jscoverage['dataapi/models-mql.js'][80]++;
pentaho.pda.MqlHandler.prototype.addModelInfoFromNode = (function addModelInfoFromNode(node) {
  _$jscoverage['dataapi/models-mql.js'][81]++;
  return new (pentaho.pda.model.mql)(this.getModelInfoFromNode(node), this);
});
_$jscoverage['dataapi/models-mql.js'][84]++;
pentaho.pda.MqlHandler.prototype.getModelFromNode = (function (node, modelAccess, datasourceConfig) {
  _$jscoverage['dataapi/models-mql.js'][85]++;
  var id = datasourceConfig.id;
  _$jscoverage['dataapi/models-mql.js'][86]++;
  var name = datasourceConfig.name;
  _$jscoverage['dataapi/models-mql.js'][87]++;
  var description = datasourceConfig.description;
  _$jscoverage['dataapi/models-mql.js'][88]++;
  var model = new (pentaho.pda.model)(id, name, modelAccess, datasourceConfig);
  _$jscoverage['dataapi/models-mql.js'][90]++;
  model.domainId = this.getNodeText(node, "domainId");
  _$jscoverage['dataapi/models-mql.js'][91]++;
  model.modelId = this.getNodeText(node, "id");
  _$jscoverage['dataapi/models-mql.js'][94]++;
  var nodes = node.getElementsByTagName("categories");
  _$jscoverage['dataapi/models-mql.js'][95]++;
  for (var idx = 0; (idx < nodes.length); (idx++)) {
    _$jscoverage['dataapi/models-mql.js'][96]++;
    this.addCategoryFromNode(nodes[idx], model);
}
  _$jscoverage['dataapi/models-mql.js'][98]++;
  return model;
});
_$jscoverage['dataapi/models-mql.js'][102]++;
pentaho.pda.MqlHandler.prototype.addCategoryFromNode = (function (node, model) {
  _$jscoverage['dataapi/models-mql.js'][103]++;
  var category = new (pentaho.pda.dataelement)();
  _$jscoverage['dataapi/models-mql.js'][104]++;
  category.dataType = pentaho.pda.Column.DATA_TYPES.NONE;
  _$jscoverage['dataapi/models-mql.js'][105]++;
  category.elementType = pentaho.pda.Column.ELEMENT_TYPES.CATEGORY;
  _$jscoverage['dataapi/models-mql.js'][106]++;
  category.id = this.getNodeText(node, "id");
  _$jscoverage['dataapi/models-mql.js'][107]++;
  category.name = this.getNodeText(node, "name");
  _$jscoverage['dataapi/models-mql.js'][108]++;
  category.isQueryElement = false;
  _$jscoverage['dataapi/models-mql.js'][109]++;
  model.addElement(category);
  _$jscoverage['dataapi/models-mql.js'][111]++;
  var nodes = node.getElementsByTagName("columns");
  _$jscoverage['dataapi/models-mql.js'][112]++;
  for (var idx = 0; (idx < nodes.length); (idx++)) {
    _$jscoverage['dataapi/models-mql.js'][113]++;
    this.addColumnFromNode(nodes[idx], model, category);
}
});
_$jscoverage['dataapi/models-mql.js'][117]++;
pentaho.pda.MqlHandler.prototype.addColumnFromNode = (function (node, model, category) {
  _$jscoverage['dataapi/models-mql.js'][118]++;
  var element = new (pentaho.pda.dataelement)();
  _$jscoverage['dataapi/models-mql.js'][120]++;
  element.id = this.getNodeText(node, "id");
  _$jscoverage['dataapi/models-mql.js'][121]++;
  element.name = this.getNodeText(node, "name");
  _$jscoverage['dataapi/models-mql.js'][122]++;
  element.elementType = this.getNodeText(node, "fieldType");
  _$jscoverage['dataapi/models-mql.js'][123]++;
  element.dataType = this.getNodeText(node, "type");
  _$jscoverage['dataapi/models-mql.js'][124]++;
  element.horzizontalAlignment = this.getNodeText(node, "horizontalAlignment");
  _$jscoverage['dataapi/models-mql.js'][125]++;
  element.formatMask = this.getNodeText(node, "formatMask");
  _$jscoverage['dataapi/models-mql.js'][126]++;
  element.selectedAggregation = this.getNodeText(node, "selectedAggType");
  _$jscoverage['dataapi/models-mql.js'][127]++;
  element.defaultAggregation = this.getNodeText(node, "defaultAggType");
  _$jscoverage['dataapi/models-mql.js'][128]++;
  element.parent = category;
  _$jscoverage['dataapi/models-mql.js'][129]++;
  element.isQueryElement = true;
  _$jscoverage['dataapi/models-mql.js'][130]++;
  category.addChild(element);
  _$jscoverage['dataapi/models-mql.js'][132]++;
  var nodes = node.getElementsByTagName("aggTypes");
  _$jscoverage['dataapi/models-mql.js'][133]++;
  for (var idx = 0; (idx < nodes.length); (idx++)) {
    _$jscoverage['dataapi/models-mql.js'][134]++;
    element.availableAggregations.push(this.getText(nodes[idx]));
}
  _$jscoverage['dataapi/models-mql.js'][137]++;
  model.addElement(element);
});
_$jscoverage['dataapi/models-mql.js'][140]++;
pentaho.pda.MqlHandler.prototype.getNodeText = (function (node, tag) {
  _$jscoverage['dataapi/models-mql.js'][141]++;
  for (var idx = 0; (idx < node.childNodes.length); (idx++)) {
    _$jscoverage['dataapi/models-mql.js'][142]++;
    if ((node.childNodes[idx].nodeName == tag)) {
      _$jscoverage['dataapi/models-mql.js'][143]++;
      return this.getText(node.childNodes[idx]);
    }
}
  _$jscoverage['dataapi/models-mql.js'][146]++;
  return null;
});
_$jscoverage['dataapi/models-mql.js'][149]++;
pentaho.pda.MqlHandler.prototype.getNodeTextOfChild = (function (node, tag1, tag2) {
  _$jscoverage['dataapi/models-mql.js'][150]++;
  for (var idx = 0; (idx < node.childNodes.length); (idx++)) {
    _$jscoverage['dataapi/models-mql.js'][151]++;
    if ((node.childNodes[idx].nodeName == tag1)) {
      _$jscoverage['dataapi/models-mql.js'][152]++;
      return this.getNodeText(node.childNodes[idx], tag2);
    }
}
  _$jscoverage['dataapi/models-mql.js'][155]++;
  return null;
});
_$jscoverage['dataapi/models-mql.js'][158]++;
pentaho.pda.MqlHandler.prototype.getText = (function (node) {
  _$jscoverage['dataapi/models-mql.js'][159]++;
  if (((! node) || (! node.firstChild))) {
    _$jscoverage['dataapi/models-mql.js'][159]++;
    return null;
  }
  _$jscoverage['dataapi/models-mql.js'][160]++;
  if (((typeof node.textContent) != "undefined")) {
    _$jscoverage['dataapi/models-mql.js'][160]++;
    return node.textContent;
  }
  _$jscoverage['dataapi/models-mql.js'][161]++;
  return node.firstChild.nodeValue;
});
_$jscoverage['dataapi/models-mql.js'][168]++;
pentaho.pda.model.mql = (function (obj, handler) {
  _$jscoverage['dataapi/models-mql.js'][169]++;
  pentaho.pda.model.call(this, obj);
  _$jscoverage['dataapi/models-mql.js'][171]++;
  this.categories = new Array();
  _$jscoverage['dataapi/models-mql.js'][172]++;
  this.domainId = obj.domainId;
  _$jscoverage['dataapi/models-mql.js'][173]++;
  this.modelId = obj.modelId;
  _$jscoverage['dataapi/models-mql.js'][174]++;
  this.modelName = (obj.modelName || "");
  _$jscoverage['dataapi/models-mql.js'][175]++;
  this.modelDescription = (obj.modelDescription || "");
  _$jscoverage['dataapi/models-mql.js'][176]++;
  this.handler = handler;
  _$jscoverage['dataapi/models-mql.js'][177]++;
  this.type = "mql";
});
_$jscoverage['dataapi/models-mql.js'][180]++;
inheritPrototype(pentaho.pda.model.mql, pentaho.pda.model);
_$jscoverage['dataapi/models-mql.js'][182]++;
pentaho.pda.model.mql.prototype.discoverModelDetail = (function () {
  _$jscoverage['dataapi/models-mql.js'][185]++;
  var url = (this.handler.METADATA_SERVICE_URL + "/loadModel");
  _$jscoverage['dataapi/models-mql.js'][186]++;
  var query = ("domainId=" + escape(this.domainId) + "&modelId=" + escape(this.modelId));
  _$jscoverage['dataapi/models-mql.js'][187]++;
  var result = pentahoGet(url, query);
  _$jscoverage['dataapi/models-mql.js'][189]++;
  var xml = parseXML(result);
  _$jscoverage['dataapi/models-mql.js'][190]++;
  this.categories = [];
  _$jscoverage['dataapi/models-mql.js'][192]++;
  var nodes = xml.getElementsByTagName("return");
  _$jscoverage['dataapi/models-mql.js'][193]++;
  if ((nodes && (nodes.length > 0))) {
    _$jscoverage['dataapi/models-mql.js'][196]++;
    var catnodes = nodes[0].getElementsByTagName("categories");
    _$jscoverage['dataapi/models-mql.js'][197]++;
    for (var idx = 0; (idx < catnodes.length); (idx++)) {
      _$jscoverage['dataapi/models-mql.js'][199]++;
      var category = new (pentaho.pda.dataelement)();
      _$jscoverage['dataapi/models-mql.js'][200]++;
      category.dataType = pentaho.pda.Column.DATA_TYPES.NONE;
      _$jscoverage['dataapi/models-mql.js'][201]++;
      category.elementType = pentaho.pda.Column.ELEMENT_TYPES.CATEGORY;
      _$jscoverage['dataapi/models-mql.js'][202]++;
      category.id = this.getNodeText(catnodes[idx], "id");
      _$jscoverage['dataapi/models-mql.js'][203]++;
      category.name = this.getNodeText(catnodes[idx], "name");
      _$jscoverage['dataapi/models-mql.js'][204]++;
      category.description = this.getNodeText(catnodes[idx], "description");
      _$jscoverage['dataapi/models-mql.js'][205]++;
      category.isQueryElement = false;
      _$jscoverage['dataapi/models-mql.js'][206]++;
      this.categories.push(category);
      _$jscoverage['dataapi/models-mql.js'][208]++;
      this.addElement(category);
      _$jscoverage['dataapi/models-mql.js'][210]++;
      var colnodes = catnodes[idx].getElementsByTagName("columns");
      _$jscoverage['dataapi/models-mql.js'][211]++;
      for (var idx2 = 0; (idx2 < colnodes.length); (idx2++)) {
        _$jscoverage['dataapi/models-mql.js'][213]++;
        var element = new (pentaho.pda.dataelement)();
        _$jscoverage['dataapi/models-mql.js'][215]++;
        element.id = this.getNodeText(colnodes[idx2], "id");
        _$jscoverage['dataapi/models-mql.js'][216]++;
        element.name = this.getNodeText(colnodes[idx2], "name");
        _$jscoverage['dataapi/models-mql.js'][217]++;
        element.description = this.getNodeText(colnodes[idx2], "description");
        _$jscoverage['dataapi/models-mql.js'][218]++;
        element.elementType = this.getNodeText(colnodes[idx2], "fieldType");
        _$jscoverage['dataapi/models-mql.js'][219]++;
        element.dataType = this.getNodeText(colnodes[idx2], "type");
        _$jscoverage['dataapi/models-mql.js'][220]++;
        element.horizontalAlignment = this.getNodeText(colnodes[idx2], "horizontalAlignment");
        _$jscoverage['dataapi/models-mql.js'][221]++;
        element.formatMask = this.getNodeText(colnodes[idx2], "formatMask");
        _$jscoverage['dataapi/models-mql.js'][222]++;
        element.selectedAggregation = this.getNodeText(colnodes[idx2], "selectedAggType");
        _$jscoverage['dataapi/models-mql.js'][223]++;
        element.defaultAggregation = this.getNodeText(colnodes[idx2], "defaultAggType");
        _$jscoverage['dataapi/models-mql.js'][224]++;
        element.hiddenForUser = this.getNodeText(colnodes[idx2], "hiddenForUser");
        _$jscoverage['dataapi/models-mql.js'][225]++;
        element.parent = category;
        _$jscoverage['dataapi/models-mql.js'][226]++;
        element.isQueryElement = true;
        _$jscoverage['dataapi/models-mql.js'][227]++;
        element.category = category;
        _$jscoverage['dataapi/models-mql.js'][228]++;
        category.addChild(element);
        _$jscoverage['dataapi/models-mql.js'][230]++;
        var aggnodes = colnodes[idx2].getElementsByTagName("aggTypes");
        _$jscoverage['dataapi/models-mql.js'][231]++;
        for (var idx3 = 0; (idx3 < aggnodes.length); (idx3++)) {
          _$jscoverage['dataapi/models-mql.js'][232]++;
          element.availableAggregations.push(this.getText(aggnodes[idx3]));
}
        _$jscoverage['dataapi/models-mql.js'][235]++;
        this.addElement(element);
}
}
  }
});
_$jscoverage['dataapi/models-mql.js'][245]++;
pentaho.pda.model.mql.prototype.getAllColumns = (function () {
  _$jscoverage['dataapi/models-mql.js'][246]++;
  var columns = new Array();
  _$jscoverage['dataapi/models-mql.js'][248]++;
  for (var idx2 = 0; (idx2 < this.elements.length); (idx2++)) {
    _$jscoverage['dataapi/models-mql.js'][249]++;
    if ((this.elements[idx2].elementType != pentaho.pda.Column.ELEMENT_TYPES.CATEGORY)) {
      _$jscoverage['dataapi/models-mql.js'][250]++;
      columns.push(this.elements[idx2]);
    }
}
  _$jscoverage['dataapi/models-mql.js'][253]++;
  return columns;
});
_$jscoverage['dataapi/models-mql.js'][256]++;
pentaho.pda.model.mql.prototype.searchColumn = (function (column, searchStr, rowLimit, callback) {
  _$jscoverage['dataapi/models-mql.js'][257]++;
  var query = this.createQuery();
  _$jscoverage['dataapi/models-mql.js'][258]++;
  var selection = query.addSelectionById(column.id);
  _$jscoverage['dataapi/models-mql.js'][259]++;
  var sort = query.addSortById(column.id, pentaho.pda.Column.SORT_TYPES.ASCENDING);
  _$jscoverage['dataapi/models-mql.js'][260]++;
  if (searchStr) {
    _$jscoverage['dataapi/models-mql.js'][261]++;
    query.addConditionById(column.id, pentaho.pda.Column.CONDITION_TYPES.CONTAINS, searchStr, pentaho.pda.Column.OPERATOR_TYPES.OR);
  }
  _$jscoverage['dataapi/models-mql.js'][264]++;
  return this.submitQuery(query, rowLimit, callback);
});
_$jscoverage['dataapi/models-mql.js'][267]++;
pentaho.pda.model.mql.prototype.getAllValuesForColumn = (function (column, rowLimit) {
  _$jscoverage['dataapi/models-mql.js'][268]++;
  return this.searchColumn(column, undefined, rowLimit);
});
_$jscoverage['dataapi/models-mql.js'][272]++;
pentaho.pda.model.mql.prototype.createQuery = (function () {
  _$jscoverage['dataapi/models-mql.js'][274]++;
  var query = new (pentaho.pda.query.mql)(this);
  _$jscoverage['dataapi/models-mql.js'][276]++;
  query.setDomainId(this.domainId);
  _$jscoverage['dataapi/models-mql.js'][277]++;
  query.setModelId(this.modelId);
  _$jscoverage['dataapi/models-mql.js'][278]++;
  return query;
});
_$jscoverage['dataapi/models-mql.js'][284]++;
pentaho.pda.model.mql.prototype.submitQuery = (function (queryObject, rowLimit, callback) {
  _$jscoverage['dataapi/models-mql.js'][285]++;
  var json = queryObject.getJson();
  _$jscoverage['dataapi/models-mql.js'][287]++;
  return this.submit(json, rowLimit, callback);
});
_$jscoverage['dataapi/models-mql.js'][290]++;
pentaho.pda.model.mql.prototype.submit = (function (jsonString, rowLimit, callback) {
  _$jscoverage['dataapi/models-mql.js'][292]++;
  var results = {metadata: [], resultset: []};
  _$jscoverage['dataapi/models-mql.js'][296]++;
  if ((! rowLimit)) {
    _$jscoverage['dataapi/models-mql.js'][297]++;
    rowLimit = -1;
  }
  _$jscoverage['dataapi/models-mql.js'][299]++;
  var handleResultCallback = dojo.hitch(this, (function (resultXml) {
  _$jscoverage['dataapi/models-mql.js'][300]++;
  var result = parseXML(resultXml);
  _$jscoverage['dataapi/models-mql.js'][301]++;
  var nodes = result.getElementsByTagName("return");
  _$jscoverage['dataapi/models-mql.js'][302]++;
  resultJson = this.getText(nodes[0]);
  _$jscoverage['dataapi/models-mql.js'][304]++;
  var result = eval(("(" + resultJson + ")"));
  _$jscoverage['dataapi/models-mql.js'][305]++;
  if (callback) {
    _$jscoverage['dataapi/models-mql.js'][306]++;
    callback(result);
  }
  _$jscoverage['dataapi/models-mql.js'][308]++;
  return result;
}));
  _$jscoverage['dataapi/models-mql.js'][311]++;
  try {
    _$jscoverage['dataapi/models-mql.js'][313]++;
    var url = (this.handler.METADATA_SERVICE_URL + "/doJsonQueryToCdaJson");
    _$jscoverage['dataapi/models-mql.js'][314]++;
    var query = ("json=" + escape(jsonString) + "&rowLimit=" + rowLimit);
    _$jscoverage['dataapi/models-mql.js'][316]++;
    var resultXml = pentahoGet(url, query, (callback? handleResultCallback: undefined));
    _$jscoverage['dataapi/models-mql.js'][317]++;
    if ((! callback)) {
      _$jscoverage['dataapi/models-mql.js'][318]++;
      return handleResultCallback(resultXml);
    }
  }
  catch (e) {
    _$jscoverage['dataapi/models-mql.js'][321]++;
    alert(e.message);
  }
  _$jscoverage['dataapi/models-mql.js'][323]++;
  return null;
});
_$jscoverage['dataapi/models-mql.js'][330]++;
pentaho.pda.model.mql.prototype.submitXmlQuery = (function (queryObject, rowLimit) {
  _$jscoverage['dataapi/models-mql.js'][331]++;
  var xml = queryObject.serialize();
  _$jscoverage['dataapi/models-mql.js'][333]++;
  if ((! rowLimit)) {
    _$jscoverage['dataapi/models-mql.js'][334]++;
    rowLimit = -1;
  }
  _$jscoverage['dataapi/models-mql.js'][337]++;
  try {
    _$jscoverage['dataapi/models-mql.js'][339]++;
    var url = (this.handler.METADATA_SERVICE_URL + "/doXmlQueryToCdaJson");
    _$jscoverage['dataapi/models-mql.js'][340]++;
    var query = ("xml=" + escape(xml) + "&rowLimit=" + rowLimit);
    _$jscoverage['dataapi/models-mql.js'][342]++;
    var resultXml = pentahoGet(url, query);
    _$jscoverage['dataapi/models-mql.js'][343]++;
    var result = parseXML(resultXml);
    _$jscoverage['dataapi/models-mql.js'][344]++;
    var nodes = result.getElementsByTagName("return");
    _$jscoverage['dataapi/models-mql.js'][345]++;
    resultJson = this.getText(nodes[0]);
    _$jscoverage['dataapi/models-mql.js'][347]++;
    var result = eval(("(" + resultJson + ")"));
    _$jscoverage['dataapi/models-mql.js'][348]++;
    return result;
  }
  catch (e) {
    _$jscoverage['dataapi/models-mql.js'][350]++;
    alert(e.message);
  }
  _$jscoverage['dataapi/models-mql.js'][352]++;
  return null;
});
_$jscoverage['dataapi/models-mql.js'][359]++;
pentaho.pda.model.mql.prototype.parseResultSetXml = (function (xml) {
  _$jscoverage['dataapi/models-mql.js'][360]++;
  var oXML = parseXML(xml);
  _$jscoverage['dataapi/models-mql.js'][361]++;
  var rowNodes = oXML.getElementsByTagName("rows");
  _$jscoverage['dataapi/models-mql.js'][362]++;
  var colNameNodes = oXML.getElementsByTagName("columnNames");
  _$jscoverage['dataapi/models-mql.js'][363]++;
  var colTypeNodes = oXML.getElementsByTagName("columnTypes");
  _$jscoverage['dataapi/models-mql.js'][364]++;
  if (((! colNameNodes) || (colNameNodes.length == 0))) {
    _$jscoverage['dataapi/models-mql.js'][365]++;
    return null;
  }
  _$jscoverage['dataapi/models-mql.js'][367]++;
  colNameNodes = colNameNodes[0].getElementsByTagName("names");
  _$jscoverage['dataapi/models-mql.js'][368]++;
  colTypeNodes = colTypeNodes[0].getElementsByTagName("columnType");
  _$jscoverage['dataapi/models-mql.js'][370]++;
  var results = new (MetadataQuery.Results)();
  _$jscoverage['dataapi/models-mql.js'][371]++;
  var columnNames = new Array();
  _$jscoverage['dataapi/models-mql.js'][372]++;
  var columns = new Array();
  _$jscoverage['dataapi/models-mql.js'][374]++;
  for (var i = 0; (i < colNameNodes.length); (i++)) {
    _$jscoverage['dataapi/models-mql.js'][375]++;
    columnNames.push(colNameNodes[i].firstChild.nodeValue);
    _$jscoverage['dataapi/models-mql.js'][376]++;
    columns.push(this.getColumnById(columnNames[(columnNames.length - 1)]));
}
  _$jscoverage['dataapi/models-mql.js'][378]++;
  results.columnNames = columnNames;
  _$jscoverage['dataapi/models-mql.js'][379]++;
  results.columns = columns;
  _$jscoverage['dataapi/models-mql.js'][382]++;
  var columnTypes = new Array();
  _$jscoverage['dataapi/models-mql.js'][383]++;
  for (var i = 0; (i < colTypeNodes.length); (i++)) {
    _$jscoverage['dataapi/models-mql.js'][384]++;
    columnTypes.push(colTypeNodes[i].firstChild.nodeValue);
}
  _$jscoverage['dataapi/models-mql.js'][386]++;
  results.columnTypes = columnTypes;
  _$jscoverage['dataapi/models-mql.js'][389]++;
  results.rows = new Array();
  _$jscoverage['dataapi/models-mql.js'][390]++;
  for (var i = 0; (i < rowNodes.length); (i++)) {
    _$jscoverage['dataapi/models-mql.js'][391]++;
    cellNodes = rowNodes[i].getElementsByTagName("cell");
    _$jscoverage['dataapi/models-mql.js'][392]++;
    results.rows[i] = new Array();
    _$jscoverage['dataapi/models-mql.js'][393]++;
    for (var j = 0; (j < cellNodes.length); (j++)) {
      _$jscoverage['dataapi/models-mql.js'][394]++;
      if (cellNodes[j].firstChild) {
        _$jscoverage['dataapi/models-mql.js'][395]++;
        var value = cellNodes[j].firstChild.nodeValue;
        _$jscoverage['dataapi/models-mql.js'][397]++;
        if (((results.columnTypes[j] == "decimal") || (results.columnTypes[j] == "double"))) {
          _$jscoverage['dataapi/models-mql.js'][398]++;
          value = parseFloat(value);
        }
        _$jscoverage['dataapi/models-mql.js'][400]++;
        results.rows[i].push(value);
      }
      else {
        _$jscoverage['dataapi/models-mql.js'][403]++;
        results.rows[i].push("null");
      }
}
}
  _$jscoverage['dataapi/models-mql.js'][410]++;
  return results;
});
_$jscoverage['dataapi/models-mql.js'][431]++;
FilterHelper = (function (filterColumn, filterEditBoxId, filterParameterState, model) {
  _$jscoverage['dataapi/models-mql.js'][433]++;
  this.filterEditBoxId = filterEditBoxId;
  _$jscoverage['dataapi/models-mql.js'][434]++;
  this.filterColumn = filterColumn;
  _$jscoverage['dataapi/models-mql.js'][435]++;
  this.filterParameterState = filterParameterState;
  _$jscoverage['dataapi/models-mql.js'][436]++;
  this.model = model;
  _$jscoverage['dataapi/models-mql.js'][437]++;
  this.filterKeyTimeout = null;
  _$jscoverage['dataapi/models-mql.js'][438]++;
  this.filterId = null;
  _$jscoverage['dataapi/models-mql.js'][439]++;
  this.searchListElement = null;
  _$jscoverage['dataapi/models-mql.js'][440]++;
  this.searchListDiv = null;
  _$jscoverage['dataapi/models-mql.js'][442]++;
  this.endFilterSelection = (function () {
  _$jscoverage['dataapi/models-mql.js'][443]++;
  this.searchListDiv.style.display = "none";
});
  _$jscoverage['dataapi/models-mql.js'][446]++;
  this.handleFilterKeyUp = (function (evt) {
  _$jscoverage['dataapi/models-mql.js'][448]++;
  var code = evt.keyCode;
  _$jscoverage['dataapi/models-mql.js'][450]++;
  if ((code == 13)) {
    _$jscoverage['dataapi/models-mql.js'][450]++;
    return;
  }
  _$jscoverage['dataapi/models-mql.js'][450]++;
  ;
  _$jscoverage['dataapi/models-mql.js'][451]++;
  if ((code == 37)) {
    _$jscoverage['dataapi/models-mql.js'][451]++;
    return;
  }
  _$jscoverage['dataapi/models-mql.js'][451]++;
  ;
  _$jscoverage['dataapi/models-mql.js'][452]++;
  if ((code == 38)) {
    _$jscoverage['dataapi/models-mql.js'][452]++;
    return;
  }
  _$jscoverage['dataapi/models-mql.js'][452]++;
  ;
  _$jscoverage['dataapi/models-mql.js'][453]++;
  if ((code == 39)) {
    _$jscoverage['dataapi/models-mql.js'][453]++;
    return;
  }
  _$jscoverage['dataapi/models-mql.js'][453]++;
  ;
  _$jscoverage['dataapi/models-mql.js'][454]++;
  if ((code == 27)) {
    _$jscoverage['dataapi/models-mql.js'][454]++;
    this.endFilterSelection();
    _$jscoverage['dataapi/models-mql.js'][454]++;
    return;
  }
  _$jscoverage['dataapi/models-mql.js'][454]++;
  ;
  _$jscoverage['dataapi/models-mql.js'][455]++;
  if ((code == 40)) {
    _$jscoverage['dataapi/models-mql.js'][456]++;
    this.searchListElement.focus();
    _$jscoverage['dataapi/models-mql.js'][457]++;
    this.searchListElement.selectedIndex = 0;
    _$jscoverage['dataapi/models-mql.js'][458]++;
    return;
  }
  _$jscoverage['dataapi/models-mql.js'][460]++;
  this.filterParameterState.value = document.getElementById(this.filterEditBoxId).value;
  _$jscoverage['dataapi/models-mql.js'][461]++;
  this.filterParameterState.defaultValue = this.filterParameterState.value;
  _$jscoverage['dataapi/models-mql.js'][462]++;
  if ((this.filterColumn != null)) {
    _$jscoverage['dataapi/models-mql.js'][463]++;
    if ((this.filterKeyTimeout != null)) {
      _$jscoverage['dataapi/models-mql.js'][464]++;
      clearTimeout(this.filterKeyTimeout);
    }
    _$jscoverage['dataapi/models-mql.js'][466]++;
    this.filterKeyTimeout = setTimeout("filterHelper.searchFilterValues()", 500);
  }
});
  _$jscoverage['dataapi/models-mql.js'][470]++;
  this.filterListKeyUp = (function (evt) {
  _$jscoverage['dataapi/models-mql.js'][472]++;
  var code = evt.keyCode;
  _$jscoverage['dataapi/models-mql.js'][474]++;
  if ((code == 27)) {
    _$jscoverage['dataapi/models-mql.js'][475]++;
    this.searchListDiv.style.display = "none";
  }
  _$jscoverage['dataapi/models-mql.js'][478]++;
  if ((code == 38)) {
    _$jscoverage['dataapi/models-mql.js'][479]++;
    if ((this.searchListElement.selectedIndex > 0)) {
      _$jscoverage['dataapi/models-mql.js'][480]++;
      return;
    }
    _$jscoverage['dataapi/models-mql.js'][482]++;
    var editbox = document.getElementById(this.filterEditBoxId);
    _$jscoverage['dataapi/models-mql.js'][483]++;
    editbox.focus();
    _$jscoverage['dataapi/models-mql.js'][484]++;
    this.searchListElement.selectedIndex = -1;
  }
  _$jscoverage['dataapi/models-mql.js'][486]++;
  if ((code == 13)) {
    _$jscoverage['dataapi/models-mql.js'][487]++;
    var editbox = document.getElementById(this.filterEditBoxId);
    _$jscoverage['dataapi/models-mql.js'][488]++;
    this.selectFilterValue();
    _$jscoverage['dataapi/models-mql.js'][489]++;
    editbox.focus();
  }
});
  _$jscoverage['dataapi/models-mql.js'][493]++;
  this.searchFilterValues = (function () {
  _$jscoverage['dataapi/models-mql.js'][495]++;
  if ((this.filterKeyTimeout != null)) {
    _$jscoverage['dataapi/models-mql.js'][496]++;
    clearTimeout(this.filterKeyTimeout);
  }
  _$jscoverage['dataapi/models-mql.js'][498]++;
  this.filterKeyTimeout = null;
  _$jscoverage['dataapi/models-mql.js'][499]++;
  this.searchListElement.options.length = 0;
  _$jscoverage['dataapi/models-mql.js'][500]++;
  var value = document.getElementById(this.filterEditBoxId).value;
  _$jscoverage['dataapi/models-mql.js'][501]++;
  if ((value == "")) {
    _$jscoverage['dataapi/models-mql.js'][502]++;
    return;
  }
  _$jscoverage['dataapi/models-mql.js'][505]++;
  var result = this.model.searchColumn(this.filterColumn, value);
  _$jscoverage['dataapi/models-mql.js'][506]++;
  if ((! result)) {
    _$jscoverage['dataapi/models-mql.js'][507]++;
    return;
  }
  _$jscoverage['dataapi/models-mql.js'][510]++;
  var editbox = document.getElementById(filterEditBoxId);
  _$jscoverage['dataapi/models-mql.js'][512]++;
  var pos = this.findPosition(editbox);
  _$jscoverage['dataapi/models-mql.js'][514]++;
  this.searchListDiv.style.left = ("" + pos.x + "px");
  _$jscoverage['dataapi/models-mql.js'][515]++;
  this.searchListDiv.style.width = ("" + editbox.style.width);
  _$jscoverage['dataapi/models-mql.js'][516]++;
  this.searchListDiv.style.top = ("" + (pos.y + parseInt(editbox.style.height)) + "px");
  _$jscoverage['dataapi/models-mql.js'][517]++;
  var rows = result.resultset;
  _$jscoverage['dataapi/models-mql.js'][518]++;
  for (var idx = 0; (idx < rows.length); (idx++)) {
    _$jscoverage['dataapi/models-mql.js'][519]++;
    var option = new Option(rows[idx][0]);
    _$jscoverage['dataapi/models-mql.js'][520]++;
    this.searchListElement.options[this.searchListElement.options.length] = option;
    _$jscoverage['dataapi/models-mql.js'][521]++;
    if ((this.searchListElement.options.length < 9)) {
      _$jscoverage['dataapi/models-mql.js'][522]++;
      this.searchListElement.size = Math.max(this.searchListElement.options.length, 2);
    }
}
  _$jscoverage['dataapi/models-mql.js'][525]++;
  this.searchListDiv.style.display = "block";
});
  _$jscoverage['dataapi/models-mql.js'][528]++;
  this.findPosition = (function (element) {
  _$jscoverage['dataapi/models-mql.js'][529]++;
  var p = {x: (element.offsetLeft || 0), y: (element.offsetTop || 0)};
  _$jscoverage['dataapi/models-mql.js'][530]++;
  while ((element = element.offsetParent)) {
    _$jscoverage['dataapi/models-mql.js'][531]++;
    p.x += element.offsetLeft;
    _$jscoverage['dataapi/models-mql.js'][532]++;
    p.y += element.offsetTop;
}
  _$jscoverage['dataapi/models-mql.js'][534]++;
  return p;
});
  _$jscoverage['dataapi/models-mql.js'][537]++;
  this.selectFilterValue = (function () {
  _$jscoverage['dataapi/models-mql.js'][538]++;
  var idx = this.searchListElement.selectedIndex;
  _$jscoverage['dataapi/models-mql.js'][539]++;
  if ((idx >= 0)) {
    _$jscoverage['dataapi/models-mql.js'][540]++;
    var value = this.searchListElement.options[idx].value;
    _$jscoverage['dataapi/models-mql.js'][541]++;
    var editbox = document.getElementById(filterEditBoxId);
    _$jscoverage['dataapi/models-mql.js'][542]++;
    editbox.value = value;
    _$jscoverage['dataapi/models-mql.js'][543]++;
    this.filterParameterState.value = value;
    _$jscoverage['dataapi/models-mql.js'][544]++;
    this.filterParameterState.defaultValue = this.filterParameterState.value;
    _$jscoverage['dataapi/models-mql.js'][545]++;
    if (this.filterValueSelected) {
      _$jscoverage['dataapi/models-mql.js'][546]++;
      this.filterValueSelected(this.filterParameterState);
    }
    _$jscoverage['dataapi/models-mql.js'][548]++;
    this.searchListDiv.style.display = "none";
  }
});
});
_$jscoverage['dataapi/models-mql.js'][558]++;
pentaho.pda.query.mql = (function (model) {
  _$jscoverage['dataapi/models-mql.js'][559]++;
  pentaho.pda.query.call(this, model);
  _$jscoverage['dataapi/models-mql.js'][561]++;
  this.state = {"class": "org.pentaho.common.ui.metadata.model.impl.Query", "domainName": null, "modelId": null, "disableDistinct": false, "columns": [], "defaultParameterMap": null, "conditions": [], "orders": [], "parameters": []};
  _$jscoverage['dataapi/models-mql.js'][574]++;
  this.XML_CHARACTER_MAPPING = {"&": "&amp;", "<": "&lt;", "\"": "&quot;"};
  _$jscoverage['dataapi/models-mql.js'][579]++;
  this.XML_ILLEGAL_CHARACTERS_PATTERN = /[&<"]/g;
});
_$jscoverage['dataapi/models-mql.js'][582]++;
inheritPrototype(pentaho.pda.query.mql, pentaho.pda.query);
_$jscoverage['dataapi/models-mql.js'][584]++;
pentaho.pda.query.mql.prototype.canQueryReturnData = (function () {
  _$jscoverage['dataapi/models-mql.js'][585]++;
  return (this.state.columns.length > 0);
});
_$jscoverage['dataapi/models-mql.js'][588]++;
pentaho.pda.query.mql.prototype.setDomainId = (function (domainName) {
  _$jscoverage['dataapi/models-mql.js'][589]++;
  this.state.domainName = domainName;
});
_$jscoverage['dataapi/models-mql.js'][592]++;
pentaho.pda.query.mql.prototype.setModelId = (function (modelId) {
  _$jscoverage['dataapi/models-mql.js'][593]++;
  this.state.modelId = modelId;
});
_$jscoverage['dataapi/models-mql.js'][596]++;
pentaho.pda.query.mql.prototype.prepare = (function () {
});
_$jscoverage['dataapi/models-mql.js'][600]++;
pentaho.pda.query.mql.prototype.createSelection = (function () {
  _$jscoverage['dataapi/models-mql.js'][601]++;
  var selection = {"class": "org.pentaho.common.ui.metadata.model.impl.Column", "aggTypes": [], "category": null, "defaultAggType": null, "fieldType": null, "id": null, "name": null, "selectedAggType": null, "type": null};
  _$jscoverage['dataapi/models-mql.js'][612]++;
  return selection;
});
_$jscoverage['dataapi/models-mql.js'][615]++;
pentaho.pda.query.mql.prototype.createSort = (function () {
  _$jscoverage['dataapi/models-mql.js'][616]++;
  var sort = {"class": "org.pentaho.common.ui.metadata.model.impl.Order", "category": null, "column": null, "orderType": pentaho.pda.Column.SORT_TYPES.ASCENDING};
  _$jscoverage['dataapi/models-mql.js'][622]++;
  return sort;
});
_$jscoverage['dataapi/models-mql.js'][625]++;
pentaho.pda.query.mql.prototype.createCondition = (function () {
  _$jscoverage['dataapi/models-mql.js'][626]++;
  var condition = {"class": "org.pentaho.common.ui.metadata.model.impl.Condition", "category": null, "column": null, "operator": null, "value": null, "combinationType": pentaho.pda.Column.OPERATOR_TYPES.AND, "parameterized": false, "selectedAggType": null};
  _$jscoverage['dataapi/models-mql.js'][636]++;
  return condition;
});
_$jscoverage['dataapi/models-mql.js'][639]++;
pentaho.pda.query.mql.prototype.createParameter = (function () {
  _$jscoverage['dataapi/models-mql.js'][640]++;
  var parameter = {"class": "org.pentaho.common.ui.metadata.model.impl.Parameter", "column": null, "name": null, "type": null, "value": null, "defaultValue": null};
  _$jscoverage['dataapi/models-mql.js'][648]++;
  return parameter;
});
_$jscoverage['dataapi/models-mql.js'][651]++;
pentaho.pda.query.mql.prototype.addSelectionById = (function (columnId) {
  _$jscoverage['dataapi/models-mql.js'][652]++;
  var column = this.model.getColumnById(columnId);
  _$jscoverage['dataapi/models-mql.js'][653]++;
  if ((column != null)) {
    _$jscoverage['dataapi/models-mql.js'][654]++;
    var selection = this.createSelection();
    _$jscoverage['dataapi/models-mql.js'][655]++;
    selection.id = columnId;
    _$jscoverage['dataapi/models-mql.js'][656]++;
    selection.category = column.parent.id;
    _$jscoverage['dataapi/models-mql.js'][657]++;
    selection.selectedAggType = (selection.defaultAggType = column.defaultAggregation);
    _$jscoverage['dataapi/models-mql.js'][658]++;
    this.addSelection(selection);
    _$jscoverage['dataapi/models-mql.js'][659]++;
    return selection;
  }
  _$jscoverage['dataapi/models-mql.js'][661]++;
  return null;
});
_$jscoverage['dataapi/models-mql.js'][664]++;
pentaho.pda.query.mql.prototype.addSortById = (function (columnId, orderType) {
  _$jscoverage['dataapi/models-mql.js'][665]++;
  var column = this.model.getColumnById(columnId);
  _$jscoverage['dataapi/models-mql.js'][666]++;
  if ((column != null)) {
    _$jscoverage['dataapi/models-mql.js'][667]++;
    var sort = this.createSort();
    _$jscoverage['dataapi/models-mql.js'][668]++;
    sort.column = columnId;
    _$jscoverage['dataapi/models-mql.js'][669]++;
    sort.category = column.parent.id;
    _$jscoverage['dataapi/models-mql.js'][670]++;
    sort.orderType = orderType;
    _$jscoverage['dataapi/models-mql.js'][671]++;
    this.addSort(sort);
    _$jscoverage['dataapi/models-mql.js'][672]++;
    return sort;
  }
  _$jscoverage['dataapi/models-mql.js'][674]++;
  return null;
});
_$jscoverage['dataapi/models-mql.js'][677]++;
pentaho.pda.query.mql.prototype.addConditionById = (function (columnId, operator, value, combinationType, parameterized, selectedAggType) {
  _$jscoverage['dataapi/models-mql.js'][678]++;
  var column = this.model.getColumnById(columnId);
  _$jscoverage['dataapi/models-mql.js'][679]++;
  if ((column != null)) {
    _$jscoverage['dataapi/models-mql.js'][680]++;
    var condition = this.createCondition();
    _$jscoverage['dataapi/models-mql.js'][681]++;
    condition.column = columnId;
    _$jscoverage['dataapi/models-mql.js'][682]++;
    condition.category = column.parent.id;
    _$jscoverage['dataapi/models-mql.js'][683]++;
    condition.operator = operator;
    _$jscoverage['dataapi/models-mql.js'][684]++;
    condition.parameterized = (true === parameterized);
    _$jscoverage['dataapi/models-mql.js'][685]++;
    if ((((typeof value) == "object") && value.length)) {
      _$jscoverage['dataapi/models-mql.js'][686]++;
      condition.value = value;
    }
    else {
      _$jscoverage['dataapi/models-mql.js'][688]++;
      condition.value = [value];
    }
    _$jscoverage['dataapi/models-mql.js'][690]++;
    condition.combinationType = combinationType;
    _$jscoverage['dataapi/models-mql.js'][691]++;
    if ((selectedAggType && (column.defaultAggregation !== selectedAggType) && pentaho.pda.Column.AGG_TYPE_MAP[selectedAggType])) {
      _$jscoverage['dataapi/models-mql.js'][692]++;
      condition.selectedAggType = selectedAggType;
    }
    _$jscoverage['dataapi/models-mql.js'][694]++;
    this.addCondition(condition);
    _$jscoverage['dataapi/models-mql.js'][695]++;
    return condition;
  }
  _$jscoverage['dataapi/models-mql.js'][697]++;
  return null;
});
_$jscoverage['dataapi/models-mql.js'][700]++;
pentaho.pda.query.mql.prototype.addParameterById = (function (columnId, name, value, defaultValue) {
  _$jscoverage['dataapi/models-mql.js'][701]++;
  var column = this.model.getColumnById(columnId);
  _$jscoverage['dataapi/models-mql.js'][702]++;
  if ((column != null)) {
    _$jscoverage['dataapi/models-mql.js'][703]++;
    var parameter = this.createParameter();
    _$jscoverage['dataapi/models-mql.js'][704]++;
    parameter.column = columnId;
    _$jscoverage['dataapi/models-mql.js'][705]++;
    parameter.name = name;
    _$jscoverage['dataapi/models-mql.js'][706]++;
    parameter.type = column.dataType;
    _$jscoverage['dataapi/models-mql.js'][707]++;
    parameter.value = value;
    _$jscoverage['dataapi/models-mql.js'][708]++;
    parameter.defaultValue = defaultValue;
    _$jscoverage['dataapi/models-mql.js'][709]++;
    if ((parameter.defaultValue == undefined)) {
      _$jscoverage['dataapi/models-mql.js'][710]++;
      parameter.defaultValue = parameter.value;
    }
  }
  _$jscoverage['dataapi/models-mql.js'][713]++;
  this.addParameter(parameter);
  _$jscoverage['dataapi/models-mql.js'][714]++;
  return parameter;
});
_$jscoverage['dataapi/models-mql.js'][717]++;
pentaho.pda.query.mql.prototype.couldReturnData = (function () {
  _$jscoverage['dataapi/models-mql.js'][718]++;
  return (this.state.columns.length > 0);
});
_$jscoverage['dataapi/models-mql.js'][721]++;
pentaho.pda.query.mql.prototype.addSelection = (function (selection) {
  _$jscoverage['dataapi/models-mql.js'][722]++;
  this.state.columns.push(selection);
});
_$jscoverage['dataapi/models-mql.js'][725]++;
pentaho.pda.query.mql.prototype.addSort = (function (sort) {
  _$jscoverage['dataapi/models-mql.js'][726]++;
  this.state.orders.push(sort);
});
_$jscoverage['dataapi/models-mql.js'][729]++;
pentaho.pda.query.mql.prototype.addCondition = (function (condition) {
  _$jscoverage['dataapi/models-mql.js'][730]++;
  this.state.conditions.push(condition);
});
_$jscoverage['dataapi/models-mql.js'][733]++;
pentaho.pda.query.mql.prototype.addParameter = (function (parameter) {
  _$jscoverage['dataapi/models-mql.js'][734]++;
  this.state.parameters.push(parameter);
});
_$jscoverage['dataapi/models-mql.js'][737]++;
pentaho.pda.query.mql.prototype.getJson = (function () {
  _$jscoverage['dataapi/models-mql.js'][738]++;
  return dojo.toJson(this.state);
});
_$jscoverage['dataapi/models-mql.js'][741]++;
pentaho.pda.query.mql.prototype.getQueryStr = (function () {
  _$jscoverage['dataapi/models-mql.js'][742]++;
  return this.getJson();
});
_$jscoverage['dataapi/models-mql.js'][745]++;
pentaho.pda.query.mql.prototype.serialize = (function () {
  _$jscoverage['dataapi/models-mql.js'][746]++;
  var xml = "";
  _$jscoverage['dataapi/models-mql.js'][747]++;
  xml += "<mql>\n<domain_type>relational</domain_type>\n";
  _$jscoverage['dataapi/models-mql.js'][748]++;
  xml += ("<domain_id>" + this.model.domainId + "</domain_id>\n");
  _$jscoverage['dataapi/models-mql.js'][749]++;
  xml += ("<model_id>" + this.model.modelId + "</model_id>\n");
  _$jscoverage['dataapi/models-mql.js'][750]++;
  xml += "<options>\n";
  _$jscoverage['dataapi/models-mql.js'][751]++;
  xml += ("<disable_distinct>" + this.state.disableDistinct + "</disable_distinct>\n");
  _$jscoverage['dataapi/models-mql.js'][752]++;
  xml += "</options>\n";
  _$jscoverage['dataapi/models-mql.js'][754]++;
  xml += "<parameters>\n";
  _$jscoverage['dataapi/models-mql.js'][755]++;
  for (var idx = 0; (idx < this.state.parameters.length); (idx++)) {
    _$jscoverage['dataapi/models-mql.js'][756]++;
    xml += this.getParameterXML(this.state.parameters[idx]);
}
  _$jscoverage['dataapi/models-mql.js'][758]++;
  xml += "</parameters>\n";
  _$jscoverage['dataapi/models-mql.js'][759]++;
  xml += "<selections>\n";
  _$jscoverage['dataapi/models-mql.js'][760]++;
  for (var idx = 0; (idx < this.state.columns.length); (idx++)) {
    _$jscoverage['dataapi/models-mql.js'][761]++;
    xml += this.getSelectionXML(this.state.columns[idx]);
}
  _$jscoverage['dataapi/models-mql.js'][763]++;
  xml += "</selections>\n";
  _$jscoverage['dataapi/models-mql.js'][764]++;
  xml += "<constraints>\n";
  _$jscoverage['dataapi/models-mql.js'][765]++;
  for (var idx = 0; (idx < this.state.conditions.length); (idx++)) {
    _$jscoverage['dataapi/models-mql.js'][766]++;
    if ((this.state.conditions[idx].value.indexOf("::mql::") == 0)) {
      _$jscoverage['dataapi/models-mql.js'][767]++;
      xml += this.getMQLFilterXML(this.state.conditions[idx].value.replace("::mql::", ""));
    }
    else {
      _$jscoverage['dataapi/models-mql.js'][770]++;
      xml += this.getFilterXML(this.state.conditions[idx], this.state.parameters);
    }
}
  _$jscoverage['dataapi/models-mql.js'][773]++;
  xml += "</constraints>\n";
  _$jscoverage['dataapi/models-mql.js'][774]++;
  xml += "<orders>\n";
  _$jscoverage['dataapi/models-mql.js'][775]++;
  for (var idx = 0; (idx < this.state.orders.length); (idx++)) {
    _$jscoverage['dataapi/models-mql.js'][776]++;
    xml += this.getSortXML(this.state.orders[idx]);
}
  _$jscoverage['dataapi/models-mql.js'][778]++;
  xml += "</orders>\n";
  _$jscoverage['dataapi/models-mql.js'][779]++;
  xml += "</mql>\n";
  _$jscoverage['dataapi/models-mql.js'][780]++;
  return xml;
});
_$jscoverage['dataapi/models-mql.js'][783]++;
pentaho.pda.query.mql.prototype.getParameterXML = (function (parameter) {
  _$jscoverage['dataapi/models-mql.js'][784]++;
  var xml = "";
  _$jscoverage['dataapi/models-mql.js'][785]++;
  var column = this.model.getColumnById(parameter.column);
  _$jscoverage['dataapi/models-mql.js'][786]++;
  xml += "<parameter defaultValue=\"";
  _$jscoverage['dataapi/models-mql.js'][787]++;
  var defaultValue;
  _$jscoverage['dataapi/models-mql.js'][788]++;
  if ((parameter.value != null)) {
    _$jscoverage['dataapi/models-mql.js'][789]++;
    defaultValue = this.getParameterValueString(column, parameter.value);
  }
  else {
    _$jscoverage['dataapi/models-mql.js'][791]++;
    defaultValue = this.getParameterValueString(column, parameter.defaultValue);
  }
  _$jscoverage['dataapi/models-mql.js'][793]++;
  if (((column.dataType === pentaho.pda.Column.DATA_TYPES.STRING) || (column.dataType === pentaho.pda.Column.DATA_TYPES.UNKNOWN))) {
    _$jscoverage['dataapi/models-mql.js'][795]++;
    defaultValue = (this.encodeXmlAttribute(defaultValue) || "");
  }
  _$jscoverage['dataapi/models-mql.js'][797]++;
  xml += defaultValue;
  _$jscoverage['dataapi/models-mql.js'][798]++;
  xml += ("\" name=\"" + parameter.name);
  _$jscoverage['dataapi/models-mql.js'][799]++;
  xml += ("\" type=\"" + parameter.type + "\"/>");
  _$jscoverage['dataapi/models-mql.js'][800]++;
  return xml;
});
_$jscoverage['dataapi/models-mql.js'][803]++;
pentaho.pda.query.mql.prototype.encodeXmlAttribute = (function (value) {
  _$jscoverage['dataapi/models-mql.js'][804]++;
  if ((! value)) {
    _$jscoverage['dataapi/models-mql.js'][804]++;
    return;
  }
  _$jscoverage['dataapi/models-mql.js'][806]++;
  var mapping = this.XML_CHARACTER_MAPPING;
  _$jscoverage['dataapi/models-mql.js'][807]++;
  return value.replace(this.XML_ILLEGAL_CHARACTERS_PATTERN, (function (c) {
  _$jscoverage['dataapi/models-mql.js'][808]++;
  return mapping[c];
}));
});
_$jscoverage['dataapi/models-mql.js'][812]++;
pentaho.pda.query.mql.prototype.getParameterValueString = (function (column, value) {
  _$jscoverage['dataapi/models-mql.js'][813]++;
  if (((value == null) || (value == ""))) {
    _$jscoverage['dataapi/models-mql.js'][814]++;
    return "";
  }
  _$jscoverage['dataapi/models-mql.js'][816]++;
  if ((value.constructor.toString().indexOf("Array") != -1)) {
    _$jscoverage['dataapi/models-mql.js'][818]++;
    var str = "";
    _$jscoverage['dataapi/models-mql.js'][819]++;
    for (var idx = 0; (idx < value.length); (idx++)) {
      _$jscoverage['dataapi/models-mql.js'][820]++;
      if ((idx > 0)) {
        _$jscoverage['dataapi/models-mql.js'][821]++;
        str += "|";
      }
      _$jscoverage['dataapi/models-mql.js'][823]++;
      str += this.getParameterValueString(column, value[idx]);
}
    _$jscoverage['dataapi/models-mql.js'][825]++;
    return str;
  }
  _$jscoverage['dataapi/models-mql.js'][827]++;
  if ((column.dataType == pentaho.pda.Column.DATA_TYPES.DATE)) {
    _$jscoverage['dataapi/models-mql.js'][828]++;
    return ("" + value);
  }
  _$jscoverage['dataapi/models-mql.js'][830]++;
  if ((column.dataType == pentaho.pda.Column.DATA_TYPES.NUMERIC)) {
    _$jscoverage['dataapi/models-mql.js'][831]++;
    return ("" + value);
  }
  _$jscoverage['dataapi/models-mql.js'][833]++;
  if ((column.dataType == pentaho.pda.Column.DATA_TYPES.BOOLEAN)) {
    _$jscoverage['dataapi/models-mql.js'][834]++;
    return ("" + value);
  }
  _$jscoverage['dataapi/models-mql.js'][836]++;
  return ("\"" + value + "\"");
});
_$jscoverage['dataapi/models-mql.js'][839]++;
pentaho.pda.query.mql.prototype.getSelectionXML = (function (selection) {
  _$jscoverage['dataapi/models-mql.js'][840]++;
  if ((selection && selection.id && selection.category)) {
    _$jscoverage['dataapi/models-mql.js'][841]++;
    var xml = "";
    _$jscoverage['dataapi/models-mql.js'][842]++;
    xml += "<selection>\n";
    _$jscoverage['dataapi/models-mql.js'][843]++;
    xml += ("<table>" + selection.category + "</table>\n");
    _$jscoverage['dataapi/models-mql.js'][844]++;
    xml += ("<column>" + selection.id + "</column>\n");
    _$jscoverage['dataapi/models-mql.js'][846]++;
    var aggType = selection.selectedAggType;
    _$jscoverage['dataapi/models-mql.js'][847]++;
    if ((! aggType)) {
      _$jscoverage['dataapi/models-mql.js'][848]++;
      aggType = selection.defaultAggType;
    }
    _$jscoverage['dataapi/models-mql.js'][850]++;
    xml += ("<aggregation>" + aggType + "</aggregation>");
    _$jscoverage['dataapi/models-mql.js'][851]++;
    xml += "</selection>\n";
    _$jscoverage['dataapi/models-mql.js'][852]++;
    return xml;
  }
  else {
    _$jscoverage['dataapi/models-mql.js'][854]++;
    return "";
  }
});
_$jscoverage['dataapi/models-mql.js'][858]++;
pentaho.pda.query.mql.prototype.getSortXML = (function (sort) {
  _$jscoverage['dataapi/models-mql.js'][859]++;
  if ((! sort)) {
    _$jscoverage['dataapi/models-mql.js'][860]++;
    return;
  }
  _$jscoverage['dataapi/models-mql.js'][862]++;
  var xml = "";
  _$jscoverage['dataapi/models-mql.js'][863]++;
  xml += "<order>\n";
  _$jscoverage['dataapi/models-mql.js'][864]++;
  xml += ("<direction>" + sort.orderType + "</direction>\n");
  _$jscoverage['dataapi/models-mql.js'][865]++;
  xml += ("<view_id>" + sort.category + "</view_id>\n");
  _$jscoverage['dataapi/models-mql.js'][866]++;
  xml += ("<column_id>" + sort.column + "</column_id>\n");
  _$jscoverage['dataapi/models-mql.js'][867]++;
  xml += "</order>\n";
  _$jscoverage['dataapi/models-mql.js'][868]++;
  return xml;
});
_$jscoverage['dataapi/models-mql.js'][871]++;
pentaho.pda.query.mql.prototype.getFilterXML = (function (filter, parameters) {
  _$jscoverage['dataapi/models-mql.js'][872]++;
  var xml = "";
  _$jscoverage['dataapi/models-mql.js'][873]++;
  xml += "<constraint>\n";
  _$jscoverage['dataapi/models-mql.js'][874]++;
  xml += ("<operator>" + filter.combinationType + "</operator>\n");
  _$jscoverage['dataapi/models-mql.js'][875]++;
  xml += ("<condition><![CDATA[" + this.getFilterConditionString(filter.column, filter.category, filter.operator, filter.value, filter.parameterized, parameters, filter.selectedAggType) + "]]></condition>\n");
  _$jscoverage['dataapi/models-mql.js'][876]++;
  xml += "</constraint>\n";
  _$jscoverage['dataapi/models-mql.js'][877]++;
  return xml;
});
_$jscoverage['dataapi/models-mql.js'][880]++;
pentaho.pda.query.mql.prototype.getMQLFilterXML = (function (mqlCondition) {
  _$jscoverage['dataapi/models-mql.js'][881]++;
  var combinationType = "AND";
  _$jscoverage['dataapi/models-mql.js'][882]++;
  var xml = "";
  _$jscoverage['dataapi/models-mql.js'][883]++;
  xml += "<constraint>\n";
  _$jscoverage['dataapi/models-mql.js'][884]++;
  xml += ("<operator>" + combinationType + "</operator>\n");
  _$jscoverage['dataapi/models-mql.js'][885]++;
  xml += ("<condition><![CDATA[" + mqlCondition + "]]></condition>\n");
  _$jscoverage['dataapi/models-mql.js'][886]++;
  xml += "</constraint>\n";
  _$jscoverage['dataapi/models-mql.js'][887]++;
  return xml;
});
_$jscoverage['dataapi/models-mql.js'][890]++;
pentaho.pda.query.mql.prototype.getFilterConditionString = (function (columnId, category, operator, value, parameterized, parameters, aggregationType) {
  _$jscoverage['dataapi/models-mql.js'][891]++;
  operator = operator.toUpperCase();
  _$jscoverage['dataapi/models-mql.js'][892]++;
  var column = this.model.getColumnById(columnId);
  _$jscoverage['dataapi/models-mql.js'][893]++;
  var operand = ("[" + category + "." + columnId + (aggregationType? ("." + aggregationType): "") + "]");
  _$jscoverage['dataapi/models-mql.js'][894]++;
  var isArrayValues = (value.constructor.toString().indexOf("Array") != -1);
  _$jscoverage['dataapi/models-mql.js'][895]++;
  if ((operator == pentaho.pda.Column.CONDITION_TYPES.LIKE)) {
    _$jscoverage['dataapi/models-mql.js'][896]++;
    return ("LIKE(" + operand + ";\"%" + this.getFilterValueString(column, value, parameterized, parameters) + "%\")");
  }
  else {
    _$jscoverage['dataapi/models-mql.js'][898]++;
    if (((operator == pentaho.pda.Column.CONDITION_TYPES.EQUAL) && ((! isArrayValues) || (value.length == 1)))) {
      _$jscoverage['dataapi/models-mql.js'][899]++;
      return ("EQUALS(" + operand + ";" + this.getFilterValueString(column, value, parameterized, parameters) + ")");
    }
    else {
      _$jscoverage['dataapi/models-mql.js'][901]++;
      if (((operator == pentaho.pda.Column.CONDITION_TYPES.EQUAL) && isArrayValues)) {
        _$jscoverage['dataapi/models-mql.js'][902]++;
        return ("IN(" + operand + ";" + this.getFilterValueString(column, value, parameterized, parameters) + ")");
      }
      else {
        _$jscoverage['dataapi/models-mql.js'][904]++;
        if ((operator == pentaho.pda.Column.CONDITION_TYPES.LESS_THAN)) {
          _$jscoverage['dataapi/models-mql.js'][905]++;
          return (operand + " <" + this.getFilterValueString(column, value, parameterized, parameters));
        }
        else {
          _$jscoverage['dataapi/models-mql.js'][907]++;
          if ((operator == pentaho.pda.Column.CONDITION_TYPES.LESS_THAN_OR_EQUAL)) {
            _$jscoverage['dataapi/models-mql.js'][908]++;
            return (operand + " <=" + this.getFilterValueString(column, value, parameterized, parameters));
          }
          else {
            _$jscoverage['dataapi/models-mql.js'][910]++;
            if ((operator == pentaho.pda.Column.CONDITION_TYPES.MORE_THAN)) {
              _$jscoverage['dataapi/models-mql.js'][911]++;
              return (operand + " >" + this.getFilterValueString(column, value, parameterized, parameters));
            }
            else {
              _$jscoverage['dataapi/models-mql.js'][913]++;
              if ((operator == pentaho.pda.Column.CONDITION_TYPES.MORE_THAN_OR_EQUAL)) {
                _$jscoverage['dataapi/models-mql.js'][914]++;
                return (operand + " >=" + this.getFilterValueString(column, value, parameterized, parameters));
              }
              else {
                _$jscoverage['dataapi/models-mql.js'][916]++;
                if ((operator == pentaho.pda.Column.CONDITION_TYPES.CONTAINS)) {
                  _$jscoverage['dataapi/models-mql.js'][917]++;
                  return ("CONTAINS(" + operand + ";" + this.getFilterValueString(column, value, parameterized, parameters) + ")");
                }
                else {
                  _$jscoverage['dataapi/models-mql.js'][919]++;
                  if ((operator == pentaho.pda.Column.CONDITION_TYPES.NOT_CONTAINS)) {
                    _$jscoverage['dataapi/models-mql.js'][920]++;
                    return ("NOT(CONTAINS(" + operand + ";" + this.getFilterValueString(column, value, parameterized, parameters) + "))");
                  }
                  else {
                    _$jscoverage['dataapi/models-mql.js'][922]++;
                    if ((operator == pentaho.pda.Column.CONDITION_TYPES.BEGINSWITH)) {
                      _$jscoverage['dataapi/models-mql.js'][923]++;
                      return ("BEGINSWITH(" + operand + ";" + this.getFilterValueString(column, value, parameterized, parameters) + ")");
                    }
                    else {
                      _$jscoverage['dataapi/models-mql.js'][925]++;
                      if ((operator == pentaho.pda.Column.CONDITION_TYPES.ENDSWITH)) {
                        _$jscoverage['dataapi/models-mql.js'][926]++;
                        return ("ENDSWITH(" + operand + ";" + this.getFilterValueString(column, value, parameterized, parameters) + ")");
                      }
                      else {
                        _$jscoverage['dataapi/models-mql.js'][928]++;
                        if ((operator == pentaho.pda.Column.CONDITION_TYPES.IS_NULL)) {
                          _$jscoverage['dataapi/models-mql.js'][929]++;
                          return ("ISNA(" + operand + ")");
                        }
                        else {
                          _$jscoverage['dataapi/models-mql.js'][931]++;
                          if ((operator == pentaho.pda.Column.CONDITION_TYPES.NOT_NULL)) {
                            _$jscoverage['dataapi/models-mql.js'][932]++;
                            return ("NOT(ISNA(" + operand + "))");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
});
_$jscoverage['dataapi/models-mql.js'][936]++;
pentaho.pda.query.mql.prototype.getFilterValueString = (function (column, value, parameterized, parameters) {
  _$jscoverage['dataapi/models-mql.js'][937]++;
  if ((value == null)) {
    _$jscoverage['dataapi/models-mql.js'][938]++;
    return "";
  }
  _$jscoverage['dataapi/models-mql.js'][940]++;
  if (parameterized) {
    _$jscoverage['dataapi/models-mql.js'][943]++;
    for (var idx = 0; (idx < parameters.length); (idx++)) {
      _$jscoverage['dataapi/models-mql.js'][944]++;
      if ((parameters[idx].name === value[0])) {
        _$jscoverage['dataapi/models-mql.js'][946]++;
        var param = ("[param:" + parameters[idx].name + "]");
        _$jscoverage['dataapi/models-mql.js'][947]++;
        if ((column.dataType == pentaho.pda.Column.DATA_TYPES.DATE)) {
          _$jscoverage['dataapi/models-mql.js'][948]++;
          param = ("DATEVALUE(" + param + ")");
        }
        _$jscoverage['dataapi/models-mql.js'][950]++;
        return param;
      }
}
    _$jscoverage['dataapi/models-mql.js'][953]++;
    throw new Error(("unable to find parameter '" + value + "' for condition on column " + column + "."));
  }
  _$jscoverage['dataapi/models-mql.js'][956]++;
  if ((value.constructor.toString().indexOf("Array") != -1)) {
    _$jscoverage['dataapi/models-mql.js'][958]++;
    var str = "";
    _$jscoverage['dataapi/models-mql.js'][959]++;
    for (var idx = 0; (idx < value.length); (idx++)) {
      _$jscoverage['dataapi/models-mql.js'][960]++;
      if ((idx > 0)) {
        _$jscoverage['dataapi/models-mql.js'][961]++;
        str += ";";
      }
      _$jscoverage['dataapi/models-mql.js'][963]++;
      str += this.getFilterValueString(column, value[idx]);
}
    _$jscoverage['dataapi/models-mql.js'][965]++;
    return str;
  }
  _$jscoverage['dataapi/models-mql.js'][967]++;
  if ((column.dataType == pentaho.pda.Column.DATA_TYPES.NUMERIC)) {
    _$jscoverage['dataapi/models-mql.js'][968]++;
    return ("" + value);
  }
  _$jscoverage['dataapi/models-mql.js'][970]++;
  if ((column.dataType == pentaho.pda.Column.DATA_TYPES.DATE)) {
    _$jscoverage['dataapi/models-mql.js'][971]++;
    return ("DATEVALUE(\"" + value + "\")");
  }
  _$jscoverage['dataapi/models-mql.js'][973]++;
  if ((column.dataType == pentaho.pda.Column.DATA_TYPES.BOOLEAN)) {
    _$jscoverage['dataapi/models-mql.js'][974]++;
    return ("" + value);
  }
  _$jscoverage['dataapi/models-mql.js'][976]++;
  return ("\"" + value + "\"");
});
