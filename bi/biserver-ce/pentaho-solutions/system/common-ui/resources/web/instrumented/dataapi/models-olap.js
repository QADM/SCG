/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['dataapi/models-olap.js']) {
  _$jscoverage['dataapi/models-olap.js'] = [];
  _$jscoverage['dataapi/models-olap.js'][2] = 0;
  _$jscoverage['dataapi/models-olap.js'][3] = 0;
  _$jscoverage['dataapi/models-olap.js'][4] = 0;
  _$jscoverage['dataapi/models-olap.js'][5] = 0;
  _$jscoverage['dataapi/models-olap.js'][6] = 0;
  _$jscoverage['dataapi/models-olap.js'][9] = 0;
  _$jscoverage['dataapi/models-olap.js'][11] = 0;
  _$jscoverage['dataapi/models-olap.js'][12] = 0;
  _$jscoverage['dataapi/models-olap.js'][13] = 0;
  _$jscoverage['dataapi/models-olap.js'][14] = 0;
  _$jscoverage['dataapi/models-olap.js'][18] = 0;
  _$jscoverage['dataapi/models-olap.js'][19] = 0;
  _$jscoverage['dataapi/models-olap.js'][20] = 0;
  _$jscoverage['dataapi/models-olap.js'][21] = 0;
  _$jscoverage['dataapi/models-olap.js'][24] = 0;
  _$jscoverage['dataapi/models-olap.js'][25] = 0;
  _$jscoverage['dataapi/models-olap.js'][26] = 0;
  _$jscoverage['dataapi/models-olap.js'][27] = 0;
  _$jscoverage['dataapi/models-olap.js'][28] = 0;
  _$jscoverage['dataapi/models-olap.js'][38] = 0;
  _$jscoverage['dataapi/models-olap.js'][39] = 0;
  _$jscoverage['dataapi/models-olap.js'][43] = 0;
  _$jscoverage['dataapi/models-olap.js'][46] = 0;
  _$jscoverage['dataapi/models-olap.js'][47] = 0;
  _$jscoverage['dataapi/models-olap.js'][48] = 0;
  _$jscoverage['dataapi/models-olap.js'][51] = 0;
  _$jscoverage['dataapi/models-olap.js'][52] = 0;
  _$jscoverage['dataapi/models-olap.js'][53] = 0;
  _$jscoverage['dataapi/models-olap.js'][54] = 0;
  _$jscoverage['dataapi/models-olap.js'][56] = 0;
  _$jscoverage['dataapi/models-olap.js'][58] = 0;
  _$jscoverage['dataapi/models-olap.js'][59] = 0;
  _$jscoverage['dataapi/models-olap.js'][63] = 0;
  _$jscoverage['dataapi/models-olap.js'][64] = 0;
  _$jscoverage['dataapi/models-olap.js'][65] = 0;
  _$jscoverage['dataapi/models-olap.js'][68] = 0;
  _$jscoverage['dataapi/models-olap.js'][69] = 0;
  _$jscoverage['dataapi/models-olap.js'][70] = 0;
  _$jscoverage['dataapi/models-olap.js'][71] = 0;
  _$jscoverage['dataapi/models-olap.js'][73] = 0;
  _$jscoverage['dataapi/models-olap.js'][74] = 0;
  _$jscoverage['dataapi/models-olap.js'][76] = 0;
  _$jscoverage['dataapi/models-olap.js'][82] = 0;
  _$jscoverage['dataapi/models-olap.js'][83] = 0;
  _$jscoverage['dataapi/models-olap.js'][84] = 0;
  _$jscoverage['dataapi/models-olap.js'][85] = 0;
  _$jscoverage['dataapi/models-olap.js'][86] = 0;
  _$jscoverage['dataapi/models-olap.js'][92] = 0;
  _$jscoverage['dataapi/models-olap.js'][93] = 0;
  _$jscoverage['dataapi/models-olap.js'][94] = 0;
  _$jscoverage['dataapi/models-olap.js'][95] = 0;
  _$jscoverage['dataapi/models-olap.js'][96] = 0;
  _$jscoverage['dataapi/models-olap.js'][97] = 0;
  _$jscoverage['dataapi/models-olap.js'][98] = 0;
  _$jscoverage['dataapi/models-olap.js'][103] = 0;
  _$jscoverage['dataapi/models-olap.js'][106] = 0;
  _$jscoverage['dataapi/models-olap.js'][112] = 0;
  _$jscoverage['dataapi/models-olap.js'][115] = 0;
  _$jscoverage['dataapi/models-olap.js'][116] = 0;
  _$jscoverage['dataapi/models-olap.js'][117] = 0;
  _$jscoverage['dataapi/models-olap.js'][118] = 0;
  _$jscoverage['dataapi/models-olap.js'][119] = 0;
  _$jscoverage['dataapi/models-olap.js'][120] = 0;
  _$jscoverage['dataapi/models-olap.js'][123] = 0;
  _$jscoverage['dataapi/models-olap.js'][126] = 0;
  _$jscoverage['dataapi/models-olap.js'][139] = 0;
  _$jscoverage['dataapi/models-olap.js'][141] = 0;
  _$jscoverage['dataapi/models-olap.js'][144] = 0;
  _$jscoverage['dataapi/models-olap.js'][145] = 0;
  _$jscoverage['dataapi/models-olap.js'][146] = 0;
  _$jscoverage['dataapi/models-olap.js'][147] = 0;
  _$jscoverage['dataapi/models-olap.js'][148] = 0;
  _$jscoverage['dataapi/models-olap.js'][149] = 0;
  _$jscoverage['dataapi/models-olap.js'][150] = 0;
  _$jscoverage['dataapi/models-olap.js'][154] = 0;
  _$jscoverage['dataapi/models-olap.js'][155] = 0;
  _$jscoverage['dataapi/models-olap.js'][156] = 0;
  _$jscoverage['dataapi/models-olap.js'][157] = 0;
  _$jscoverage['dataapi/models-olap.js'][159] = 0;
  _$jscoverage['dataapi/models-olap.js'][160] = 0;
  _$jscoverage['dataapi/models-olap.js'][161] = 0;
  _$jscoverage['dataapi/models-olap.js'][163] = 0;
  _$jscoverage['dataapi/models-olap.js'][169] = 0;
  _$jscoverage['dataapi/models-olap.js'][170] = 0;
  _$jscoverage['dataapi/models-olap.js'][171] = 0;
  _$jscoverage['dataapi/models-olap.js'][172] = 0;
  _$jscoverage['dataapi/models-olap.js'][173] = 0;
  _$jscoverage['dataapi/models-olap.js'][174] = 0;
  _$jscoverage['dataapi/models-olap.js'][175] = 0;
  _$jscoverage['dataapi/models-olap.js'][176] = 0;
  _$jscoverage['dataapi/models-olap.js'][177] = 0;
  _$jscoverage['dataapi/models-olap.js'][178] = 0;
  _$jscoverage['dataapi/models-olap.js'][179] = 0;
  _$jscoverage['dataapi/models-olap.js'][180] = 0;
  _$jscoverage['dataapi/models-olap.js'][183] = 0;
  _$jscoverage['dataapi/models-olap.js'][185] = 0;
  _$jscoverage['dataapi/models-olap.js'][189] = 0;
  _$jscoverage['dataapi/models-olap.js'][190] = 0;
  _$jscoverage['dataapi/models-olap.js'][191] = 0;
  _$jscoverage['dataapi/models-olap.js'][192] = 0;
  _$jscoverage['dataapi/models-olap.js'][194] = 0;
  _$jscoverage['dataapi/models-olap.js'][195] = 0;
  _$jscoverage['dataapi/models-olap.js'][196] = 0;
  _$jscoverage['dataapi/models-olap.js'][197] = 0;
  _$jscoverage['dataapi/models-olap.js'][199] = 0;
  _$jscoverage['dataapi/models-olap.js'][205] = 0;
  _$jscoverage['dataapi/models-olap.js'][206] = 0;
  _$jscoverage['dataapi/models-olap.js'][207] = 0;
  _$jscoverage['dataapi/models-olap.js'][208] = 0;
  _$jscoverage['dataapi/models-olap.js'][209] = 0;
  _$jscoverage['dataapi/models-olap.js'][210] = 0;
  _$jscoverage['dataapi/models-olap.js'][211] = 0;
  _$jscoverage['dataapi/models-olap.js'][212] = 0;
  _$jscoverage['dataapi/models-olap.js'][213] = 0;
  _$jscoverage['dataapi/models-olap.js'][214] = 0;
  _$jscoverage['dataapi/models-olap.js'][215] = 0;
  _$jscoverage['dataapi/models-olap.js'][216] = 0;
  _$jscoverage['dataapi/models-olap.js'][218] = 0;
  _$jscoverage['dataapi/models-olap.js'][221] = 0;
  _$jscoverage['dataapi/models-olap.js'][225] = 0;
  _$jscoverage['dataapi/models-olap.js'][227] = 0;
  _$jscoverage['dataapi/models-olap.js'][228] = 0;
  _$jscoverage['dataapi/models-olap.js'][229] = 0;
  _$jscoverage['dataapi/models-olap.js'][231] = 0;
  _$jscoverage['dataapi/models-olap.js'][232] = 0;
  _$jscoverage['dataapi/models-olap.js'][233] = 0;
  _$jscoverage['dataapi/models-olap.js'][234] = 0;
  _$jscoverage['dataapi/models-olap.js'][235] = 0;
  _$jscoverage['dataapi/models-olap.js'][237] = 0;
  _$jscoverage['dataapi/models-olap.js'][243] = 0;
  _$jscoverage['dataapi/models-olap.js'][245] = 0;
  _$jscoverage['dataapi/models-olap.js'][246] = 0;
  _$jscoverage['dataapi/models-olap.js'][247] = 0;
  _$jscoverage['dataapi/models-olap.js'][248] = 0;
  _$jscoverage['dataapi/models-olap.js'][249] = 0;
  _$jscoverage['dataapi/models-olap.js'][250] = 0;
  _$jscoverage['dataapi/models-olap.js'][251] = 0;
  _$jscoverage['dataapi/models-olap.js'][252] = 0;
  _$jscoverage['dataapi/models-olap.js'][253] = 0;
  _$jscoverage['dataapi/models-olap.js'][255] = 0;
  _$jscoverage['dataapi/models-olap.js'][256] = 0;
  _$jscoverage['dataapi/models-olap.js'][257] = 0;
  _$jscoverage['dataapi/models-olap.js'][259] = 0;
  _$jscoverage['dataapi/models-olap.js'][261] = 0;
  _$jscoverage['dataapi/models-olap.js'][262] = 0;
  _$jscoverage['dataapi/models-olap.js'][264] = 0;
  _$jscoverage['dataapi/models-olap.js'][265] = 0;
  _$jscoverage['dataapi/models-olap.js'][268] = 0;
  _$jscoverage['dataapi/models-olap.js'][269] = 0;
  _$jscoverage['dataapi/models-olap.js'][275] = 0;
  _$jscoverage['dataapi/models-olap.js'][277] = 0;
  _$jscoverage['dataapi/models-olap.js'][278] = 0;
  _$jscoverage['dataapi/models-olap.js'][279] = 0;
  _$jscoverage['dataapi/models-olap.js'][281] = 0;
  _$jscoverage['dataapi/models-olap.js'][282] = 0;
  _$jscoverage['dataapi/models-olap.js'][283] = 0;
  _$jscoverage['dataapi/models-olap.js'][284] = 0;
  _$jscoverage['dataapi/models-olap.js'][285] = 0;
  _$jscoverage['dataapi/models-olap.js'][286] = 0;
  _$jscoverage['dataapi/models-olap.js'][288] = 0;
  _$jscoverage['dataapi/models-olap.js'][294] = 0;
  _$jscoverage['dataapi/models-olap.js'][295] = 0;
  _$jscoverage['dataapi/models-olap.js'][296] = 0;
  _$jscoverage['dataapi/models-olap.js'][298] = 0;
  _$jscoverage['dataapi/models-olap.js'][299] = 0;
  _$jscoverage['dataapi/models-olap.js'][300] = 0;
  _$jscoverage['dataapi/models-olap.js'][301] = 0;
  _$jscoverage['dataapi/models-olap.js'][302] = 0;
  _$jscoverage['dataapi/models-olap.js'][303] = 0;
  _$jscoverage['dataapi/models-olap.js'][304] = 0;
  _$jscoverage['dataapi/models-olap.js'][305] = 0;
  _$jscoverage['dataapi/models-olap.js'][307] = 0;
  _$jscoverage['dataapi/models-olap.js'][311] = 0;
  _$jscoverage['dataapi/models-olap.js'][313] = 0;
  _$jscoverage['dataapi/models-olap.js'][314] = 0;
  _$jscoverage['dataapi/models-olap.js'][315] = 0;
  _$jscoverage['dataapi/models-olap.js'][317] = 0;
  _$jscoverage['dataapi/models-olap.js'][318] = 0;
  _$jscoverage['dataapi/models-olap.js'][319] = 0;
  _$jscoverage['dataapi/models-olap.js'][323] = 0;
  _$jscoverage['dataapi/models-olap.js'][328] = 0;
  _$jscoverage['dataapi/models-olap.js'][329] = 0;
  _$jscoverage['dataapi/models-olap.js'][330] = 0;
  _$jscoverage['dataapi/models-olap.js'][332] = 0;
  _$jscoverage['dataapi/models-olap.js'][333] = 0;
  _$jscoverage['dataapi/models-olap.js'][334] = 0;
  _$jscoverage['dataapi/models-olap.js'][335] = 0;
  _$jscoverage['dataapi/models-olap.js'][336] = 0;
  _$jscoverage['dataapi/models-olap.js'][337] = 0;
  _$jscoverage['dataapi/models-olap.js'][338] = 0;
  _$jscoverage['dataapi/models-olap.js'][340] = 0;
  _$jscoverage['dataapi/models-olap.js'][341] = 0;
  _$jscoverage['dataapi/models-olap.js'][342] = 0;
  _$jscoverage['dataapi/models-olap.js'][343] = 0;
  _$jscoverage['dataapi/models-olap.js'][344] = 0;
  _$jscoverage['dataapi/models-olap.js'][345] = 0;
  _$jscoverage['dataapi/models-olap.js'][346] = 0;
  _$jscoverage['dataapi/models-olap.js'][347] = 0;
  _$jscoverage['dataapi/models-olap.js'][348] = 0;
  _$jscoverage['dataapi/models-olap.js'][349] = 0;
  _$jscoverage['dataapi/models-olap.js'][352] = 0;
  _$jscoverage['dataapi/models-olap.js'][353] = 0;
  _$jscoverage['dataapi/models-olap.js'][354] = 0;
  _$jscoverage['dataapi/models-olap.js'][355] = 0;
  _$jscoverage['dataapi/models-olap.js'][356] = 0;
  _$jscoverage['dataapi/models-olap.js'][357] = 0;
  _$jscoverage['dataapi/models-olap.js'][359] = 0;
  _$jscoverage['dataapi/models-olap.js'][363] = 0;
  _$jscoverage['dataapi/models-olap.js'][364] = 0;
  _$jscoverage['dataapi/models-olap.js'][366] = 0;
  _$jscoverage['dataapi/models-olap.js'][367] = 0;
  _$jscoverage['dataapi/models-olap.js'][370] = 0;
  _$jscoverage['dataapi/models-olap.js'][373] = 0;
  _$jscoverage['dataapi/models-olap.js'][378] = 0;
  _$jscoverage['dataapi/models-olap.js'][379] = 0;
  _$jscoverage['dataapi/models-olap.js'][380] = 0;
  _$jscoverage['dataapi/models-olap.js'][384] = 0;
  _$jscoverage['dataapi/models-olap.js'][386] = 0;
  _$jscoverage['dataapi/models-olap.js'][388] = 0;
  _$jscoverage['dataapi/models-olap.js'][392] = 0;
  _$jscoverage['dataapi/models-olap.js'][395] = 0;
  _$jscoverage['dataapi/models-olap.js'][396] = 0;
  _$jscoverage['dataapi/models-olap.js'][397] = 0;
  _$jscoverage['dataapi/models-olap.js'][400] = 0;
  _$jscoverage['dataapi/models-olap.js'][404] = 0;
  _$jscoverage['dataapi/models-olap.js'][408] = 0;
  _$jscoverage['dataapi/models-olap.js'][409] = 0;
  _$jscoverage['dataapi/models-olap.js'][410] = 0;
  _$jscoverage['dataapi/models-olap.js'][412] = 0;
  _$jscoverage['dataapi/models-olap.js'][413] = 0;
  _$jscoverage['dataapi/models-olap.js'][414] = 0;
  _$jscoverage['dataapi/models-olap.js'][415] = 0;
  _$jscoverage['dataapi/models-olap.js'][416] = 0;
  _$jscoverage['dataapi/models-olap.js'][424] = 0;
  _$jscoverage['dataapi/models-olap.js'][426] = 0;
  _$jscoverage['dataapi/models-olap.js'][429] = 0;
  _$jscoverage['dataapi/models-olap.js'][430] = 0;
  _$jscoverage['dataapi/models-olap.js'][432] = 0;
  _$jscoverage['dataapi/models-olap.js'][438] = 0;
  _$jscoverage['dataapi/models-olap.js'][441] = 0;
  _$jscoverage['dataapi/models-olap.js'][442] = 0;
  _$jscoverage['dataapi/models-olap.js'][443] = 0;
  _$jscoverage['dataapi/models-olap.js'][444] = 0;
  _$jscoverage['dataapi/models-olap.js'][446] = 0;
  _$jscoverage['dataapi/models-olap.js'][447] = 0;
  _$jscoverage['dataapi/models-olap.js'][449] = 0;
  _$jscoverage['dataapi/models-olap.js'][451] = 0;
  _$jscoverage['dataapi/models-olap.js'][453] = 0;
  _$jscoverage['dataapi/models-olap.js'][456] = 0;
  _$jscoverage['dataapi/models-olap.js'][457] = 0;
  _$jscoverage['dataapi/models-olap.js'][458] = 0;
  _$jscoverage['dataapi/models-olap.js'][459] = 0;
  _$jscoverage['dataapi/models-olap.js'][462] = 0;
  _$jscoverage['dataapi/models-olap.js'][464] = 0;
  _$jscoverage['dataapi/models-olap.js'][465] = 0;
  _$jscoverage['dataapi/models-olap.js'][481] = 0;
  _$jscoverage['dataapi/models-olap.js'][482] = 0;
  _$jscoverage['dataapi/models-olap.js'][483] = 0;
  _$jscoverage['dataapi/models-olap.js'][484] = 0;
  _$jscoverage['dataapi/models-olap.js'][485] = 0;
  _$jscoverage['dataapi/models-olap.js'][490] = 0;
  _$jscoverage['dataapi/models-olap.js'][493] = 0;
  _$jscoverage['dataapi/models-olap.js'][496] = 0;
  _$jscoverage['dataapi/models-olap.js'][497] = 0;
  _$jscoverage['dataapi/models-olap.js'][498] = 0;
  _$jscoverage['dataapi/models-olap.js'][502] = 0;
  _$jscoverage['dataapi/models-olap.js'][509] = 0;
  _$jscoverage['dataapi/models-olap.js'][510] = 0;
  _$jscoverage['dataapi/models-olap.js'][511] = 0;
  _$jscoverage['dataapi/models-olap.js'][513] = 0;
  _$jscoverage['dataapi/models-olap.js'][514] = 0;
  _$jscoverage['dataapi/models-olap.js'][515] = 0;
  _$jscoverage['dataapi/models-olap.js'][516] = 0;
  _$jscoverage['dataapi/models-olap.js'][526] = 0;
  _$jscoverage['dataapi/models-olap.js'][533] = 0;
  _$jscoverage['dataapi/models-olap.js'][538] = 0;
  _$jscoverage['dataapi/models-olap.js'][539] = 0;
  _$jscoverage['dataapi/models-olap.js'][540] = 0;
  _$jscoverage['dataapi/models-olap.js'][541] = 0;
  _$jscoverage['dataapi/models-olap.js'][548] = 0;
  _$jscoverage['dataapi/models-olap.js'][549] = 0;
  _$jscoverage['dataapi/models-olap.js'][550] = 0;
  _$jscoverage['dataapi/models-olap.js'][551] = 0;
  _$jscoverage['dataapi/models-olap.js'][552] = 0;
  _$jscoverage['dataapi/models-olap.js'][555] = 0;
  _$jscoverage['dataapi/models-olap.js'][557] = 0;
  _$jscoverage['dataapi/models-olap.js'][559] = 0;
  _$jscoverage['dataapi/models-olap.js'][562] = 0;
  _$jscoverage['dataapi/models-olap.js'][564] = 0;
  _$jscoverage['dataapi/models-olap.js'][567] = 0;
  _$jscoverage['dataapi/models-olap.js'][572] = 0;
  _$jscoverage['dataapi/models-olap.js'][573] = 0;
  _$jscoverage['dataapi/models-olap.js'][574] = 0;
  _$jscoverage['dataapi/models-olap.js'][575] = 0;
  _$jscoverage['dataapi/models-olap.js'][576] = 0;
  _$jscoverage['dataapi/models-olap.js'][580] = 0;
  _$jscoverage['dataapi/models-olap.js'][581] = 0;
  _$jscoverage['dataapi/models-olap.js'][583] = 0;
  _$jscoverage['dataapi/models-olap.js'][592] = 0;
  _$jscoverage['dataapi/models-olap.js'][593] = 0;
  _$jscoverage['dataapi/models-olap.js'][595] = 0;
  _$jscoverage['dataapi/models-olap.js'][605] = 0;
  _$jscoverage['dataapi/models-olap.js'][607] = 0;
  _$jscoverage['dataapi/models-olap.js'][608] = 0;
  _$jscoverage['dataapi/models-olap.js'][611] = 0;
  _$jscoverage['dataapi/models-olap.js'][612] = 0;
  _$jscoverage['dataapi/models-olap.js'][615] = 0;
  _$jscoverage['dataapi/models-olap.js'][616] = 0;
  _$jscoverage['dataapi/models-olap.js'][619] = 0;
  _$jscoverage['dataapi/models-olap.js'][620] = 0;
  _$jscoverage['dataapi/models-olap.js'][624] = 0;
  _$jscoverage['dataapi/models-olap.js'][627] = 0;
  _$jscoverage['dataapi/models-olap.js'][628] = 0;
  _$jscoverage['dataapi/models-olap.js'][631] = 0;
  _$jscoverage['dataapi/models-olap.js'][632] = 0;
  _$jscoverage['dataapi/models-olap.js'][638] = 0;
  _$jscoverage['dataapi/models-olap.js'][641] = 0;
  _$jscoverage['dataapi/models-olap.js'][642] = 0;
  _$jscoverage['dataapi/models-olap.js'][643] = 0;
  _$jscoverage['dataapi/models-olap.js'][644] = 0;
  _$jscoverage['dataapi/models-olap.js'][645] = 0;
  _$jscoverage['dataapi/models-olap.js'][646] = 0;
  _$jscoverage['dataapi/models-olap.js'][647] = 0;
  _$jscoverage['dataapi/models-olap.js'][648] = 0;
  _$jscoverage['dataapi/models-olap.js'][650] = 0;
  _$jscoverage['dataapi/models-olap.js'][652] = 0;
  _$jscoverage['dataapi/models-olap.js'][653] = 0;
  _$jscoverage['dataapi/models-olap.js'][654] = 0;
  _$jscoverage['dataapi/models-olap.js'][656] = 0;
  _$jscoverage['dataapi/models-olap.js'][659] = 0;
  _$jscoverage['dataapi/models-olap.js'][660] = 0;
  _$jscoverage['dataapi/models-olap.js'][663] = 0;
  _$jscoverage['dataapi/models-olap.js'][664] = 0;
  _$jscoverage['dataapi/models-olap.js'][665] = 0;
  _$jscoverage['dataapi/models-olap.js'][667] = 0;
  _$jscoverage['dataapi/models-olap.js'][668] = 0;
  _$jscoverage['dataapi/models-olap.js'][669] = 0;
  _$jscoverage['dataapi/models-olap.js'][671] = 0;
  _$jscoverage['dataapi/models-olap.js'][674] = 0;
  _$jscoverage['dataapi/models-olap.js'][676] = 0;
  _$jscoverage['dataapi/models-olap.js'][677] = 0;
  _$jscoverage['dataapi/models-olap.js'][679] = 0;
  _$jscoverage['dataapi/models-olap.js'][680] = 0;
  _$jscoverage['dataapi/models-olap.js'][684] = 0;
  _$jscoverage['dataapi/models-olap.js'][688] = 0;
  _$jscoverage['dataapi/models-olap.js'][690] = 0;
  _$jscoverage['dataapi/models-olap.js'][694] = 0;
  _$jscoverage['dataapi/models-olap.js'][696] = 0;
  _$jscoverage['dataapi/models-olap.js'][698] = 0;
  _$jscoverage['dataapi/models-olap.js'][703] = 0;
  _$jscoverage['dataapi/models-olap.js'][704] = 0;
  _$jscoverage['dataapi/models-olap.js'][705] = 0;
  _$jscoverage['dataapi/models-olap.js'][706] = 0;
  _$jscoverage['dataapi/models-olap.js'][707] = 0;
  _$jscoverage['dataapi/models-olap.js'][708] = 0;
  _$jscoverage['dataapi/models-olap.js'][712] = 0;
  _$jscoverage['dataapi/models-olap.js'][713] = 0;
  _$jscoverage['dataapi/models-olap.js'][715] = 0;
  _$jscoverage['dataapi/models-olap.js'][716] = 0;
  _$jscoverage['dataapi/models-olap.js'][718] = 0;
  _$jscoverage['dataapi/models-olap.js'][719] = 0;
  _$jscoverage['dataapi/models-olap.js'][720] = 0;
  _$jscoverage['dataapi/models-olap.js'][723] = 0;
  _$jscoverage['dataapi/models-olap.js'][724] = 0;
  _$jscoverage['dataapi/models-olap.js'][725] = 0;
  _$jscoverage['dataapi/models-olap.js'][726] = 0;
  _$jscoverage['dataapi/models-olap.js'][728] = 0;
  _$jscoverage['dataapi/models-olap.js'][730] = 0;
  _$jscoverage['dataapi/models-olap.js'][734] = 0;
  _$jscoverage['dataapi/models-olap.js'][736] = 0;
  _$jscoverage['dataapi/models-olap.js'][737] = 0;
  _$jscoverage['dataapi/models-olap.js'][738] = 0;
  _$jscoverage['dataapi/models-olap.js'][741] = 0;
  _$jscoverage['dataapi/models-olap.js'][742] = 0;
  _$jscoverage['dataapi/models-olap.js'][745] = 0;
  _$jscoverage['dataapi/models-olap.js'][746] = 0;
  _$jscoverage['dataapi/models-olap.js'][747] = 0;
  _$jscoverage['dataapi/models-olap.js'][748] = 0;
  _$jscoverage['dataapi/models-olap.js'][750] = 0;
  _$jscoverage['dataapi/models-olap.js'][752] = 0;
  _$jscoverage['dataapi/models-olap.js'][756] = 0;
  _$jscoverage['dataapi/models-olap.js'][758] = 0;
  _$jscoverage['dataapi/models-olap.js'][760] = 0;
  _$jscoverage['dataapi/models-olap.js'][763] = 0;
  _$jscoverage['dataapi/models-olap.js'][764] = 0;
  _$jscoverage['dataapi/models-olap.js'][766] = 0;
  _$jscoverage['dataapi/models-olap.js'][768] = 0;
  _$jscoverage['dataapi/models-olap.js'][769] = 0;
  _$jscoverage['dataapi/models-olap.js'][770] = 0;
  _$jscoverage['dataapi/models-olap.js'][771] = 0;
  _$jscoverage['dataapi/models-olap.js'][773] = 0;
  _$jscoverage['dataapi/models-olap.js'][774] = 0;
  _$jscoverage['dataapi/models-olap.js'][775] = 0;
  _$jscoverage['dataapi/models-olap.js'][776] = 0;
  _$jscoverage['dataapi/models-olap.js'][779] = 0;
  _$jscoverage['dataapi/models-olap.js'][780] = 0;
  _$jscoverage['dataapi/models-olap.js'][781] = 0;
  _$jscoverage['dataapi/models-olap.js'][782] = 0;
  _$jscoverage['dataapi/models-olap.js'][783] = 0;
  _$jscoverage['dataapi/models-olap.js'][786] = 0;
  _$jscoverage['dataapi/models-olap.js'][787] = 0;
  _$jscoverage['dataapi/models-olap.js'][788] = 0;
  _$jscoverage['dataapi/models-olap.js'][789] = 0;
  _$jscoverage['dataapi/models-olap.js'][792] = 0;
  _$jscoverage['dataapi/models-olap.js'][793] = 0;
  _$jscoverage['dataapi/models-olap.js'][794] = 0;
  _$jscoverage['dataapi/models-olap.js'][795] = 0;
  _$jscoverage['dataapi/models-olap.js'][796] = 0;
  _$jscoverage['dataapi/models-olap.js'][797] = 0;
  _$jscoverage['dataapi/models-olap.js'][802] = 0;
  _$jscoverage['dataapi/models-olap.js'][803] = 0;
  _$jscoverage['dataapi/models-olap.js'][804] = 0;
  _$jscoverage['dataapi/models-olap.js'][806] = 0;
  _$jscoverage['dataapi/models-olap.js'][810] = 0;
  _$jscoverage['dataapi/models-olap.js'][811] = 0;
  _$jscoverage['dataapi/models-olap.js'][812] = 0;
  _$jscoverage['dataapi/models-olap.js'][813] = 0;
  _$jscoverage['dataapi/models-olap.js'][815] = 0;
  _$jscoverage['dataapi/models-olap.js'][816] = 0;
  _$jscoverage['dataapi/models-olap.js'][817] = 0;
  _$jscoverage['dataapi/models-olap.js'][819] = 0;
  _$jscoverage['dataapi/models-olap.js'][821] = 0;
  _$jscoverage['dataapi/models-olap.js'][822] = 0;
  _$jscoverage['dataapi/models-olap.js'][824] = 0;
  _$jscoverage['dataapi/models-olap.js'][827] = 0;
  _$jscoverage['dataapi/models-olap.js'][830] = 0;
  _$jscoverage['dataapi/models-olap.js'][831] = 0;
  _$jscoverage['dataapi/models-olap.js'][832] = 0;
  _$jscoverage['dataapi/models-olap.js'][833] = 0;
  _$jscoverage['dataapi/models-olap.js'][834] = 0;
  _$jscoverage['dataapi/models-olap.js'][835] = 0;
  _$jscoverage['dataapi/models-olap.js'][836] = 0;
  _$jscoverage['dataapi/models-olap.js'][837] = 0;
  _$jscoverage['dataapi/models-olap.js'][838] = 0;
  _$jscoverage['dataapi/models-olap.js'][839] = 0;
  _$jscoverage['dataapi/models-olap.js'][841] = 0;
  _$jscoverage['dataapi/models-olap.js'][842] = 0;
  _$jscoverage['dataapi/models-olap.js'][843] = 0;
  _$jscoverage['dataapi/models-olap.js'][844] = 0;
  _$jscoverage['dataapi/models-olap.js'][845] = 0;
  _$jscoverage['dataapi/models-olap.js'][849] = 0;
  _$jscoverage['dataapi/models-olap.js'][851] = 0;
  _$jscoverage['dataapi/models-olap.js'][852] = 0;
  _$jscoverage['dataapi/models-olap.js'][855] = 0;
  _$jscoverage['dataapi/models-olap.js'][856] = 0;
  _$jscoverage['dataapi/models-olap.js'][858] = 0;
}
_$jscoverage['dataapi/models-olap.js'].source = ["","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>OlapHandler <span class=\"k\">=</span> <span class=\"k\">function</span> OlapHandler<span class=\"k\">(</span>sandbox<span class=\"k\">)</span> <span class=\"k\">{</span>","\tpentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Handler<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> sandbox<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>SOURCE_TYPE_OLAP<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>XMLA_SERVICE_URL <span class=\"k\">=</span> <span class=\"s\">'/pentaho/Xmla'</span><span class=\"k\">;</span> <span class=\"c\">// TODO this URL should be relative</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>datasourceCache <span class=\"k\">=</span> <span class=\"k\">[];</span>","<span class=\"k\">}</span>","","inheritPrototype<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>OlapHandler<span class=\"k\">,</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Handler<span class=\"k\">);</span> <span class=\"c\">//borrow the parent's methods</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>OlapHandler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getSources <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>callback<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","    options <span class=\"k\">=</span> options <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> filter <span class=\"k\">=</span> options<span class=\"k\">[</span><span class=\"s\">'filter'</span><span class=\"k\">];</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>xmla <span class=\"k\">=</span> <span class=\"k\">new</span> Xmla<span class=\"k\">(</span><span class=\"k\">{</span>","            async<span class=\"k\">:</span> <span class=\"k\">false</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","        ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>datasourceCache<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>filter <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>j<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>datasourceCache<span class=\"k\">.</span>length<span class=\"k\">;</span>i<span class=\"k\">&lt;</span>j<span class=\"k\">;</span>i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\t\t\tcallback<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>datasourceCache<span class=\"k\">[</span>i<span class=\"k\">]);</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>j<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>datasourceCache<span class=\"k\">.</span>length<span class=\"k\">;</span>i<span class=\"k\">&lt;</span>j<span class=\"k\">;</span>i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\t\t\teach <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>datasourceCache<span class=\"k\">[</span>i<span class=\"k\">];</span>","\t\t\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>each<span class=\"k\">[</span>filter<span class=\"k\">.</span>property<span class=\"k\">]</span> <span class=\"k\">==</span> filter<span class=\"k\">.</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tcallback<span class=\"k\">(</span>each<span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"c\">//just move on to next</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","","","        <span class=\"k\">this</span><span class=\"k\">.</span>datasourceCache <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t\t<span class=\"k\">var</span> that <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"c\">//        try {</span>","","            <span class=\"c\">// get the data sources</span>","            <span class=\"k\">var</span> rowset1 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmla<span class=\"k\">.</span>discoverDataSources<span class=\"k\">(</span><span class=\"k\">{</span>","                url<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>XMLA_SERVICE_URL","            <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>rowset1<span class=\"k\">.</span>hasMoreRows<span class=\"k\">())</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>datasourceCache <span class=\"k\">=</span> rowset1<span class=\"k\">.</span>fetchAllAsObject<span class=\"k\">();</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> numDataSources <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>datasourceCache<span class=\"k\">.</span>length<span class=\"k\">,</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>numDataSources<span class=\"k\">;</span> i<span class=\"k\">++)</span><span class=\"k\">{</span>","                        ","                    <span class=\"c\">// get the catalogs for this data source</span>","                    <span class=\"k\">var</span> datasource <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>datasourceCache<span class=\"k\">[</span>i<span class=\"k\">];</span>","                    <span class=\"k\">var</span> properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                    <span class=\"k\">var</span> url <span class=\"k\">=</span> datasource<span class=\"k\">[</span><span class=\"s\">\"URL\"</span><span class=\"k\">]?</span>datasource<span class=\"k\">[</span><span class=\"s\">\"URL\"</span><span class=\"k\">]:</span><span class=\"k\">this</span><span class=\"k\">.</span>XMLA_SERVICE_URL<span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>url<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'http'</span><span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"c\">// we need a relative URL to avoid cross-domain issues</span>","                        url <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>XMLA_SERVICE_URL<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_DATASOURCEINFO<span class=\"k\">]</span> <span class=\"k\">=</span> datasource<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_DATASOURCEINFO<span class=\"k\">];</span>","                    <span class=\"k\">var</span> rowset2 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmla<span class=\"k\">.</span>discoverDBCatalogs<span class=\"k\">(</span><span class=\"k\">{</span>","                        url<span class=\"k\">:</span> url<span class=\"k\">,</span>","                        properties<span class=\"k\">:</span> properties","                    <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>rowset2<span class=\"k\">.</span>hasMoreRows<span class=\"k\">())</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> catalog<span class=\"k\">;</span>","                        <span class=\"k\">while</span> <span class=\"k\">(</span>catalog <span class=\"k\">=</span> rowset2<span class=\"k\">.</span>fetchAsObject<span class=\"k\">())</span><span class=\"k\">{</span>","                        ","                            <span class=\"c\">// get the cubes for this catalog</span>","                            <span class=\"k\">var</span> catalogName <span class=\"k\">=</span> catalog<span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">];</span>","                            <span class=\"k\">var</span> properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                            properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_DATASOURCEINFO<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>datasourceCache<span class=\"k\">[</span>i<span class=\"k\">].</span>DataSourceName<span class=\"k\">;</span>","                            properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_CATALOG<span class=\"k\">]</span> <span class=\"k\">=</span> catalogName<span class=\"k\">;</span>","","                            <span class=\"k\">var</span> restrictions <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                            restrictions<span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> catalogName<span class=\"k\">;</span>","","                            <span class=\"k\">var</span> rowset3 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmla<span class=\"k\">.</span>discoverMDCubes<span class=\"k\">(</span><span class=\"k\">{</span>","                                url<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>XMLA_SERVICE_URL","                            <span class=\"k\">,</span>   properties<span class=\"k\">:</span> properties","                            <span class=\"k\">,</span>   restrictions<span class=\"k\">:</span> restrictions","                            <span class=\"k\">}</span><span class=\"k\">);</span>","                   ","                            <span class=\"k\">var</span> loader<span class=\"k\">,</span> id<span class=\"k\">,</span> cubeName<span class=\"k\">;</span>","                            <span class=\"k\">while</span> <span class=\"k\">(</span>rowset3<span class=\"k\">.</span>hasMoreRows<span class=\"k\">())</span><span class=\"k\">{</span>","                                <span class=\"k\">var</span> cubeName <span class=\"k\">=</span> rowset3<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span><span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">);</span>","                                <span class=\"k\">var</span> id <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>datasourceCache<span class=\"k\">[</span>i<span class=\"k\">].</span>DataSourceName<span class=\"k\">+</span><span class=\"s\">'</span><span class=\"t\">\\t</span><span class=\"s\">'</span><span class=\"k\">+</span>catalogName<span class=\"k\">+</span><span class=\"s\">'</span><span class=\"t\">\\t</span><span class=\"s\">'</span><span class=\"k\">+</span>cubeName<span class=\"k\">;</span>","                                <span class=\"k\">var</span> datasource <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">(</span>","\t\t\t\t\t\t\t\t\t<span class=\"k\">{</span>id<span class=\"k\">:</span>id<span class=\"k\">,</span>","\t\t\t\t\t\t\t\t\tname<span class=\"k\">:</span>catalog<span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">],</span>","\t\t\t\t\t\t\t\t\ttype<span class=\"k\">:</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>SOURCE_TYPE_OLAP<span class=\"k\">,</span>","\t\t\t\t\t\t\t\t\tdescription<span class=\"k\">:</span><span class=\"s\">''</span>","\t\t\t\t\t\t\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","                                datasource<span class=\"k\">.</span>xmlaDatasource <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>datasourceCache<span class=\"k\">[</span>i<span class=\"k\">].</span>DataSourceName<span class=\"k\">;</span>","                                datasource<span class=\"k\">.</span>catalog <span class=\"k\">=</span> catalogName<span class=\"k\">;</span>","                                datasource<span class=\"k\">.</span>cubeName <span class=\"k\">=</span> cubeName<span class=\"k\">;</span>","\t\t\t\t\t\t\t\tdatasource<span class=\"k\">.</span>xmla <span class=\"k\">=</span> that<span class=\"k\">.</span>xmla<span class=\"k\">;</span>","\t\t\t\t\t\t\t\tdatasource<span class=\"k\">.</span>XMLA_SERVICE_URL <span class=\"k\">=</span> that<span class=\"k\">.</span>XMLA_SERVICE_URL","                                <span class=\"k\">this</span><span class=\"k\">.</span>sources<span class=\"k\">.</span>push<span class=\"k\">(</span>datasource<span class=\"k\">);</span>","                                rowset3<span class=\"k\">.</span>next<span class=\"k\">();</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>                        ","                    <span class=\"k\">}</span> ","                    <span class=\"k\">else</span> <span class=\"k\">{</span>","                        section_error<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"No datasources found\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                callback<span class=\"k\">(</span>datasource<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","<span class=\"c\">//        } catch (e) {</span>","<span class=\"c\">//            alert( e.message );</span>","<span class=\"c\">//        }</span>","\t\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>sources<span class=\"k\">;</span>","    <span class=\"k\">}</span> <span class=\"c\">//discoverModels</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","\tpentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> obj<span class=\"k\">);</span> <span class=\"c\">//call parent object</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>xmlaDatasource <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>catalog <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>cubeName <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'xmla'</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","inheritPrototype<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">,</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">);</span> <span class=\"c\">//borrow the parent's methods</span>","","\t","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>discoverModelDetail <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> forceLoad <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"c\">// create a model object</span>","        <span class=\"c\">//var id = datasourceConfig.id;</span>","        <span class=\"c\">//var name = datasourceConfig.name;</span>","        <span class=\"c\">//var model = new pentaho.pda.model()</span>","","        <span class=\"c\">//model.xmlaDatasource = datasourceConfig.xmlaDatasource;</span>","        <span class=\"c\">//model.catalog = datasourceConfig.catalog;</span>","        <span class=\"c\">//model.cubeName = datasourceConfig.cubeName;</span>","","        <span class=\"c\">// populate the model with the dimensions</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>categories <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"c\">//try {</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>discoverDimensions<span class=\"k\">(</span> <span class=\"k\">);</span>","        <span class=\"c\">//} catch ( e ) { alert(e.message) };</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>addCapability<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>CAPABILITIES<span class=\"k\">.</span>HAS_ACROSS_AXIS<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>addCapability<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>CAPABILITIES<span class=\"k\">.</span>IS_ACROSS_CUSTOM<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>addCapability<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>CAPABILITIES<span class=\"k\">.</span>HAS_DOWN_AXIS<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>addCapability<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>CAPABILITIES<span class=\"k\">.</span>IS_DOWN_CUSTOM<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>addCapability<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>CAPABILITIES<span class=\"k\">.</span>HAS_FILTERS<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>addCapability<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>CAPABILITIES<span class=\"k\">.</span>IS_FILTER_CUSTOM<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>addCapability<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>CAPABILITIES<span class=\"k\">.</span>CAN_SORT<span class=\"k\">);</span>","","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>discoverDimensions <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span> <span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_DATASOURCEINFO<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmlaDatasource<span class=\"k\">;</span>","        properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_CATALOG<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>catalog<span class=\"k\">;</span>","","        <span class=\"k\">var</span> restrictions <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>catalog<span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cubeName<span class=\"k\">;</span>","","        <span class=\"k\">var</span> rowset <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmla<span class=\"k\">.</span>discoverMDDimensions<span class=\"k\">(</span><span class=\"k\">{</span>","            url<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>XMLA_SERVICE_URL","        <span class=\"k\">,</span>   properties<span class=\"k\">:</span> properties","        <span class=\"k\">,</span>   restrictions<span class=\"k\">:</span> restrictions","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"k\">while</span> <span class=\"k\">(</span>rowset<span class=\"k\">.</span>hasMoreRows<span class=\"k\">())</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> dimensionName <span class=\"k\">=</span> rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span><span class=\"s\">\"DIMENSION_NAME\"</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> dimensionUniqueName <span class=\"k\">=</span> rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span><span class=\"s\">\"DIMENSION_UNIQUE_NAME\"</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> dimensionType <span class=\"k\">=</span> rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span><span class=\"s\">\"DIMENSION_TYPE\"</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> dimension <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>dataelement<span class=\"k\">();</span>","            dimension<span class=\"k\">.</span>dataType <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>NONE<span class=\"k\">;</span>","            dimension<span class=\"k\">.</span>elementType <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>DIMENSION<span class=\"k\">;</span>","            dimension<span class=\"k\">.</span>id <span class=\"k\">=</span> dimensionUniqueName<span class=\"k\">;</span>","            dimension<span class=\"k\">.</span>name <span class=\"k\">=</span> dimensionName<span class=\"k\">;</span>","            dimension<span class=\"k\">.</span>isMeasures <span class=\"k\">=</span> dimensionType <span class=\"k\">==</span> <span class=\"s\">'2'</span><span class=\"k\">;</span>","            dimension<span class=\"k\">.</span>isTime <span class=\"k\">=</span> dimensionType <span class=\"k\">==</span> <span class=\"s\">'1'</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addElement<span class=\"k\">(</span> dimension <span class=\"k\">);</span>","            ","            <span class=\"c\">// get the hierarchies for this dimension</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>discoverHierarchies<span class=\"k\">(</span> dimension <span class=\"k\">);</span>","            ","            rowset<span class=\"k\">.</span>next<span class=\"k\">();</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","                        ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>discoverHierarchies <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>dimension <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_DATASOURCEINFO<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmlaDatasource<span class=\"k\">;</span>","        properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_CATALOG<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>catalog<span class=\"k\">;</span>","","        <span class=\"k\">var</span> restrictions <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>catalog<span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cubeName<span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"DIMENSION_UNIQUE_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> dimension<span class=\"k\">.</span>id<span class=\"k\">;</span>","","        <span class=\"k\">var</span> rowset <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmla<span class=\"k\">.</span>discoverMDHierarchies<span class=\"k\">(</span><span class=\"k\">{</span>","            url<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>XMLA_SERVICE_URL","        <span class=\"k\">,</span>   properties<span class=\"k\">:</span> properties","        <span class=\"k\">,</span>   restrictions<span class=\"k\">:</span> restrictions","        <span class=\"k\">}</span><span class=\"k\">);</span>","       ","        <span class=\"k\">while</span> <span class=\"k\">(</span>rowset<span class=\"k\">.</span>hasMoreRows<span class=\"k\">())</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> hierarchyName <span class=\"k\">=</span> rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span><span class=\"s\">\"HIERARCHY_NAME\"</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> hierarchyUniqueName <span class=\"k\">=</span> rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span><span class=\"s\">\"HIERARCHY_UNIQUE_NAME\"</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> hierarchy <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>dataelement<span class=\"k\">();</span>","            hierarchy<span class=\"k\">.</span>dataType <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>NONE<span class=\"k\">;</span>","            hierarchy<span class=\"k\">.</span>elementType <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>HIERARCHY<span class=\"k\">;</span>","            hierarchy<span class=\"k\">.</span>id <span class=\"k\">=</span> hierarchyUniqueName<span class=\"k\">;</span>","            hierarchy<span class=\"k\">.</span>name <span class=\"k\">=</span> hierarchyName<span class=\"k\">;</span>","            hierarchy<span class=\"k\">.</span>parent <span class=\"k\">=</span> dimension<span class=\"k\">;</span>","            dimension<span class=\"k\">.</span>addChild<span class=\"k\">(</span> hierarchy <span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addElement<span class=\"k\">(</span> hierarchy <span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>categories<span class=\"k\">.</span>push<span class=\"k\">(</span>hierarchy<span class=\"k\">);</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>discoverLevels<span class=\"k\">(</span> dimension<span class=\"k\">,</span> hierarchy <span class=\"k\">);</span>","            ","            <span class=\"c\">// get the levels for this hierarchy</span>","            rowset<span class=\"k\">.</span>next<span class=\"k\">();</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>discoverLevels <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> dimension<span class=\"k\">,</span> hierarchy <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">var</span> properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_DATASOURCEINFO<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmlaDatasource<span class=\"k\">;</span>","        properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_CATALOG<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>catalog<span class=\"k\">;</span>","","        <span class=\"k\">var</span> restrictions <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>catalog<span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cubeName<span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"DIMENSION_UNIQUE_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> dimension<span class=\"k\">.</span>id<span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"HIERARCHY_UNIQUE_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> hierarchy<span class=\"k\">.</span>id<span class=\"k\">;</span>","","        <span class=\"k\">var</span> rowset <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmla<span class=\"k\">.</span>discoverMDLevels<span class=\"k\">(</span><span class=\"k\">{</span>","            url<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>XMLA_SERVICE_URL","        <span class=\"k\">,</span>   properties<span class=\"k\">:</span> properties","        <span class=\"k\">,</span>   restrictions<span class=\"k\">:</span> restrictions","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"k\">var</span> parent <span class=\"k\">=</span> hierarchy","","        <span class=\"k\">while</span> <span class=\"k\">(</span>rowset<span class=\"k\">.</span>hasMoreRows<span class=\"k\">())</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> levelName <span class=\"k\">=</span> rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span><span class=\"s\">\"LEVEL_CAPTION\"</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> levelNumber <span class=\"k\">=</span> rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span><span class=\"s\">\"LEVEL_NUMBER\"</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> level <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>dataelement<span class=\"k\">();</span>","            level<span class=\"k\">.</span>dataType <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>STRING<span class=\"k\">;</span>","            level<span class=\"k\">.</span>elementType <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>LEVEL<span class=\"k\">;</span>","            level<span class=\"k\">.</span>id <span class=\"k\">=</span> rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span><span class=\"s\">\"LEVEL_UNIQUE_NAME\"</span><span class=\"k\">);</span>","            level<span class=\"k\">.</span>name <span class=\"k\">=</span> levelName<span class=\"k\">;</span>","            level<span class=\"k\">.</span>number <span class=\"k\">=</span> levelNumber<span class=\"k\">;</span>","<span class=\"c\">//            level.type = rowset.fieldVal(\"LEVEL_DBTYPE\");</span>","            level<span class=\"k\">.</span>parent <span class=\"k\">=</span> parent<span class=\"k\">;</span>","            hierarchy<span class=\"k\">.</span>addChild<span class=\"k\">(</span> level <span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addElement<span class=\"k\">(</span> level <span class=\"k\">);</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span> dimension<span class=\"k\">.</span>isMeasures <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// now get the measures</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>discoverMeasures<span class=\"k\">(</span> dimension<span class=\"k\">,</span> hierarchy<span class=\"k\">,</span> level <span class=\"k\">);</span>","                level<span class=\"k\">.</span>isQueryElement <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                level<span class=\"k\">.</span>category <span class=\"k\">=</span> hierarchy<span class=\"k\">;</span>","                level<span class=\"k\">.</span>isQueryElement <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            parent <span class=\"k\">=</span> level<span class=\"k\">;</span>","            rowset<span class=\"k\">.</span>next<span class=\"k\">();</span>","        <span class=\"k\">}</span>","        ","        ","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>discoverMembers <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> dimension<span class=\"k\">,</span> hierarchy<span class=\"k\">,</span> level <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">var</span> properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_DATASOURCEINFO<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmlaDatasource<span class=\"k\">;</span>","        properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_CATALOG<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>catalog<span class=\"k\">;</span>","","        <span class=\"k\">var</span> restrictions <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>catalog<span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cubeName<span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"DIMENSION_UNIQUE_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> dimension<span class=\"k\">.</span>id<span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"HIERARCHY_UNIQUE_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> hierarchy<span class=\"k\">.</span>id<span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"LEVEL_NUMBER\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> level<span class=\"k\">.</span>id<span class=\"k\">;</span>","","        <span class=\"k\">var</span> rowset <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmla<span class=\"k\">.</span>discoverMDMembers<span class=\"k\">(</span><span class=\"k\">{</span>","            url<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>XMLA_SERVICE_URL","        <span class=\"k\">,</span>   properties<span class=\"k\">:</span> properties","        <span class=\"k\">,</span>   restrictions<span class=\"k\">:</span> restrictions","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"k\">while</span> <span class=\"k\">(</span>rowset<span class=\"k\">.</span>hasMoreRows<span class=\"k\">())</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> memberName <span class=\"k\">=</span> rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span><span class=\"s\">\"MEMBER_NAME\"</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> memberUniqueName <span class=\"k\">=</span> rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span><span class=\"s\">\"MEMBER_NAME\"</span><span class=\"k\">);</span>","            ","            <span class=\"k\">var</span> measure <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>dataelement<span class=\"k\">();</span>","            measure<span class=\"k\">.</span>dataType <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>NUMERIC<span class=\"k\">;</span>","            measure<span class=\"k\">.</span>elementType <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>FACT<span class=\"k\">;</span>","            measure<span class=\"k\">.</span>id <span class=\"k\">=</span> memberUniqueName<span class=\"k\">;</span>","            measure<span class=\"k\">.</span>name <span class=\"k\">=</span> memberName<span class=\"k\">;</span>","            measure<span class=\"k\">.</span>parent <span class=\"k\">=</span> level<span class=\"k\">;</span>","            level<span class=\"k\">.</span>addChild<span class=\"k\">(</span> measure <span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addElement<span class=\"k\">(</span> measure <span class=\"k\">);</span>","","            rowset<span class=\"k\">.</span>next<span class=\"k\">();</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>discoverMeasures <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> dimension<span class=\"k\">,</span> hierarchy<span class=\"k\">,</span> level <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">var</span> properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_DATASOURCEINFO<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmlaDatasource<span class=\"k\">;</span>","        properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_CATALOG<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>catalog<span class=\"k\">;</span>","","        <span class=\"k\">var</span> restrictions <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>catalog<span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cubeName<span class=\"k\">;</span>","<span class=\"c\">//        restrictions[\"DIMENSION_UNIQUE_NAME\"] = dimension.id;</span>","<span class=\"c\">//        restrictions[\"HIERARCHY_UNIQUE_NAME\"] = hierarchy.id;</span>","<span class=\"c\">//        restrictions[\"LEVEL_NUMBER\"] = level.id;</span>","        <span class=\"k\">var</span> rowset <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmla<span class=\"k\">.</span>discoverMDMeasures<span class=\"k\">(</span><span class=\"k\">{</span>","            url<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>XMLA_SERVICE_URL","        <span class=\"k\">,</span>   properties<span class=\"k\">:</span> properties","        <span class=\"k\">,</span>   restrictions<span class=\"k\">:</span> restrictions","        <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">while</span> <span class=\"k\">(</span>rowset<span class=\"k\">.</span>hasMoreRows<span class=\"k\">())</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> memberName <span class=\"k\">=</span> rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span><span class=\"s\">\"MEASURE_NAME\"</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> memberUniqueName <span class=\"k\">=</span> rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span><span class=\"s\">\"MEASURE_UNIQUE_NAME\"</span><span class=\"k\">);</span>","            ","            <span class=\"k\">var</span> measure <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>dataelement<span class=\"k\">();</span>","            measure<span class=\"k\">.</span>dataType <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>NUMERIC<span class=\"k\">;</span>","            measure<span class=\"k\">.</span>elementType <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>FACT<span class=\"k\">;</span>","            measure<span class=\"k\">.</span>id <span class=\"k\">=</span> memberUniqueName<span class=\"k\">;</span>","            measure<span class=\"k\">.</span>name <span class=\"k\">=</span> memberName<span class=\"k\">;</span>","            measure<span class=\"k\">.</span>parent <span class=\"k\">=</span> level<span class=\"k\">;</span>","            <span class=\"k\">var</span> agg <span class=\"k\">=</span> rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span><span class=\"s\">\"MEASURE_AGGREGATOR\"</span><span class=\"k\">);</span>","            ","            <span class=\"k\">switch</span><span class=\"k\">(</span>agg<span class=\"k\">)</span> <span class=\"k\">{</span>            ","            <span class=\"k\">case</span> <span class=\"s\">1</span><span class=\"k\">:</span> measure<span class=\"k\">.</span>defaultAggregation <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>AGG_TYPES<span class=\"k\">.</span>SUM<span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">2</span><span class=\"k\">:</span> measure<span class=\"k\">.</span>defaultAggregation <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>AGG_TYPES<span class=\"k\">.</span>COUNT<span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">3</span><span class=\"k\">:</span> measure<span class=\"k\">.</span>defaultAggregation <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>AGG_TYPES<span class=\"k\">.</span>MIN<span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">4</span><span class=\"k\">:</span> measure<span class=\"k\">.</span>defaultAggregation <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>AGG_TYPES<span class=\"k\">.</span>MAX<span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">5</span><span class=\"k\">:</span> measure<span class=\"k\">.</span>defaultAggregation <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>AGG_TYPES<span class=\"k\">.</span>AVERAGE<span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">6</span><span class=\"k\">:</span> measure<span class=\"k\">.</span>defaultAggregation <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>AGG_TYPES<span class=\"k\">.</span>VAR<span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">7</span><span class=\"k\">:</span> measure<span class=\"k\">.</span>defaultAggregation <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>AGG_TYPES<span class=\"k\">.</span>STDDEV<span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">8</span><span class=\"k\">:</span> measure<span class=\"k\">.</span>defaultAggregation <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>AGG_TYPES<span class=\"k\">.</span>CALC<span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">9</span><span class=\"k\">:</span> measure<span class=\"k\">.</span>defaultAggregation <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>AGG_TYPES<span class=\"k\">.</span>UNKNOWN<span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            measure<span class=\"k\">.</span>selectedAggregation <span class=\"k\">=</span> measure<span class=\"k\">.</span>defaultAggregation","            measure<span class=\"k\">.</span>availableAggregations <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>measure<span class=\"k\">.</span>defaultAggregation<span class=\"k\">);</span>","            level<span class=\"k\">.</span>addChild<span class=\"k\">(</span> measure <span class=\"k\">);</span>","            measure<span class=\"k\">.</span>isQueryElement <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            measure<span class=\"k\">.</span>category <span class=\"k\">=</span> hierarchy<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addElement<span class=\"k\">(</span> measure <span class=\"k\">);</span>","","            rowset<span class=\"k\">.</span>next<span class=\"k\">();</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getAllColumns <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> columns <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">();</span>","","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx2 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> idx2<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>elements<span class=\"k\">.</span>length<span class=\"k\">;</span> idx2<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>elements<span class=\"k\">[</span>idx2<span class=\"k\">].</span>elementType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>LEVEL <span class=\"k\">||</span>","               <span class=\"k\">this</span><span class=\"k\">.</span>elements<span class=\"k\">[</span>idx2<span class=\"k\">].</span>elementType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>FACT","            <span class=\"k\">)</span> <span class=\"k\">{</span>","                columns<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>elements<span class=\"k\">[</span>idx2<span class=\"k\">]</span> <span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> columns<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","","    <span class=\"c\">// create a new query</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createQuery <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> query <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> query<span class=\"k\">;</span>","<span class=\"k\">}</span>","","    <span class=\"c\">// submit a new query</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>submitQuery <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> query<span class=\"k\">,</span> rowLimit <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span>query<span class=\"k\">.</span>state<span class=\"k\">.</span>measures<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> query<span class=\"k\">.</span>state<span class=\"k\">.</span>rowSelections<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> query<span class=\"k\">.</span>state<span class=\"k\">.</span>columnSelections<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// we can't construct a query for this</span>","            <span class=\"k\">var</span> results <span class=\"k\">=</span> <span class=\"k\">{</span>","                metadata<span class=\"k\">:[],</span>","                resultset<span class=\"k\">:[]</span>","            <span class=\"k\">}</span>            ","            <span class=\"k\">return</span> results<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">var</span> mdx <span class=\"k\">=</span> query<span class=\"k\">.</span>serialize<span class=\"k\">();</span>","        query<span class=\"k\">.</span>state<span class=\"k\">.</span>mdx <span class=\"k\">=</span> mdx<span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>submit<span class=\"k\">(</span>mdx<span class=\"k\">,</span> rowLimit<span class=\"k\">);</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>submit <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> mdx<span class=\"k\">,</span> rowLimit <span class=\"k\">)</span> <span class=\"k\">{</span>","","<span class=\"c\">//alert(mdx);</span>","","        <span class=\"k\">var</span> results <span class=\"k\">=</span> <span class=\"k\">{</span>","            metadata<span class=\"k\">:[],</span>","            resultset<span class=\"k\">:[]</span>","        <span class=\"k\">}</span>            ","        <span class=\"k\">var</span> properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_DATASOURCEINFO<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmlaDatasource<span class=\"k\">;</span>","        properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_CATALOG<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>catalog<span class=\"k\">;</span>","","        <span class=\"k\">var</span> restrictions <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>catalog<span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cubeName<span class=\"k\">;</span>","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> rowset <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmla<span class=\"k\">.</span>executeTabular<span class=\"k\">(</span><span class=\"k\">{</span>","                url<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>XMLA_SERVICE_URL<span class=\"k\">,</span>","                statement<span class=\"k\">:</span> mdx<span class=\"k\">,</span>","                async<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                properties<span class=\"k\">:</span> properties","            <span class=\"k\">,</span>   restrictions<span class=\"k\">:</span> restrictions","            <span class=\"k\">}</span><span class=\"k\">);</span>","","            <span class=\"k\">var</span> fields <span class=\"k\">=</span> rowset<span class=\"k\">.</span>getFields<span class=\"k\">();</span>","            ","            <span class=\"k\">var</span> fieldCount <span class=\"k\">=</span> fields<span class=\"k\">.</span>length<span class=\"k\">;</span>","<span class=\"c\">//            var fieldCount = (query.state.measures.length == 0) ? fields.length-1 : fields.length;</span>","","            <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>fieldCount<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> id <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cleanupFieldName<span class=\"k\">(</span>fields<span class=\"k\">[</span>idx<span class=\"k\">].</span>name<span class=\"k\">);</span>","                <span class=\"c\">// TODO how to get the column id e.g. '[Markets].[Territory]' instead of '[Markets].[Territory].[MEMBER_CAPTION]'</span>","                <span class=\"k\">var</span> md <span class=\"k\">=</span> <span class=\"k\">{</span>","                    colIndex<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                    colName <span class=\"k\">:</span> id<span class=\"k\">,</span>","                    colType <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getDataTypeFromXsd<span class=\"k\">(</span> fields<span class=\"k\">[</span>idx<span class=\"k\">].</span>type <span class=\"k\">)</span>","<span class=\"c\">//                    colLabel : ?</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","                results<span class=\"k\">.</span>metadata<span class=\"k\">.</span>push<span class=\"k\">(</span>md<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">while</span> <span class=\"k\">(</span>rowset<span class=\"k\">.</span>hasMoreRows<span class=\"k\">())</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> row <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">();</span>","                <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>fieldCount<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                   row<span class=\"k\">.</span>push<span class=\"k\">(</span>rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span>idx<span class=\"k\">));</span>","                <span class=\"k\">}</span>       ","                results<span class=\"k\">.</span>resultset<span class=\"k\">.</span>push<span class=\"k\">(</span>row<span class=\"k\">);</span>","                rowset<span class=\"k\">.</span>next<span class=\"k\">();</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> results<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            alert<span class=\"k\">(</span>e<span class=\"k\">.</span>message<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>cleanupFieldName <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","        name <span class=\"k\">=</span> name<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/_x005b_/g</span> <span class=\"k\">,</span> <span class=\"s\">'['</span> <span class=\"k\">);</span>","        name <span class=\"k\">=</span> name<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/_x005d_/g</span> <span class=\"k\">,</span> <span class=\"s\">']'</span> <span class=\"k\">);</span>","        <span class=\"k\">return</span> name<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getDataTypeFromXsd <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> type <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">switch</span> <span class=\"k\">(</span>type<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:boolean\"</span><span class=\"k\">:</span> <span class=\"k\">return</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>BOOLEAN<span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:decimal\"</span><span class=\"k\">:</span> ","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:double\"</span><span class=\"k\">:</span> ","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:float\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:int\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:integer\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:nonPositiveInteger\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:negativeInteger\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:nonNegativeInteger\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:positiveInteger\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:short\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:byte\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:long\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:unsignedLong\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:unsignedInt\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:unsignedShort\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:unsignedByte\"</span><span class=\"k\">:</span> <span class=\"k\">return</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>NUMERIC<span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:string\"</span><span class=\"k\">:</span> <span class=\"k\">return</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>STRING<span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">\"xsd:dateTime\"</span><span class=\"k\">:</span> <span class=\"k\">return</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>DATE<span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">\"Restrictions\"</span><span class=\"k\">:</span> <span class=\"k\">return</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>UNKNOWN<span class=\"k\">;</span>","            <span class=\"k\">default</span><span class=\"k\">:</span> <span class=\"k\">return</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>DATA_TYPES<span class=\"k\">.</span>UNKNOWN<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getAllValuesForColumn <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> column <span class=\"k\">)</span> <span class=\"k\">{</span>","  ","        <span class=\"c\">// find a measure to use</span>","        <span class=\"k\">var</span> facts <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getColumnsByFieldType<span class=\"k\">([</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>FACT<span class=\"k\">]);</span>","","        <span class=\"c\">// find the dimension root of the column</span>","        <span class=\"k\">var</span> root <span class=\"k\">=</span> column<span class=\"k\">;</span>","        <span class=\"k\">while</span><span class=\"k\">(</span>root<span class=\"k\">.</span>parent <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            root <span class=\"k\">=</span> root<span class=\"k\">.</span>parent<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// create the MDX statement for this</span>","        <span class=\"k\">var</span> mdx <span class=\"k\">=</span> ","          <span class=\"s\">\"select \"</span><span class=\"k\">+</span>facts<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>id<span class=\"k\">+</span><span class=\"s\">\" ON COLUMNS, \"</span><span class=\"k\">+</span>","          <span class=\"s\">\"Order({\"</span><span class=\"k\">+</span>column<span class=\"k\">.</span>id<span class=\"k\">+</span><span class=\"s\">\".Members},\"</span><span class=\"k\">+</span>root<span class=\"k\">.</span>id<span class=\"k\">+</span><span class=\"s\">\".CurrentMember.OrderKey, BASC) ON ROWS \"</span><span class=\"k\">+</span>","          <span class=\"s\">\"from [\"</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>cubeName<span class=\"k\">+</span><span class=\"s\">\"]\"</span><span class=\"k\">;</span>","","<span class=\"c\">//alert(mdx);</span>","","        <span class=\"k\">var</span> properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_DATASOURCEINFO<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmlaDatasource<span class=\"k\">;</span>","        properties<span class=\"k\">[</span>Xmla<span class=\"k\">.</span>PROP_CATALOG<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>catalog<span class=\"k\">;</span>","","        <span class=\"k\">var</span> restrictions <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"CATALOG_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>catalog<span class=\"k\">;</span>","        restrictions<span class=\"k\">[</span><span class=\"s\">\"CUBE_NAME\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>cubeName<span class=\"k\">;</span>","        <span class=\"k\">try</span> <span class=\"k\">{</span>","<span class=\"c\">/*</span>","<span class=\"c\">            var rowset = this.xmla.executeMultiDimensional({</span>","<span class=\"c\">                url: this.XMLA_SERVICE_URL,</span>","<span class=\"c\">                statement: mdx,</span>","<span class=\"c\">                async: false,</span>","<span class=\"c\">                properties: properties</span>","<span class=\"c\">            ,   restrictions: restrictions</span>","<span class=\"c\">            });</span>","<span class=\"c\">*/</span>","            <span class=\"k\">var</span> rowset <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmla<span class=\"k\">.</span>executeTabular<span class=\"k\">(</span><span class=\"k\">{</span>","                url<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>XMLA_SERVICE_URL<span class=\"k\">,</span>","                statement<span class=\"k\">:</span> mdx<span class=\"k\">,</span>","                async<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                properties<span class=\"k\">:</span> properties","            <span class=\"k\">,</span>   restrictions<span class=\"k\">:</span> restrictions","            <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> results <span class=\"k\">=</span> <span class=\"k\">{</span>","                metadata<span class=\"k\">:[],</span>","                resultset<span class=\"k\">:[]</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> fields <span class=\"k\">=</span> rowset<span class=\"k\">.</span>getFields<span class=\"k\">();</span>","            <span class=\"k\">var</span> targetCol <span class=\"k\">=</span> fields<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">;</span> <span class=\"c\">// the field with the members is the second to last one</span>","            <span class=\"k\">var</span> fieldDef <span class=\"k\">=</span> fields<span class=\"k\">[</span>targetCol<span class=\"k\">];</span>","            <span class=\"k\">var</span> md <span class=\"k\">=</span> <span class=\"k\">{</span>","                colIndex<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                colName <span class=\"k\">:</span> column<span class=\"k\">.</span>id<span class=\"k\">,</span>","                colType <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getDataTypeFromXsd<span class=\"k\">(</span> fieldDef<span class=\"k\">.</span>type <span class=\"k\">),</span>","                colLabel <span class=\"k\">:</span> column<span class=\"k\">.</span>name","            <span class=\"k\">}</span>","","            <span class=\"k\">while</span> <span class=\"k\">(</span>rowset<span class=\"k\">.</span>hasMoreRows<span class=\"k\">())</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> row <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">();</span>","                row<span class=\"k\">.</span>push<span class=\"k\">(</span>rowset<span class=\"k\">.</span>fieldVal<span class=\"k\">(</span>targetCol<span class=\"k\">));</span>","                results<span class=\"k\">.</span>resultset<span class=\"k\">.</span>push<span class=\"k\">(</span>row<span class=\"k\">);</span>","                rowset<span class=\"k\">.</span>next<span class=\"k\">();</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> results<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            alert<span class=\"k\">(</span>e<span class=\"k\">.</span>message<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>model<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>searchColumn <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> column<span class=\"k\">,</span> searchStr<span class=\"k\">,</span> rowLimit<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">var</span> all <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getAllValuesForColumn<span class=\"k\">(</span>column<span class=\"k\">);</span>","        ","        <span class=\"c\">// now filter out the ones that don'y match</span>","        <span class=\"k\">var</span> results <span class=\"k\">=</span> <span class=\"k\">{</span>","            metadata<span class=\"k\">:</span> all<span class=\"k\">.</span>metadata<span class=\"k\">,</span>","            resultset<span class=\"k\">:</span> <span class=\"k\">[]</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>all<span class=\"k\">.</span>resultset<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>all<span class=\"k\">.</span>resultset<span class=\"k\">[</span>idx<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">].</span>indexOf<span class=\"k\">(</span>searchStr<span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                results<span class=\"k\">.</span>resultset<span class=\"k\">.</span>push<span class=\"k\">(</span>all<span class=\"k\">.</span>resultset<span class=\"k\">[</span>idx<span class=\"k\">]);</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>rowLimit <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> rowLimit <span class=\"k\">==</span> results<span class=\"k\">.</span>resultset<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>callback<span class=\"k\">)</span> <span class=\"k\">{</span>","            callback<span class=\"k\">(</span>results<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> results<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","","<span class=\"c\">/* ******************************************</span>","<span class=\"c\">                        pentaho.pda.query.mql</span>","<span class=\"c\">   ******************************************\t\t\t\t\t\t</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>model<span class=\"k\">)</span> <span class=\"k\">{</span>","\tpentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> model<span class=\"k\">);</span> <span class=\"c\">//call parent object</span>","\t","    <span class=\"k\">this</span><span class=\"k\">.</span>state <span class=\"k\">=</span> <span class=\"k\">{</span>","        <span class=\"s\">\"mdx\"</span> <span class=\"k\">:</span> <span class=\"s\">\"mdx\"</span><span class=\"k\">,</span>","        columnSelections <span class=\"k\">:</span> <span class=\"k\">[],</span>","        rowSelections <span class=\"k\">:</span> <span class=\"k\">[],</span>","        measures <span class=\"k\">:</span> <span class=\"k\">[],</span>","        conditions <span class=\"k\">:</span> <span class=\"k\">[]</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    ","<span class=\"k\">}</span>","","inheritPrototype<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">,</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">);</span> <span class=\"c\">//borrow the parent's methods</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>canQueryReturnData <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>columnSelections<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>rowSelections<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>measures<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>prepare <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>mdx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>serialize<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getQueryStr <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>mdx<span class=\"k\">;</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createSelection <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> selection <span class=\"k\">=</span> <span class=\"k\">{</span>","            column<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            selection<span class=\"k\">:</span><span class=\"k\">null</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> selection<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>couldReturnData <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>measures<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>rowSelections<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>columnSelections<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createCondition <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> condition <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">\"column\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"operator\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"value\"</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">\"combinationType\"</span> <span class=\"k\">:</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>OPERATOR_TYPES<span class=\"k\">.</span>AND","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> condition<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addConditionById <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnId<span class=\"k\">,</span> operator<span class=\"k\">,</span> value<span class=\"k\">,</span> combinationType<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> column <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>getColumnById<span class=\"k\">(</span> columnId <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>column <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> condition <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createCondition<span class=\"k\">();</span>","            condition<span class=\"k\">.</span>column <span class=\"k\">=</span> column<span class=\"k\">;</span>","            condition<span class=\"k\">.</span>operator <span class=\"k\">=</span> operator<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">typeof</span> value <span class=\"k\">==</span> <span class=\"s\">'object'</span> <span class=\"k\">&amp;&amp;</span> value<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                condition<span class=\"k\">.</span>value <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                condition<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"k\">[</span> value <span class=\"k\">];</span>","            <span class=\"k\">}</span>","            condition<span class=\"k\">.</span>combinationType <span class=\"k\">=</span> combinationType<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addCondition<span class=\"k\">(</span> condition <span class=\"k\">);</span>","            <span class=\"k\">return</span> condition<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addCondition <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> condition <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">.</span>push<span class=\"k\">(</span> condition <span class=\"k\">);</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addSelectionById <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> columnId<span class=\"k\">,</span> location <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> column <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>getColumnById<span class=\"k\">(</span> columnId <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>column <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        ","            <span class=\"k\">var</span> selection <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createSelection<span class=\"k\">();</span>","            selection<span class=\"k\">.</span>column <span class=\"k\">=</span> column<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>column<span class=\"k\">.</span>elementType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>FACT<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// its a measure</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>measures<span class=\"k\">.</span>push<span class=\"k\">(</span>selection<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>column<span class=\"k\">.</span>elementType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>LEVEL<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// its a level</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> location <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>AXIS_LOCATION_ACROSS <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>columnSelections<span class=\"k\">.</span>push<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                <span class=\"k\">}</span> ","                <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> location <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>AXIS_LOCATION_DOWN <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>rowSelections<span class=\"k\">.</span>push<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"c\">// default to the down location to produce de-normalized data sets</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>rowSelections<span class=\"k\">.</span>push<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        ","            <span class=\"k\">return</span> column<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// submit a new query</span>","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>serialize <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>measures<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>rowSelections<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>columnSelections<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// we can't construct a query for this</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"c\">// find a measure to use</span>","        <span class=\"c\">// TODO use the default measure if available</span>","        <span class=\"k\">var</span> measures <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>measures<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>measures<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> column <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>getColumnsByFieldType<span class=\"k\">([</span>pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>FACT<span class=\"k\">])[</span><span class=\"s\">0</span><span class=\"k\">]</span>","            <span class=\"k\">var</span> selection <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createSelection<span class=\"k\">();</span>","            selection<span class=\"k\">.</span>column <span class=\"k\">=</span> column<span class=\"k\">;</span>","            measures <span class=\"k\">=</span> <span class=\"k\">[</span>selection<span class=\"k\">];</span>","        <span class=\"k\">}</span>"," ","        <span class=\"c\">// create the MDX statement for this</span>","        <span class=\"k\">var</span> mdx <span class=\"k\">=</span> <span class=\"s\">\"select \"</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> mdxFrag <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">();</span>","","        <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>columnSelections<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++)</span> <span class=\"k\">{</span>","            mdxFrag<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>getSelectionMdx<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>columnSelections<span class=\"k\">[</span>idx<span class=\"k\">],</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">)</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","        mdxFrag<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>getMeasuresMdx<span class=\"k\">(</span>measures<span class=\"k\">)</span> <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> mdxFrag<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            mdx <span class=\"k\">+=</span> mdxFrag<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"c\">// we need a crossjoin</span>","            mdx <span class=\"k\">+=</span> <span class=\"s\">'Crossjoin('</span><span class=\"k\">;</span>","            <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>mdxFrag<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>idx <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    mdx <span class=\"k\">+=</span> <span class=\"s\">', '</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                mdx <span class=\"k\">+=</span> mdxFrag<span class=\"k\">[</span>idx<span class=\"k\">];</span>","            <span class=\"k\">}</span>","            mdx <span class=\"k\">+=</span> <span class=\"s\">')'</span><span class=\"k\">;</span>","            ","        <span class=\"k\">}</span>","        ","        mdx <span class=\"k\">+=</span> <span class=\"s\">\" ON COLUMNS, \"</span><span class=\"k\">;</span>","        ","        <span class=\"k\">var</span> mdxFrag <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">();</span>","        <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>rowSelections<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++)</span> <span class=\"k\">{</span>","            mdxFrag<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>getSelectionMdx<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>rowSelections<span class=\"k\">[</span>idx<span class=\"k\">],</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">)</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(</span> mdxFrag<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            mdx <span class=\"k\">+=</span> mdxFrag<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"c\">// we need a crossjoin</span>","            mdx <span class=\"k\">+=</span> <span class=\"s\">'Crossjoin('</span><span class=\"k\">;</span>","            <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>mdxFrag<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>idx <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    mdx <span class=\"k\">+=</span> <span class=\"s\">', '</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                mdx <span class=\"k\">+=</span> mdxFrag<span class=\"k\">[</span>idx<span class=\"k\">];</span>","            <span class=\"k\">}</span>","            mdx <span class=\"k\">+=</span> <span class=\"s\">')'</span><span class=\"k\">;</span>","            ","        <span class=\"k\">}</span>","        ","        mdx <span class=\"k\">+=</span> <span class=\"s\">\" ON ROWS from [\"</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>model<span class=\"k\">.</span>cubeName<span class=\"k\">+</span><span class=\"s\">\"]\"</span><span class=\"k\">;</span>","","        mdx <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getWhereMdx<span class=\"k\">();</span>","<span class=\"c\">//alert(mdx);</span>","        <span class=\"k\">return</span> mdx<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getWhereMdx <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> mdxfrag <span class=\"k\">=</span> <span class=\"s\">' where ('</span><span class=\"k\">;</span>","        ","        <span class=\"k\">var</span> found <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        ","        <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">[</span>idx<span class=\"k\">].</span>column<span class=\"k\">.</span>elementType <span class=\"k\">==</span> pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>Column<span class=\"k\">.</span>ELEMENT_TYPES<span class=\"k\">.</span>FACT<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>idx <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    mdxfrag <span class=\"k\">+=</span> <span class=\"s\">' '</span><span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">[</span>idx<span class=\"k\">].</span>combinationType <span class=\"k\">+</span><span class=\"s\">' '</span><span class=\"k\">;</span>","                <span class=\"k\">}</span> ","                mdxfrag <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">[</span>idx<span class=\"k\">].</span>column<span class=\"k\">.</span>id<span class=\"k\">;</span>","                mdxfrag <span class=\"k\">+=</span> <span class=\"s\">' '</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">[</span>idx<span class=\"k\">].</span>operator<span class=\"k\">+</span><span class=\"s\">' '</span><span class=\"k\">;</span>","                mdxfrag <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">[</span>idx<span class=\"k\">].</span>value<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","                found <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"c\">// add any conditions that do not have a selection</span>","                <span class=\"k\">var</span> hasSelection <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> s<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> s<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>rowSelections<span class=\"k\">.</span>length<span class=\"k\">;</span> s<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>rowSelections<span class=\"k\">[</span>s<span class=\"k\">].</span>column<span class=\"k\">.</span>id <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">[</span>idx<span class=\"k\">].</span>column<span class=\"k\">.</span>id<span class=\"k\">)</span> <span class=\"k\">{</span>","                        hasSelection <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> s<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> s<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>columnSelections<span class=\"k\">.</span>length<span class=\"k\">;</span> s<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>columnSelections<span class=\"k\">[</span>s<span class=\"k\">].</span>column<span class=\"k\">.</span>id <span class=\"k\">==</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">[</span>idx<span class=\"k\">].</span>column<span class=\"k\">.</span>id<span class=\"k\">)</span> <span class=\"k\">{</span>","                        hasSelection <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>hasSelection <span class=\"k\">)</span> <span class=\"k\">{</span>","                    mdxfrag <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">[</span>idx<span class=\"k\">].</span>column<span class=\"k\">.</span>id<span class=\"k\">;</span>","                    mdxfrag <span class=\"k\">+=</span> <span class=\"s\">'.['</span><span class=\"k\">;</span>","                    mdxfrag <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>state<span class=\"k\">.</span>conditions<span class=\"k\">[</span>idx<span class=\"k\">].</span>value<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","                    mdxfrag <span class=\"k\">+=</span> <span class=\"s\">']'</span><span class=\"k\">;</span>","                    found <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>        ","        ","        mdxfrag <span class=\"k\">+=</span> <span class=\"s\">')'</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>found<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> mdxfrag<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getMeasuresMdx <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>measures<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> mdx <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> measures<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            mdx <span class=\"k\">+=</span> <span class=\"s\">'{'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>measures<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>idx <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                mdx <span class=\"k\">+=</span> <span class=\"s\">', '</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> ","            mdx <span class=\"k\">+=</span> measures<span class=\"k\">[</span>idx<span class=\"k\">].</span>column<span class=\"k\">.</span>id<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> measures<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            mdx <span class=\"k\">+=</span> <span class=\"s\">'}'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> mdx<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","pentaho<span class=\"k\">.</span>pda<span class=\"k\">.</span>query<span class=\"k\">.</span>olap<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getSelectionMdx <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>selection<span class=\"k\">,</span> conditions<span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"c\">// see if we have member selections</span>","        <span class=\"k\">var</span> doneMembers <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> needBrace <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> mdxfrag <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> c<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> c<span class=\"k\">&lt;</span>conditions<span class=\"k\">.</span>length<span class=\"k\">;</span> c<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>conditions<span class=\"k\">[</span>c<span class=\"k\">].</span>column<span class=\"k\">.</span>id <span class=\"k\">==</span> selection<span class=\"k\">.</span>column<span class=\"k\">.</span>id <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> values <span class=\"k\">=</span> conditions<span class=\"k\">[</span>c<span class=\"k\">].</span>value<span class=\"k\">;</span>","                <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> v<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> v<span class=\"k\">&lt;</span>values<span class=\"k\">.</span>length<span class=\"k\">;</span> v<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>doneMembers<span class=\"k\">)</span> <span class=\"k\">{</span>","                        mdxfrag <span class=\"k\">+=</span> <span class=\"s\">', '</span><span class=\"k\">;</span>","                    needBrace <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    mdxfrag <span class=\"k\">+=</span> selection<span class=\"k\">.</span>column<span class=\"k\">.</span>id<span class=\"k\">;</span>","                    mdxfrag <span class=\"k\">+=</span> <span class=\"s\">'.['</span><span class=\"k\">;</span>","                    mdxfrag <span class=\"k\">+=</span> values<span class=\"k\">[</span>v<span class=\"k\">];</span>","                    mdxfrag <span class=\"k\">+=</span> <span class=\"s\">']'</span><span class=\"k\">;</span>","                    doneMembers <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>doneMembers<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// do all the members</span>","            mdxfrag <span class=\"k\">+=</span> selection<span class=\"k\">.</span>column<span class=\"k\">.</span>id<span class=\"k\">;</span>","            mdxfrag <span class=\"k\">+=</span> <span class=\"s\">'.Members'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(</span> needBrace <span class=\"k\">)</span> <span class=\"k\">{</span>","           <span class=\"k\">return</span> <span class=\"s\">'{'</span><span class=\"k\">+</span>mdxfrag<span class=\"k\">+</span><span class=\"s\">'}'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> mdxfrag<span class=\"k\">;</span> ","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>"];
_$jscoverage['dataapi/models-olap.js'][2]++;
pentaho.pda.OlapHandler = (function OlapHandler(sandbox) {
  _$jscoverage['dataapi/models-olap.js'][3]++;
  pentaho.pda.Handler.call(this, sandbox);
  _$jscoverage['dataapi/models-olap.js'][4]++;
  this.type = pentaho.pda.SOURCE_TYPE_OLAP;
  _$jscoverage['dataapi/models-olap.js'][5]++;
  this.XMLA_SERVICE_URL = "/pentaho/Xmla";
  _$jscoverage['dataapi/models-olap.js'][6]++;
  this.datasourceCache = [];
});
_$jscoverage['dataapi/models-olap.js'][9]++;
inheritPrototype(pentaho.pda.OlapHandler, pentaho.pda.Handler);
_$jscoverage['dataapi/models-olap.js'][11]++;
pentaho.pda.OlapHandler.prototype.getSources = (function (callback, options) {
  _$jscoverage['dataapi/models-olap.js'][12]++;
  options = (options || {});
  _$jscoverage['dataapi/models-olap.js'][13]++;
  var filter = options.filter;
  _$jscoverage['dataapi/models-olap.js'][14]++;
  this.xmla = new Xmla({async: false});
  _$jscoverage['dataapi/models-olap.js'][18]++;
  if ((this.datasourceCache.length > 0)) {
    _$jscoverage['dataapi/models-olap.js'][19]++;
    if ((filter == null)) {
      _$jscoverage['dataapi/models-olap.js'][20]++;
      for (var i = 0, j = this.datasourceCache.length; (i < j); (i++)) {
        _$jscoverage['dataapi/models-olap.js'][21]++;
        callback(this.datasourceCache[i]);
}
    }
    else {
      _$jscoverage['dataapi/models-olap.js'][24]++;
      for (var i = 0, j = this.datasourceCache.length; (i < j); (i++)) {
        _$jscoverage['dataapi/models-olap.js'][25]++;
        each = this.datasourceCache[i];
        _$jscoverage['dataapi/models-olap.js'][26]++;
        try {
          _$jscoverage['dataapi/models-olap.js'][27]++;
          if ((each[filter.property] == filter.value)) {
            _$jscoverage['dataapi/models-olap.js'][28]++;
            callback(each);
          }
        }
        catch (e) {
        }
}
    }
  }
  else {
    _$jscoverage['dataapi/models-olap.js'][38]++;
    this.datasourceCache = [];
    _$jscoverage['dataapi/models-olap.js'][39]++;
    var that = this;
    _$jscoverage['dataapi/models-olap.js'][43]++;
    var rowset1 = this.xmla.discoverDataSources({url: this.XMLA_SERVICE_URL});
    _$jscoverage['dataapi/models-olap.js'][46]++;
    if (rowset1.hasMoreRows()) {
      _$jscoverage['dataapi/models-olap.js'][47]++;
      this.datasourceCache = rowset1.fetchAllAsObject();
      _$jscoverage['dataapi/models-olap.js'][48]++;
      for (var numDataSources = this.datasourceCache.length, i = 0; (i < numDataSources); (i++)) {
        _$jscoverage['dataapi/models-olap.js'][51]++;
        var datasource = this.datasourceCache[i];
        _$jscoverage['dataapi/models-olap.js'][52]++;
        var properties = {};
        _$jscoverage['dataapi/models-olap.js'][53]++;
        var url = (datasource.URL? datasource.URL: this.XMLA_SERVICE_URL);
        _$jscoverage['dataapi/models-olap.js'][54]++;
        if ((url.indexOf("http") == 0)) {
          _$jscoverage['dataapi/models-olap.js'][56]++;
          url = this.XMLA_SERVICE_URL;
        }
        _$jscoverage['dataapi/models-olap.js'][58]++;
        properties[Xmla.PROP_DATASOURCEINFO] = datasource[Xmla.PROP_DATASOURCEINFO];
        _$jscoverage['dataapi/models-olap.js'][59]++;
        var rowset2 = this.xmla.discoverDBCatalogs({url: url, properties: properties});
        _$jscoverage['dataapi/models-olap.js'][63]++;
        if (rowset2.hasMoreRows()) {
          _$jscoverage['dataapi/models-olap.js'][64]++;
          var catalog;
          _$jscoverage['dataapi/models-olap.js'][65]++;
          while ((catalog = rowset2.fetchAsObject())) {
            _$jscoverage['dataapi/models-olap.js'][68]++;
            var catalogName = catalog.CATALOG_NAME;
            _$jscoverage['dataapi/models-olap.js'][69]++;
            var properties = {};
            _$jscoverage['dataapi/models-olap.js'][70]++;
            properties[Xmla.PROP_DATASOURCEINFO] = this.datasourceCache[i].DataSourceName;
            _$jscoverage['dataapi/models-olap.js'][71]++;
            properties[Xmla.PROP_CATALOG] = catalogName;
            _$jscoverage['dataapi/models-olap.js'][73]++;
            var restrictions = {};
            _$jscoverage['dataapi/models-olap.js'][74]++;
            restrictions.CATALOG_NAME = catalogName;
            _$jscoverage['dataapi/models-olap.js'][76]++;
            var rowset3 = this.xmla.discoverMDCubes({url: this.XMLA_SERVICE_URL, properties: properties, restrictions: restrictions});
            _$jscoverage['dataapi/models-olap.js'][82]++;
            var loader, id, cubeName;
            _$jscoverage['dataapi/models-olap.js'][83]++;
            while (rowset3.hasMoreRows()) {
              _$jscoverage['dataapi/models-olap.js'][84]++;
              var cubeName = rowset3.fieldVal("CUBE_NAME");
              _$jscoverage['dataapi/models-olap.js'][85]++;
              var id = (this.datasourceCache[i].DataSourceName + "\t" + catalogName + "\t" + cubeName);
              _$jscoverage['dataapi/models-olap.js'][86]++;
              var datasource = new (pentaho.pda.model.olap)({id: id, name: catalog.CATALOG_NAME, type: pentaho.pda.SOURCE_TYPE_OLAP, description: ""});
              _$jscoverage['dataapi/models-olap.js'][92]++;
              datasource.xmlaDatasource = this.datasourceCache[i].DataSourceName;
              _$jscoverage['dataapi/models-olap.js'][93]++;
              datasource.catalog = catalogName;
              _$jscoverage['dataapi/models-olap.js'][94]++;
              datasource.cubeName = cubeName;
              _$jscoverage['dataapi/models-olap.js'][95]++;
              datasource.xmla = that.xmla;
              _$jscoverage['dataapi/models-olap.js'][96]++;
              datasource.XMLA_SERVICE_URL = that.XMLA_SERVICE_URL;
              _$jscoverage['dataapi/models-olap.js'][97]++;
              this.sources.push(datasource);
              _$jscoverage['dataapi/models-olap.js'][98]++;
              rowset3.next();
}
}
        }
        else {
          _$jscoverage['dataapi/models-olap.js'][103]++;
          section_error.innerHTML = "No datasources found";
        }
}
      _$jscoverage['dataapi/models-olap.js'][106]++;
      callback(datasource);
    }
  }
  _$jscoverage['dataapi/models-olap.js'][112]++;
  return this.sources;
});
_$jscoverage['dataapi/models-olap.js'][115]++;
pentaho.pda.model.olap = (function (obj) {
  _$jscoverage['dataapi/models-olap.js'][116]++;
  pentaho.pda.model.call(this, obj);
  _$jscoverage['dataapi/models-olap.js'][117]++;
  this.xmlaDatasource = "";
  _$jscoverage['dataapi/models-olap.js'][118]++;
  this.catalog = "";
  _$jscoverage['dataapi/models-olap.js'][119]++;
  this.cubeName = "";
  _$jscoverage['dataapi/models-olap.js'][120]++;
  this.type = "xmla";
});
_$jscoverage['dataapi/models-olap.js'][123]++;
inheritPrototype(pentaho.pda.model.olap, pentaho.pda.model);
_$jscoverage['dataapi/models-olap.js'][126]++;
pentaho.pda.model.olap.prototype.discoverModelDetail = (function (forceLoad) {
  _$jscoverage['dataapi/models-olap.js'][139]++;
  this.categories = [];
  _$jscoverage['dataapi/models-olap.js'][141]++;
  this.discoverDimensions();
  _$jscoverage['dataapi/models-olap.js'][144]++;
  this.addCapability(pentaho.pda.CAPABILITIES.HAS_ACROSS_AXIS);
  _$jscoverage['dataapi/models-olap.js'][145]++;
  this.addCapability(pentaho.pda.CAPABILITIES.IS_ACROSS_CUSTOM);
  _$jscoverage['dataapi/models-olap.js'][146]++;
  this.addCapability(pentaho.pda.CAPABILITIES.HAS_DOWN_AXIS);
  _$jscoverage['dataapi/models-olap.js'][147]++;
  this.addCapability(pentaho.pda.CAPABILITIES.IS_DOWN_CUSTOM);
  _$jscoverage['dataapi/models-olap.js'][148]++;
  this.addCapability(pentaho.pda.CAPABILITIES.HAS_FILTERS);
  _$jscoverage['dataapi/models-olap.js'][149]++;
  this.addCapability(pentaho.pda.CAPABILITIES.IS_FILTER_CUSTOM);
  _$jscoverage['dataapi/models-olap.js'][150]++;
  this.addCapability(pentaho.pda.CAPABILITIES.CAN_SORT);
});
_$jscoverage['dataapi/models-olap.js'][154]++;
pentaho.pda.model.olap.prototype.discoverDimensions = (function () {
  _$jscoverage['dataapi/models-olap.js'][155]++;
  var properties = {};
  _$jscoverage['dataapi/models-olap.js'][156]++;
  properties[Xmla.PROP_DATASOURCEINFO] = this.xmlaDatasource;
  _$jscoverage['dataapi/models-olap.js'][157]++;
  properties[Xmla.PROP_CATALOG] = this.catalog;
  _$jscoverage['dataapi/models-olap.js'][159]++;
  var restrictions = {};
  _$jscoverage['dataapi/models-olap.js'][160]++;
  restrictions.CATALOG_NAME = this.catalog;
  _$jscoverage['dataapi/models-olap.js'][161]++;
  restrictions.CUBE_NAME = this.cubeName;
  _$jscoverage['dataapi/models-olap.js'][163]++;
  var rowset = this.xmla.discoverMDDimensions({url: this.XMLA_SERVICE_URL, properties: properties, restrictions: restrictions});
  _$jscoverage['dataapi/models-olap.js'][169]++;
  while (rowset.hasMoreRows()) {
    _$jscoverage['dataapi/models-olap.js'][170]++;
    var dimensionName = rowset.fieldVal("DIMENSION_NAME");
    _$jscoverage['dataapi/models-olap.js'][171]++;
    var dimensionUniqueName = rowset.fieldVal("DIMENSION_UNIQUE_NAME");
    _$jscoverage['dataapi/models-olap.js'][172]++;
    var dimensionType = rowset.fieldVal("DIMENSION_TYPE");
    _$jscoverage['dataapi/models-olap.js'][173]++;
    var dimension = new (pentaho.pda.dataelement)();
    _$jscoverage['dataapi/models-olap.js'][174]++;
    dimension.dataType = pentaho.pda.Column.DATA_TYPES.NONE;
    _$jscoverage['dataapi/models-olap.js'][175]++;
    dimension.elementType = pentaho.pda.Column.ELEMENT_TYPES.DIMENSION;
    _$jscoverage['dataapi/models-olap.js'][176]++;
    dimension.id = dimensionUniqueName;
    _$jscoverage['dataapi/models-olap.js'][177]++;
    dimension.name = dimensionName;
    _$jscoverage['dataapi/models-olap.js'][178]++;
    dimension.isMeasures = (dimensionType == "2");
    _$jscoverage['dataapi/models-olap.js'][179]++;
    dimension.isTime = (dimensionType == "1");
    _$jscoverage['dataapi/models-olap.js'][180]++;
    this.addElement(dimension);
    _$jscoverage['dataapi/models-olap.js'][183]++;
    this.discoverHierarchies(dimension);
    _$jscoverage['dataapi/models-olap.js'][185]++;
    rowset.next();
}
});
_$jscoverage['dataapi/models-olap.js'][189]++;
pentaho.pda.model.olap.prototype.discoverHierarchies = (function (dimension) {
  _$jscoverage['dataapi/models-olap.js'][190]++;
  var properties = {};
  _$jscoverage['dataapi/models-olap.js'][191]++;
  properties[Xmla.PROP_DATASOURCEINFO] = this.xmlaDatasource;
  _$jscoverage['dataapi/models-olap.js'][192]++;
  properties[Xmla.PROP_CATALOG] = this.catalog;
  _$jscoverage['dataapi/models-olap.js'][194]++;
  var restrictions = {};
  _$jscoverage['dataapi/models-olap.js'][195]++;
  restrictions.CATALOG_NAME = this.catalog;
  _$jscoverage['dataapi/models-olap.js'][196]++;
  restrictions.CUBE_NAME = this.cubeName;
  _$jscoverage['dataapi/models-olap.js'][197]++;
  restrictions.DIMENSION_UNIQUE_NAME = dimension.id;
  _$jscoverage['dataapi/models-olap.js'][199]++;
  var rowset = this.xmla.discoverMDHierarchies({url: this.XMLA_SERVICE_URL, properties: properties, restrictions: restrictions});
  _$jscoverage['dataapi/models-olap.js'][205]++;
  while (rowset.hasMoreRows()) {
    _$jscoverage['dataapi/models-olap.js'][206]++;
    var hierarchyName = rowset.fieldVal("HIERARCHY_NAME");
    _$jscoverage['dataapi/models-olap.js'][207]++;
    var hierarchyUniqueName = rowset.fieldVal("HIERARCHY_UNIQUE_NAME");
    _$jscoverage['dataapi/models-olap.js'][208]++;
    var hierarchy = new (pentaho.pda.dataelement)();
    _$jscoverage['dataapi/models-olap.js'][209]++;
    hierarchy.dataType = pentaho.pda.Column.DATA_TYPES.NONE;
    _$jscoverage['dataapi/models-olap.js'][210]++;
    hierarchy.elementType = pentaho.pda.Column.ELEMENT_TYPES.HIERARCHY;
    _$jscoverage['dataapi/models-olap.js'][211]++;
    hierarchy.id = hierarchyUniqueName;
    _$jscoverage['dataapi/models-olap.js'][212]++;
    hierarchy.name = hierarchyName;
    _$jscoverage['dataapi/models-olap.js'][213]++;
    hierarchy.parent = dimension;
    _$jscoverage['dataapi/models-olap.js'][214]++;
    dimension.addChild(hierarchy);
    _$jscoverage['dataapi/models-olap.js'][215]++;
    this.addElement(hierarchy);
    _$jscoverage['dataapi/models-olap.js'][216]++;
    this.categories.push(hierarchy);
    _$jscoverage['dataapi/models-olap.js'][218]++;
    this.discoverLevels(dimension, hierarchy);
    _$jscoverage['dataapi/models-olap.js'][221]++;
    rowset.next();
}
});
_$jscoverage['dataapi/models-olap.js'][225]++;
pentaho.pda.model.olap.prototype.discoverLevels = (function (dimension, hierarchy) {
  _$jscoverage['dataapi/models-olap.js'][227]++;
  var properties = {};
  _$jscoverage['dataapi/models-olap.js'][228]++;
  properties[Xmla.PROP_DATASOURCEINFO] = this.xmlaDatasource;
  _$jscoverage['dataapi/models-olap.js'][229]++;
  properties[Xmla.PROP_CATALOG] = this.catalog;
  _$jscoverage['dataapi/models-olap.js'][231]++;
  var restrictions = {};
  _$jscoverage['dataapi/models-olap.js'][232]++;
  restrictions.CATALOG_NAME = this.catalog;
  _$jscoverage['dataapi/models-olap.js'][233]++;
  restrictions.CUBE_NAME = this.cubeName;
  _$jscoverage['dataapi/models-olap.js'][234]++;
  restrictions.DIMENSION_UNIQUE_NAME = dimension.id;
  _$jscoverage['dataapi/models-olap.js'][235]++;
  restrictions.HIERARCHY_UNIQUE_NAME = hierarchy.id;
  _$jscoverage['dataapi/models-olap.js'][237]++;
  var rowset = this.xmla.discoverMDLevels({url: this.XMLA_SERVICE_URL, properties: properties, restrictions: restrictions});
  _$jscoverage['dataapi/models-olap.js'][243]++;
  var parent = hierarchy;
  _$jscoverage['dataapi/models-olap.js'][245]++;
  while (rowset.hasMoreRows()) {
    _$jscoverage['dataapi/models-olap.js'][246]++;
    var levelName = rowset.fieldVal("LEVEL_CAPTION");
    _$jscoverage['dataapi/models-olap.js'][247]++;
    var levelNumber = rowset.fieldVal("LEVEL_NUMBER");
    _$jscoverage['dataapi/models-olap.js'][248]++;
    var level = new (pentaho.pda.dataelement)();
    _$jscoverage['dataapi/models-olap.js'][249]++;
    level.dataType = pentaho.pda.Column.DATA_TYPES.STRING;
    _$jscoverage['dataapi/models-olap.js'][250]++;
    level.elementType = pentaho.pda.Column.ELEMENT_TYPES.LEVEL;
    _$jscoverage['dataapi/models-olap.js'][251]++;
    level.id = rowset.fieldVal("LEVEL_UNIQUE_NAME");
    _$jscoverage['dataapi/models-olap.js'][252]++;
    level.name = levelName;
    _$jscoverage['dataapi/models-olap.js'][253]++;
    level.number = levelNumber;
    _$jscoverage['dataapi/models-olap.js'][255]++;
    level.parent = parent;
    _$jscoverage['dataapi/models-olap.js'][256]++;
    hierarchy.addChild(level);
    _$jscoverage['dataapi/models-olap.js'][257]++;
    this.addElement(level);
    _$jscoverage['dataapi/models-olap.js'][259]++;
    if (dimension.isMeasures) {
      _$jscoverage['dataapi/models-olap.js'][261]++;
      this.discoverMeasures(dimension, hierarchy, level);
      _$jscoverage['dataapi/models-olap.js'][262]++;
      level.isQueryElement = false;
    }
    else {
      _$jscoverage['dataapi/models-olap.js'][264]++;
      level.category = hierarchy;
      _$jscoverage['dataapi/models-olap.js'][265]++;
      level.isQueryElement = true;
    }
    _$jscoverage['dataapi/models-olap.js'][268]++;
    parent = level;
    _$jscoverage['dataapi/models-olap.js'][269]++;
    rowset.next();
}
});
_$jscoverage['dataapi/models-olap.js'][275]++;
pentaho.pda.model.olap.prototype.discoverMembers = (function (dimension, hierarchy, level) {
  _$jscoverage['dataapi/models-olap.js'][277]++;
  var properties = {};
  _$jscoverage['dataapi/models-olap.js'][278]++;
  properties[Xmla.PROP_DATASOURCEINFO] = this.xmlaDatasource;
  _$jscoverage['dataapi/models-olap.js'][279]++;
  properties[Xmla.PROP_CATALOG] = this.catalog;
  _$jscoverage['dataapi/models-olap.js'][281]++;
  var restrictions = {};
  _$jscoverage['dataapi/models-olap.js'][282]++;
  restrictions.CATALOG_NAME = this.catalog;
  _$jscoverage['dataapi/models-olap.js'][283]++;
  restrictions.CUBE_NAME = this.cubeName;
  _$jscoverage['dataapi/models-olap.js'][284]++;
  restrictions.DIMENSION_UNIQUE_NAME = dimension.id;
  _$jscoverage['dataapi/models-olap.js'][285]++;
  restrictions.HIERARCHY_UNIQUE_NAME = hierarchy.id;
  _$jscoverage['dataapi/models-olap.js'][286]++;
  restrictions.LEVEL_NUMBER = level.id;
  _$jscoverage['dataapi/models-olap.js'][288]++;
  var rowset = this.xmla.discoverMDMembers({url: this.XMLA_SERVICE_URL, properties: properties, restrictions: restrictions});
  _$jscoverage['dataapi/models-olap.js'][294]++;
  while (rowset.hasMoreRows()) {
    _$jscoverage['dataapi/models-olap.js'][295]++;
    var memberName = rowset.fieldVal("MEMBER_NAME");
    _$jscoverage['dataapi/models-olap.js'][296]++;
    var memberUniqueName = rowset.fieldVal("MEMBER_NAME");
    _$jscoverage['dataapi/models-olap.js'][298]++;
    var measure = new (pentaho.pda.dataelement)();
    _$jscoverage['dataapi/models-olap.js'][299]++;
    measure.dataType = pentaho.pda.Column.DATA_TYPES.NUMERIC;
    _$jscoverage['dataapi/models-olap.js'][300]++;
    measure.elementType = pentaho.pda.Column.ELEMENT_TYPES.FACT;
    _$jscoverage['dataapi/models-olap.js'][301]++;
    measure.id = memberUniqueName;
    _$jscoverage['dataapi/models-olap.js'][302]++;
    measure.name = memberName;
    _$jscoverage['dataapi/models-olap.js'][303]++;
    measure.parent = level;
    _$jscoverage['dataapi/models-olap.js'][304]++;
    level.addChild(measure);
    _$jscoverage['dataapi/models-olap.js'][305]++;
    this.addElement(measure);
    _$jscoverage['dataapi/models-olap.js'][307]++;
    rowset.next();
}
});
_$jscoverage['dataapi/models-olap.js'][311]++;
pentaho.pda.model.olap.prototype.discoverMeasures = (function (dimension, hierarchy, level) {
  _$jscoverage['dataapi/models-olap.js'][313]++;
  var properties = {};
  _$jscoverage['dataapi/models-olap.js'][314]++;
  properties[Xmla.PROP_DATASOURCEINFO] = this.xmlaDatasource;
  _$jscoverage['dataapi/models-olap.js'][315]++;
  properties[Xmla.PROP_CATALOG] = this.catalog;
  _$jscoverage['dataapi/models-olap.js'][317]++;
  var restrictions = {};
  _$jscoverage['dataapi/models-olap.js'][318]++;
  restrictions.CATALOG_NAME = this.catalog;
  _$jscoverage['dataapi/models-olap.js'][319]++;
  restrictions.CUBE_NAME = this.cubeName;
  _$jscoverage['dataapi/models-olap.js'][323]++;
  var rowset = this.xmla.discoverMDMeasures({url: this.XMLA_SERVICE_URL, properties: properties, restrictions: restrictions});
  _$jscoverage['dataapi/models-olap.js'][328]++;
  while (rowset.hasMoreRows()) {
    _$jscoverage['dataapi/models-olap.js'][329]++;
    var memberName = rowset.fieldVal("MEASURE_NAME");
    _$jscoverage['dataapi/models-olap.js'][330]++;
    var memberUniqueName = rowset.fieldVal("MEASURE_UNIQUE_NAME");
    _$jscoverage['dataapi/models-olap.js'][332]++;
    var measure = new (pentaho.pda.dataelement)();
    _$jscoverage['dataapi/models-olap.js'][333]++;
    measure.dataType = pentaho.pda.Column.DATA_TYPES.NUMERIC;
    _$jscoverage['dataapi/models-olap.js'][334]++;
    measure.elementType = pentaho.pda.Column.ELEMENT_TYPES.FACT;
    _$jscoverage['dataapi/models-olap.js'][335]++;
    measure.id = memberUniqueName;
    _$jscoverage['dataapi/models-olap.js'][336]++;
    measure.name = memberName;
    _$jscoverage['dataapi/models-olap.js'][337]++;
    measure.parent = level;
    _$jscoverage['dataapi/models-olap.js'][338]++;
    var agg = rowset.fieldVal("MEASURE_AGGREGATOR");
    _$jscoverage['dataapi/models-olap.js'][340]++;
    switch (agg) {
    case 1:
      _$jscoverage['dataapi/models-olap.js'][341]++;
      measure.defaultAggregation = pentaho.pda.Column.AGG_TYPES.SUM;
      _$jscoverage['dataapi/models-olap.js'][341]++;
      break;
    case 2:
      _$jscoverage['dataapi/models-olap.js'][342]++;
      measure.defaultAggregation = pentaho.pda.Column.AGG_TYPES.COUNT;
      _$jscoverage['dataapi/models-olap.js'][342]++;
      break;
    case 3:
      _$jscoverage['dataapi/models-olap.js'][343]++;
      measure.defaultAggregation = pentaho.pda.Column.AGG_TYPES.MIN;
      _$jscoverage['dataapi/models-olap.js'][343]++;
      break;
    case 4:
      _$jscoverage['dataapi/models-olap.js'][344]++;
      measure.defaultAggregation = pentaho.pda.Column.AGG_TYPES.MAX;
      _$jscoverage['dataapi/models-olap.js'][344]++;
      break;
    case 5:
      _$jscoverage['dataapi/models-olap.js'][345]++;
      measure.defaultAggregation = pentaho.pda.Column.AGG_TYPES.AVERAGE;
      _$jscoverage['dataapi/models-olap.js'][345]++;
      break;
    case 6:
      _$jscoverage['dataapi/models-olap.js'][346]++;
      measure.defaultAggregation = pentaho.pda.Column.AGG_TYPES.VAR;
      _$jscoverage['dataapi/models-olap.js'][346]++;
      break;
    case 7:
      _$jscoverage['dataapi/models-olap.js'][347]++;
      measure.defaultAggregation = pentaho.pda.Column.AGG_TYPES.STDDEV;
      _$jscoverage['dataapi/models-olap.js'][347]++;
      break;
    case 8:
      _$jscoverage['dataapi/models-olap.js'][348]++;
      measure.defaultAggregation = pentaho.pda.Column.AGG_TYPES.CALC;
      _$jscoverage['dataapi/models-olap.js'][348]++;
      break;
    case 9:
      _$jscoverage['dataapi/models-olap.js'][349]++;
      measure.defaultAggregation = pentaho.pda.Column.AGG_TYPES.UNKNOWN;
      _$jscoverage['dataapi/models-olap.js'][349]++;
      break;
    }
    _$jscoverage['dataapi/models-olap.js'][352]++;
    measure.selectedAggregation = measure.defaultAggregation;
    _$jscoverage['dataapi/models-olap.js'][353]++;
    measure.availableAggregations = new Array(measure.defaultAggregation);
    _$jscoverage['dataapi/models-olap.js'][354]++;
    level.addChild(measure);
    _$jscoverage['dataapi/models-olap.js'][355]++;
    measure.isQueryElement = true;
    _$jscoverage['dataapi/models-olap.js'][356]++;
    measure.category = hierarchy;
    _$jscoverage['dataapi/models-olap.js'][357]++;
    this.addElement(measure);
    _$jscoverage['dataapi/models-olap.js'][359]++;
    rowset.next();
}
});
_$jscoverage['dataapi/models-olap.js'][363]++;
pentaho.pda.model.olap.prototype.getAllColumns = (function () {
  _$jscoverage['dataapi/models-olap.js'][364]++;
  var columns = new Array();
  _$jscoverage['dataapi/models-olap.js'][366]++;
  for (var idx2 = 0; (idx2 < this.elements.length); (idx2++)) {
    _$jscoverage['dataapi/models-olap.js'][367]++;
    if (((this.elements[idx2].elementType == pentaho.pda.Column.ELEMENT_TYPES.LEVEL) || (this.elements[idx2].elementType == pentaho.pda.Column.ELEMENT_TYPES.FACT))) {
      _$jscoverage['dataapi/models-olap.js'][370]++;
      columns.push(this.elements[idx2]);
    }
}
  _$jscoverage['dataapi/models-olap.js'][373]++;
  return columns;
});
_$jscoverage['dataapi/models-olap.js'][378]++;
pentaho.pda.model.olap.prototype.createQuery = (function () {
  _$jscoverage['dataapi/models-olap.js'][379]++;
  var query = new (pentaho.pda.query.olap)(this);
  _$jscoverage['dataapi/models-olap.js'][380]++;
  return query;
});
_$jscoverage['dataapi/models-olap.js'][384]++;
pentaho.pda.model.olap.prototype.submitQuery = (function (query, rowLimit) {
  _$jscoverage['dataapi/models-olap.js'][386]++;
  if (((query.state.measures.length == 0) && (query.state.rowSelections.length == 0) && (query.state.columnSelections.length == 0))) {
    _$jscoverage['dataapi/models-olap.js'][388]++;
    var results = {metadata: [], resultset: []};
    _$jscoverage['dataapi/models-olap.js'][392]++;
    return results;
  }
  _$jscoverage['dataapi/models-olap.js'][395]++;
  var mdx = query.serialize();
  _$jscoverage['dataapi/models-olap.js'][396]++;
  query.state.mdx = mdx;
  _$jscoverage['dataapi/models-olap.js'][397]++;
  return this.submit(mdx, rowLimit);
});
_$jscoverage['dataapi/models-olap.js'][400]++;
pentaho.pda.model.olap.prototype.submit = (function (mdx, rowLimit) {
  _$jscoverage['dataapi/models-olap.js'][404]++;
  var results = {metadata: [], resultset: []};
  _$jscoverage['dataapi/models-olap.js'][408]++;
  var properties = {};
  _$jscoverage['dataapi/models-olap.js'][409]++;
  properties[Xmla.PROP_DATASOURCEINFO] = this.xmlaDatasource;
  _$jscoverage['dataapi/models-olap.js'][410]++;
  properties[Xmla.PROP_CATALOG] = this.catalog;
  _$jscoverage['dataapi/models-olap.js'][412]++;
  var restrictions = {};
  _$jscoverage['dataapi/models-olap.js'][413]++;
  restrictions.CATALOG_NAME = this.catalog;
  _$jscoverage['dataapi/models-olap.js'][414]++;
  restrictions.CUBE_NAME = this.cubeName;
  _$jscoverage['dataapi/models-olap.js'][415]++;
  try {
    _$jscoverage['dataapi/models-olap.js'][416]++;
    var rowset = this.xmla.executeTabular({url: this.XMLA_SERVICE_URL, statement: mdx, async: false, properties: properties, restrictions: restrictions});
    _$jscoverage['dataapi/models-olap.js'][424]++;
    var fields = rowset.getFields();
    _$jscoverage['dataapi/models-olap.js'][426]++;
    var fieldCount = fields.length;
    _$jscoverage['dataapi/models-olap.js'][429]++;
    for (var idx = 0; (idx < fieldCount); (idx++)) {
      _$jscoverage['dataapi/models-olap.js'][430]++;
      var id = this.cleanupFieldName(fields[idx].name);
      _$jscoverage['dataapi/models-olap.js'][432]++;
      var md = {colIndex: 0, colName: id, colType: this.getDataTypeFromXsd(fields[idx].type)};
      _$jscoverage['dataapi/models-olap.js'][438]++;
      results.metadata.push(md);
}
    _$jscoverage['dataapi/models-olap.js'][441]++;
    while (rowset.hasMoreRows()) {
      _$jscoverage['dataapi/models-olap.js'][442]++;
      var row = new Array();
      _$jscoverage['dataapi/models-olap.js'][443]++;
      for (var idx = 0; (idx < fieldCount); (idx++)) {
        _$jscoverage['dataapi/models-olap.js'][444]++;
        row.push(rowset.fieldVal(idx));
}
      _$jscoverage['dataapi/models-olap.js'][446]++;
      results.resultset.push(row);
      _$jscoverage['dataapi/models-olap.js'][447]++;
      rowset.next();
}
    _$jscoverage['dataapi/models-olap.js'][449]++;
    return results;
  }
  catch (e) {
    _$jscoverage['dataapi/models-olap.js'][451]++;
    alert(e.message);
  }
  _$jscoverage['dataapi/models-olap.js'][453]++;
  return null;
});
_$jscoverage['dataapi/models-olap.js'][456]++;
pentaho.pda.model.olap.prototype.cleanupFieldName = (function (name) {
  _$jscoverage['dataapi/models-olap.js'][457]++;
  name = name.replace(/_x005b_/g, "[");
  _$jscoverage['dataapi/models-olap.js'][458]++;
  name = name.replace(/_x005d_/g, "]");
  _$jscoverage['dataapi/models-olap.js'][459]++;
  return name;
});
_$jscoverage['dataapi/models-olap.js'][462]++;
pentaho.pda.model.olap.prototype.getDataTypeFromXsd = (function (type) {
  _$jscoverage['dataapi/models-olap.js'][464]++;
  switch (type) {
  case "xsd:boolean":
    _$jscoverage['dataapi/models-olap.js'][465]++;
    return pentaho.pda.Column.DATA_TYPES.BOOLEAN;
  case "xsd:decimal":
  case "xsd:double":
  case "xsd:float":
  case "xsd:int":
  case "xsd:integer":
  case "xsd:nonPositiveInteger":
  case "xsd:negativeInteger":
  case "xsd:nonNegativeInteger":
  case "xsd:positiveInteger":
  case "xsd:short":
  case "xsd:byte":
  case "xsd:long":
  case "xsd:unsignedLong":
  case "xsd:unsignedInt":
  case "xsd:unsignedShort":
  case "xsd:unsignedByte":
    _$jscoverage['dataapi/models-olap.js'][481]++;
    return pentaho.pda.Column.DATA_TYPES.NUMERIC;
  case "xsd:string":
    _$jscoverage['dataapi/models-olap.js'][482]++;
    return pentaho.pda.Column.DATA_TYPES.STRING;
  case "xsd:dateTime":
    _$jscoverage['dataapi/models-olap.js'][483]++;
    return pentaho.pda.Column.DATA_TYPES.DATE;
  case "Restrictions":
    _$jscoverage['dataapi/models-olap.js'][484]++;
    return pentaho.pda.Column.DATA_TYPES.UNKNOWN;
  default:
    _$jscoverage['dataapi/models-olap.js'][485]++;
    return pentaho.pda.Column.DATA_TYPES.UNKNOWN;
  }
});
_$jscoverage['dataapi/models-olap.js'][490]++;
pentaho.pda.model.olap.prototype.getAllValuesForColumn = (function (column) {
  _$jscoverage['dataapi/models-olap.js'][493]++;
  var facts = this.getColumnsByFieldType([pentaho.pda.Column.ELEMENT_TYPES.FACT]);
  _$jscoverage['dataapi/models-olap.js'][496]++;
  var root = column;
  _$jscoverage['dataapi/models-olap.js'][497]++;
  while ((root.parent != null)) {
    _$jscoverage['dataapi/models-olap.js'][498]++;
    root = root.parent;
}
  _$jscoverage['dataapi/models-olap.js'][502]++;
  var mdx = ("select " + facts[0].id + " ON COLUMNS, " + "Order({" + column.id + ".Members}," + root.id + ".CurrentMember.OrderKey, BASC) ON ROWS " + "from [" + this.cubeName + "]");
  _$jscoverage['dataapi/models-olap.js'][509]++;
  var properties = {};
  _$jscoverage['dataapi/models-olap.js'][510]++;
  properties[Xmla.PROP_DATASOURCEINFO] = this.xmlaDatasource;
  _$jscoverage['dataapi/models-olap.js'][511]++;
  properties[Xmla.PROP_CATALOG] = this.catalog;
  _$jscoverage['dataapi/models-olap.js'][513]++;
  var restrictions = {};
  _$jscoverage['dataapi/models-olap.js'][514]++;
  restrictions.CATALOG_NAME = this.catalog;
  _$jscoverage['dataapi/models-olap.js'][515]++;
  restrictions.CUBE_NAME = this.cubeName;
  _$jscoverage['dataapi/models-olap.js'][516]++;
  try {
    _$jscoverage['dataapi/models-olap.js'][526]++;
    var rowset = this.xmla.executeTabular({url: this.XMLA_SERVICE_URL, statement: mdx, async: false, properties: properties, restrictions: restrictions});
    _$jscoverage['dataapi/models-olap.js'][533]++;
    var results = {metadata: [], resultset: []};
    _$jscoverage['dataapi/models-olap.js'][538]++;
    var fields = rowset.getFields();
    _$jscoverage['dataapi/models-olap.js'][539]++;
    var targetCol = (fields.length - 2);
    _$jscoverage['dataapi/models-olap.js'][540]++;
    var fieldDef = fields[targetCol];
    _$jscoverage['dataapi/models-olap.js'][541]++;
    var md = {colIndex: 0, colName: column.id, colType: this.getDataTypeFromXsd(fieldDef.type), colLabel: column.name};
    _$jscoverage['dataapi/models-olap.js'][548]++;
    while (rowset.hasMoreRows()) {
      _$jscoverage['dataapi/models-olap.js'][549]++;
      var row = new Array();
      _$jscoverage['dataapi/models-olap.js'][550]++;
      row.push(rowset.fieldVal(targetCol));
      _$jscoverage['dataapi/models-olap.js'][551]++;
      results.resultset.push(row);
      _$jscoverage['dataapi/models-olap.js'][552]++;
      rowset.next();
}
    _$jscoverage['dataapi/models-olap.js'][555]++;
    return results;
  }
  catch (e) {
    _$jscoverage['dataapi/models-olap.js'][557]++;
    alert(e.message);
  }
  _$jscoverage['dataapi/models-olap.js'][559]++;
  return null;
});
_$jscoverage['dataapi/models-olap.js'][562]++;
pentaho.pda.model.olap.prototype.searchColumn = (function (column, searchStr, rowLimit, callback) {
  _$jscoverage['dataapi/models-olap.js'][564]++;
  var all = this.getAllValuesForColumn(column);
  _$jscoverage['dataapi/models-olap.js'][567]++;
  var results = {metadata: all.metadata, resultset: []};
  _$jscoverage['dataapi/models-olap.js'][572]++;
  for (var idx = 0; (idx < all.resultset.length); (idx++)) {
    _$jscoverage['dataapi/models-olap.js'][573]++;
    if ((all.resultset[idx][0].indexOf(searchStr) != -1)) {
      _$jscoverage['dataapi/models-olap.js'][574]++;
      results.resultset.push(all.resultset[idx]);
      _$jscoverage['dataapi/models-olap.js'][575]++;
      if (((rowLimit > 0) && (rowLimit == results.resultset.length))) {
        _$jscoverage['dataapi/models-olap.js'][576]++;
        break;
      }
    }
}
  _$jscoverage['dataapi/models-olap.js'][580]++;
  if (callback) {
    _$jscoverage['dataapi/models-olap.js'][581]++;
    callback(results);
  }
  else {
    _$jscoverage['dataapi/models-olap.js'][583]++;
    return results;
  }
});
_$jscoverage['dataapi/models-olap.js'][592]++;
pentaho.pda.query.olap = (function (model) {
  _$jscoverage['dataapi/models-olap.js'][593]++;
  pentaho.pda.query.call(this, model);
  _$jscoverage['dataapi/models-olap.js'][595]++;
  this.state = {"mdx": "mdx", columnSelections: [], rowSelections: [], measures: [], conditions: []};
});
_$jscoverage['dataapi/models-olap.js'][605]++;
inheritPrototype(pentaho.pda.query.olap, pentaho.pda.query);
_$jscoverage['dataapi/models-olap.js'][607]++;
pentaho.pda.query.olap.prototype.canQueryReturnData = (function () {
  _$jscoverage['dataapi/models-olap.js'][608]++;
  return ((this.state.columnSelections.length > 0) || (this.state.rowSelections.length > 0) || (this.state.measures.length > 0));
});
_$jscoverage['dataapi/models-olap.js'][611]++;
pentaho.pda.query.olap.prototype.prepare = (function () {
  _$jscoverage['dataapi/models-olap.js'][612]++;
  this.state.mdx = this.serialize(this);
});
_$jscoverage['dataapi/models-olap.js'][615]++;
pentaho.pda.query.olap.prototype.getQueryStr = (function () {
  _$jscoverage['dataapi/models-olap.js'][616]++;
  return this.state.mdx;
});
_$jscoverage['dataapi/models-olap.js'][619]++;
pentaho.pda.query.olap.prototype.createSelection = (function () {
  _$jscoverage['dataapi/models-olap.js'][620]++;
  var selection = {column: null, selection: null};
  _$jscoverage['dataapi/models-olap.js'][624]++;
  return selection;
});
_$jscoverage['dataapi/models-olap.js'][627]++;
pentaho.pda.query.olap.prototype.couldReturnData = (function () {
  _$jscoverage['dataapi/models-olap.js'][628]++;
  return ((this.state.measures.length > 0) || (this.state.rowSelections.length > 0) || (this.state.columnSelections.length > 0));
});
_$jscoverage['dataapi/models-olap.js'][631]++;
pentaho.pda.query.olap.prototype.createCondition = (function () {
  _$jscoverage['dataapi/models-olap.js'][632]++;
  var condition = {"column": null, "operator": null, "value": null, "combinationType": pentaho.pda.Column.OPERATOR_TYPES.AND};
  _$jscoverage['dataapi/models-olap.js'][638]++;
  return condition;
});
_$jscoverage['dataapi/models-olap.js'][641]++;
pentaho.pda.query.olap.prototype.addConditionById = (function (columnId, operator, value, combinationType) {
  _$jscoverage['dataapi/models-olap.js'][642]++;
  var column = this.model.getColumnById(columnId);
  _$jscoverage['dataapi/models-olap.js'][643]++;
  if ((column != null)) {
    _$jscoverage['dataapi/models-olap.js'][644]++;
    var condition = this.createCondition();
    _$jscoverage['dataapi/models-olap.js'][645]++;
    condition.column = column;
    _$jscoverage['dataapi/models-olap.js'][646]++;
    condition.operator = operator;
    _$jscoverage['dataapi/models-olap.js'][647]++;
    if ((((typeof value) == "object") && value.length)) {
      _$jscoverage['dataapi/models-olap.js'][648]++;
      condition.value = value;
    }
    else {
      _$jscoverage['dataapi/models-olap.js'][650]++;
      condition.value = [value];
    }
    _$jscoverage['dataapi/models-olap.js'][652]++;
    condition.combinationType = combinationType;
    _$jscoverage['dataapi/models-olap.js'][653]++;
    this.addCondition(condition);
    _$jscoverage['dataapi/models-olap.js'][654]++;
    return condition;
  }
  _$jscoverage['dataapi/models-olap.js'][656]++;
  return null;
});
_$jscoverage['dataapi/models-olap.js'][659]++;
pentaho.pda.query.olap.prototype.addCondition = (function (condition) {
  _$jscoverage['dataapi/models-olap.js'][660]++;
  this.state.conditions.push(condition);
});
_$jscoverage['dataapi/models-olap.js'][663]++;
pentaho.pda.query.olap.prototype.addSelectionById = (function (columnId, location) {
  _$jscoverage['dataapi/models-olap.js'][664]++;
  var column = this.model.getColumnById(columnId);
  _$jscoverage['dataapi/models-olap.js'][665]++;
  if ((column != null)) {
    _$jscoverage['dataapi/models-olap.js'][667]++;
    var selection = this.createSelection();
    _$jscoverage['dataapi/models-olap.js'][668]++;
    selection.column = column;
    _$jscoverage['dataapi/models-olap.js'][669]++;
    if ((column.elementType == pentaho.pda.Column.ELEMENT_TYPES.FACT)) {
      _$jscoverage['dataapi/models-olap.js'][671]++;
      this.state.measures.push(selection);
    }
    _$jscoverage['dataapi/models-olap.js'][674]++;
    if ((column.elementType == pentaho.pda.Column.ELEMENT_TYPES.LEVEL)) {
      _$jscoverage['dataapi/models-olap.js'][676]++;
      if ((location == pentaho.pda.AXIS_LOCATION_ACROSS)) {
        _$jscoverage['dataapi/models-olap.js'][677]++;
        this.state.columnSelections.push(selection);
      }
      else {
        _$jscoverage['dataapi/models-olap.js'][679]++;
        if ((location == pentaho.pda.AXIS_LOCATION_DOWN)) {
          _$jscoverage['dataapi/models-olap.js'][680]++;
          this.state.rowSelections.push(selection);
        }
        else {
          _$jscoverage['dataapi/models-olap.js'][684]++;
          this.state.rowSelections.push(selection);
        }
      }
    }
    _$jscoverage['dataapi/models-olap.js'][688]++;
    return column;
  }
  _$jscoverage['dataapi/models-olap.js'][690]++;
  return null;
});
_$jscoverage['dataapi/models-olap.js'][694]++;
pentaho.pda.query.olap.prototype.serialize = (function () {
  _$jscoverage['dataapi/models-olap.js'][696]++;
  if (((this.state.measures.length == 0) && (this.state.rowSelections.length == 0) && (this.state.columnSelections.length == 0))) {
    _$jscoverage['dataapi/models-olap.js'][698]++;
    return "";
  }
  _$jscoverage['dataapi/models-olap.js'][703]++;
  var measures = this.state.measures;
  _$jscoverage['dataapi/models-olap.js'][704]++;
  if ((measures.length == 0)) {
    _$jscoverage['dataapi/models-olap.js'][705]++;
    var column = this.model.getColumnsByFieldType([pentaho.pda.Column.ELEMENT_TYPES.FACT])[0];
    _$jscoverage['dataapi/models-olap.js'][706]++;
    var selection = this.createSelection();
    _$jscoverage['dataapi/models-olap.js'][707]++;
    selection.column = column;
    _$jscoverage['dataapi/models-olap.js'][708]++;
    measures = [selection];
  }
  _$jscoverage['dataapi/models-olap.js'][712]++;
  var mdx = "select ";
  _$jscoverage['dataapi/models-olap.js'][713]++;
  var mdxFrag = new Array();
  _$jscoverage['dataapi/models-olap.js'][715]++;
  for (var idx = 0; (idx < this.state.columnSelections.length); (idx++)) {
    _$jscoverage['dataapi/models-olap.js'][716]++;
    mdxFrag.push(this.getSelectionMdx(this.state.columnSelections[idx], this.state.conditions));
}
  _$jscoverage['dataapi/models-olap.js'][718]++;
  mdxFrag.push(this.getMeasuresMdx(measures));
  _$jscoverage['dataapi/models-olap.js'][719]++;
  if ((mdxFrag.length == 1)) {
    _$jscoverage['dataapi/models-olap.js'][720]++;
    mdx += mdxFrag[0];
  }
  else {
    _$jscoverage['dataapi/models-olap.js'][723]++;
    mdx += "Crossjoin(";
    _$jscoverage['dataapi/models-olap.js'][724]++;
    for (var idx = 0; (idx < mdxFrag.length); (idx++)) {
      _$jscoverage['dataapi/models-olap.js'][725]++;
      if ((idx > 0)) {
        _$jscoverage['dataapi/models-olap.js'][726]++;
        mdx += ", ";
      }
      _$jscoverage['dataapi/models-olap.js'][728]++;
      mdx += mdxFrag[idx];
}
    _$jscoverage['dataapi/models-olap.js'][730]++;
    mdx += ")";
  }
  _$jscoverage['dataapi/models-olap.js'][734]++;
  mdx += " ON COLUMNS, ";
  _$jscoverage['dataapi/models-olap.js'][736]++;
  var mdxFrag = new Array();
  _$jscoverage['dataapi/models-olap.js'][737]++;
  for (var idx = 0; (idx < this.state.rowSelections.length); (idx++)) {
    _$jscoverage['dataapi/models-olap.js'][738]++;
    mdxFrag.push(this.getSelectionMdx(this.state.rowSelections[idx], this.state.conditions));
}
  _$jscoverage['dataapi/models-olap.js'][741]++;
  if ((mdxFrag.length == 1)) {
    _$jscoverage['dataapi/models-olap.js'][742]++;
    mdx += mdxFrag[0];
  }
  else {
    _$jscoverage['dataapi/models-olap.js'][745]++;
    mdx += "Crossjoin(";
    _$jscoverage['dataapi/models-olap.js'][746]++;
    for (var idx = 0; (idx < mdxFrag.length); (idx++)) {
      _$jscoverage['dataapi/models-olap.js'][747]++;
      if ((idx > 0)) {
        _$jscoverage['dataapi/models-olap.js'][748]++;
        mdx += ", ";
      }
      _$jscoverage['dataapi/models-olap.js'][750]++;
      mdx += mdxFrag[idx];
}
    _$jscoverage['dataapi/models-olap.js'][752]++;
    mdx += ")";
  }
  _$jscoverage['dataapi/models-olap.js'][756]++;
  mdx += (" ON ROWS from [" + this.model.cubeName + "]");
  _$jscoverage['dataapi/models-olap.js'][758]++;
  mdx += this.getWhereMdx();
  _$jscoverage['dataapi/models-olap.js'][760]++;
  return mdx;
});
_$jscoverage['dataapi/models-olap.js'][763]++;
pentaho.pda.query.olap.prototype.getWhereMdx = (function () {
  _$jscoverage['dataapi/models-olap.js'][764]++;
  var mdxfrag = " where (";
  _$jscoverage['dataapi/models-olap.js'][766]++;
  var found = false;
  _$jscoverage['dataapi/models-olap.js'][768]++;
  for (var idx = 0; (idx < this.state.conditions.length); (idx++)) {
    _$jscoverage['dataapi/models-olap.js'][769]++;
    if ((this.state.conditions[idx].column.elementType == pentaho.pda.Column.ELEMENT_TYPES.FACT)) {
      _$jscoverage['dataapi/models-olap.js'][770]++;
      if ((idx > 0)) {
        _$jscoverage['dataapi/models-olap.js'][771]++;
        mdxfrag += (" " + this.state.conditions[idx].combinationType + " ");
      }
      _$jscoverage['dataapi/models-olap.js'][773]++;
      mdxfrag += this.state.conditions[idx].column.id;
      _$jscoverage['dataapi/models-olap.js'][774]++;
      mdxfrag += (" " + this.state.conditions[idx].operator + " ");
      _$jscoverage['dataapi/models-olap.js'][775]++;
      mdxfrag += this.state.conditions[idx].value[0];
      _$jscoverage['dataapi/models-olap.js'][776]++;
      found = true;
    }
    else {
      _$jscoverage['dataapi/models-olap.js'][779]++;
      var hasSelection = false;
      _$jscoverage['dataapi/models-olap.js'][780]++;
      for (var s = 0; (s < this.state.rowSelections.length); (s++)) {
        _$jscoverage['dataapi/models-olap.js'][781]++;
        if ((this.state.rowSelections[s].column.id == this.state.conditions[idx].column.id)) {
          _$jscoverage['dataapi/models-olap.js'][782]++;
          hasSelection = true;
          _$jscoverage['dataapi/models-olap.js'][783]++;
          break;
        }
}
      _$jscoverage['dataapi/models-olap.js'][786]++;
      for (var s = 0; (s < this.state.columnSelections.length); (s++)) {
        _$jscoverage['dataapi/models-olap.js'][787]++;
        if ((this.state.columnSelections[s].column.id == this.state.conditions[idx].column.id)) {
          _$jscoverage['dataapi/models-olap.js'][788]++;
          hasSelection = true;
          _$jscoverage['dataapi/models-olap.js'][789]++;
          break;
        }
}
      _$jscoverage['dataapi/models-olap.js'][792]++;
      if ((! hasSelection)) {
        _$jscoverage['dataapi/models-olap.js'][793]++;
        mdxfrag += this.state.conditions[idx].column.id;
        _$jscoverage['dataapi/models-olap.js'][794]++;
        mdxfrag += ".[";
        _$jscoverage['dataapi/models-olap.js'][795]++;
        mdxfrag += this.state.conditions[idx].value[0];
        _$jscoverage['dataapi/models-olap.js'][796]++;
        mdxfrag += "]";
        _$jscoverage['dataapi/models-olap.js'][797]++;
        found = true;
      }
    }
}
  _$jscoverage['dataapi/models-olap.js'][802]++;
  mdxfrag += ")";
  _$jscoverage['dataapi/models-olap.js'][803]++;
  if (found) {
    _$jscoverage['dataapi/models-olap.js'][804]++;
    return mdxfrag;
  }
  else {
    _$jscoverage['dataapi/models-olap.js'][806]++;
    return "";
  }
});
_$jscoverage['dataapi/models-olap.js'][810]++;
pentaho.pda.query.olap.prototype.getMeasuresMdx = (function (measures) {
  _$jscoverage['dataapi/models-olap.js'][811]++;
  var mdx = "";
  _$jscoverage['dataapi/models-olap.js'][812]++;
  if ((measures.length > 1)) {
    _$jscoverage['dataapi/models-olap.js'][813]++;
    mdx += "{";
  }
  _$jscoverage['dataapi/models-olap.js'][815]++;
  for (var idx = 0; (idx < measures.length); (idx++)) {
    _$jscoverage['dataapi/models-olap.js'][816]++;
    if ((idx > 0)) {
      _$jscoverage['dataapi/models-olap.js'][817]++;
      mdx += ", ";
    }
    _$jscoverage['dataapi/models-olap.js'][819]++;
    mdx += measures[idx].column.id;
}
  _$jscoverage['dataapi/models-olap.js'][821]++;
  if ((measures.length > 1)) {
    _$jscoverage['dataapi/models-olap.js'][822]++;
    mdx += "}";
  }
  _$jscoverage['dataapi/models-olap.js'][824]++;
  return mdx;
});
_$jscoverage['dataapi/models-olap.js'][827]++;
pentaho.pda.query.olap.prototype.getSelectionMdx = (function (selection, conditions) {
  _$jscoverage['dataapi/models-olap.js'][830]++;
  var doneMembers = false;
  _$jscoverage['dataapi/models-olap.js'][831]++;
  var needBrace = false;
  _$jscoverage['dataapi/models-olap.js'][832]++;
  var mdxfrag = "";
  _$jscoverage['dataapi/models-olap.js'][833]++;
  for (var c = 0; (c < conditions.length); (c++)) {
    _$jscoverage['dataapi/models-olap.js'][834]++;
    if ((conditions[c].column.id == selection.column.id)) {
      _$jscoverage['dataapi/models-olap.js'][835]++;
      var values = conditions[c].value;
      _$jscoverage['dataapi/models-olap.js'][836]++;
      for (var v = 0; (v < values.length); (v++)) {
        _$jscoverage['dataapi/models-olap.js'][837]++;
        if (doneMembers) {
          _$jscoverage['dataapi/models-olap.js'][838]++;
          mdxfrag += ", ";
          _$jscoverage['dataapi/models-olap.js'][839]++;
          needBrace = true;
        }
        _$jscoverage['dataapi/models-olap.js'][841]++;
        mdxfrag += selection.column.id;
        _$jscoverage['dataapi/models-olap.js'][842]++;
        mdxfrag += ".[";
        _$jscoverage['dataapi/models-olap.js'][843]++;
        mdxfrag += values[v];
        _$jscoverage['dataapi/models-olap.js'][844]++;
        mdxfrag += "]";
        _$jscoverage['dataapi/models-olap.js'][845]++;
        doneMembers = true;
}
    }
}
  _$jscoverage['dataapi/models-olap.js'][849]++;
  if ((! doneMembers)) {
    _$jscoverage['dataapi/models-olap.js'][851]++;
    mdxfrag += selection.column.id;
    _$jscoverage['dataapi/models-olap.js'][852]++;
    mdxfrag += ".Members";
  }
  _$jscoverage['dataapi/models-olap.js'][855]++;
  if (needBrace) {
    _$jscoverage['dataapi/models-olap.js'][856]++;
    return ("{" + mdxfrag + "}");
  }
  else {
    _$jscoverage['dataapi/models-olap.js'][858]++;
    return mdxfrag;
  }
});
