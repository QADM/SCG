/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['util/util.js']) {
  _$jscoverage['util/util.js'] = [];
  _$jscoverage['util/util.js'][4] = 0;
  _$jscoverage['util/util.js'][5] = 0;
  _$jscoverage['util/util.js'][13] = 0;
  _$jscoverage['util/util.js'][14] = 0;
  _$jscoverage['util/util.js'][17] = 0;
  _$jscoverage['util/util.js'][20] = 0;
  _$jscoverage['util/util.js'][21] = 0;
  _$jscoverage['util/util.js'][22] = 0;
  _$jscoverage['util/util.js'][24] = 0;
  _$jscoverage['util/util.js'][25] = 0;
  _$jscoverage['util/util.js'][29] = 0;
  _$jscoverage['util/util.js'][31] = 0;
  _$jscoverage['util/util.js'][40] = 0;
  _$jscoverage['util/util.js'][41] = 0;
  _$jscoverage['util/util.js'][42] = 0;
  _$jscoverage['util/util.js'][44] = 0;
  _$jscoverage['util/util.js'][55] = 0;
  _$jscoverage['util/util.js'][56] = 0;
  _$jscoverage['util/util.js'][57] = 0;
  _$jscoverage['util/util.js'][58] = 0;
  _$jscoverage['util/util.js'][60] = 0;
  _$jscoverage['util/util.js'][61] = 0;
  _$jscoverage['util/util.js'][62] = 0;
  _$jscoverage['util/util.js'][63] = 0;
  _$jscoverage['util/util.js'][64] = 0;
  _$jscoverage['util/util.js'][65] = 0;
  _$jscoverage['util/util.js'][66] = 0;
  _$jscoverage['util/util.js'][67] = 0;
  _$jscoverage['util/util.js'][68] = 0;
  _$jscoverage['util/util.js'][69] = 0;
  _$jscoverage['util/util.js'][70] = 0;
  _$jscoverage['util/util.js'][71] = 0;
  _$jscoverage['util/util.js'][72] = 0;
  _$jscoverage['util/util.js'][73] = 0;
  _$jscoverage['util/util.js'][74] = 0;
  _$jscoverage['util/util.js'][75] = 0;
  _$jscoverage['util/util.js'][76] = 0;
  _$jscoverage['util/util.js'][77] = 0;
  _$jscoverage['util/util.js'][80] = 0;
  _$jscoverage['util/util.js'][81] = 0;
  _$jscoverage['util/util.js'][82] = 0;
  _$jscoverage['util/util.js'][83] = 0;
  _$jscoverage['util/util.js'][85] = 0;
  _$jscoverage['util/util.js'][86] = 0;
  _$jscoverage['util/util.js'][87] = 0;
  _$jscoverage['util/util.js'][91] = 0;
  _$jscoverage['util/util.js'][92] = 0;
  _$jscoverage['util/util.js'][94] = 0;
  _$jscoverage['util/util.js'][95] = 0;
  _$jscoverage['util/util.js'][96] = 0;
  _$jscoverage['util/util.js'][99] = 0;
  _$jscoverage['util/util.js'][100] = 0;
  _$jscoverage['util/util.js'][101] = 0;
  _$jscoverage['util/util.js'][102] = 0;
  _$jscoverage['util/util.js'][104] = 0;
  _$jscoverage['util/util.js'][106] = 0;
  _$jscoverage['util/util.js'][108] = 0;
  _$jscoverage['util/util.js'][109] = 0;
  _$jscoverage['util/util.js'][110] = 0;
  _$jscoverage['util/util.js'][111] = 0;
  _$jscoverage['util/util.js'][112] = 0;
  _$jscoverage['util/util.js'][113] = 0;
  _$jscoverage['util/util.js'][115] = 0;
  _$jscoverage['util/util.js'][119] = 0;
  _$jscoverage['util/util.js'][122] = 0;
  _$jscoverage['util/util.js'][124] = 0;
  _$jscoverage['util/util.js'][126] = 0;
  _$jscoverage['util/util.js'][127] = 0;
  _$jscoverage['util/util.js'][129] = 0;
  _$jscoverage['util/util.js'][130] = 0;
  _$jscoverage['util/util.js'][132] = 0;
  _$jscoverage['util/util.js'][133] = 0;
  _$jscoverage['util/util.js'][135] = 0;
  _$jscoverage['util/util.js'][136] = 0;
  _$jscoverage['util/util.js'][137] = 0;
  _$jscoverage['util/util.js'][139] = 0;
  _$jscoverage['util/util.js'][165] = 0;
  _$jscoverage['util/util.js'][166] = 0;
  _$jscoverage['util/util.js'][167] = 0;
  _$jscoverage['util/util.js'][168] = 0;
  _$jscoverage['util/util.js'][169] = 0;
  _$jscoverage['util/util.js'][170] = 0;
  _$jscoverage['util/util.js'][171] = 0;
  _$jscoverage['util/util.js'][176] = 0;
}
_$jscoverage['util/util.js'].source = ["<span class=\"c\">/**</span>","<span class=\"c\"> * Utility methods designed for general use</span>","<span class=\"c\"> */</span>","pen<span class=\"k\">.</span>define<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"k\">{</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Parse the parameters from the current URL.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @return Map of decoded parameter names and values</span>","<span class=\"c\">     */</span>","    getUrlParameters<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> urlParams <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> e<span class=\"k\">,</span>","          a <span class=\"k\">=</span> <span class=\"s\">/\\+/g</span><span class=\"k\">,</span>  <span class=\"c\">// Regex for replacing addition symbol with a space</span>","          reg <span class=\"k\">=</span> <span class=\"s\">/([^&amp;=]+)=?([^&amp;]*)/g</span><span class=\"k\">,</span>","          decode <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>s<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> decodeURIComponent<span class=\"k\">(</span>s<span class=\"k\">.</span>replace<span class=\"k\">(</span>a<span class=\"k\">,</span> <span class=\"s\">\" \"</span><span class=\"k\">));</span> <span class=\"k\">}</span><span class=\"k\">,</span>","          query <span class=\"k\">=</span> window<span class=\"k\">.</span>location<span class=\"k\">.</span>search<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","","      <span class=\"k\">while</span> <span class=\"k\">(</span>e <span class=\"k\">=</span> reg<span class=\"k\">.</span>exec<span class=\"k\">(</span>query<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> paramName <span class=\"k\">=</span> decode<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]);</span>","        <span class=\"k\">var</span> paramVal <span class=\"k\">=</span> decode<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]);</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>urlParams<span class=\"k\">[</span>paramName<span class=\"k\">]</span> <span class=\"k\">!==</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","          paramVal <span class=\"k\">=</span> $<span class=\"k\">.</span>isArray<span class=\"k\">(</span>urlParams<span class=\"k\">[</span>paramName<span class=\"k\">])</span>","              <span class=\"k\">?</span> urlParams<span class=\"k\">[</span>paramName<span class=\"k\">].</span>concat<span class=\"k\">([</span>paramVal<span class=\"k\">])</span>","              <span class=\"k\">:</span> <span class=\"k\">[</span>urlParams<span class=\"k\">[</span>paramName<span class=\"k\">],</span> paramVal<span class=\"k\">];</span>","        <span class=\"k\">}</span>","        urlParams<span class=\"k\">[</span>paramName<span class=\"k\">]</span> <span class=\"k\">=</span> paramVal<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> urlParams<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Parses the language portion of a locale URL parameter, if defined.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @return language portion of the URL parameter \"locale\". If it is not defined, undefined is returned.</span>","<span class=\"c\">     */</span>","    getLocale<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> locale <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getUrlParameters<span class=\"k\">().</span>locale<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>locale <span class=\"k\">&amp;&amp;</span> locale<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        locale <span class=\"k\">=</span> locale<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> locale<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Used by localizeDom, not intended for direct calling</span>","<span class=\"c\">     * @param key</span>","<span class=\"c\">     * @param text</span>","<span class=\"c\">     */</span>","    localizeDomCtrl<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">,</span> text<span class=\"k\">,</span> idPrefix<span class=\"k\">)</span> <span class=\"k\">{</span>","","      <span class=\"k\">var</span> prop <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> e <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> id <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> prefix <span class=\"k\">=</span> idPrefix <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","      <span class=\"k\">if</span><span class=\"k\">(</span>key<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'_label'</span><span class=\"k\">)</span> <span class=\"k\">==</span> key<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">6</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        id <span class=\"k\">=</span> key<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> key<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">6</span><span class=\"k\">);</span>","        prop <span class=\"k\">=</span> <span class=\"s\">'label'</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>key<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'_title'</span><span class=\"k\">)</span> <span class=\"k\">==</span> key<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">6</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        id <span class=\"k\">=</span> key<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> key<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">6</span><span class=\"k\">);</span>","        prop <span class=\"k\">=</span> <span class=\"s\">'title'</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>key<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'_content'</span><span class=\"k\">)</span> <span class=\"k\">==</span> key<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">8</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        id <span class=\"k\">=</span> key<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> key<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">8</span><span class=\"k\">);</span>","        prop <span class=\"k\">=</span> <span class=\"s\">'inner'</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>key<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'_legend'</span><span class=\"k\">)</span> <span class=\"k\">==</span> key<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">7</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        id <span class=\"k\">=</span> key<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> key<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">7</span><span class=\"k\">);</span>","        prop <span class=\"k\">=</span> <span class=\"s\">'legend'</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>key<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'_header'</span><span class=\"k\">)</span> <span class=\"k\">==</span> key<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">7</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        id <span class=\"k\">=</span> key<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> key<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">7</span><span class=\"k\">);</span>","        prop <span class=\"k\">=</span> <span class=\"s\">'header'</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>key<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'_button'</span><span class=\"k\">)</span> <span class=\"k\">==</span> key<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">7</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        id <span class=\"k\">=</span> key<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> key<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">7</span><span class=\"k\">);</span>","        prop <span class=\"k\">=</span> <span class=\"s\">'inner'</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span><span class=\"k\">(</span>id <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        id <span class=\"k\">=</span> prefix <span class=\"k\">+</span> id<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">[</span>id<span class=\"k\">])</span> <span class=\"k\">{</span>","          e <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">[</span>id<span class=\"k\">];</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          e <span class=\"k\">=</span> dijit<span class=\"k\">.</span>byId<span class=\"k\">(</span>id<span class=\"k\">);</span>","          <span class=\"k\">if</span><span class=\"k\">(!</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            e <span class=\"k\">=</span> dojo<span class=\"k\">.</span>byId<span class=\"k\">(</span>id<span class=\"k\">);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">var</span> index <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","      <span class=\"k\">if</span><span class=\"k\">(!</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// see if there are indexed items</span>","        e <span class=\"k\">=</span> dojo<span class=\"k\">.</span>byId<span class=\"k\">(</span>id<span class=\"k\">+</span><span class=\"s\">'1'</span><span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","          index <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">while</span><span class=\"k\">(</span>e <span class=\"k\">&amp;&amp;</span> prop<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>prop <span class=\"k\">==</span> <span class=\"s\">'inner'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span><span class=\"k\">(</span>e<span class=\"k\">.</span>domNode<span class=\"k\">)</span> <span class=\"k\">{</span>","            e <span class=\"k\">=</span> e<span class=\"k\">.</span>domNode<span class=\"k\">;</span>","          <span class=\"k\">}</span>","          e<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> text<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>prop <span class=\"k\">==</span> <span class=\"s\">'legend'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"c\">// this is for field set legends</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>e<span class=\"k\">.</span>firstElementChild <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> child <span class=\"k\">=</span> e<span class=\"k\">.</span>firstChild<span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>child<span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"k\">if</span> <span class=\"k\">(</span>child<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"c\">/*Node.ELEMENT_NODE*/</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                child<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> text<span class=\"k\">;</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","              <span class=\"k\">}</span>","              child <span class=\"k\">=</span> child<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"k\">{</span>","            e<span class=\"k\">.</span>firstElementChild<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> text<span class=\"k\">;</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>prop <span class=\"k\">==</span> <span class=\"s\">'label'</span> <span class=\"k\">&amp;&amp;</span> e<span class=\"k\">.</span>setLabel<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"c\">// this is for Dojo menu items</span>","          e<span class=\"k\">.</span>setLabel<span class=\"k\">(</span>text<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>prop <span class=\"k\">==</span> <span class=\"s\">'title'</span> <span class=\"k\">&amp;&amp;</span> e<span class=\"k\">.</span>setTitle<span class=\"k\">)</span> <span class=\"k\">{</span>","          e<span class=\"k\">.</span>setTitle<span class=\"k\">(</span>text<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>e<span class=\"k\">.</span>set<span class=\"k\">)</span> <span class=\"k\">{</span>","          e<span class=\"k\">.</span>set<span class=\"k\">(</span>prop<span class=\"k\">,</span> text<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>prop <span class=\"k\">==</span> <span class=\"s\">'title'</span> <span class=\"k\">&amp;&amp;</span> e<span class=\"k\">.</span>title<span class=\"k\">)</span> <span class=\"k\">{</span>","          e<span class=\"k\">.</span>title <span class=\"k\">=</span> text<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>index <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          index<span class=\"k\">++;</span>","          e <span class=\"k\">=</span> dojo<span class=\"k\">.</span>byId<span class=\"k\">(</span>id<span class=\"k\">+</span>index<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          e <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Inject localization strings into DOM elements using a naming convention.</span>","<span class=\"c\">     * &lt;p&gt;</span>","<span class=\"c\">     * Iterates over all keys in the bundle (assumed to have been previously loaded) and matches them to</span>","<span class=\"c\">     * DOM elements ID based on a naming convention.</span>","<span class=\"c\">     * &lt;code&gt;</span>","<span class=\"c\">     *   errorMessage_label=Here is an error Message.</span>","<span class=\"c\">     * &lt;/code&gt;</span>","<span class=\"c\">     * errorMessage will be the DOM id it tries to match on and label is the type of element to set the value on.</span>","<span class=\"c\">     * Supported types:</span>","<span class=\"c\">     * &lt;ul&gt;</span>","<span class=\"c\">     *   &lt;li&gt;label: sets a label&lt;/li&gt;</span>","<span class=\"c\">     *   &lt;li&gt;title: sets a title&lt;/li&gt;</span>","<span class=\"c\">     *   &lt;li&gt;legend - sets a legend in a fieldset&lt;/li&gt;</span>","<span class=\"c\">     *   &lt;li&gt;content : sets innerHTML&lt;/li&gt;</span>","<span class=\"c\">     * &lt;/ul&gt;</span>","<span class=\"c\">     * &lt;/p&gt;</span>","<span class=\"c\">     * @param bundleName - name of the mesages bundle to use as the source for translations</span>","<span class=\"c\">     * @param prefix - id prefix to match on when getting id's from the dom</span>","<span class=\"c\">     */</span>","    localizeDom<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span><span class=\"c\">/*String*/</span> bundleName<span class=\"k\">,</span> <span class=\"c\">/*Optional|String*/</span> prefix<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> key<span class=\"k\">;</span>","      <span class=\"k\">if</span><span class=\"k\">(</span>pentaho <span class=\"k\">&amp;&amp;</span> pentaho<span class=\"k\">.</span>common <span class=\"k\">&amp;&amp;</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>Messages<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> bundle <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>Messages<span class=\"k\">.</span>getBundle<span class=\"k\">(</span>bundleName<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>bundle<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> bundle<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>bundle<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>key<span class=\"k\">))</span> <span class=\"k\">{</span>","              <span class=\"k\">this</span><span class=\"k\">.</span>localizeDomCtrl<span class=\"k\">(</span>key<span class=\"k\">,</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>Messages<span class=\"k\">.</span>getString<span class=\"k\">(</span>key<span class=\"k\">),</span> prefix<span class=\"k\">);</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        console<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">\"pentaho.common.Messages not available for localizing the DOM\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['util/util.js'][4]++;
pen.define((function () {
  _$jscoverage['util/util.js'][5]++;
  return ({getUrlParameters: (function () {
  _$jscoverage['util/util.js'][13]++;
  var urlParams = {};
  _$jscoverage['util/util.js'][14]++;
  var e, a = /\+/g, reg = /([^&=]+)=?([^&]*)/g, decode = (function (s) {
  _$jscoverage['util/util.js'][17]++;
  return decodeURIComponent(s.replace(a, " "));
}), query = window.location.search.substring(1);
  _$jscoverage['util/util.js'][20]++;
  while ((e = reg.exec(query))) {
    _$jscoverage['util/util.js'][21]++;
    var paramName = decode(e[1]);
    _$jscoverage['util/util.js'][22]++;
    var paramVal = decode(e[2]);
    _$jscoverage['util/util.js'][24]++;
    if ((urlParams[paramName] !== undefined)) {
      _$jscoverage['util/util.js'][25]++;
      paramVal = ($.isArray(urlParams[paramName])? urlParams[paramName].concat([paramVal]): [urlParams[paramName], paramVal]);
    }
    _$jscoverage['util/util.js'][29]++;
    urlParams[paramName] = paramVal;
}
  _$jscoverage['util/util.js'][31]++;
  return urlParams;
}), getLocale: (function () {
  _$jscoverage['util/util.js'][40]++;
  var locale = this.getUrlParameters().locale;
  _$jscoverage['util/util.js'][41]++;
  if ((locale && (locale.length > 2))) {
    _$jscoverage['util/util.js'][42]++;
    locale = locale.substring(0, 2);
  }
  _$jscoverage['util/util.js'][44]++;
  return locale;
}), localizeDomCtrl: (function (key, text, idPrefix) {
  _$jscoverage['util/util.js'][55]++;
  var prop = null;
  _$jscoverage['util/util.js'][56]++;
  var e = null;
  _$jscoverage['util/util.js'][57]++;
  var id = null;
  _$jscoverage['util/util.js'][58]++;
  var prefix = (idPrefix || "");
  _$jscoverage['util/util.js'][60]++;
  if ((key.indexOf("_label") == (key.length - 6))) {
    _$jscoverage['util/util.js'][61]++;
    id = key.substr(0, (key.length - 6));
    _$jscoverage['util/util.js'][62]++;
    prop = "label";
  }
  else {
    _$jscoverage['util/util.js'][63]++;
    if ((key.indexOf("_title") == (key.length - 6))) {
      _$jscoverage['util/util.js'][64]++;
      id = key.substr(0, (key.length - 6));
      _$jscoverage['util/util.js'][65]++;
      prop = "title";
    }
    else {
      _$jscoverage['util/util.js'][66]++;
      if ((key.indexOf("_content") == (key.length - 8))) {
        _$jscoverage['util/util.js'][67]++;
        id = key.substr(0, (key.length - 8));
        _$jscoverage['util/util.js'][68]++;
        prop = "inner";
      }
      else {
        _$jscoverage['util/util.js'][69]++;
        if ((key.indexOf("_legend") == (key.length - 7))) {
          _$jscoverage['util/util.js'][70]++;
          id = key.substr(0, (key.length - 7));
          _$jscoverage['util/util.js'][71]++;
          prop = "legend";
        }
        else {
          _$jscoverage['util/util.js'][72]++;
          if ((key.indexOf("_header") == (key.length - 7))) {
            _$jscoverage['util/util.js'][73]++;
            id = key.substr(0, (key.length - 7));
            _$jscoverage['util/util.js'][74]++;
            prop = "header";
          }
          else {
            _$jscoverage['util/util.js'][75]++;
            if ((key.indexOf("_button") == (key.length - 7))) {
              _$jscoverage['util/util.js'][76]++;
              id = key.substr(0, (key.length - 7));
              _$jscoverage['util/util.js'][77]++;
              prop = "inner";
            }
          }
        }
      }
    }
  }
  _$jscoverage['util/util.js'][80]++;
  if ((id != null)) {
    _$jscoverage['util/util.js'][81]++;
    id = (prefix + id);
    _$jscoverage['util/util.js'][82]++;
    if (this[id]) {
      _$jscoverage['util/util.js'][83]++;
      e = this[id];
    }
    else {
      _$jscoverage['util/util.js'][85]++;
      e = dijit.byId(id);
      _$jscoverage['util/util.js'][86]++;
      if ((! e)) {
        _$jscoverage['util/util.js'][87]++;
        e = dojo.byId(id);
      }
    }
  }
  _$jscoverage['util/util.js'][91]++;
  var index = -1;
  _$jscoverage['util/util.js'][92]++;
  if ((! e)) {
    _$jscoverage['util/util.js'][94]++;
    e = dojo.byId((id + "1"));
    _$jscoverage['util/util.js'][95]++;
    if (e) {
      _$jscoverage['util/util.js'][96]++;
      index = 1;
    }
  }
  _$jscoverage['util/util.js'][99]++;
  while ((e && prop)) {
    _$jscoverage['util/util.js'][100]++;
    if ((prop == "inner")) {
      _$jscoverage['util/util.js'][101]++;
      if (e.domNode) {
        _$jscoverage['util/util.js'][102]++;
        e = e.domNode;
      }
      _$jscoverage['util/util.js'][104]++;
      e.innerHTML = text;
    }
    else {
      _$jscoverage['util/util.js'][106]++;
      if ((prop == "legend")) {
        _$jscoverage['util/util.js'][108]++;
        if ((e.firstElementChild === undefined)) {
          _$jscoverage['util/util.js'][109]++;
          var child = e.firstChild;
          _$jscoverage['util/util.js'][110]++;
          while (child) {
            _$jscoverage['util/util.js'][111]++;
            if ((child.nodeType == 1)) {
              _$jscoverage['util/util.js'][112]++;
              child.innerHTML = text;
              _$jscoverage['util/util.js'][113]++;
              break;
            }
            _$jscoverage['util/util.js'][115]++;
            child = child.nextSibling;
}
        }
        else {
          _$jscoverage['util/util.js'][119]++;
          e.firstElementChild.innerHTML = text;
        }
      }
      else {
        _$jscoverage['util/util.js'][122]++;
        if (((prop == "label") && e.setLabel)) {
          _$jscoverage['util/util.js'][124]++;
          e.setLabel(text);
        }
        else {
          _$jscoverage['util/util.js'][126]++;
          if (((prop == "title") && e.setTitle)) {
            _$jscoverage['util/util.js'][127]++;
            e.setTitle(text);
          }
          else {
            _$jscoverage['util/util.js'][129]++;
            if (e.set) {
              _$jscoverage['util/util.js'][130]++;
              e.set(prop, text);
            }
            else {
              _$jscoverage['util/util.js'][132]++;
              if (((prop == "title") && e.title)) {
                _$jscoverage['util/util.js'][133]++;
                e.title = text;
              }
            }
          }
        }
      }
    }
    _$jscoverage['util/util.js'][135]++;
    if ((index != -1)) {
      _$jscoverage['util/util.js'][136]++;
      (index++);
      _$jscoverage['util/util.js'][137]++;
      e = dojo.byId((id + index));
    }
    else {
      _$jscoverage['util/util.js'][139]++;
      e = null;
    }
}
}), localizeDom: (function (bundleName, prefix) {
  _$jscoverage['util/util.js'][165]++;
  var key;
  _$jscoverage['util/util.js'][166]++;
  if ((pentaho && pentaho.common && pentaho.common.Messages)) {
    _$jscoverage['util/util.js'][167]++;
    var bundle = pentaho.common.Messages.getBundle(bundleName);
    _$jscoverage['util/util.js'][168]++;
    if (bundle) {
      _$jscoverage['util/util.js'][169]++;
      for (key in bundle) {
        _$jscoverage['util/util.js'][170]++;
        if (bundle.hasOwnProperty(key)) {
          _$jscoverage['util/util.js'][171]++;
          this.localizeDomCtrl(key, pentaho.common.Messages.getString(key), prefix);
        }
}
    }
  }
  else {
    _$jscoverage['util/util.js'][176]++;
    console.log("pentaho.common.Messages not available for localizing the DOM");
  }
})});
}));
