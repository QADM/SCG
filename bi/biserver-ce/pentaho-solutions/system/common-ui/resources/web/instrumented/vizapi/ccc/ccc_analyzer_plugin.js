/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js']) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'] = [];
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][1] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][8] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][10] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][11] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][14] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][17] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][19] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][23] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][24] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][26] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][33] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][41] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][45] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][46] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][51] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][52] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][53] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][56] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][64] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][74] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][78] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][79] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][80] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][81] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][83] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][84] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][88] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][89] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][90] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][91] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][93] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][98] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][101] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][104] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][106] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][109] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][110] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][111] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][112] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][115] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][116] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][117] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][118] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][119] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][123] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][126] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][127] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][128] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][130] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][133] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][134] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][135] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][136] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][137] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][138] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][139] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][140] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][141] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][144] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][145] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][146] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][149] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][151] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][152] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][154] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][156] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][159] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][162] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][164] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][165] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][166] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][167] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][169] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][170] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][171] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][175] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][192] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][200] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][230] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][231] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][232] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][233] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][234] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][240] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][243] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][246] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][251] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][252] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][253] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][254] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][255] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][259] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][261] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][263] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][266] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][268] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][271] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][280] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][282] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][283] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][286] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][290] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][291] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][294] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][298] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][302] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][306] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][307] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][311] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][314] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][317] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][318] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][321] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][325] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][331] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][332] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][333] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][334] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][335] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][339] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][343] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][346] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][347] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][350] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][354] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][356] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][361] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][362] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][363] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][364] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][365] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][368] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][369] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][370] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][374] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][378] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][381] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][382] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][385] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][389] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][393] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][395] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][399] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][400] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][401] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][402] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][409] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][433] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][439] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][441] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][442] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][445] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][446] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][449] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][451] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][453] = 0;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][455] = 0;
}
_$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'].source = ["pen<span class=\"k\">.</span>define<span class=\"k\">([</span> ","            <span class=\"s\">\"cdf/lib/CCC/def\"</span><span class=\"k\">,</span> ","            <span class=\"s\">\"cdf/lib/CCC/pvc-d1.0\"</span><span class=\"k\">,</span>","            <span class=\"s\">\"common-ui/vizapi/VizController\"</span>","        <span class=\"k\">],</span>","        <span class=\"k\">function</span><span class=\"k\">(</span>def<span class=\"k\">,</span> pvc<span class=\"k\">)</span><span class=\"k\">{</span>","    ","    dojo<span class=\"k\">.</span>require<span class=\"k\">(</span><span class=\"s\">\"pentaho.common.Messages\"</span><span class=\"k\">);</span>","    ","    pentaho <span class=\"k\">=</span> <span class=\"k\">typeof</span> pentaho <span class=\"k\">!=</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> pentaho <span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    pentaho<span class=\"k\">.</span>visualizations <span class=\"k\">||</span> <span class=\"k\">(</span>pentaho<span class=\"k\">.</span>visualizations <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","    ","    <span class=\"c\">// If necessary, declare **global** variable, initializing it with an array</span>","    analyzerPlugins <span class=\"k\">=</span> <span class=\"k\">typeof</span> analyzerPlugins <span class=\"k\">==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> <span class=\"k\">[]</span> <span class=\"k\">:</span> analyzerPlugins<span class=\"k\">;</span>","    ","    <span class=\"c\">// TODO: temporary due to debug loading time problems</span>","    <span class=\"k\">var</span> registered <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    ","    analyzerPlugins<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","        init<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span><span class=\"k\">{</span>","            ","            <span class=\"c\">// TODO: temporary due to debug loading time problems</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>registered<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","            registered <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            ","            dojo<span class=\"k\">.</span>declare<span class=\"k\">(</span><span class=\"s\">\"analyzer.CCCVizHelper\"</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">{</span>","                <span class=\"c\">/**</span>","<span class=\"c\">                 * Indicates if interaction features are enabled.</span>","<span class=\"c\">                 * When printing, as in a server environment,</span>","<span class=\"c\">                 * interaction features are disabled.</span>","<span class=\"c\">                 */</span>","                isInteractionEnabled<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","    ","                <span class=\"c\">/**</span>","<span class=\"c\">                 * Indicates if content-linking is enabled.</span>","<span class=\"c\">                 * Only available when interaction is enabled.</span>","<span class=\"c\">                 */</span>","                hasContentLink<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"s\">/\\bcl=/</span><span class=\"k\">).</span>test<span class=\"k\">(</span>window<span class=\"k\">.</span>location<span class=\"k\">.</span>href<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                showConfirm<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>msg<span class=\"k\">,</span> msgId<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>msgId <span class=\"k\">||</span> <span class=\"k\">!</span>cv<span class=\"k\">.</span>prefs<span class=\"k\">.</span>suppressMsg<span class=\"k\">[</span>msgId<span class=\"k\">])</span><span class=\"k\">{</span>","                        cv<span class=\"k\">.</span>getActiveReport<span class=\"k\">().</span>rptDlg<span class=\"k\">.</span>showConfirm<span class=\"k\">(</span>msg<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> msgId<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                message<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>msgId<span class=\"k\">,</span> args<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> msg <span class=\"k\">=</span> cvCatalog<span class=\"k\">[</span>msgId<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>msg <span class=\"k\">&amp;&amp;</span> args<span class=\"k\">)</span><span class=\"k\">{</span>","                        msg <span class=\"k\">=</span> cv<span class=\"k\">.</span>util<span class=\"k\">.</span>substituteParams<span class=\"k\">.</span>apply<span class=\"k\">(</span>cv<span class=\"k\">.</span>util<span class=\"k\">,</span> <span class=\"k\">[</span>msg<span class=\"k\">].</span>concat<span class=\"k\">(</span>args<span class=\"k\">));</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">return</span> msg<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                <span class=\"c\">/**</span>","<span class=\"c\">                 * Returns the label of a given formula.</span>","<span class=\"c\">                 * Only available when interaction is enabled.</span>","<span class=\"c\">                 */</span>","                getFormulaLabel<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>formula<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> cv<span class=\"k\">.</span>util<span class=\"k\">.</span>parseMDXExpression<span class=\"k\">(</span>formula<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","    ","                <span class=\"c\">/**</span>","<span class=\"c\">                 * Returns an array with all the formulas of the hierarchy to which a given formula belongs.</span>","<span class=\"c\">                 * The order of the formulas is from root level to leaf level.</span>","<span class=\"c\">                 * Any formula, including a hierarchy id. can be specified in argument 'formula'.</span>","<span class=\"c\">                 * Only available when interaction is enabled.</span>","<span class=\"c\">                 */</span>","                getHierarchyFormulas<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>formula<span class=\"k\">,</span> includeHidden<span class=\"k\">,</span> excludeChildren<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> cv<span class=\"k\">.</span>getFieldHelp<span class=\"k\">().</span>getHierarchy<span class=\"k\">(</span>formula<span class=\"k\">,</span> includeHidden<span class=\"k\">,</span> excludeChildren<span class=\"k\">)</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                completeAxisGemsMetadata<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>axis<span class=\"k\">,</span> gemsInfoList<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> reportElem <span class=\"k\">=</span> cv<span class=\"k\">.</span>getActiveReport<span class=\"k\">().</span>reportDoc<span class=\"k\">.</span>getReportNode<span class=\"k\">();</span>","                    <span class=\"k\">var</span> fieldHelp  <span class=\"k\">=</span> cv<span class=\"k\">.</span>getFieldHelp<span class=\"k\">();</span>","                    <span class=\"k\">var</span> isMeasure  <span class=\"k\">=</span> <span class=\"k\">(</span>axis <span class=\"k\">===</span> <span class=\"s\">'measure'</span><span class=\"k\">);</span>","                    <span class=\"k\">var</span> unboundGemElemsByRole <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                    ","                    <span class=\"k\">function</span> gemElemComparer<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span> parseFloat<span class=\"k\">(</span>a<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"gembarOrdinal\"</span><span class=\"k\">))</span> <span class=\"k\">-</span> ","                               parseFloat<span class=\"k\">(</span>b<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"gembarOrdinal\"</span><span class=\"k\">));</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">function</span> getRoleGemElems<span class=\"k\">(</span>role<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> xpath <span class=\"k\">=</span> <span class=\"s\">\"[@gembarId='\"</span> <span class=\"k\">+</span> role <span class=\"k\">+</span> <span class=\"s\">\"']\"</span><span class=\"k\">;</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>isMeasure<span class=\"k\">)</span><span class=\"k\">{</span>","                            xpath <span class=\"k\">=</span> <span class=\"s\">\"cv:measures/cv:measure\"</span> <span class=\"k\">+</span> xpath<span class=\"k\">;</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                            xpath <span class=\"k\">=</span> <span class=\"s\">\"cv:columnAttributes/cv:attribute\"</span> <span class=\"k\">+</span> xpath <span class=\"k\">+</span> ","                                    <span class=\"s\">\" | \"</span> <span class=\"k\">+</span>","                                    <span class=\"s\">\"cv:rowAttributes/cv:attribute\"</span> <span class=\"k\">+</span> xpath<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        ","                        <span class=\"k\">var</span> unboundGemElems <span class=\"k\">=</span> reportElem<span class=\"k\">.</span>selectNodes<span class=\"k\">(</span>xpath<span class=\"k\">);</span>","                        ","                        <span class=\"c\">// Converts array like collection to array</span>","                        unboundGemElems <span class=\"k\">=</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span>unboundGemElems<span class=\"k\">).</span>array<span class=\"k\">();</span>","                        ","                        <span class=\"c\">// Sort by gem bar position</span>","                        unboundGemElems<span class=\"k\">.</span>sort<span class=\"k\">(</span>gemElemComparer<span class=\"k\">);</span>","                        ","                        <span class=\"k\">return</span> unboundGemElems<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">function</span> getNextGemElem<span class=\"k\">(</span>role<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> gemElems <span class=\"k\">=</span> def<span class=\"k\">.</span>getOwn<span class=\"k\">(</span>unboundGemElemsByRole<span class=\"k\">,</span> role<span class=\"k\">);</span>","                        <span class=\"k\">if</span><span class=\"k\">(!</span>gemElems<span class=\"k\">)</span><span class=\"k\">{</span>","                            gemElems <span class=\"k\">=</span> unboundGemElemsByRole<span class=\"k\">[</span>role<span class=\"k\">]</span> <span class=\"k\">=</span> getRoleGemElems<span class=\"k\">(</span>role<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                        ","                        <span class=\"k\">var</span> gemElem<span class=\"k\">;</span>","                        <span class=\"k\">while</span><span class=\"k\">(</span>gemElems<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                            gemElem <span class=\"k\">=</span> gemElems<span class=\"k\">.</span>shift<span class=\"k\">();</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>gemElem<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"hideInChart\"</span><span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">'true'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                <span class=\"k\">break</span><span class=\"k\">;</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                        ","                        <span class=\"k\">return</span> gemElem<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    ","                    dojo<span class=\"k\">.</span>forEach<span class=\"k\">(</span>gemsInfoList<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>gemInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> role    <span class=\"k\">=</span> gemInfo<span class=\"k\">.</span>role<span class=\"k\">;</span>","                        <span class=\"k\">if</span><span class=\"k\">(!</span>role <span class=\"k\">||</span> role <span class=\"k\">===</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"c\">// unmapped role</span>","                            <span class=\"k\">return</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        ","                        <span class=\"k\">var</span> gemElem <span class=\"k\">=</span> getNextGemElem<span class=\"k\">(</span>gemInfo<span class=\"k\">.</span>role<span class=\"k\">)</span> <span class=\"k\">||</span> def<span class=\"k\">.</span>assert<span class=\"k\">(</span><span class=\"s\">\"Undefined gem in document.\"</span><span class=\"k\">);</span>","                        <span class=\"k\">var</span> formula <span class=\"k\">=</span> gemElem<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'formula'</span><span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                        <span class=\"k\">var</span> hasLink <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                        <span class=\"k\">var</span> id<span class=\"k\">,</span> hierarchy<span class=\"k\">,</span> linkLabel<span class=\"k\">,</span> linkType<span class=\"k\">;</span>","                        <span class=\"k\">var</span> reportAxis<span class=\"k\">;</span> ","                        <span class=\"k\">switch</span><span class=\"k\">(</span>gemElem<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>tagName<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">case</span> <span class=\"s\">'rowAttributes'</span><span class=\"k\">:</span>    reportAxis <span class=\"k\">=</span> <span class=\"s\">'row'</span><span class=\"k\">;</span>     <span class=\"k\">break</span><span class=\"k\">;</span>","                            <span class=\"k\">case</span> <span class=\"s\">'columnAttributes'</span><span class=\"k\">:</span> reportAxis <span class=\"k\">=</span> <span class=\"s\">'column'</span><span class=\"k\">;</span>  <span class=\"k\">break</span><span class=\"k\">;</span>","                            <span class=\"k\">case</span> <span class=\"s\">'measures'</span><span class=\"k\">:</span>         reportAxis <span class=\"k\">=</span> <span class=\"s\">'measure'</span><span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        ","                        <span class=\"k\">if</span><span class=\"k\">(</span>isMeasure<span class=\"k\">)</span><span class=\"k\">{</span>","                            hierarchy <span class=\"k\">=</span> <span class=\"s\">'[Measures]'</span><span class=\"k\">;</span>","                            gemInfo<span class=\"k\">.</span>measureType <span class=\"k\">=</span> gemElem<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"measureTypeEnum\"</span><span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                        ","                        <span class=\"k\">if</span><span class=\"k\">(</span>isMeasure <span class=\"k\">&amp;&amp;</span> gemInfo<span class=\"k\">.</span>measureType <span class=\"k\">!==</span> <span class=\"s\">'VALUE'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"c\">// Some kind of calculated formula</span>","                            id      <span class=\"k\">=</span> gemElem<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'id'</span><span class=\"k\">);</span>","                            formula <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span> <span class=\"c\">// ignore</span>","                            <span class=\"c\">//label   = getLevelLabel(gemElem);</span>","                            hasLink <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                            <span class=\"k\">var</span> gem <span class=\"k\">=</span> cv<span class=\"k\">.</span>getActiveReport<span class=\"k\">().</span>getGem<span class=\"k\">(</span>formula<span class=\"k\">)</span> <span class=\"k\">||</span> def<span class=\"k\">.</span>assert<span class=\"k\">(</span><span class=\"s\">\"No gem object.\"</span><span class=\"k\">);</span>","                            ","                            <span class=\"c\">// measures have an id != from formula</span>","                            id <span class=\"k\">=</span> gem<span class=\"k\">.</span>getUniqueId<span class=\"k\">();</span>","                            ","                            <span class=\"c\">// Column gems need this</span>","                            gemInfo<span class=\"k\">.</span>label <span class=\"k\">=</span> gem<span class=\"k\">.</span>getDisplayLabel<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","    ","                            <span class=\"k\">var</span> link  <span class=\"k\">=</span> gem<span class=\"k\">.</span>getLink <span class=\"k\">&amp;&amp;</span> gem<span class=\"k\">.</span>getLink<span class=\"k\">();</span>","                            hasLink   <span class=\"k\">=</span> <span class=\"k\">!!</span>link<span class=\"k\">;</span>","                            linkLabel <span class=\"k\">=</span> hasLink <span class=\"k\">?</span> link<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'toolTip'</span><span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                            linkType  <span class=\"k\">=</span> hasLink <span class=\"k\">?</span> link<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"type\"</span><span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                            ","                            <span class=\"k\">if</span><span class=\"k\">(!</span>isMeasure<span class=\"k\">)</span><span class=\"k\">{</span>","                                formula <span class=\"k\">||</span> def<span class=\"k\">.</span>assert<span class=\"k\">(</span><span class=\"s\">\"Non-measures have formulas.\"</span><span class=\"k\">);</span>","                                hierarchy <span class=\"k\">=</span> fieldHelp<span class=\"k\">.</span>get<span class=\"k\">(</span>formula<span class=\"k\">,</span> <span class=\"s\">'hierarchy'</span><span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                        ","                        def<span class=\"k\">.</span>set<span class=\"k\">(</span>","                            gemInfo<span class=\"k\">,</span> ","                            <span class=\"s\">'id'</span><span class=\"k\">,</span>         id<span class=\"k\">,</span>","                            <span class=\"s\">'formula'</span><span class=\"k\">,</span>    formula<span class=\"k\">,</span>","                            <span class=\"s\">'hierarchy'</span><span class=\"k\">,</span>  hierarchy<span class=\"k\">,</span>","                            <span class=\"s\">'hasLink'</span><span class=\"k\">,</span>    hasLink<span class=\"k\">,</span>","                            <span class=\"s\">'linkLabel'</span><span class=\"k\">,</span>  <span class=\"k\">(</span>linkLabel <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">),</span>","                            <span class=\"s\">'linkType'</span><span class=\"k\">,</span>   linkType<span class=\"k\">,</span>","                            <span class=\"s\">'reportAxis'</span><span class=\"k\">,</span> reportAxis<span class=\"k\">);</span>","                    <span class=\"k\">}</span><span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                <span class=\"c\">/**</span>","<span class=\"c\">                 * Performs a click action with the specified context.</span>","<span class=\"c\">                 * Only available when interaction is enabled.</span>","<span class=\"c\">                 */</span>","                click<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>actionContext<span class=\"k\">,</span> keepGem<span class=\"k\">)</span><span class=\"k\">{</span>","                    cv<span class=\"k\">.</span>getActiveReport<span class=\"k\">().</span>clickChart<span class=\"k\">(</span>actionContext<span class=\"k\">,</span> keepGem<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                <span class=\"c\">/**</span>","<span class=\"c\">                 * Follows an hyperlink.</span>","<span class=\"c\">                 * Only available when interaction is enabled.</span>","<span class=\"c\">                 */</span>","                link<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>actionContext<span class=\"k\">)</span><span class=\"k\">{</span>","                    cv<span class=\"k\">.</span>getActiveReport<span class=\"k\">().</span>linkDlg<span class=\"k\">.</span>performAction<span class=\"k\">(</span>actionContext<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                <span class=\"c\">// TODO: remove this when analyzer fixes XML document chart options switching bug</span>","<span class=\"c\">//                syncReportDocXml: function(vizOptions){</span>","<span class=\"c\">//                    var currentConfig = cv.activeLayoutConfig;</span>","<span class=\"c\">//                    if(currentConfig){</span>","<span class=\"c\">//                        var props = {</span>","<span class=\"c\">//                           'shape': 'shape', </span>","<span class=\"c\">//                           'reverseColors': 'reverseColors', </span>","<span class=\"c\">//                           'pattern': 'pattern', </span>","<span class=\"c\">//                           'colorSet': 'colorSet'</span>","<span class=\"c\">//                        };</span>","<span class=\"c\">//                        </span>","<span class=\"c\">//                        for(var p in props){</span>","<span class=\"c\">//                            if(props.hasOwnProperty(p)){</span>","<span class=\"c\">//                                var value = vizOptions[props[p]];</span>","<span class=\"c\">//                                if(value !== undefined){</span>","<span class=\"c\">//                                    currentConfig._processModelValueChange(</span>","<span class=\"c\">//                                            {id: p},</span>","<span class=\"c\">//                                            {newVal: value});</span>","<span class=\"c\">//                                }</span>","<span class=\"c\">//                            }</span>","<span class=\"c\">//                        }</span>","<span class=\"c\">//                    }</span>","<span class=\"c\">//                },</span>","                ","                <span class=\"c\">// Benny: This method should only return the options which would</span>","                <span class=\"c\">// directly be used by CCC when derived from the input report.</span>","                generateOptionsFromAnalyzerState<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>report<span class=\"k\">)</span> <span class=\"k\">{</span>","                  <span class=\"k\">var</span> userDefinedOpts <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                  <span class=\"k\">var</span> chartOptions <span class=\"k\">=</span> report<span class=\"k\">.</span>reportDoc<span class=\"k\">.</span>getChartOptions<span class=\"k\">().</span>attributes<span class=\"k\">;</span>","                  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> chartOptions<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> option <span class=\"k\">=</span> chartOptions<span class=\"k\">[</span>i<span class=\"k\">];</span>","                    <span class=\"k\">switch</span><span class=\"k\">(</span>option<span class=\"k\">.</span>nodeName<span class=\"k\">)</span><span class=\"k\">{</span>","                      <span class=\"k\">case</span> <span class=\"s\">'lineShape'</span><span class=\"k\">:</span>","                      <span class=\"k\">case</span> <span class=\"s\">'lineWidth'</span><span class=\"k\">:</span>","                      <span class=\"k\">case</span> <span class=\"s\">'scatterPattern'</span><span class=\"k\">:</span>","                      <span class=\"k\">case</span> <span class=\"s\">'scatterColorSet'</span><span class=\"k\">:</span>","                      <span class=\"k\">case</span> <span class=\"s\">'scatterReverseColors'</span><span class=\"k\">:</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                        ","                      <span class=\"k\">default</span><span class=\"k\">:</span>","                        userDefinedOpts<span class=\"k\">[</span>option<span class=\"k\">.</span>nodeName<span class=\"k\">]</span> <span class=\"k\">=</span> option<span class=\"k\">.</span>nodeValue<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                  <span class=\"k\">}</span>","                  <span class=\"k\">return</span> userDefinedOpts<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                <span class=\"c\">// Adpated from cv.Report#isRequiredGembarsFilled</span>","                canRefreshReport<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>report<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> dataReq <span class=\"k\">=</span> report<span class=\"k\">.</span>getVizDataReq<span class=\"k\">();</span>","                    <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> dataReq<span class=\"k\">.</span>length <span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                      <span class=\"k\">if</span><span class=\"k\">(</span>dataReq<span class=\"k\">[</span>i<span class=\"k\">].</span>required <span class=\"k\">==</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>report<span class=\"k\">.</span>findGemsByGembarId<span class=\"k\">(</span>dataReq<span class=\"k\">[</span>i<span class=\"k\">].</span>id<span class=\"k\">).</span>length <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span>","                          <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                      <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">switch</span><span class=\"k\">(</span>report<span class=\"k\">.</span>visualization<span class=\"k\">.</span>id<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">case</span> <span class=\"s\">'ccc_heatgrid'</span><span class=\"k\">:</span>","                            <span class=\"k\">return</span> report<span class=\"k\">.</span>findGemsByGembarId<span class=\"k\">(</span><span class=\"s\">\"color\"</span><span class=\"k\">).</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">||</span>","                                   report<span class=\"k\">.</span>findGemsByGembarId<span class=\"k\">(</span><span class=\"s\">\"size\"</span> <span class=\"k\">).</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                            ","                        <span class=\"k\">case</span> <span class=\"s\">'ccc_barline'</span><span class=\"k\">:</span>","                            <span class=\"k\">return</span> report<span class=\"k\">.</span>findGemsByGembarId<span class=\"k\">(</span><span class=\"s\">\"measures\"</span>    <span class=\"k\">).</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">||</span>","                                   report<span class=\"k\">.</span>findGemsByGembarId<span class=\"k\">(</span><span class=\"s\">\"measuresLine\"</span><span class=\"k\">).</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","","            <span class=\"c\">//function getLevelLabel(levelElem){</span>","            <span class=\"c\">//    var labelElem = levelElem.selectSingleNode(\"cv:displayLabels/cv:displayLabel\");</span>","            <span class=\"c\">//    return (labelElem &amp;&amp; labelElem.getAttribute(\"label\")) || \"\";</span>","            <span class=\"c\">//}</span>","","            dojo<span class=\"k\">.</span>declare<span class=\"k\">(</span><span class=\"s\">\"analyzer.CCCVizConfig\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>analyzer<span class=\"k\">.</span>ColorConfiguration<span class=\"k\">],</span> <span class=\"k\">{</span>","                _processModelValueChange<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>item<span class=\"k\">,</span> args<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>pvc<span class=\"k\">.</span>debug <span class=\"k\">&gt;=</span> <span class=\"s\">3</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        pvc<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">\"ANALYZER MODEL EVENT \"</span> <span class=\"k\">+</span> item<span class=\"k\">.</span>id <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> JSON<span class=\"k\">.</span>stringify<span class=\"k\">(</span>args<span class=\"k\">.</span>newVal<span class=\"k\">));</span>","                    <span class=\"k\">}</span>","                    <span class=\"c\">// works by convention where the ids of the data req items match the property names</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>report<span class=\"k\">.</span>visualization<span class=\"k\">.</span>args<span class=\"k\">[</span>item<span class=\"k\">.</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> args<span class=\"k\">.</span>newVal<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                onModelEvent<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>config<span class=\"k\">,</span> item<span class=\"k\">,</span> eventName<span class=\"k\">,</span> args<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>eventName <span class=\"k\">==</span> <span class=\"s\">\"value\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_processModelValueChange<span class=\"k\">(</span>item<span class=\"k\">,</span> args<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">this</span><span class=\"k\">.</span>inherited<span class=\"k\">(</span>arguments<span class=\"k\">);</span> <span class=\"c\">// Let super class handle the insertAt and removedGem events</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","    ","                _setScalingType<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>colorScaleType<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>report<span class=\"k\">.</span>visualization<span class=\"k\">.</span>args<span class=\"k\">.</span>colorScaleType <span class=\"k\">=</span> colorScaleType<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","    ","                _setColorRange<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>range<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>report<span class=\"k\">.</span>visualization<span class=\"k\">.</span>args<span class=\"k\">.</span>colorRange <span class=\"k\">=</span> range<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","    ","                getConfiguration<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> config <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>inherited<span class=\"k\">(</span>arguments<span class=\"k\">);</span>","                    <span class=\"k\">return</span> config<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        ","            dojo<span class=\"k\">.</span>declare<span class=\"k\">(</span><span class=\"s\">\"analyzer.CCCHeatgridVizConfig\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>analyzer<span class=\"k\">.</span>CCCVizConfig<span class=\"k\">],</span> <span class=\"k\">{</span>","    ","                onModelEvent<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>config<span class=\"k\">,</span> item<span class=\"k\">,</span> eventName<span class=\"k\">,</span> args<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">switch</span><span class=\"k\">(</span>eventName<span class=\"k\">)</span><span class=\"k\">{</span> ","                        <span class=\"k\">case</span> <span class=\"s\">'insertAt'</span><span class=\"k\">:</span>","                        <span class=\"k\">case</span> <span class=\"s\">'gems'</span><span class=\"k\">:</span> <span class=\"c\">// move gem</span>","                            <span class=\"k\">this</span><span class=\"k\">.</span>_updateOptions<span class=\"k\">(</span>config<span class=\"k\">);</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">this</span><span class=\"k\">.</span>inherited<span class=\"k\">(</span>arguments<span class=\"k\">);</span> <span class=\"c\">// ends up calling updateConfiguration</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                updateConfiguration<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>config<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_updateOptions<span class=\"k\">(</span>config<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                _updateOptions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>config<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">// Required logic, both size and color required by default, turn required off one when the other is filled.</span>","                    ","                    <span class=\"k\">var</span> colorBy <span class=\"k\">=</span> config<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">\"color\"</span><span class=\"k\">);</span>","                    <span class=\"k\">var</span> sizeBy  <span class=\"k\">=</span> config<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">\"size\"</span><span class=\"k\">);</span>","                    <span class=\"k\">var</span> totalGems <span class=\"k\">=</span> colorBy<span class=\"k\">.</span>gems<span class=\"k\">.</span>length <span class=\"k\">+</span> sizeBy<span class=\"k\">.</span>gems<span class=\"k\">.</span>length<span class=\"k\">;</span>","                    colorBy<span class=\"k\">.</span>required <span class=\"k\">=</span> <span class=\"k\">(</span>totalGems <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">);</span>","                    sizeBy<span class=\"k\">.</span>required <span class=\"k\">=</span> <span class=\"k\">(</span>totalGems <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","            ","            dojo<span class=\"k\">.</span>declare<span class=\"k\">(</span><span class=\"s\">\"analyzer.CCCBarLineVizConfig\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>analyzer<span class=\"k\">.</span>CCCVizConfig<span class=\"k\">],</span> <span class=\"k\">{</span>","                ","                onModelEvent<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>config<span class=\"k\">,</span> item<span class=\"k\">,</span> eventName<span class=\"k\">,</span> args<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">// Moving or adding a gem may cause the color options to appear/disappear</span>","                    <span class=\"k\">switch</span><span class=\"k\">(</span>eventName<span class=\"k\">)</span><span class=\"k\">{</span> ","                        <span class=\"k\">case</span> <span class=\"s\">'insertAt'</span><span class=\"k\">:</span>","                        <span class=\"k\">case</span> <span class=\"s\">'gems'</span><span class=\"k\">:</span> <span class=\"c\">// move gem</span>","                            <span class=\"k\">this</span><span class=\"k\">.</span>_updateMeasuresOptions<span class=\"k\">(</span>config<span class=\"k\">);</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">this</span><span class=\"k\">.</span>inherited<span class=\"k\">(</span>arguments<span class=\"k\">);</span> <span class=\"c\">// ends up calling updateConfiguration</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                updateConfiguration<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>config<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_updateMeasuresOptions<span class=\"k\">(</span>config<span class=\"k\">);</span>","                    ","                    <span class=\"k\">this</span><span class=\"k\">.</span>inherited<span class=\"k\">(</span>arguments<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                _updateMeasuresOptions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>config<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">// Required logic, at least one of measuresBar or measuresLine is required by default</span>","                    <span class=\"k\">var</span> measuresBar  <span class=\"k\">=</span> config<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">\"measures\"</span><span class=\"k\">);</span>","                    <span class=\"k\">var</span> measuresLine <span class=\"k\">=</span> config<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">\"measuresLine\"</span><span class=\"k\">);</span>","                    <span class=\"k\">var</span> totalGems <span class=\"k\">=</span> measuresBar<span class=\"k\">.</span>gems<span class=\"k\">.</span>length <span class=\"k\">+</span> measuresLine<span class=\"k\">.</span>gems<span class=\"k\">.</span>length<span class=\"k\">;</span>","                    measuresBar <span class=\"k\">.</span>required <span class=\"k\">=</span> <span class=\"k\">(</span>totalGems <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">);</span>","                    measuresLine<span class=\"k\">.</span>required <span class=\"k\">=</span> <span class=\"k\">(</span>totalGems <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">);</span>","                    ","                    <span class=\"c\">// Show/hide line color options</span>","                    <span class=\"k\">var</span> visible <span class=\"k\">=</span> measuresLine<span class=\"k\">.</span>gems<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                    config<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">\"shape\"</span>    <span class=\"k\">).</span>ui<span class=\"k\">.</span>hidden <span class=\"k\">=</span> <span class=\"k\">!</span>visible<span class=\"k\">;</span>","                    config<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">\"lineWidth\"</span><span class=\"k\">).</span>ui<span class=\"k\">.</span>hidden <span class=\"k\">=</span> <span class=\"k\">!</span>visible<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","            ","            dojo<span class=\"k\">.</span>declare<span class=\"k\">(</span><span class=\"s\">\"analyzer.CCCScatterVizConfig\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>analyzer<span class=\"k\">.</span>CCCVizConfig<span class=\"k\">],</span> <span class=\"k\">{</span>","                ","                onModelEvent<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>config<span class=\"k\">,</span> item<span class=\"k\">,</span> eventName<span class=\"k\">,</span> args<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">// Moving or adding a gem may cause the color options to appear/disappear</span>","                    <span class=\"k\">switch</span><span class=\"k\">(</span>eventName<span class=\"k\">)</span><span class=\"k\">{</span> ","                        <span class=\"k\">case</span> <span class=\"s\">'insertAt'</span><span class=\"k\">:</span>","                        <span class=\"k\">case</span> <span class=\"s\">'gems'</span><span class=\"k\">:</span> <span class=\"c\">// move gem</span>","                            <span class=\"k\">this</span><span class=\"k\">.</span>_updateColorRoleOptions<span class=\"k\">(</span>config<span class=\"k\">);</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">this</span><span class=\"k\">.</span>inherited<span class=\"k\">(</span>arguments<span class=\"k\">);</span> <span class=\"c\">// ends up calling updateConfiguration</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                updateConfiguration<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>config<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_updateColorRoleOptions<span class=\"k\">(</span>config<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                ","                _updateColorRoleOptions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>config<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> colorBy <span class=\"k\">=</span> config<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">\"color\"</span><span class=\"k\">);</span>","                    ","                    colorBy<span class=\"k\">.</span>allowMultiple <span class=\"k\">=</span> <span class=\"k\">!</span>colorBy<span class=\"k\">.</span>gems<span class=\"k\">.</span>length <span class=\"k\">||</span> ","                                            colorBy<span class=\"k\">.</span>gems<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type <span class=\"k\">!==</span> <span class=\"s\">'measure'</span><span class=\"k\">;</span>","                    ","                    <span class=\"c\">// Show/hide color options</span>","                    <span class=\"k\">var</span> visible <span class=\"k\">=</span> colorBy<span class=\"k\">.</span>gems<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> colorBy<span class=\"k\">.</span>gems<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type <span class=\"k\">===</span> <span class=\"s\">'measure'</span><span class=\"k\">;</span>","                    config<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">\"reverseColors\"</span><span class=\"k\">).</span>ui<span class=\"k\">.</span>hidden <span class=\"k\">=</span> <span class=\"k\">!</span>visible<span class=\"k\">;</span>","                    config<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">\"colorSet\"</span><span class=\"k\">).</span>ui<span class=\"k\">.</span>hidden <span class=\"k\">=</span> <span class=\"k\">!</span>visible<span class=\"k\">;</span>","                    config<span class=\"k\">.</span>byId<span class=\"k\">(</span><span class=\"s\">\"pattern\"</span><span class=\"k\">).</span>ui<span class=\"k\">.</span>hidden <span class=\"k\">=</span> <span class=\"k\">!</span>visible<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","    ","            <span class=\"c\">// ----------------------</span>","            <span class=\"c\">// Register CCC Visualizations</span>","    ","            <span class=\"k\">var</span> vizIds <span class=\"k\">=</span> <span class=\"k\">[</span>","                <span class=\"s\">'ccc_bar'</span><span class=\"k\">,</span>","                <span class=\"s\">'ccc_barstacked'</span><span class=\"k\">,</span>","                <span class=\"s\">'ccc_barnormalized'</span><span class=\"k\">,</span>","                ","                <span class=\"s\">'ccc_horzbar'</span><span class=\"k\">,</span>","                <span class=\"s\">'ccc_horzbarstacked'</span><span class=\"k\">,</span>","                <span class=\"s\">'ccc_horzbarnormalized'</span><span class=\"k\">,</span>","                ","                <span class=\"s\">'ccc_pie'</span><span class=\"k\">,</span>","                <span class=\"s\">'ccc_line'</span><span class=\"k\">,</span>","                <span class=\"s\">'ccc_area'</span><span class=\"k\">,</span>","                ","                <span class=\"s\">'ccc_scatter'</span><span class=\"k\">,</span>","                <span class=\"s\">'ccc_barline'</span><span class=\"k\">,</span>","                <span class=\"s\">'ccc_heatgrid'</span>","                ","                <span class=\"c\">//'ccc_waterfall',</span>","                <span class=\"c\">//'ccc_boxplot'</span>","                <span class=\"c\">//'ccc_bulletchart',</span>","                <span class=\"c\">//'ccc_line_hover',</span>","                <span class=\"c\">//'ccc_area_hover'</span>","            <span class=\"k\">];</span>","            ","            <span class=\"k\">var</span> vizCustomConfigs <span class=\"k\">=</span> <span class=\"k\">{</span>","                <span class=\"s\">'ccc_heatgrid'</span><span class=\"k\">:</span> analyzer<span class=\"k\">.</span>CCCHeatgridVizConfig<span class=\"k\">,</span>","                <span class=\"s\">'ccc_scatter'</span><span class=\"k\">:</span>  analyzer<span class=\"k\">.</span>CCCScatterVizConfig<span class=\"k\">,</span>","                <span class=\"s\">'ccc_barline'</span><span class=\"k\">:</span>  analyzer<span class=\"k\">.</span>CCCBarLineVizConfig","            <span class=\"k\">}</span><span class=\"k\">;</span>","            ","            <span class=\"k\">var</span> vizHelper <span class=\"k\">=</span> <span class=\"k\">new</span> analyzer<span class=\"k\">.</span>CCCVizHelper<span class=\"k\">();</span>","            ","            <span class=\"k\">if</span> <span class=\"k\">(!</span>cv<span class=\"k\">.</span>pentahoVisualizations<span class=\"k\">)</span> <span class=\"k\">{</span>","                cv<span class=\"k\">.</span>pentahoVisualizations <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">if</span> <span class=\"k\">(!</span>cv<span class=\"k\">.</span>pentahoVisualizationsHelpers<span class=\"k\">)</span> <span class=\"k\">{</span>","                cv<span class=\"k\">.</span>pentahoVisualizationsHelpers <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            dojo<span class=\"k\">.</span>forEach<span class=\"k\">(</span>vizIds<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>vizId<span class=\"k\">)</span><span class=\"k\">{</span>","                ","                cv<span class=\"k\">.</span>pentahoVisualizations<span class=\"k\">.</span>push<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>visualizations<span class=\"k\">.</span>getById<span class=\"k\">(</span>vizId<span class=\"k\">));</span>","    ","                cv<span class=\"k\">.</span>pentahoVisualizationHelpers<span class=\"k\">[</span>vizId<span class=\"k\">]</span> <span class=\"k\">=</span> vizHelper<span class=\"k\">;</span>","    ","                analyzer<span class=\"k\">.</span>LayoutPanel<span class=\"k\">.</span>configurationManagers<span class=\"k\">[</span><span class=\"s\">'JSON_'</span> <span class=\"k\">+</span> vizId<span class=\"k\">]</span> <span class=\"k\">=</span> ","                    vizCustomConfigs<span class=\"k\">[</span>vizId<span class=\"k\">]</span> <span class=\"k\">||</span> analyzer<span class=\"k\">.</span>CCCVizConfig<span class=\"k\">;</span>","                ","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"c\">// end init method</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][1]++;
pen.define(["cdf/lib/CCC/def", "cdf/lib/CCC/pvc-d1.0", "common-ui/vizapi/VizController"], (function (def, pvc) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][8]++;
  dojo.require("pentaho.common.Messages");
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][10]++;
  pentaho = (((typeof pentaho) != "undefined")? pentaho: {});
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][11]++;
  (pentaho.visualizations || (pentaho.visualizations = {}));
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][14]++;
  analyzerPlugins = (((typeof analyzerPlugins) == "undefined")? []: analyzerPlugins);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][17]++;
  var registered = false;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][19]++;
  analyzerPlugins.push({init: (function () {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][23]++;
  if (registered) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][23]++;
    return;
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][24]++;
  registered = true;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][26]++;
  dojo.declare("analyzer.CCCVizHelper", null, {isInteractionEnabled: (function () {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][33]++;
  return true;
}), hasContentLink: (function () {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][41]++;
  return /\bcl=/.test(window.location.href);
}), showConfirm: (function (msg, msgId) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][45]++;
  if (((! msgId) || (! cv.prefs.suppressMsg[msgId]))) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][46]++;
    cv.getActiveReport().rptDlg.showConfirm(msg, null, null, null, msgId);
  }
}), message: (function (msgId, args) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][51]++;
  var msg = (cvCatalog[msgId] || "");
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][52]++;
  if ((msg && args)) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][53]++;
    msg = cv.util.substituteParams.apply(cv.util, [msg].concat(args));
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][56]++;
  return msg;
}), getFormulaLabel: (function (formula) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][64]++;
  return cv.util.parseMDXExpression(formula, false);
}), getHierarchyFormulas: (function (formula, includeHidden, excludeChildren) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][74]++;
  return cv.getFieldHelp().getHierarchy(formula, includeHidden, excludeChildren);
}), completeAxisGemsMetadata: (function (axis, gemsInfoList) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][78]++;
  var reportElem = cv.getActiveReport().reportDoc.getReportNode();
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][79]++;
  var fieldHelp = cv.getFieldHelp();
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][80]++;
  var isMeasure = (axis === "measure");
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][81]++;
  var unboundGemElemsByRole = {};
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][83]++;
  function gemElemComparer(a, b) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][84]++;
    return (parseFloat(a.getAttribute("gembarOrdinal")) - parseFloat(b.getAttribute("gembarOrdinal")));
}
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][88]++;
  function getRoleGemElems(role) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][89]++;
    var xpath = ("[@gembarId='" + role + "']");
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][90]++;
    if (isMeasure) {
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][91]++;
      xpath = ("cv:measures/cv:measure" + xpath);
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][93]++;
      xpath = ("cv:columnAttributes/cv:attribute" + xpath + " | " + "cv:rowAttributes/cv:attribute" + xpath);
    }
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][98]++;
    var unboundGemElems = reportElem.selectNodes(xpath);
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][101]++;
    unboundGemElems = def.query(unboundGemElems).array();
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][104]++;
    unboundGemElems.sort(gemElemComparer);
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][106]++;
    return unboundGemElems;
}
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][109]++;
  function getNextGemElem(role) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][110]++;
    var gemElems = def.getOwn(unboundGemElemsByRole, role);
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][111]++;
    if ((! gemElems)) {
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][112]++;
      gemElems = (unboundGemElemsByRole[role] = getRoleGemElems(role));
    }
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][115]++;
    var gemElem;
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][116]++;
    while (gemElems.length) {
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][117]++;
      gemElem = gemElems.shift();
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][118]++;
      if ((gemElem.getAttribute("hideInChart") !== "true")) {
        _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][119]++;
        break;
      }
}
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][123]++;
    return gemElem;
}
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][126]++;
  dojo.forEach(gemsInfoList, (function (gemInfo) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][127]++;
  var role = gemInfo.role;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][128]++;
  if (((! role) || (role === "undefined"))) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][130]++;
    return;
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][133]++;
  var gemElem = (getNextGemElem(gemInfo.role) || def.assert("Undefined gem in document."));
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][134]++;
  var formula = (gemElem.getAttribute("formula") || null);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][135]++;
  var hasLink = false;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][136]++;
  var id, hierarchy, linkLabel, linkType;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][137]++;
  var reportAxis;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][138]++;
  switch (gemElem.parentNode.tagName) {
  case "rowAttributes":
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][139]++;
    reportAxis = "row";
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][139]++;
    break;
  case "columnAttributes":
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][140]++;
    reportAxis = "column";
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][140]++;
    break;
  case "measures":
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][141]++;
    reportAxis = "measure";
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][141]++;
    break;
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][144]++;
  if (isMeasure) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][145]++;
    hierarchy = "[Measures]";
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][146]++;
    gemInfo.measureType = gemElem.getAttribute("measureTypeEnum");
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][149]++;
  if ((isMeasure && (gemInfo.measureType !== "VALUE"))) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][151]++;
    id = gemElem.getAttribute("id");
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][152]++;
    formula = null;
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][154]++;
    hasLink = false;
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][156]++;
    var gem = (cv.getActiveReport().getGem(formula) || def.assert("No gem object."));
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][159]++;
    id = gem.getUniqueId();
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][162]++;
    gemInfo.label = gem.getDisplayLabel(true);
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][164]++;
    var link = (gem.getLink && gem.getLink());
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][165]++;
    hasLink = (! (! link));
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][166]++;
    linkLabel = (hasLink? link.getAttribute("toolTip"): null);
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][167]++;
    linkType = (hasLink? link.getAttribute("type"): null);
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][169]++;
    if ((! isMeasure)) {
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][170]++;
      (formula || def.assert("Non-measures have formulas."));
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][171]++;
      hierarchy = fieldHelp.get(formula, "hierarchy");
    }
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][175]++;
  def.set(gemInfo, "id", id, "formula", formula, "hierarchy", hierarchy, "hasLink", hasLink, "linkLabel", (linkLabel || ""), "linkType", linkType, "reportAxis", reportAxis);
}));
}), click: (function (actionContext, keepGem) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][192]++;
  cv.getActiveReport().clickChart(actionContext, keepGem);
}), link: (function (actionContext) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][200]++;
  cv.getActiveReport().linkDlg.performAction(actionContext);
}), generateOptionsFromAnalyzerState: (function (report) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][230]++;
  var userDefinedOpts = {};
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][231]++;
  var chartOptions = report.reportDoc.getChartOptions().attributes;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][232]++;
  for (var i = 0; (i < chartOptions.length); (i++)) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][233]++;
    var option = chartOptions[i];
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][234]++;
    switch (option.nodeName) {
    case "lineShape":
    case "lineWidth":
    case "scatterPattern":
    case "scatterColorSet":
    case "scatterReverseColors":
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][240]++;
      break;
    default:
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][243]++;
      userDefinedOpts[option.nodeName] = option.nodeValue;
    }
}
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][246]++;
  return userDefinedOpts;
}), canRefreshReport: (function (report) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][251]++;
  var dataReq = report.getVizDataReq();
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][252]++;
  for (var i = 0; (i < dataReq.length); (i++)) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][253]++;
    if ((dataReq[i].required == true)) {
      _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][254]++;
      if ((report.findGemsByGembarId(dataReq[i].id).length == 0)) {
        _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][255]++;
        return false;
      }
    }
}
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][259]++;
  switch (report.visualization.id) {
  case "ccc_heatgrid":
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][261]++;
    return ((report.findGemsByGembarId("color").length > 0) || (report.findGemsByGembarId("size").length > 0));
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][263]++;
    break;
  case "ccc_barline":
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][266]++;
    return ((report.findGemsByGembarId("measures").length > 0) || (report.findGemsByGembarId("measuresLine").length > 0));
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][268]++;
    break;
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][271]++;
  return true;
})});
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][280]++;
  dojo.declare("analyzer.CCCVizConfig", [analyzer.ColorConfiguration], {_processModelValueChange: (function (item, args) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][282]++;
  if ((pvc.debug >= 3)) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][283]++;
    pvc.log(("ANALYZER MODEL EVENT " + item.id + ": " + JSON.stringify(args.newVal)));
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][286]++;
  this.report.visualization.args[item.id] = args.newVal;
}), onModelEvent: (function (config, item, eventName, args) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][290]++;
  if ((eventName == "value")) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][291]++;
    this._processModelValueChange(item, args);
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][294]++;
  this.inherited(arguments);
}), _setScalingType: (function (colorScaleType) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][298]++;
  this.report.visualization.args.colorScaleType = colorScaleType;
}), _setColorRange: (function (range) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][302]++;
  this.report.visualization.args.colorRange = range;
}), getConfiguration: (function () {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][306]++;
  var config = this.inherited(arguments);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][307]++;
  return config;
})});
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][311]++;
  dojo.declare("analyzer.CCCHeatgridVizConfig", [analyzer.CCCVizConfig], {onModelEvent: (function (config, item, eventName, args) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][314]++;
  switch (eventName) {
  case "insertAt":
  case "gems":
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][317]++;
    this._updateOptions(config);
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][318]++;
    break;
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][321]++;
  this.inherited(arguments);
}), updateConfiguration: (function (config) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][325]++;
  this._updateOptions(config);
}), _updateOptions: (function (config) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][331]++;
  var colorBy = config.byId("color");
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][332]++;
  var sizeBy = config.byId("size");
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][333]++;
  var totalGems = (colorBy.gems.length + sizeBy.gems.length);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][334]++;
  colorBy.required = (totalGems == 0);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][335]++;
  sizeBy.required = (totalGems == 0);
})});
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][339]++;
  dojo.declare("analyzer.CCCBarLineVizConfig", [analyzer.CCCVizConfig], {onModelEvent: (function (config, item, eventName, args) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][343]++;
  switch (eventName) {
  case "insertAt":
  case "gems":
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][346]++;
    this._updateMeasuresOptions(config);
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][347]++;
    break;
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][350]++;
  this.inherited(arguments);
}), updateConfiguration: (function (config) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][354]++;
  this._updateMeasuresOptions(config);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][356]++;
  this.inherited(arguments);
}), _updateMeasuresOptions: (function (config) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][361]++;
  var measuresBar = config.byId("measures");
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][362]++;
  var measuresLine = config.byId("measuresLine");
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][363]++;
  var totalGems = (measuresBar.gems.length + measuresLine.gems.length);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][364]++;
  measuresBar.required = (totalGems == 0);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][365]++;
  measuresLine.required = (totalGems == 0);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][368]++;
  var visible = (measuresLine.gems.length > 0);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][369]++;
  config.byId("shape").ui.hidden = (! visible);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][370]++;
  config.byId("lineWidth").ui.hidden = (! visible);
})});
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][374]++;
  dojo.declare("analyzer.CCCScatterVizConfig", [analyzer.CCCVizConfig], {onModelEvent: (function (config, item, eventName, args) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][378]++;
  switch (eventName) {
  case "insertAt":
  case "gems":
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][381]++;
    this._updateColorRoleOptions(config);
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][382]++;
    break;
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][385]++;
  this.inherited(arguments);
}), updateConfiguration: (function (config) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][389]++;
  this._updateColorRoleOptions(config);
}), _updateColorRoleOptions: (function (config) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][393]++;
  var colorBy = config.byId("color");
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][395]++;
  colorBy.allowMultiple = ((! colorBy.gems.length) || (colorBy.gems[0].type !== "measure"));
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][399]++;
  var visible = ((colorBy.gems.length > 0) && (colorBy.gems[0].type === "measure"));
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][400]++;
  config.byId("reverseColors").ui.hidden = (! visible);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][401]++;
  config.byId("colorSet").ui.hidden = (! visible);
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][402]++;
  config.byId("pattern").ui.hidden = (! visible);
})});
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][409]++;
  var vizIds = ["ccc_bar", "ccc_barstacked", "ccc_barnormalized", "ccc_horzbar", "ccc_horzbarstacked", "ccc_horzbarnormalized", "ccc_pie", "ccc_line", "ccc_area", "ccc_scatter", "ccc_barline", "ccc_heatgrid"];
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][433]++;
  var vizCustomConfigs = {"ccc_heatgrid": analyzer.CCCHeatgridVizConfig, "ccc_scatter": analyzer.CCCScatterVizConfig, "ccc_barline": analyzer.CCCBarLineVizConfig};
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][439]++;
  var vizHelper = new (analyzer.CCCVizHelper)();
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][441]++;
  if ((! cv.pentahoVisualizations)) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][442]++;
    cv.pentahoVisualizations = [];
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][445]++;
  if ((! cv.pentahoVisualizationsHelpers)) {
    _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][446]++;
    cv.pentahoVisualizationsHelpers = {};
  }
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][449]++;
  dojo.forEach(vizIds, (function (vizId) {
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][451]++;
  cv.pentahoVisualizations.push(pentaho.visualizations.getById(vizId));
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][453]++;
  cv.pentahoVisualizationHelpers[vizId] = vizHelper;
  _$jscoverage['vizapi/ccc/ccc_analyzer_plugin.js'][455]++;
  analyzer.LayoutPanel.configurationManagers[("JSON_" + vizId)] = (vizCustomConfigs[vizId] || analyzer.CCCVizConfig);
}), this);
})});
}));
