/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['vizapi/DataTable.js']) {
  _$jscoverage['vizapi/DataTable.js'] = [];
  _$jscoverage['vizapi/DataTable.js'][11] = 0;
  _$jscoverage['vizapi/DataTable.js'][22] = 0;
  _$jscoverage['vizapi/DataTable.js'][23] = 0;
  _$jscoverage['vizapi/DataTable.js'][24] = 0;
  _$jscoverage['vizapi/DataTable.js'][25] = 0;
  _$jscoverage['vizapi/DataTable.js'][27] = 0;
  _$jscoverage['vizapi/DataTable.js'][62] = 0;
  _$jscoverage['vizapi/DataTable.js'][64] = 0;
  _$jscoverage['vizapi/DataTable.js'][65] = 0;
  _$jscoverage['vizapi/DataTable.js'][68] = 0;
  _$jscoverage['vizapi/DataTable.js'][70] = 0;
  _$jscoverage['vizapi/DataTable.js'][75] = 0;
  _$jscoverage['vizapi/DataTable.js'][76] = 0;
  _$jscoverage['vizapi/DataTable.js'][78] = 0;
  _$jscoverage['vizapi/DataTable.js'][80] = 0;
  _$jscoverage['vizapi/DataTable.js'][83] = 0;
  _$jscoverage['vizapi/DataTable.js'][87] = 0;
  _$jscoverage['vizapi/DataTable.js'][88] = 0;
  _$jscoverage['vizapi/DataTable.js'][90] = 0;
  _$jscoverage['vizapi/DataTable.js'][91] = 0;
  _$jscoverage['vizapi/DataTable.js'][92] = 0;
  _$jscoverage['vizapi/DataTable.js'][94] = 0;
  _$jscoverage['vizapi/DataTable.js'][98] = 0;
  _$jscoverage['vizapi/DataTable.js'][102] = 0;
  _$jscoverage['vizapi/DataTable.js'][106] = 0;
  _$jscoverage['vizapi/DataTable.js'][117] = 0;
  _$jscoverage['vizapi/DataTable.js'][118] = 0;
  _$jscoverage['vizapi/DataTable.js'][119] = 0;
  _$jscoverage['vizapi/DataTable.js'][120] = 0;
  _$jscoverage['vizapi/DataTable.js'][122] = 0;
  _$jscoverage['vizapi/DataTable.js'][123] = 0;
  _$jscoverage['vizapi/DataTable.js'][124] = 0;
  _$jscoverage['vizapi/DataTable.js'][125] = 0;
  _$jscoverage['vizapi/DataTable.js'][126] = 0;
  _$jscoverage['vizapi/DataTable.js'][127] = 0;
  _$jscoverage['vizapi/DataTable.js'][137] = 0;
  _$jscoverage['vizapi/DataTable.js'][138] = 0;
  _$jscoverage['vizapi/DataTable.js'][145] = 0;
  _$jscoverage['vizapi/DataTable.js'][146] = 0;
  _$jscoverage['vizapi/DataTable.js'][153] = 0;
  _$jscoverage['vizapi/DataTable.js'][154] = 0;
  _$jscoverage['vizapi/DataTable.js'][162] = 0;
  _$jscoverage['vizapi/DataTable.js'][163] = 0;
  _$jscoverage['vizapi/DataTable.js'][171] = 0;
  _$jscoverage['vizapi/DataTable.js'][172] = 0;
  _$jscoverage['vizapi/DataTable.js'][180] = 0;
  _$jscoverage['vizapi/DataTable.js'][181] = 0;
  _$jscoverage['vizapi/DataTable.js'][190] = 0;
  _$jscoverage['vizapi/DataTable.js'][191] = 0;
  _$jscoverage['vizapi/DataTable.js'][192] = 0;
  _$jscoverage['vizapi/DataTable.js'][194] = 0;
  _$jscoverage['vizapi/DataTable.js'][196] = 0;
  _$jscoverage['vizapi/DataTable.js'][198] = 0;
  _$jscoverage['vizapi/DataTable.js'][205] = 0;
  _$jscoverage['vizapi/DataTable.js'][206] = 0;
  _$jscoverage['vizapi/DataTable.js'][207] = 0;
  _$jscoverage['vizapi/DataTable.js'][209] = 0;
  _$jscoverage['vizapi/DataTable.js'][219] = 0;
  _$jscoverage['vizapi/DataTable.js'][220] = 0;
  _$jscoverage['vizapi/DataTable.js'][221] = 0;
  _$jscoverage['vizapi/DataTable.js'][223] = 0;
  _$jscoverage['vizapi/DataTable.js'][225] = 0;
  _$jscoverage['vizapi/DataTable.js'][227] = 0;
  _$jscoverage['vizapi/DataTable.js'][229] = 0;
  _$jscoverage['vizapi/DataTable.js'][231] = 0;
  _$jscoverage['vizapi/DataTable.js'][233] = 0;
  _$jscoverage['vizapi/DataTable.js'][236] = 0;
  _$jscoverage['vizapi/DataTable.js'][246] = 0;
  _$jscoverage['vizapi/DataTable.js'][248] = 0;
  _$jscoverage['vizapi/DataTable.js'][249] = 0;
  _$jscoverage['vizapi/DataTable.js'][250] = 0;
  _$jscoverage['vizapi/DataTable.js'][251] = 0;
  _$jscoverage['vizapi/DataTable.js'][253] = 0;
  _$jscoverage['vizapi/DataTable.js'][254] = 0;
  _$jscoverage['vizapi/DataTable.js'][256] = 0;
  _$jscoverage['vizapi/DataTable.js'][257] = 0;
  _$jscoverage['vizapi/DataTable.js'][258] = 0;
  _$jscoverage['vizapi/DataTable.js'][260] = 0;
  _$jscoverage['vizapi/DataTable.js'][262] = 0;
  _$jscoverage['vizapi/DataTable.js'][264] = 0;
  _$jscoverage['vizapi/DataTable.js'][266] = 0;
  _$jscoverage['vizapi/DataTable.js'][271] = 0;
  _$jscoverage['vizapi/DataTable.js'][275] = 0;
  _$jscoverage['vizapi/DataTable.js'][285] = 0;
  _$jscoverage['vizapi/DataTable.js'][286] = 0;
  _$jscoverage['vizapi/DataTable.js'][287] = 0;
  _$jscoverage['vizapi/DataTable.js'][288] = 0;
  _$jscoverage['vizapi/DataTable.js'][289] = 0;
  _$jscoverage['vizapi/DataTable.js'][290] = 0;
  _$jscoverage['vizapi/DataTable.js'][291] = 0;
  _$jscoverage['vizapi/DataTable.js'][292] = 0;
  _$jscoverage['vizapi/DataTable.js'][293] = 0;
  _$jscoverage['vizapi/DataTable.js'][296] = 0;
  _$jscoverage['vizapi/DataTable.js'][305] = 0;
  _$jscoverage['vizapi/DataTable.js'][306] = 0;
  _$jscoverage['vizapi/DataTable.js'][307] = 0;
  _$jscoverage['vizapi/DataTable.js'][308] = 0;
  _$jscoverage['vizapi/DataTable.js'][309] = 0;
  _$jscoverage['vizapi/DataTable.js'][310] = 0;
  _$jscoverage['vizapi/DataTable.js'][311] = 0;
  _$jscoverage['vizapi/DataTable.js'][312] = 0;
  _$jscoverage['vizapi/DataTable.js'][315] = 0;
  _$jscoverage['vizapi/DataTable.js'][335] = 0;
  _$jscoverage['vizapi/DataTable.js'][336] = 0;
  _$jscoverage['vizapi/DataTable.js'][337] = 0;
  _$jscoverage['vizapi/DataTable.js'][338] = 0;
  _$jscoverage['vizapi/DataTable.js'][339] = 0;
  _$jscoverage['vizapi/DataTable.js'][340] = 0;
  _$jscoverage['vizapi/DataTable.js'][342] = 0;
  _$jscoverage['vizapi/DataTable.js'][344] = 0;
  _$jscoverage['vizapi/DataTable.js'][347] = 0;
  _$jscoverage['vizapi/DataTable.js'][349] = 0;
  _$jscoverage['vizapi/DataTable.js'][350] = 0;
  _$jscoverage['vizapi/DataTable.js'][351] = 0;
  _$jscoverage['vizapi/DataTable.js'][352] = 0;
  _$jscoverage['vizapi/DataTable.js'][354] = 0;
  _$jscoverage['vizapi/DataTable.js'][355] = 0;
  _$jscoverage['vizapi/DataTable.js'][357] = 0;
  _$jscoverage['vizapi/DataTable.js'][358] = 0;
  _$jscoverage['vizapi/DataTable.js'][361] = 0;
  _$jscoverage['vizapi/DataTable.js'][362] = 0;
  _$jscoverage['vizapi/DataTable.js'][363] = 0;
  _$jscoverage['vizapi/DataTable.js'][364] = 0;
  _$jscoverage['vizapi/DataTable.js'][366] = 0;
  _$jscoverage['vizapi/DataTable.js'][370] = 0;
  _$jscoverage['vizapi/DataTable.js'][371] = 0;
  _$jscoverage['vizapi/DataTable.js'][376] = 0;
  _$jscoverage['vizapi/DataTable.js'][387] = 0;
  _$jscoverage['vizapi/DataTable.js'][388] = 0;
  _$jscoverage['vizapi/DataTable.js'][389] = 0;
  _$jscoverage['vizapi/DataTable.js'][402] = 0;
  _$jscoverage['vizapi/DataTable.js'][403] = 0;
  _$jscoverage['vizapi/DataTable.js'][404] = 0;
  _$jscoverage['vizapi/DataTable.js'][406] = 0;
  _$jscoverage['vizapi/DataTable.js'][421] = 0;
  _$jscoverage['vizapi/DataTable.js'][422] = 0;
  _$jscoverage['vizapi/DataTable.js'][423] = 0;
  _$jscoverage['vizapi/DataTable.js'][424] = 0;
  _$jscoverage['vizapi/DataTable.js'][425] = 0;
  _$jscoverage['vizapi/DataTable.js'][440] = 0;
  _$jscoverage['vizapi/DataTable.js'][441] = 0;
  _$jscoverage['vizapi/DataTable.js'][456] = 0;
  _$jscoverage['vizapi/DataTable.js'][457] = 0;
  _$jscoverage['vizapi/DataTable.js'][466] = 0;
  _$jscoverage['vizapi/DataTable.js'][468] = 0;
  _$jscoverage['vizapi/DataTable.js'][469] = 0;
  _$jscoverage['vizapi/DataTable.js'][470] = 0;
  _$jscoverage['vizapi/DataTable.js'][471] = 0;
  _$jscoverage['vizapi/DataTable.js'][472] = 0;
  _$jscoverage['vizapi/DataTable.js'][473] = 0;
  _$jscoverage['vizapi/DataTable.js'][474] = 0;
  _$jscoverage['vizapi/DataTable.js'][475] = 0;
  _$jscoverage['vizapi/DataTable.js'][476] = 0;
  _$jscoverage['vizapi/DataTable.js'][478] = 0;
  _$jscoverage['vizapi/DataTable.js'][479] = 0;
  _$jscoverage['vizapi/DataTable.js'][481] = 0;
  _$jscoverage['vizapi/DataTable.js'][482] = 0;
  _$jscoverage['vizapi/DataTable.js'][486] = 0;
  _$jscoverage['vizapi/DataTable.js'][490] = 0;
  _$jscoverage['vizapi/DataTable.js'][500] = 0;
  _$jscoverage['vizapi/DataTable.js'][501] = 0;
  _$jscoverage['vizapi/DataTable.js'][502] = 0;
  _$jscoverage['vizapi/DataTable.js'][503] = 0;
  _$jscoverage['vizapi/DataTable.js'][504] = 0;
  _$jscoverage['vizapi/DataTable.js'][505] = 0;
  _$jscoverage['vizapi/DataTable.js'][506] = 0;
  _$jscoverage['vizapi/DataTable.js'][507] = 0;
  _$jscoverage['vizapi/DataTable.js'][510] = 0;
  _$jscoverage['vizapi/DataTable.js'][519] = 0;
  _$jscoverage['vizapi/DataTable.js'][520] = 0;
  _$jscoverage['vizapi/DataTable.js'][521] = 0;
  _$jscoverage['vizapi/DataTable.js'][522] = 0;
  _$jscoverage['vizapi/DataTable.js'][523] = 0;
  _$jscoverage['vizapi/DataTable.js'][524] = 0;
  _$jscoverage['vizapi/DataTable.js'][525] = 0;
  _$jscoverage['vizapi/DataTable.js'][526] = 0;
  _$jscoverage['vizapi/DataTable.js'][529] = 0;
  _$jscoverage['vizapi/DataTable.js'][539] = 0;
  _$jscoverage['vizapi/DataTable.js'][540] = 0;
  _$jscoverage['vizapi/DataTable.js'][541] = 0;
  _$jscoverage['vizapi/DataTable.js'][542] = 0;
  _$jscoverage['vizapi/DataTable.js'][544] = 0;
  _$jscoverage['vizapi/DataTable.js'][545] = 0;
  _$jscoverage['vizapi/DataTable.js'][547] = 0;
  _$jscoverage['vizapi/DataTable.js'][554] = 0;
  _$jscoverage['vizapi/DataTable.js'][555] = 0;
  _$jscoverage['vizapi/DataTable.js'][562] = 0;
  _$jscoverage['vizapi/DataTable.js'][563] = 0;
  _$jscoverage['vizapi/DataTable.js'][571] = 0;
  _$jscoverage['vizapi/DataTable.js'][572] = 0;
  _$jscoverage['vizapi/DataTable.js'][580] = 0;
  _$jscoverage['vizapi/DataTable.js'][581] = 0;
  _$jscoverage['vizapi/DataTable.js'][589] = 0;
  _$jscoverage['vizapi/DataTable.js'][590] = 0;
  _$jscoverage['vizapi/DataTable.js'][599] = 0;
  _$jscoverage['vizapi/DataTable.js'][600] = 0;
  _$jscoverage['vizapi/DataTable.js'][601] = 0;
  _$jscoverage['vizapi/DataTable.js'][602] = 0;
  _$jscoverage['vizapi/DataTable.js'][605] = 0;
  _$jscoverage['vizapi/DataTable.js'][606] = 0;
  _$jscoverage['vizapi/DataTable.js'][607] = 0;
  _$jscoverage['vizapi/DataTable.js'][608] = 0;
  _$jscoverage['vizapi/DataTable.js'][609] = 0;
  _$jscoverage['vizapi/DataTable.js'][611] = 0;
  _$jscoverage['vizapi/DataTable.js'][612] = 0;
  _$jscoverage['vizapi/DataTable.js'][614] = 0;
  _$jscoverage['vizapi/DataTable.js'][615] = 0;
  _$jscoverage['vizapi/DataTable.js'][618] = 0;
  _$jscoverage['vizapi/DataTable.js'][620] = 0;
  _$jscoverage['vizapi/DataTable.js'][623] = 0;
  _$jscoverage['vizapi/DataTable.js'][624] = 0;
  _$jscoverage['vizapi/DataTable.js'][625] = 0;
  _$jscoverage['vizapi/DataTable.js'][626] = 0;
  _$jscoverage['vizapi/DataTable.js'][635] = 0;
  _$jscoverage['vizapi/DataTable.js'][636] = 0;
  _$jscoverage['vizapi/DataTable.js'][637] = 0;
  _$jscoverage['vizapi/DataTable.js'][638] = 0;
  _$jscoverage['vizapi/DataTable.js'][641] = 0;
  _$jscoverage['vizapi/DataTable.js'][642] = 0;
  _$jscoverage['vizapi/DataTable.js'][643] = 0;
  _$jscoverage['vizapi/DataTable.js'][644] = 0;
  _$jscoverage['vizapi/DataTable.js'][645] = 0;
  _$jscoverage['vizapi/DataTable.js'][647] = 0;
  _$jscoverage['vizapi/DataTable.js'][648] = 0;
  _$jscoverage['vizapi/DataTable.js'][650] = 0;
  _$jscoverage['vizapi/DataTable.js'][651] = 0;
  _$jscoverage['vizapi/DataTable.js'][654] = 0;
  _$jscoverage['vizapi/DataTable.js'][656] = 0;
  _$jscoverage['vizapi/DataTable.js'][667] = 0;
  _$jscoverage['vizapi/DataTable.js'][669] = 0;
  _$jscoverage['vizapi/DataTable.js'][670] = 0;
  _$jscoverage['vizapi/DataTable.js'][671] = 0;
  _$jscoverage['vizapi/DataTable.js'][676] = 0;
  _$jscoverage['vizapi/DataTable.js'][679] = 0;
  _$jscoverage['vizapi/DataTable.js'][680] = 0;
  _$jscoverage['vizapi/DataTable.js'][681] = 0;
  _$jscoverage['vizapi/DataTable.js'][682] = 0;
  _$jscoverage['vizapi/DataTable.js'][683] = 0;
  _$jscoverage['vizapi/DataTable.js'][684] = 0;
  _$jscoverage['vizapi/DataTable.js'][686] = 0;
  _$jscoverage['vizapi/DataTable.js'][689] = 0;
  _$jscoverage['vizapi/DataTable.js'][692] = 0;
  _$jscoverage['vizapi/DataTable.js'][694] = 0;
  _$jscoverage['vizapi/DataTable.js'][695] = 0;
  _$jscoverage['vizapi/DataTable.js'][707] = 0;
  _$jscoverage['vizapi/DataTable.js'][708] = 0;
  _$jscoverage['vizapi/DataTable.js'][720] = 0;
  _$jscoverage['vizapi/DataTable.js'][721] = 0;
}
_$jscoverage['vizapi/DataTable.js'].source = ["<span class=\"c\">/*</span>","<span class=\"c\">pentaho.DataTable</span>","<span class=\"c\">pentaho.DataView</span>","","<span class=\"c\">Client-side non-visual data tables.</span>","","<span class=\"c\">author: James Dixon</span>","","<span class=\"c\">*/</span>","","pentaho <span class=\"k\">=</span> <span class=\"k\">typeof</span> pentaho <span class=\"k\">==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> <span class=\"k\">{}</span> <span class=\"k\">:</span> pentaho<span class=\"k\">;</span>","","<span class=\"c\">/****************************************************</span>","<span class=\"c\">    pentaho.DataTable</span>","<span class=\"c\">    A client-side table object. </span>","<span class=\"c\">****************************************************/</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    Constructor.</span>","<span class=\"c\">    jsonTable:      A CDA JSON table object or a Google DataTable JSON object</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> jsonTable <span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable <span class=\"k\">=</span> jsonTable<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"pentaho.DataTable\"</span><span class=\"k\">;</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> jsonTable<span class=\"k\">.</span>metadata <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// convert from CDA to DataTable</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>convertCdaToDataTable<span class=\"k\">(</span>jsonTable<span class=\"k\">);</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    convertCdaToDataTable</span>","<span class=\"c\">    Converts a CDA JSON table object to a Google DataTable JSON table object</span>","<span class=\"c\">    </span>","<span class=\"c\">    Input format</span>","<span class=\"c\">    {</span>","<span class=\"c\">        metadata: [</span>","<span class=\"c\">            { colName: 'col1', colType: 'STRING', colLabel: 'Column 1' },</span>","<span class=\"c\">            { colName: 'col2', colType: 'NUMERIC', colLabel: 'Column 2' }</span>","<span class=\"c\">        ],</span>","<span class=\"c\">        resultset: [</span>","<span class=\"c\">            [ 'Row1', 123 ],</span>","<span class=\"c\">            [ 'Row2', 456 ]</span>","<span class=\"c\">        ]</span>","<span class=\"c\">    }</span>","<span class=\"c\">    </span>","<span class=\"c\">    Output format</span>","<span class=\"c\">    {</span>","<span class=\"c\">        cols: [</span>","<span class=\"c\">            { id: 'col1', type: 'string', label: 'Column 1' },</span>","<span class=\"c\">            { id: 'col2', type: 'number', label: 'Column 2' },</span>","<span class=\"c\">        ],</span>","<span class=\"c\">        rows: [</span>","<span class=\"c\">            { c: [ {v: 'Row 1' }, {v: 123} ] },</span>","<span class=\"c\">            { c: [ {v: 'Row 2' }, {v: 456} ] }</span>","<span class=\"c\">        ]</span>","<span class=\"c\">    }</span>","<span class=\"c\">    </span>","<span class=\"c\">    cdaTable:   a CDA JSON table</span>","<span class=\"c\">    returns:    a Google DataTable JSON table object</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>convertCdaToDataTable <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> cdaTable <span class=\"k\">)</span> <span class=\"k\">{</span>","","    <span class=\"k\">var</span> cols <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">var</span> rows <span class=\"k\">=</span> <span class=\"k\">[];</span>","    ","    <span class=\"c\">// create the columns objects</span>","    <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> columnIdx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> columnIdx<span class=\"k\">&lt;</span>cdaTable<span class=\"k\">.</span>metadata<span class=\"k\">.</span>length<span class=\"k\">;</span> columnIdx<span class=\"k\">++)</span> <span class=\"k\">{</span>","        <span class=\"c\">// create a column object</span>","        col <span class=\"k\">=</span> <span class=\"k\">{</span>","            id<span class=\"k\">:</span> cdaTable<span class=\"k\">.</span>metadata<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>colName<span class=\"k\">,</span>","            type<span class=\"k\">:</span> cdaTable<span class=\"k\">.</span>metadata<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>colType<span class=\"k\">.</span>toLowerCase<span class=\"k\">(),</span>","            label<span class=\"k\">:</span> cdaTable<span class=\"k\">.</span>metadata<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>colLabel","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>col<span class=\"k\">.</span>label<span class=\"k\">)</span> <span class=\"k\">{</span>","            col<span class=\"k\">.</span>label <span class=\"k\">=</span> col<span class=\"k\">.</span>id<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>col<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'numeric'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// convert 'numeric' to 'number' to be compatible with Google Charts</span>","            col<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'number'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"c\">// add the column to the cols array</span>","        cols<span class=\"k\">.</span>push<span class=\"k\">(</span>col<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// now add the rows</span>","    <span class=\"k\">var</span> cdaData <span class=\"k\">=</span> cdaTable<span class=\"k\">.</span>resultset<span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> rowIdx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowIdx<span class=\"k\">&lt;</span>cdaData<span class=\"k\">.</span>length<span class=\"k\">;</span> rowIdx<span class=\"k\">++)</span> <span class=\"k\">{</span>","        <span class=\"c\">// create a cells array</span>","        <span class=\"k\">var</span> cells <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">var</span> cdaRow <span class=\"k\">=</span> cdaData<span class=\"k\">[</span>rowIdx<span class=\"k\">];</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> columnIdx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> columnIdx<span class=\"k\">&lt;</span>cdaRow<span class=\"k\">.</span>length<span class=\"k\">;</span> columnIdx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// add a value to the cells array</span>","            cells<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                v<span class=\"k\">:</span> cdaRow<span class=\"k\">[</span>columnIdx<span class=\"k\">]</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> row <span class=\"k\">=</span> <span class=\"k\">{</span>","            c<span class=\"k\">:</span> cells","        <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"c\">// add the row to the rows array</span>","        rows<span class=\"k\">.</span>push<span class=\"k\">(</span>row<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// returns the finished object</span>","    <span class=\"k\">return</span> <span class=\"k\">{</span>","        cols<span class=\"k\">:</span> cols<span class=\"k\">,</span>","        rows<span class=\"k\">:</span> rows","    <span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    Add Java classnames in select places so that this data table can be</span>","<span class=\"c\">    deserialized from JSON into Java objects</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>makePostable <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">[</span><span class=\"s\">\"class\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">\"org.pentaho.dataservice.DataTable\"</span><span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">();</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">[</span>idx<span class=\"k\">][</span><span class=\"s\">\"class\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">\"org.pentaho.dataservice.Column\"</span><span class=\"k\">;</span>","    <span class=\"k\">}</span> ","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> cells <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>idx<span class=\"k\">].</span>c<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> cells <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">for</span><span class=\"k\">(</span> cellNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> cellNo<span class=\"k\">&lt;</span>cells<span class=\"k\">.</span>length<span class=\"k\">;</span> cellNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> cells<span class=\"k\">[</span>cellNo<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    cells<span class=\"k\">[</span>cellNo<span class=\"k\">][</span><span class=\"s\">\"class\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">\"org.pentaho.dataservice.Cell\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    Returns the underlying JSON table</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getJsonTable <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">;</span>","<span class=\"k\">}</span>"," ","<span class=\"c\">/*</span>","<span class=\"c\">    getNumberOfColumns</span>","<span class=\"c\">    returns     The number of columns in the table</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getNumberOfColumns <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">.</span>length<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getNumberOfRows</span>","<span class=\"c\">    returns     The number of rows in the table</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getNumberOfRows <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">.</span>length<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnType</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    returns     The type of the specified column (number, string, date, boolean</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnType <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>type<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnId</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    returns     The id of the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnId <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>id<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnLabel</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    returns     The label of the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnLabel <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>label<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getValue</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    rowIdx      The row number (zero based)</span>","<span class=\"c\">    returns     The value of the specified cell</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getValue <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rowIdx<span class=\"k\">,</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">])</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>v <span class=\"k\">!==</span> undefined <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// we have a value field so return it</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>v<span class=\"k\">;</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">];</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    Returns the cell object</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_getCell <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rowIdx<span class=\"k\">,</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">])</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">];</span>","<span class=\"k\">}</span>","","","<span class=\"c\">/*</span>","<span class=\"c\">    getFormattedValue</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    rowIdx      The row number (zero based)</span>","<span class=\"c\">    returns     The formatted value of the specified cell</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getFormattedValue <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rowIdx<span class=\"k\">,</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>f <span class=\"k\">!==</span> undefined <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// we have a formatted value so return it</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>f<span class=\"k\">;</span>","    <span class=\"k\">}</span> ","    <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>v <span class=\"k\">!==</span> undefined <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// we have a value field so return it</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>v<span class=\"k\">;</span>","    <span class=\"k\">}</span> ","    <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>v <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// we have a null value field so return it</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span> ","    <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">];</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnRange</span>","<span class=\"c\">    Returns a range object describing the minimum and maximum values from the specified column</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    returns     A range object - { min: 123, max: 456 }</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnRange <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","","    <span class=\"k\">var</span> min<span class=\"k\">;</span>","    <span class=\"k\">var</span> max<span class=\"k\">;</span>","    <span class=\"k\">var</span> set <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowNo<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// get the value from this row</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> columnIdx <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>set <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>value <span class=\"k\">||</span> value <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// we have found our first value, set the min and max</span>","            min <span class=\"k\">=</span> value<span class=\"k\">;</span>","            max <span class=\"k\">=</span> value<span class=\"k\">;</span>","            set <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> value <span class=\"k\">&lt;</span> min <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// adjust the minimum</span>","                min <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> value <span class=\"k\">&gt;</span> max <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// adjust the maximum</span>","                max <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"c\">// return the range </span>","    <span class=\"k\">var</span> range <span class=\"k\">=</span> <span class=\"k\">{</span>","        min<span class=\"k\">:</span> min<span class=\"k\">,</span>","        max<span class=\"k\">:</span> max","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> range<span class=\"k\">;</span>","","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getDistinctValues</span>","<span class=\"c\">    Returns an array of the distinct values from the specified column</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    Returns     An array of the distinct values from the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getDistinctValues <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> values <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">var</span> valueMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> isNumber <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getColumnType<span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">'number'</span><span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowNo<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> isNumber <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>getValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> columnIdx <span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFormattedValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> columnIdx <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            values<span class=\"k\">.</span>push<span class=\"k\">(</span>value<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> values<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getDistinctFormattedValues</span>","<span class=\"c\">    Returns an array of the distinct formatted values from the specified column</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    Returns     an array of the distinct formatted values from the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getDistinctFormattedValues <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> values <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">var</span> valueMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowNo<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFormattedValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> columnIdx <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            values<span class=\"k\">.</span>push<span class=\"k\">(</span>value<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> values<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getFilteredRows</span>","<span class=\"c\">    Filters the rows of the table using the specified filter(s). Returns an array of the row numbers</span>","<span class=\"c\">    that met the filter criteria. The result can be passed to DataView.setRows to get a filtered table</span>","<span class=\"c\">    </span>","<span class=\"c\">    To filter on column 0 == 'France'</span>","<span class=\"c\">    var rows = dataTable.getFilteredRows({ column: 0, value: 'France' })</span>","<span class=\"c\">    var view = new pentaho.DataView( dataTable );</span>","<span class=\"c\">    view.setRows(rows)</span>","<span class=\"c\">    </span>","<span class=\"c\">    To combine France and Germany</span>","<span class=\"c\">    var rows = dataTable.getFilteredRows({ column: 0, combine: [{values:['France','Germany']}] })</span>","<span class=\"c\">    var view = new pentaho.DataView( dataTable );</span>","<span class=\"c\">    view.setRows(rows)</span>","<span class=\"c\">    </span>","<span class=\"c\">    Returns     an array of row nummbers of the rows that met the filter requirements</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getFilteredRows <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>filters<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> rows <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">var</span> comboMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowNo<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// check each row</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> filterNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> filterNo<span class=\"k\">&lt;</span>filters<span class=\"k\">.</span>length<span class=\"k\">;</span> filterNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// check each filter</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> filters<span class=\"k\">[</span>filterNo<span class=\"k\">].</span>value <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// this is a 'filter by value'</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>getValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> filters<span class=\"k\">[</span>filterNo<span class=\"k\">].</span>column <span class=\"k\">)</span> <span class=\"k\">==</span> filters<span class=\"k\">[</span>filterNo<span class=\"k\">].</span>value <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">// this row passes the filter requirements, add the row number to the rows array</span>","                    rows<span class=\"k\">.</span>push<span class=\"k\">(</span> rowNo <span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> filters<span class=\"k\">[</span>filterNo<span class=\"k\">].</span>combinations <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// this is a 'local combination of rows'</span>","                <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> filters<span class=\"k\">[</span>filterNo<span class=\"k\">].</span>column <span class=\"k\">);</span>","                <span class=\"k\">var</span> combinations <span class=\"k\">=</span> filters<span class=\"k\">[</span>filterNo<span class=\"k\">].</span>combinations<span class=\"k\">;</span>","                <span class=\"k\">var</span> combined <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">for</span><span class=\"k\">(</span> combinationNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> combinationNo<span class=\"k\">&lt;</span>combinations<span class=\"k\">.</span>length<span class=\"k\">;</span> combinationNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">// check the values</span>","                    <span class=\"k\">for</span><span class=\"k\">(</span> valueNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> valueNo<span class=\"k\">&lt;</span>combinations<span class=\"k\">[</span>combinationNo<span class=\"k\">].</span>values<span class=\"k\">.</span>length<span class=\"k\">;</span> valueNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span> value <span class=\"k\">==</span> combinations<span class=\"k\">[</span>combinationNo<span class=\"k\">].</span>values<span class=\"k\">[</span>valueNo<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"c\">// found something to combine</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span> comboMap<span class=\"k\">[</span>combinationNo<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                                comboMap<span class=\"k\">[</span>combinationNo<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">].</span>push<span class=\"k\">(</span> rowNo <span class=\"k\">);</span>","                            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                                <span class=\"c\">// this is a new one</span>","                                <span class=\"k\">var</span> row <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">'combine'</span><span class=\"k\">,[]];</span>","                                row<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>push<span class=\"k\">(</span> rowNo <span class=\"k\">);</span>","                                rows<span class=\"k\">.</span>push<span class=\"k\">(</span> row <span class=\"k\">);</span>","                                comboMap<span class=\"k\">[</span>combinationNo<span class=\"k\">]</span> <span class=\"k\">=</span> row<span class=\"k\">;</span>","                            <span class=\"k\">}</span>","                            combined <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>combined <span class=\"k\">)</span> <span class=\"k\">{</span>","                    rows<span class=\"k\">.</span>push<span class=\"k\">(</span> rowNo <span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> rows<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    setColumnProperty</span>","<span class=\"c\">    Sets a column property</span>","","<span class=\"c\">    columnIndex The index of the column to set the property on</span>","<span class=\"c\">    name        The name of the property</span>","<span class=\"c\">    value       The value of the property</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>setColumnProperty <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIndex<span class=\"k\">,</span> name<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> columnIndex <span class=\"k\">&gt;=</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> columnIndex <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">[</span>columnIndex<span class=\"k\">][</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnProperty</span>","<span class=\"c\">    Returns a column property</span>","","<span class=\"c\">    columnIndex The index of the column to set the property on</span>","<span class=\"c\">    name        The name of the property</span>","","<span class=\"c\">    Return      The value of the property</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnProperty <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIndex<span class=\"k\">,</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> columnIndex <span class=\"k\">&gt;=</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> columnIndex <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">[</span>columnIndex<span class=\"k\">][</span>name<span class=\"k\">];</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/****************************************************</span>","<span class=\"c\">    pentaho.DataView</span>","<span class=\"c\">    A client-side data view object.</span>","<span class=\"c\">    Provides a way to access a subset of a DataTable.</span>","<span class=\"c\">    You can reduce the rows and/or columns of the</span>","<span class=\"c\">    underlying DataTable</span>","<span class=\"c\">****************************************************/</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    Constructor</span>","<span class=\"c\">    dataTable:  A DataTable object to base this view on</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> dataTable <span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>dataTable <span class=\"k\">=</span> dataTable<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>rows <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"pentaho.DataView\"</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    setRows</span>","<span class=\"c\">    Sets the row numbers of the rows to have in the view.</span>","<span class=\"c\">    The row numbers do not have to match the order of the</span>","<span class=\"c\">    underlying table.</span>","<span class=\"c\">    If this function is not called this DataView will include</span>","<span class=\"c\">    all the rows of the underlying DataTable.</span>","<span class=\"c\">    All of the row numbers must be within the range of valid</span>","<span class=\"c\">    row numbers for the DataTable.</span>","<span class=\"c\">    </span>","<span class=\"c\">    rows    An array of row numbers</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>setRows <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rows<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>rows <span class=\"k\">=</span> rows<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    setColumns</span>","<span class=\"c\">    Sets the column numbers to have in the view.</span>","<span class=\"c\">    The column numbers do not have to match the order of the</span>","<span class=\"c\">    columns in the underlying table.</span>","<span class=\"c\">    If this function is not called this DataView will include</span>","<span class=\"c\">    all the columns of the underlying DataTable.</span>","<span class=\"c\">    All of the columns numbers must be within the range of valid</span>","<span class=\"c\">    columns numbers for the DataTable.</span>","<span class=\"c\">    </span>","<span class=\"c\">    columns    An array of columns numbers</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>setColumns <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columns<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">=</span> columns<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnRange</span>","<span class=\"c\">    Returns a range object describing the minimum and maximum values from the specified column</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    returns     A range object - { min: 123, max: 456 }</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnRange <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","","    <span class=\"k\">var</span> min<span class=\"k\">;</span>","    <span class=\"k\">var</span> max<span class=\"k\">;</span>","    <span class=\"k\">var</span> set <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowNo<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> columnIdx <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>set <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>value <span class=\"k\">||</span> value <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            min <span class=\"k\">=</span> value<span class=\"k\">;</span>","            max <span class=\"k\">=</span> value<span class=\"k\">;</span>","            set <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> value <span class=\"k\">&lt;</span> min <span class=\"k\">)</span> <span class=\"k\">{</span>","                min <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> value <span class=\"k\">&gt;</span> max <span class=\"k\">)</span> <span class=\"k\">{</span>","                max <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">var</span> range <span class=\"k\">=</span> <span class=\"k\">{</span>","        min<span class=\"k\">:</span> min<span class=\"k\">,</span>","        max<span class=\"k\">:</span> max","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> range<span class=\"k\">;</span>","","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getDistinctValues</span>","<span class=\"c\">    Returns an array of the distinct values from the specified column</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    Returns     An array of the distinct values from the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getDistinctValues <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> values <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">var</span> valueMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowNo<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> columnIdx <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            values<span class=\"k\">.</span>push<span class=\"k\">(</span>value<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> values<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getDistinctFormattedValues</span>","<span class=\"c\">    Returns an array of the distinct formatted values from the specified column</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    Returns     an array of the distinct formatted values from the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getDistinctFormattedValues <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> values <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">var</span> valueMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowNo<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFormattedValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> columnIdx <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            values<span class=\"k\">.</span>push<span class=\"k\">(</span>value<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> values<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    hideColumns</span>","<span class=\"c\">    Removes columns from the view.</span>","<span class=\"c\">    The list of column numbers to hide must be in ascending order so the indexes don't shift as we delete.</span>","<span class=\"c\">    </span>","<span class=\"c\">    columns     An array of column numbers to hide</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>hideColumns <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columns<span class=\"k\">)</span> <span class=\"k\">{</span>","    tmpCols <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> columnIdx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> columnIdx <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">();</span> columnIdx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        tmpCols<span class=\"k\">.</span>push<span class=\"k\">(</span> columnIdx <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span>columns<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span> idx<span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span> idx<span class=\"k\">--</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        tmpCols<span class=\"k\">.</span>splice<span class=\"k\">(</span>columns<span class=\"k\">[</span>idx<span class=\"k\">],</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">=</span> tmpCols<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getNumberOfRows</span>","<span class=\"c\">    returns     The number of rows in the table</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getNumberOfRows <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getNumberOfRows<span class=\"k\">()</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows<span class=\"k\">.</span>length<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getNumberOfColumns</span>","<span class=\"c\">    returns     The number of columns in the table</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getNumberOfColumns <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">()</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">.</span>length<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnId</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    returns     The id of the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnId <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">[</span>columnIdx<span class=\"k\">]);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnLabel</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    returns     The label of the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnLabel <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getColumnLabel<span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getColumnLabel<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">[</span>columnIdx<span class=\"k\">]);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnType</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    returns     The type of the specified column (number, string, date, boolean</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnType <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getColumnType<span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getColumnType<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">[</span>columnIdx<span class=\"k\">]);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getValue</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    rowIdx      The row number (zero based)</span>","<span class=\"c\">    returns     The value of the specified cell</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getValue <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rowNo<span class=\"k\">,</span> colNo<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> rowIdx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> rowNo <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows<span class=\"k\">[</span>rowNo<span class=\"k\">];</span>","    <span class=\"k\">var</span> colIdx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> colNo <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">[</span>colNo<span class=\"k\">];</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> rowIdx<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> rowIdx<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"s\">'combine'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// this is a combined row</span>","","        <span class=\"k\">var</span> type <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getColumnType<span class=\"k\">(</span>colNo<span class=\"k\">);</span>","        <span class=\"k\">var</span> value ","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> idx <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getValue<span class=\"k\">(</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">][</span>idx<span class=\"k\">],</span> colIdx<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> type <span class=\"k\">==</span> <span class=\"s\">'string'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                value <span class=\"k\">+=</span> <span class=\"s\">' + '</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getValue<span class=\"k\">(</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">][</span>idx<span class=\"k\">],</span> colIdx<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> type <span class=\"k\">==</span> <span class=\"s\">'number'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                value <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getValue<span class=\"k\">(</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">][</span>idx<span class=\"k\">],</span> colIdx<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getValue<span class=\"k\">(</span>rowIdx<span class=\"k\">,</span> colIdx<span class=\"k\">);</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_getCell <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rowNo<span class=\"k\">,</span> colNo<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> rowIdx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> rowNo <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows<span class=\"k\">[</span>rowNo<span class=\"k\">];</span>","    <span class=\"k\">var</span> colIdx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> colNo <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">[</span>colNo<span class=\"k\">];</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>_getCell<span class=\"k\">(</span>rowIdx<span class=\"k\">,</span> colIdx<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getFormattedValue</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    rowIdx      The row number (zero based)</span>","<span class=\"c\">    returns     The formatted value of the specified cell</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getFormattedValue <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rowNo<span class=\"k\">,</span> colNo<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> rowIdx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> rowNo <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows<span class=\"k\">[</span>rowNo<span class=\"k\">];</span>","    <span class=\"k\">var</span> colIdx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> colNo <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">[</span>colNo<span class=\"k\">];</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> rowIdx<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> rowIdx<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"s\">'combine'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// this is a combined row</span>","","        <span class=\"k\">var</span> type <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getColumnType<span class=\"k\">(</span>colNo<span class=\"k\">);</span>","        <span class=\"k\">var</span> value ","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> idx <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getFormattedValue<span class=\"k\">(</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">][</span>idx<span class=\"k\">],</span> colIdx<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> type <span class=\"k\">==</span> <span class=\"s\">'string'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                value <span class=\"k\">+=</span> <span class=\"s\">' + '</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getFormattedValue<span class=\"k\">(</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">][</span>idx<span class=\"k\">],</span> colIdx<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> type <span class=\"k\">==</span> <span class=\"s\">'number'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                value <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getFormattedValue<span class=\"k\">(</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">][</span>idx<span class=\"k\">],</span> colIdx<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getFormattedValue<span class=\"k\">(</span>rowIdx<span class=\"k\">,</span> colIdx<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    toDataTable</span>","<span class=\"c\">    Converts this view into a DataTable that has its own copy of the</span>","<span class=\"c\">    underlying data.</span>","<span class=\"c\">    The column metadata and the rows are copied into the new object.</span>","<span class=\"c\">    </span>","<span class=\"c\">    Returns:    A DataTable</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toDataTable <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","    <span class=\"k\">var</span> cols <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> colIdx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> colIdx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">();</span> colIdx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        col <span class=\"k\">=</span> <span class=\"k\">{</span>","            type<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getColumnType<span class=\"k\">(</span>colIdx<span class=\"k\">),</span>","            id<span class=\"k\">:</span>  <span class=\"k\">this</span><span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>colIdx<span class=\"k\">),</span>","            label<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getColumnLabel<span class=\"k\">(</span>colIdx<span class=\"k\">)</span>","        <span class=\"k\">}</span>","        cols<span class=\"k\">.</span>push<span class=\"k\">(</span>col<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> rows <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowIdx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowIdx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowIdx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        cells <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> colIdx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> colIdx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">();</span> colIdx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getCell<span class=\"k\">(</span>rowIdx<span class=\"k\">,</span> colIdx<span class=\"k\">);</span>","            cells<span class=\"k\">.</span>push<span class=\"k\">(</span>cell<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        row <span class=\"k\">=</span> <span class=\"k\">{</span>","            c<span class=\"k\">:</span> cells","        <span class=\"k\">}</span><span class=\"k\">;</span>","        rows<span class=\"k\">.</span>push<span class=\"k\">(</span> row <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> json <span class=\"k\">=</span> <span class=\"k\">{</span> cols<span class=\"k\">:</span> cols<span class=\"k\">,</span> rows<span class=\"k\">:</span> rows <span class=\"k\">}</span><span class=\"k\">;</span>","    ","    <span class=\"k\">var</span> table <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">(</span>json<span class=\"k\">);</span>","    <span class=\"k\">return</span> table<span class=\"k\">;</span>","","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    setColumnProperty</span>","<span class=\"c\">    Sets a column property</span>","","<span class=\"c\">    columnIndex The index of the column to set the property on</span>","<span class=\"c\">    name        The name of the property</span>","<span class=\"c\">    value       The value of the property</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>setColumnProperty <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIndex<span class=\"k\">,</span> name<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>setColumnProperty<span class=\"k\">(</span>columnIndex<span class=\"k\">,</span> name<span class=\"k\">,</span> value<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnProperty</span>","<span class=\"c\">    Returns a column property</span>","","<span class=\"c\">    columnIndex The index of the column to set the property on</span>","<span class=\"c\">    name        The name of the property</span>","","<span class=\"c\">    Return      The value of the property</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnProperty <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIndex<span class=\"k\">,</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getColumnProperty<span class=\"k\">(</span>columnIndex<span class=\"k\">,</span> name<span class=\"k\">);</span>","<span class=\"k\">}</span>"];
_$jscoverage['vizapi/DataTable.js'][11]++;
pentaho = (((typeof pentaho) == "undefined")? {}: pentaho);
_$jscoverage['vizapi/DataTable.js'][22]++;
pentaho.DataTable = (function (jsonTable) {
  _$jscoverage['vizapi/DataTable.js'][23]++;
  this.jsonTable = jsonTable;
  _$jscoverage['vizapi/DataTable.js'][24]++;
  this.className = "pentaho.DataTable";
  _$jscoverage['vizapi/DataTable.js'][25]++;
  if (jsonTable.metadata) {
    _$jscoverage['vizapi/DataTable.js'][27]++;
    this.jsonTable = pentaho.DataTable.convertCdaToDataTable(jsonTable);
  }
});
_$jscoverage['vizapi/DataTable.js'][62]++;
pentaho.DataTable.convertCdaToDataTable = (function (cdaTable) {
  _$jscoverage['vizapi/DataTable.js'][64]++;
  var cols = [];
  _$jscoverage['vizapi/DataTable.js'][65]++;
  var rows = [];
  _$jscoverage['vizapi/DataTable.js'][68]++;
  for (var columnIdx = 0; (columnIdx < cdaTable.metadata.length); (columnIdx++)) {
    _$jscoverage['vizapi/DataTable.js'][70]++;
    col = {id: cdaTable.metadata[columnIdx].colName, type: cdaTable.metadata[columnIdx].colType.toLowerCase(), label: cdaTable.metadata[columnIdx].colLabel};
    _$jscoverage['vizapi/DataTable.js'][75]++;
    if ((! col.label)) {
      _$jscoverage['vizapi/DataTable.js'][76]++;
      col.label = col.id;
    }
    _$jscoverage['vizapi/DataTable.js'][78]++;
    if ((col.type == "numeric")) {
      _$jscoverage['vizapi/DataTable.js'][80]++;
      col.type = "number";
    }
    _$jscoverage['vizapi/DataTable.js'][83]++;
    cols.push(col);
}
  _$jscoverage['vizapi/DataTable.js'][87]++;
  var cdaData = cdaTable.resultset;
  _$jscoverage['vizapi/DataTable.js'][88]++;
  for (var rowIdx = 0; (rowIdx < cdaData.length); (rowIdx++)) {
    _$jscoverage['vizapi/DataTable.js'][90]++;
    var cells = [];
    _$jscoverage['vizapi/DataTable.js'][91]++;
    var cdaRow = cdaData[rowIdx];
    _$jscoverage['vizapi/DataTable.js'][92]++;
    for (columnIdx = 0; (columnIdx < cdaRow.length); (columnIdx++)) {
      _$jscoverage['vizapi/DataTable.js'][94]++;
      cells.push({v: cdaRow[columnIdx]});
}
    _$jscoverage['vizapi/DataTable.js'][98]++;
    var row = {c: cells};
    _$jscoverage['vizapi/DataTable.js'][102]++;
    rows.push(row);
}
  _$jscoverage['vizapi/DataTable.js'][106]++;
  return ({cols: cols, rows: rows});
});
_$jscoverage['vizapi/DataTable.js'][117]++;
pentaho.DataTable.prototype.makePostable = (function () {
  _$jscoverage['vizapi/DataTable.js'][118]++;
  this.jsonTable["class"] = "org.pentaho.dataservice.DataTable";
  _$jscoverage['vizapi/DataTable.js'][119]++;
  for (var idx = 0; (idx < this.getNumberOfColumns()); (idx++)) {
    _$jscoverage['vizapi/DataTable.js'][120]++;
    this.jsonTable.cols[idx]["class"] = "org.pentaho.dataservice.Column";
}
  _$jscoverage['vizapi/DataTable.js'][122]++;
  for (var idx = 0; (idx < this.getNumberOfRows()); (idx++)) {
    _$jscoverage['vizapi/DataTable.js'][123]++;
    var cells = this.jsonTable.rows[idx].c;
    _$jscoverage['vizapi/DataTable.js'][124]++;
    if (cells) {
      _$jscoverage['vizapi/DataTable.js'][125]++;
      for (cellNo = 0; (cellNo < cells.length); (cellNo++)) {
        _$jscoverage['vizapi/DataTable.js'][126]++;
        if (cells[cellNo]) {
          _$jscoverage['vizapi/DataTable.js'][127]++;
          cells[cellNo]["class"] = "org.pentaho.dataservice.Cell";
        }
}
    }
}
});
_$jscoverage['vizapi/DataTable.js'][137]++;
pentaho.DataTable.prototype.getJsonTable = (function () {
  _$jscoverage['vizapi/DataTable.js'][138]++;
  return this.jsonTable;
});
_$jscoverage['vizapi/DataTable.js'][145]++;
pentaho.DataTable.prototype.getNumberOfColumns = (function () {
  _$jscoverage['vizapi/DataTable.js'][146]++;
  return this.jsonTable.cols.length;
});
_$jscoverage['vizapi/DataTable.js'][153]++;
pentaho.DataTable.prototype.getNumberOfRows = (function () {
  _$jscoverage['vizapi/DataTable.js'][154]++;
  return this.jsonTable.rows.length;
});
_$jscoverage['vizapi/DataTable.js'][162]++;
pentaho.DataTable.prototype.getColumnType = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][163]++;
  return this.jsonTable.cols[columnIdx].type;
});
_$jscoverage['vizapi/DataTable.js'][171]++;
pentaho.DataTable.prototype.getColumnId = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][172]++;
  return this.jsonTable.cols[columnIdx].id;
});
_$jscoverage['vizapi/DataTable.js'][180]++;
pentaho.DataTable.prototype.getColumnLabel = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][181]++;
  return this.jsonTable.cols[columnIdx].label;
});
_$jscoverage['vizapi/DataTable.js'][190]++;
pentaho.DataTable.prototype.getValue = (function (rowIdx, columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][191]++;
  if ((! this.jsonTable.rows[rowIdx].c[columnIdx])) {
    _$jscoverage['vizapi/DataTable.js'][192]++;
    return null;
  }
  _$jscoverage['vizapi/DataTable.js'][194]++;
  if ((this.jsonTable.rows[rowIdx].c[columnIdx].v !== undefined)) {
    _$jscoverage['vizapi/DataTable.js'][196]++;
    return this.jsonTable.rows[rowIdx].c[columnIdx].v;
  }
  else {
    _$jscoverage['vizapi/DataTable.js'][198]++;
    return this.jsonTable.rows[rowIdx].c[columnIdx];
  }
});
_$jscoverage['vizapi/DataTable.js'][205]++;
pentaho.DataTable.prototype._getCell = (function (rowIdx, columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][206]++;
  if ((! this.jsonTable.rows[rowIdx].c[columnIdx])) {
    _$jscoverage['vizapi/DataTable.js'][207]++;
    return null;
  }
  _$jscoverage['vizapi/DataTable.js'][209]++;
  return this.jsonTable.rows[rowIdx].c[columnIdx];
});
_$jscoverage['vizapi/DataTable.js'][219]++;
pentaho.DataTable.prototype.getFormattedValue = (function (rowIdx, columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][220]++;
  if ((! this.jsonTable.rows[rowIdx].c[columnIdx])) {
    _$jscoverage['vizapi/DataTable.js'][221]++;
    return null;
  }
  else {
    _$jscoverage['vizapi/DataTable.js'][223]++;
    if ((this.jsonTable.rows[rowIdx].c[columnIdx].f !== undefined)) {
      _$jscoverage['vizapi/DataTable.js'][225]++;
      return this.jsonTable.rows[rowIdx].c[columnIdx].f;
    }
    else {
      _$jscoverage['vizapi/DataTable.js'][227]++;
      if ((this.jsonTable.rows[rowIdx].c[columnIdx].v !== undefined)) {
        _$jscoverage['vizapi/DataTable.js'][229]++;
        return this.jsonTable.rows[rowIdx].c[columnIdx].v;
      }
      else {
        _$jscoverage['vizapi/DataTable.js'][231]++;
        if ((this.jsonTable.rows[rowIdx].c[columnIdx].v == null)) {
          _$jscoverage['vizapi/DataTable.js'][233]++;
          return null;
        }
        else {
          _$jscoverage['vizapi/DataTable.js'][236]++;
          return this.jsonTable.rows[rowIdx].c[columnIdx];
        }
      }
    }
  }
});
_$jscoverage['vizapi/DataTable.js'][246]++;
pentaho.DataTable.prototype.getColumnRange = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][248]++;
  var min;
  _$jscoverage['vizapi/DataTable.js'][249]++;
  var max;
  _$jscoverage['vizapi/DataTable.js'][250]++;
  var set = false;
  _$jscoverage['vizapi/DataTable.js'][251]++;
  for (var rowNo = 0; (rowNo < this.getNumberOfRows()); (rowNo++)) {
    _$jscoverage['vizapi/DataTable.js'][253]++;
    var value = this.getValue(rowNo, columnIdx);
    _$jscoverage['vizapi/DataTable.js'][254]++;
    if (((! set) && (value || (value == 0)))) {
      _$jscoverage['vizapi/DataTable.js'][256]++;
      min = value;
      _$jscoverage['vizapi/DataTable.js'][257]++;
      max = value;
      _$jscoverage['vizapi/DataTable.js'][258]++;
      set = true;
    }
    else {
      _$jscoverage['vizapi/DataTable.js'][260]++;
      if ((value < min)) {
        _$jscoverage['vizapi/DataTable.js'][262]++;
        min = value;
      }
      _$jscoverage['vizapi/DataTable.js'][264]++;
      if ((value > max)) {
        _$jscoverage['vizapi/DataTable.js'][266]++;
        max = value;
      }
    }
}
  _$jscoverage['vizapi/DataTable.js'][271]++;
  var range = {min: min, max: max};
  _$jscoverage['vizapi/DataTable.js'][275]++;
  return range;
});
_$jscoverage['vizapi/DataTable.js'][285]++;
pentaho.DataTable.prototype.getDistinctValues = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][286]++;
  var values = [];
  _$jscoverage['vizapi/DataTable.js'][287]++;
  var valueMap = {};
  _$jscoverage['vizapi/DataTable.js'][288]++;
  var isNumber = (this.getColumnType(columnIdx) == "number");
  _$jscoverage['vizapi/DataTable.js'][289]++;
  for (var rowNo = 0; (rowNo < this.getNumberOfRows()); (rowNo++)) {
    _$jscoverage['vizapi/DataTable.js'][290]++;
    var value = (isNumber? this.getValue(rowNo, columnIdx): this.getFormattedValue(rowNo, columnIdx));
    _$jscoverage['vizapi/DataTable.js'][291]++;
    if ((! valueMap[value])) {
      _$jscoverage['vizapi/DataTable.js'][292]++;
      valueMap[value] = true;
      _$jscoverage['vizapi/DataTable.js'][293]++;
      values.push(value);
    }
}
  _$jscoverage['vizapi/DataTable.js'][296]++;
  return values;
});
_$jscoverage['vizapi/DataTable.js'][305]++;
pentaho.DataTable.prototype.getDistinctFormattedValues = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][306]++;
  var values = [];
  _$jscoverage['vizapi/DataTable.js'][307]++;
  var valueMap = {};
  _$jscoverage['vizapi/DataTable.js'][308]++;
  for (var rowNo = 0; (rowNo < this.getNumberOfRows()); (rowNo++)) {
    _$jscoverage['vizapi/DataTable.js'][309]++;
    var value = this.getFormattedValue(rowNo, columnIdx);
    _$jscoverage['vizapi/DataTable.js'][310]++;
    if ((! valueMap[value])) {
      _$jscoverage['vizapi/DataTable.js'][311]++;
      valueMap[value] = true;
      _$jscoverage['vizapi/DataTable.js'][312]++;
      values.push(value);
    }
}
  _$jscoverage['vizapi/DataTable.js'][315]++;
  return values;
});
_$jscoverage['vizapi/DataTable.js'][335]++;
pentaho.DataTable.prototype.getFilteredRows = (function (filters) {
  _$jscoverage['vizapi/DataTable.js'][336]++;
  var rows = [];
  _$jscoverage['vizapi/DataTable.js'][337]++;
  var comboMap = {};
  _$jscoverage['vizapi/DataTable.js'][338]++;
  for (var rowNo = 0; (rowNo < this.getNumberOfRows()); (rowNo++)) {
    _$jscoverage['vizapi/DataTable.js'][339]++;
    for (var filterNo = 0; (filterNo < filters.length); (filterNo++)) {
      _$jscoverage['vizapi/DataTable.js'][340]++;
      if (filters[filterNo].value) {
        _$jscoverage['vizapi/DataTable.js'][342]++;
        if ((this.getValue(rowNo, filters[filterNo].column) == filters[filterNo].value)) {
          _$jscoverage['vizapi/DataTable.js'][344]++;
          rows.push(rowNo);
        }
      }
      _$jscoverage['vizapi/DataTable.js'][347]++;
      if (filters[filterNo].combinations) {
        _$jscoverage['vizapi/DataTable.js'][349]++;
        var value = this.getValue(rowNo, filters[filterNo].column);
        _$jscoverage['vizapi/DataTable.js'][350]++;
        var combinations = filters[filterNo].combinations;
        _$jscoverage['vizapi/DataTable.js'][351]++;
        var combined = false;
        _$jscoverage['vizapi/DataTable.js'][352]++;
        for (combinationNo = 0; (combinationNo < combinations.length); (combinationNo++)) {
          _$jscoverage['vizapi/DataTable.js'][354]++;
          for (valueNo = 0; (valueNo < combinations[combinationNo].values.length); (valueNo++)) {
            _$jscoverage['vizapi/DataTable.js'][355]++;
            if ((value == combinations[combinationNo].values[valueNo])) {
              _$jscoverage['vizapi/DataTable.js'][357]++;
              if (comboMap[combinationNo]) {
                _$jscoverage['vizapi/DataTable.js'][358]++;
                comboMap[combinationNo][1].push(rowNo);
              }
              else {
                _$jscoverage['vizapi/DataTable.js'][361]++;
                var row = ["combine", []];
                _$jscoverage['vizapi/DataTable.js'][362]++;
                row[1].push(rowNo);
                _$jscoverage['vizapi/DataTable.js'][363]++;
                rows.push(row);
                _$jscoverage['vizapi/DataTable.js'][364]++;
                comboMap[combinationNo] = row;
              }
              _$jscoverage['vizapi/DataTable.js'][366]++;
              combined = true;
            }
}
}
        _$jscoverage['vizapi/DataTable.js'][370]++;
        if ((! combined)) {
          _$jscoverage['vizapi/DataTable.js'][371]++;
          rows.push(rowNo);
        }
      }
}
}
  _$jscoverage['vizapi/DataTable.js'][376]++;
  return rows;
});
_$jscoverage['vizapi/DataTable.js'][387]++;
pentaho.DataTable.prototype.setColumnProperty = (function (columnIndex, name, value) {
  _$jscoverage['vizapi/DataTable.js'][388]++;
  if (((columnIndex >= 0) && (columnIndex < this.jsonTable.cols.length))) {
    _$jscoverage['vizapi/DataTable.js'][389]++;
    this.jsonTable.cols[columnIndex][name] = value;
  }
});
_$jscoverage['vizapi/DataTable.js'][402]++;
pentaho.DataTable.prototype.getColumnProperty = (function (columnIndex, name) {
  _$jscoverage['vizapi/DataTable.js'][403]++;
  if (((columnIndex >= 0) && (columnIndex < this.jsonTable.cols.length))) {
    _$jscoverage['vizapi/DataTable.js'][404]++;
    return this.jsonTable.cols[columnIndex][name];
  }
  _$jscoverage['vizapi/DataTable.js'][406]++;
  return null;
});
_$jscoverage['vizapi/DataTable.js'][421]++;
pentaho.DataView = (function (dataTable) {
  _$jscoverage['vizapi/DataTable.js'][422]++;
  this.dataTable = dataTable;
  _$jscoverage['vizapi/DataTable.js'][423]++;
  this.rows = null;
  _$jscoverage['vizapi/DataTable.js'][424]++;
  this.columns = null;
  _$jscoverage['vizapi/DataTable.js'][425]++;
  this.className = "pentaho.DataView";
});
_$jscoverage['vizapi/DataTable.js'][440]++;
pentaho.DataView.prototype.setRows = (function (rows) {
  _$jscoverage['vizapi/DataTable.js'][441]++;
  this.rows = rows;
});
_$jscoverage['vizapi/DataTable.js'][456]++;
pentaho.DataView.prototype.setColumns = (function (columns) {
  _$jscoverage['vizapi/DataTable.js'][457]++;
  this.columns = columns;
});
_$jscoverage['vizapi/DataTable.js'][466]++;
pentaho.DataView.prototype.getColumnRange = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][468]++;
  var min;
  _$jscoverage['vizapi/DataTable.js'][469]++;
  var max;
  _$jscoverage['vizapi/DataTable.js'][470]++;
  var set = false;
  _$jscoverage['vizapi/DataTable.js'][471]++;
  for (var rowNo = 0; (rowNo < this.getNumberOfRows()); (rowNo++)) {
    _$jscoverage['vizapi/DataTable.js'][472]++;
    var value = this.getValue(rowNo, columnIdx);
    _$jscoverage['vizapi/DataTable.js'][473]++;
    if (((! set) && (value || (value == 0)))) {
      _$jscoverage['vizapi/DataTable.js'][474]++;
      min = value;
      _$jscoverage['vizapi/DataTable.js'][475]++;
      max = value;
      _$jscoverage['vizapi/DataTable.js'][476]++;
      set = true;
    }
    else {
      _$jscoverage['vizapi/DataTable.js'][478]++;
      if ((value < min)) {
        _$jscoverage['vizapi/DataTable.js'][479]++;
        min = value;
      }
      _$jscoverage['vizapi/DataTable.js'][481]++;
      if ((value > max)) {
        _$jscoverage['vizapi/DataTable.js'][482]++;
        max = value;
      }
    }
}
  _$jscoverage['vizapi/DataTable.js'][486]++;
  var range = {min: min, max: max};
  _$jscoverage['vizapi/DataTable.js'][490]++;
  return range;
});
_$jscoverage['vizapi/DataTable.js'][500]++;
pentaho.DataView.prototype.getDistinctValues = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][501]++;
  var values = [];
  _$jscoverage['vizapi/DataTable.js'][502]++;
  var valueMap = {};
  _$jscoverage['vizapi/DataTable.js'][503]++;
  for (var rowNo = 0; (rowNo < this.getNumberOfRows()); (rowNo++)) {
    _$jscoverage['vizapi/DataTable.js'][504]++;
    var value = this.getValue(rowNo, columnIdx);
    _$jscoverage['vizapi/DataTable.js'][505]++;
    if ((! valueMap[value])) {
      _$jscoverage['vizapi/DataTable.js'][506]++;
      valueMap[value] = true;
      _$jscoverage['vizapi/DataTable.js'][507]++;
      values.push(value);
    }
}
  _$jscoverage['vizapi/DataTable.js'][510]++;
  return values;
});
_$jscoverage['vizapi/DataTable.js'][519]++;
pentaho.DataView.prototype.getDistinctFormattedValues = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][520]++;
  var values = [];
  _$jscoverage['vizapi/DataTable.js'][521]++;
  var valueMap = {};
  _$jscoverage['vizapi/DataTable.js'][522]++;
  for (var rowNo = 0; (rowNo < this.getNumberOfRows()); (rowNo++)) {
    _$jscoverage['vizapi/DataTable.js'][523]++;
    var value = this.getFormattedValue(rowNo, columnIdx);
    _$jscoverage['vizapi/DataTable.js'][524]++;
    if ((! valueMap[value])) {
      _$jscoverage['vizapi/DataTable.js'][525]++;
      valueMap[value] = true;
      _$jscoverage['vizapi/DataTable.js'][526]++;
      values.push(value);
    }
}
  _$jscoverage['vizapi/DataTable.js'][529]++;
  return values;
});
_$jscoverage['vizapi/DataTable.js'][539]++;
pentaho.DataView.prototype.hideColumns = (function (columns) {
  _$jscoverage['vizapi/DataTable.js'][540]++;
  tmpCols = [];
  _$jscoverage['vizapi/DataTable.js'][541]++;
  for (var columnIdx = 0; (columnIdx < this.getNumberOfColumns()); (columnIdx++)) {
    _$jscoverage['vizapi/DataTable.js'][542]++;
    tmpCols.push(columnIdx);
}
  _$jscoverage['vizapi/DataTable.js'][544]++;
  for (var idx = (columns.length - 1); (idx > -1); (idx--)) {
    _$jscoverage['vizapi/DataTable.js'][545]++;
    tmpCols.splice(columns[idx], 1);
}
  _$jscoverage['vizapi/DataTable.js'][547]++;
  this.columns = tmpCols;
});
_$jscoverage['vizapi/DataTable.js'][554]++;
pentaho.DataView.prototype.getNumberOfRows = (function () {
  _$jscoverage['vizapi/DataTable.js'][555]++;
  return ((this.rows == null)? this.dataTable.getNumberOfRows(): this.rows.length);
});
_$jscoverage['vizapi/DataTable.js'][562]++;
pentaho.DataView.prototype.getNumberOfColumns = (function () {
  _$jscoverage['vizapi/DataTable.js'][563]++;
  return ((this.columns == null)? this.dataTable.getNumberOfColumns(): this.columns.length);
});
_$jscoverage['vizapi/DataTable.js'][571]++;
pentaho.DataView.prototype.getColumnId = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][572]++;
  return ((this.columns == null)? this.dataTable.getColumnId(columnIdx): this.dataTable.getColumnId(this.columns[columnIdx]));
});
_$jscoverage['vizapi/DataTable.js'][580]++;
pentaho.DataView.prototype.getColumnLabel = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][581]++;
  return ((this.columns == null)? this.dataTable.getColumnLabel(columnIdx): this.dataTable.getColumnLabel(this.columns[columnIdx]));
});
_$jscoverage['vizapi/DataTable.js'][589]++;
pentaho.DataView.prototype.getColumnType = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][590]++;
  return ((this.columns == null)? this.dataTable.getColumnType(columnIdx): this.dataTable.getColumnType(this.columns[columnIdx]));
});
_$jscoverage['vizapi/DataTable.js'][599]++;
pentaho.DataView.prototype.getValue = (function (rowNo, colNo) {
  _$jscoverage['vizapi/DataTable.js'][600]++;
  var rowIdx = ((this.rows == null)? rowNo: this.rows[rowNo]);
  _$jscoverage['vizapi/DataTable.js'][601]++;
  var colIdx = ((this.columns == null)? colNo: this.columns[colNo]);
  _$jscoverage['vizapi/DataTable.js'][602]++;
  if ((rowIdx.length && (rowIdx[0] == "combine"))) {
    _$jscoverage['vizapi/DataTable.js'][605]++;
    var type = this.getColumnType(colNo);
    _$jscoverage['vizapi/DataTable.js'][606]++;
    var value;
    _$jscoverage['vizapi/DataTable.js'][607]++;
    for (var idx = 0; (idx < rowIdx[1].length); (idx++)) {
      _$jscoverage['vizapi/DataTable.js'][608]++;
      if ((idx == 0)) {
        _$jscoverage['vizapi/DataTable.js'][609]++;
        value = this.dataTable.getValue(rowIdx[1][idx], colIdx);
      }
      else {
        _$jscoverage['vizapi/DataTable.js'][611]++;
        if ((type == "string")) {
          _$jscoverage['vizapi/DataTable.js'][612]++;
          value += (" + " + this.dataTable.getValue(rowIdx[1][idx], colIdx));
        }
        else {
          _$jscoverage['vizapi/DataTable.js'][614]++;
          if ((type == "number")) {
            _$jscoverage['vizapi/DataTable.js'][615]++;
            value += this.dataTable.getValue(rowIdx[1][idx], colIdx);
          }
        }
      }
}
    _$jscoverage['vizapi/DataTable.js'][618]++;
    return value;
  }
  _$jscoverage['vizapi/DataTable.js'][620]++;
  return this.dataTable.getValue(rowIdx, colIdx);
});
_$jscoverage['vizapi/DataTable.js'][623]++;
pentaho.DataView.prototype._getCell = (function (rowNo, colNo) {
  _$jscoverage['vizapi/DataTable.js'][624]++;
  var rowIdx = ((this.rows == null)? rowNo: this.rows[rowNo]);
  _$jscoverage['vizapi/DataTable.js'][625]++;
  var colIdx = ((this.columns == null)? colNo: this.columns[colNo]);
  _$jscoverage['vizapi/DataTable.js'][626]++;
  return this.dataTable._getCell(rowIdx, colIdx);
});
_$jscoverage['vizapi/DataTable.js'][635]++;
pentaho.DataView.prototype.getFormattedValue = (function (rowNo, colNo) {
  _$jscoverage['vizapi/DataTable.js'][636]++;
  var rowIdx = ((this.rows == null)? rowNo: this.rows[rowNo]);
  _$jscoverage['vizapi/DataTable.js'][637]++;
  var colIdx = ((this.columns == null)? colNo: this.columns[colNo]);
  _$jscoverage['vizapi/DataTable.js'][638]++;
  if ((rowIdx.length && (rowIdx[0] == "combine"))) {
    _$jscoverage['vizapi/DataTable.js'][641]++;
    var type = this.getColumnType(colNo);
    _$jscoverage['vizapi/DataTable.js'][642]++;
    var value;
    _$jscoverage['vizapi/DataTable.js'][643]++;
    for (var idx = 0; (idx < rowIdx[1].length); (idx++)) {
      _$jscoverage['vizapi/DataTable.js'][644]++;
      if ((idx == 0)) {
        _$jscoverage['vizapi/DataTable.js'][645]++;
        value = this.dataTable.getFormattedValue(rowIdx[1][idx], colIdx);
      }
      else {
        _$jscoverage['vizapi/DataTable.js'][647]++;
        if ((type == "string")) {
          _$jscoverage['vizapi/DataTable.js'][648]++;
          value += (" + " + this.dataTable.getFormattedValue(rowIdx[1][idx], colIdx));
        }
        else {
          _$jscoverage['vizapi/DataTable.js'][650]++;
          if ((type == "number")) {
            _$jscoverage['vizapi/DataTable.js'][651]++;
            value += this.dataTable.getFormattedValue(rowIdx[1][idx], colIdx);
          }
        }
      }
}
    _$jscoverage['vizapi/DataTable.js'][654]++;
    return value;
  }
  _$jscoverage['vizapi/DataTable.js'][656]++;
  return this.dataTable.getFormattedValue(rowIdx, colIdx);
});
_$jscoverage['vizapi/DataTable.js'][667]++;
pentaho.DataView.prototype.toDataTable = (function () {
  _$jscoverage['vizapi/DataTable.js'][669]++;
  var cols = [];
  _$jscoverage['vizapi/DataTable.js'][670]++;
  for (var colIdx = 0; (colIdx < this.getNumberOfColumns()); (colIdx++)) {
    _$jscoverage['vizapi/DataTable.js'][671]++;
    col = {type: this.getColumnType(colIdx), id: this.getColumnId(colIdx), label: this.getColumnLabel(colIdx)};
    _$jscoverage['vizapi/DataTable.js'][676]++;
    cols.push(col);
}
  _$jscoverage['vizapi/DataTable.js'][679]++;
  var rows = [];
  _$jscoverage['vizapi/DataTable.js'][680]++;
  for (var rowIdx = 0; (rowIdx < this.getNumberOfRows()); (rowIdx++)) {
    _$jscoverage['vizapi/DataTable.js'][681]++;
    cells = [];
    _$jscoverage['vizapi/DataTable.js'][682]++;
    for (var colIdx = 0; (colIdx < this.getNumberOfColumns()); (colIdx++)) {
      _$jscoverage['vizapi/DataTable.js'][683]++;
      var cell = this._getCell(rowIdx, colIdx);
      _$jscoverage['vizapi/DataTable.js'][684]++;
      cells.push(cell);
}
    _$jscoverage['vizapi/DataTable.js'][686]++;
    row = {c: cells};
    _$jscoverage['vizapi/DataTable.js'][689]++;
    rows.push(row);
}
  _$jscoverage['vizapi/DataTable.js'][692]++;
  var json = {cols: cols, rows: rows};
  _$jscoverage['vizapi/DataTable.js'][694]++;
  var table = new (pentaho.DataTable)(json);
  _$jscoverage['vizapi/DataTable.js'][695]++;
  return table;
});
_$jscoverage['vizapi/DataTable.js'][707]++;
pentaho.DataView.prototype.setColumnProperty = (function (columnIndex, name, value) {
  _$jscoverage['vizapi/DataTable.js'][708]++;
  this.dataTable.setColumnProperty(columnIndex, name, value);
});
_$jscoverage['vizapi/DataTable.js'][720]++;
pentaho.DataView.prototype.getColumnProperty = (function (columnIndex, name) {
  _$jscoverage['vizapi/DataTable.js'][721]++;
  return this.dataTable.getColumnProperty(columnIndex, name);
});
