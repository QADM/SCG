/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['require.js']) {
  _$jscoverage['require.js'] = [];
  _$jscoverage['require.js'][1] = 0;
  _$jscoverage['require.js'][79] = 0;
  _$jscoverage['require.js'][98] = 0;
  _$jscoverage['require.js'][101] = 0;
  _$jscoverage['require.js'][103] = 0;
  _$jscoverage['require.js'][109] = 0;
  _$jscoverage['require.js'][110] = 0;
  _$jscoverage['require.js'][120] = 0;
  _$jscoverage['require.js'][124] = 0;
  _$jscoverage['require.js'][128] = 0;
  _$jscoverage['require.js'][132] = 0;
  _$jscoverage['require.js'][136] = 0;
  _$jscoverage['require.js'][140] = 0;
  _$jscoverage['require.js'][144] = 0;
  _$jscoverage['require.js'][145] = 0;
  _$jscoverage['require.js'][149] = 0;
  _$jscoverage['require.js'][150] = 0;
  _$jscoverage['require.js'][161] = 0;
  _$jscoverage['require.js'][249] = 0;
  _$jscoverage['require.js'][250] = 0;
  _$jscoverage['require.js'][251] = 0;
  _$jscoverage['require.js'][252] = 0;
  _$jscoverage['require.js'][253] = 0;
  _$jscoverage['require.js'][254] = 0;
  _$jscoverage['require.js'][255] = 0;
  _$jscoverage['require.js'][257] = 0;
  _$jscoverage['require.js'][262] = 0;
  _$jscoverage['require.js'][263] = 0;
  _$jscoverage['require.js'][264] = 0;
  _$jscoverage['require.js'][265] = 0;
  _$jscoverage['require.js'][266] = 0;
  _$jscoverage['require.js'][269] = 0;
  _$jscoverage['require.js'][270] = 0;
  _$jscoverage['require.js'][274] = 0;
  _$jscoverage['require.js'][275] = 0;
  _$jscoverage['require.js'][280] = 0;
  _$jscoverage['require.js'][287] = 0;
  _$jscoverage['require.js'][288] = 0;
  _$jscoverage['require.js'][289] = 0;
  _$jscoverage['require.js'][292] = 0;
  _$jscoverage['require.js'][293] = 0;
  _$jscoverage['require.js'][294] = 0;
  _$jscoverage['require.js'][295] = 0;
  _$jscoverage['require.js'][299] = 0;
  _$jscoverage['require.js'][300] = 0;
  _$jscoverage['require.js'][304] = 0;
  _$jscoverage['require.js'][307] = 0;
  _$jscoverage['require.js'][310] = 0;
  _$jscoverage['require.js'][311] = 0;
  _$jscoverage['require.js'][312] = 0;
  _$jscoverage['require.js'][317] = 0;
  _$jscoverage['require.js'][320] = 0;
  _$jscoverage['require.js'][322] = 0;
  _$jscoverage['require.js'][323] = 0;
  _$jscoverage['require.js'][328] = 0;
  _$jscoverage['require.js'][329] = 0;
  _$jscoverage['require.js'][334] = 0;
  _$jscoverage['require.js'][335] = 0;
  _$jscoverage['require.js'][336] = 0;
  _$jscoverage['require.js'][337] = 0;
  _$jscoverage['require.js'][340] = 0;
  _$jscoverage['require.js'][341] = 0;
  _$jscoverage['require.js'][342] = 0;
  _$jscoverage['require.js'][347] = 0;
  _$jscoverage['require.js'][349] = 0;
  _$jscoverage['require.js'][353] = 0;
  _$jscoverage['require.js'][354] = 0;
  _$jscoverage['require.js'][356] = 0;
  _$jscoverage['require.js'][357] = 0;
  _$jscoverage['require.js'][358] = 0;
  _$jscoverage['require.js'][360] = 0;
  _$jscoverage['require.js'][362] = 0;
  _$jscoverage['require.js'][364] = 0;
  _$jscoverage['require.js'][367] = 0;
  _$jscoverage['require.js'][368] = 0;
  _$jscoverage['require.js'][370] = 0;
  _$jscoverage['require.js'][374] = 0;
  _$jscoverage['require.js'][375] = 0;
  _$jscoverage['require.js'][379] = 0;
  _$jscoverage['require.js'][380] = 0;
  _$jscoverage['require.js'][385] = 0;
  _$jscoverage['require.js'][387] = 0;
  _$jscoverage['require.js'][389] = 0;
  _$jscoverage['require.js'][392] = 0;
  _$jscoverage['require.js'][396] = 0;
  _$jscoverage['require.js'][397] = 0;
  _$jscoverage['require.js'][398] = 0;
  _$jscoverage['require.js'][399] = 0;
  _$jscoverage['require.js'][401] = 0;
  _$jscoverage['require.js'][402] = 0;
  _$jscoverage['require.js'][403] = 0;
  _$jscoverage['require.js'][405] = 0;
  _$jscoverage['require.js'][406] = 0;
  _$jscoverage['require.js'][408] = 0;
  _$jscoverage['require.js'][409] = 0;
  _$jscoverage['require.js'][412] = 0;
  _$jscoverage['require.js'][415] = 0;
  _$jscoverage['require.js'][416] = 0;
  _$jscoverage['require.js'][417] = 0;
  _$jscoverage['require.js'][421] = 0;
  _$jscoverage['require.js'][436] = 0;
  _$jscoverage['require.js'][441] = 0;
  _$jscoverage['require.js'][442] = 0;
  _$jscoverage['require.js'][443] = 0;
  _$jscoverage['require.js'][446] = 0;
  _$jscoverage['require.js'][450] = 0;
  _$jscoverage['require.js'][451] = 0;
  _$jscoverage['require.js'][453] = 0;
  _$jscoverage['require.js'][454] = 0;
  _$jscoverage['require.js'][485] = 0;
  _$jscoverage['require.js'][486] = 0;
  _$jscoverage['require.js'][487] = 0;
  _$jscoverage['require.js'][488] = 0;
  _$jscoverage['require.js'][490] = 0;
  _$jscoverage['require.js'][493] = 0;
  _$jscoverage['require.js'][497] = 0;
  _$jscoverage['require.js'][498] = 0;
  _$jscoverage['require.js'][504] = 0;
  _$jscoverage['require.js'][505] = 0;
  _$jscoverage['require.js'][509] = 0;
  _$jscoverage['require.js'][510] = 0;
  _$jscoverage['require.js'][512] = 0;
  _$jscoverage['require.js'][514] = 0;
  _$jscoverage['require.js'][517] = 0;
  _$jscoverage['require.js'][519] = 0;
  _$jscoverage['require.js'][520] = 0;
  _$jscoverage['require.js'][521] = 0;
  _$jscoverage['require.js'][523] = 0;
  _$jscoverage['require.js'][524] = 0;
  _$jscoverage['require.js'][526] = 0;
  _$jscoverage['require.js'][527] = 0;
  _$jscoverage['require.js'][529] = 0;
  _$jscoverage['require.js'][530] = 0;
  _$jscoverage['require.js'][531] = 0;
  _$jscoverage['require.js'][532] = 0;
  _$jscoverage['require.js'][537] = 0;
  _$jscoverage['require.js'][538] = 0;
  _$jscoverage['require.js'][539] = 0;
  _$jscoverage['require.js'][540] = 0;
  _$jscoverage['require.js'][541] = 0;
  _$jscoverage['require.js'][542] = 0;
  _$jscoverage['require.js'][543] = 0;
  _$jscoverage['require.js'][545] = 0;
  _$jscoverage['require.js'][548] = 0;
  _$jscoverage['require.js'][549] = 0;
  _$jscoverage['require.js'][550] = 0;
  _$jscoverage['require.js'][552] = 0;
  _$jscoverage['require.js'][556] = 0;
  _$jscoverage['require.js'][557] = 0;
  _$jscoverage['require.js'][559] = 0;
  _$jscoverage['require.js'][560] = 0;
  _$jscoverage['require.js'][565] = 0;
  _$jscoverage['require.js'][566] = 0;
  _$jscoverage['require.js'][568] = 0;
  _$jscoverage['require.js'][570] = 0;
  _$jscoverage['require.js'][572] = 0;
  _$jscoverage['require.js'][573] = 0;
  _$jscoverage['require.js'][575] = 0;
  _$jscoverage['require.js'][576] = 0;
  _$jscoverage['require.js'][583] = 0;
  _$jscoverage['require.js'][587] = 0;
  _$jscoverage['require.js'][605] = 0;
  _$jscoverage['require.js'][606] = 0;
  _$jscoverage['require.js'][608] = 0;
  _$jscoverage['require.js'][609] = 0;
  _$jscoverage['require.js'][620] = 0;
  _$jscoverage['require.js'][621] = 0;
  _$jscoverage['require.js'][622] = 0;
  _$jscoverage['require.js'][624] = 0;
  _$jscoverage['require.js'][631] = 0;
  _$jscoverage['require.js'][632] = 0;
  _$jscoverage['require.js'][641] = 0;
  _$jscoverage['require.js'][642] = 0;
  _$jscoverage['require.js'][643] = 0;
  _$jscoverage['require.js'][644] = 0;
  _$jscoverage['require.js'][648] = 0;
  _$jscoverage['require.js'][649] = 0;
  _$jscoverage['require.js'][650] = 0;
  _$jscoverage['require.js'][652] = 0;
  _$jscoverage['require.js'][654] = 0;
  _$jscoverage['require.js'][655] = 0;
  _$jscoverage['require.js'][656] = 0;
  _$jscoverage['require.js'][658] = 0;
  _$jscoverage['require.js'][659] = 0;
  _$jscoverage['require.js'][663] = 0;
  _$jscoverage['require.js'][665] = 0;
  _$jscoverage['require.js'][666] = 0;
  _$jscoverage['require.js'][668] = 0;
  _$jscoverage['require.js'][671] = 0;
  _$jscoverage['require.js'][672] = 0;
  _$jscoverage['require.js'][675] = 0;
  _$jscoverage['require.js'][676] = 0;
  _$jscoverage['require.js'][679] = 0;
  _$jscoverage['require.js'][685] = 0;
  _$jscoverage['require.js'][686] = 0;
  _$jscoverage['require.js'][688] = 0;
  _$jscoverage['require.js'][691] = 0;
  _$jscoverage['require.js'][692] = 0;
  _$jscoverage['require.js'][693] = 0;
  _$jscoverage['require.js'][694] = 0;
  _$jscoverage['require.js'][695] = 0;
  _$jscoverage['require.js'][696] = 0;
  _$jscoverage['require.js'][697] = 0;
  _$jscoverage['require.js'][699] = 0;
  _$jscoverage['require.js'][704] = 0;
  _$jscoverage['require.js'][705] = 0;
  _$jscoverage['require.js'][706] = 0;
  _$jscoverage['require.js'][710] = 0;
  _$jscoverage['require.js'][711] = 0;
  _$jscoverage['require.js'][714] = 0;
  _$jscoverage['require.js'][715] = 0;
  _$jscoverage['require.js'][718] = 0;
  _$jscoverage['require.js'][721] = 0;
  _$jscoverage['require.js'][722] = 0;
  _$jscoverage['require.js'][723] = 0;
  _$jscoverage['require.js'][727] = 0;
  _$jscoverage['require.js'][729] = 0;
  _$jscoverage['require.js'][734] = 0;
  _$jscoverage['require.js'][737] = 0;
  _$jscoverage['require.js'][738] = 0;
  _$jscoverage['require.js'][739] = 0;
  _$jscoverage['require.js'][743] = 0;
  _$jscoverage['require.js'][744] = 0;
  _$jscoverage['require.js'][760] = 0;
  _$jscoverage['require.js'][763] = 0;
  _$jscoverage['require.js'][764] = 0;
  _$jscoverage['require.js'][765] = 0;
  _$jscoverage['require.js'][767] = 0;
  _$jscoverage['require.js'][768] = 0;
  _$jscoverage['require.js'][770] = 0;
  _$jscoverage['require.js'][771] = 0;
  _$jscoverage['require.js'][772] = 0;
  _$jscoverage['require.js'][773] = 0;
  _$jscoverage['require.js'][774] = 0;
  _$jscoverage['require.js'][777] = 0;
  _$jscoverage['require.js'][778] = 0;
  _$jscoverage['require.js'][779] = 0;
  _$jscoverage['require.js'][781] = 0;
  _$jscoverage['require.js'][784] = 0;
  _$jscoverage['require.js'][787] = 0;
  _$jscoverage['require.js'][788] = 0;
  _$jscoverage['require.js'][802] = 0;
  _$jscoverage['require.js'][803] = 0;
  _$jscoverage['require.js'][804] = 0;
  _$jscoverage['require.js'][806] = 0;
  _$jscoverage['require.js'][807] = 0;
  _$jscoverage['require.js'][808] = 0;
  _$jscoverage['require.js'][812] = 0;
  _$jscoverage['require.js'][813] = 0;
  _$jscoverage['require.js'][814] = 0;
  _$jscoverage['require.js'][815] = 0;
  _$jscoverage['require.js'][817] = 0;
  _$jscoverage['require.js'][822] = 0;
  _$jscoverage['require.js'][823] = 0;
  _$jscoverage['require.js'][824] = 0;
  _$jscoverage['require.js'][825] = 0;
  _$jscoverage['require.js'][826] = 0;
  _$jscoverage['require.js'][827] = 0;
  _$jscoverage['require.js'][832] = 0;
  _$jscoverage['require.js'][839] = 0;
  _$jscoverage['require.js'][841] = 0;
  _$jscoverage['require.js'][842] = 0;
  _$jscoverage['require.js'][843] = 0;
  _$jscoverage['require.js'][844] = 0;
  _$jscoverage['require.js'][845] = 0;
  _$jscoverage['require.js'][847] = 0;
  _$jscoverage['require.js'][848] = 0;
  _$jscoverage['require.js'][849] = 0;
  _$jscoverage['require.js'][850] = 0;
  _$jscoverage['require.js'][859] = 0;
  _$jscoverage['require.js'][860] = 0;
  _$jscoverage['require.js'][863] = 0;
  _$jscoverage['require.js'][864] = 0;
  _$jscoverage['require.js'][865] = 0;
  _$jscoverage['require.js'][866] = 0;
  _$jscoverage['require.js'][868] = 0;
  _$jscoverage['require.js'][877] = 0;
  _$jscoverage['require.js'][883] = 0;
  _$jscoverage['require.js'][884] = 0;
  _$jscoverage['require.js'][887] = 0;
  _$jscoverage['require.js'][893] = 0;
  _$jscoverage['require.js'][898] = 0;
  _$jscoverage['require.js'][901] = 0;
  _$jscoverage['require.js'][902] = 0;
  _$jscoverage['require.js'][906] = 0;
  _$jscoverage['require.js'][907] = 0;
  _$jscoverage['require.js'][909] = 0;
  _$jscoverage['require.js'][913] = 0;
  _$jscoverage['require.js'][914] = 0;
  _$jscoverage['require.js'][921] = 0;
  _$jscoverage['require.js'][922] = 0;
  _$jscoverage['require.js'][926] = 0;
  _$jscoverage['require.js'][927] = 0;
  _$jscoverage['require.js'][928] = 0;
  _$jscoverage['require.js'][929] = 0;
  _$jscoverage['require.js'][933] = 0;
  _$jscoverage['require.js'][938] = 0;
  _$jscoverage['require.js'][939] = 0;
  _$jscoverage['require.js'][941] = 0;
  _$jscoverage['require.js'][942] = 0;
  _$jscoverage['require.js'][945] = 0;
  _$jscoverage['require.js'][946] = 0;
  _$jscoverage['require.js'][947] = 0;
  _$jscoverage['require.js'][948] = 0;
  _$jscoverage['require.js'][951] = 0;
  _$jscoverage['require.js'][952] = 0;
  _$jscoverage['require.js'][953] = 0;
  _$jscoverage['require.js'][954] = 0;
  _$jscoverage['require.js'][955] = 0;
  _$jscoverage['require.js'][958] = 0;
  _$jscoverage['require.js'][964] = 0;
  _$jscoverage['require.js'][965] = 0;
  _$jscoverage['require.js'][966] = 0;
  _$jscoverage['require.js'][969] = 0;
  _$jscoverage['require.js'][972] = 0;
  _$jscoverage['require.js'][973] = 0;
  _$jscoverage['require.js'][974] = 0;
  _$jscoverage['require.js'][975] = 0;
  _$jscoverage['require.js'][976] = 0;
  _$jscoverage['require.js'][980] = 0;
  _$jscoverage['require.js'][981] = 0;
  _$jscoverage['require.js'][982] = 0;
  _$jscoverage['require.js'][983] = 0;
  _$jscoverage['require.js'][984] = 0;
  _$jscoverage['require.js'][988] = 0;
  _$jscoverage['require.js'][990] = 0;
  _$jscoverage['require.js'][991] = 0;
  _$jscoverage['require.js'][992] = 0;
  _$jscoverage['require.js'][993] = 0;
  _$jscoverage['require.js'][994] = 0;
  _$jscoverage['require.js'][995] = 0;
  _$jscoverage['require.js'][996] = 0;
  _$jscoverage['require.js'][997] = 0;
  _$jscoverage['require.js'][998] = 0;
  _$jscoverage['require.js'][1001] = 0;
  _$jscoverage['require.js'][1002] = 0;
  _$jscoverage['require.js'][1008] = 0;
  _$jscoverage['require.js'][1016] = 0;
  _$jscoverage['require.js'][1019] = 0;
  _$jscoverage['require.js'][1020] = 0;
  _$jscoverage['require.js'][1026] = 0;
  _$jscoverage['require.js'][1027] = 0;
  _$jscoverage['require.js'][1029] = 0;
  _$jscoverage['require.js'][1031] = 0;
  _$jscoverage['require.js'][1032] = 0;
  _$jscoverage['require.js'][1033] = 0;
  _$jscoverage['require.js'][1035] = 0;
  _$jscoverage['require.js'][1036] = 0;
  _$jscoverage['require.js'][1037] = 0;
  _$jscoverage['require.js'][1038] = 0;
  _$jscoverage['require.js'][1041] = 0;
  _$jscoverage['require.js'][1042] = 0;
  _$jscoverage['require.js'][1043] = 0;
  _$jscoverage['require.js'][1046] = 0;
  _$jscoverage['require.js'][1050] = 0;
  _$jscoverage['require.js'][1051] = 0;
  _$jscoverage['require.js'][1052] = 0;
  _$jscoverage['require.js'][1061] = 0;
  _$jscoverage['require.js'][1062] = 0;
  _$jscoverage['require.js'][1063] = 0;
  _$jscoverage['require.js'][1071] = 0;
  _$jscoverage['require.js'][1079] = 0;
  _$jscoverage['require.js'][1081] = 0;
  _$jscoverage['require.js'][1082] = 0;
  _$jscoverage['require.js'][1083] = 0;
  _$jscoverage['require.js'][1084] = 0;
  _$jscoverage['require.js'][1085] = 0;
  _$jscoverage['require.js'][1087] = 0;
  _$jscoverage['require.js'][1088] = 0;
  _$jscoverage['require.js'][1089] = 0;
  _$jscoverage['require.js'][1093] = 0;
  _$jscoverage['require.js'][1095] = 0;
  _$jscoverage['require.js'][1099] = 0;
  _$jscoverage['require.js'][1106] = 0;
  _$jscoverage['require.js'][1107] = 0;
  _$jscoverage['require.js'][1108] = 0;
  _$jscoverage['require.js'][1109] = 0;
  _$jscoverage['require.js'][1112] = 0;
  _$jscoverage['require.js'][1114] = 0;
  _$jscoverage['require.js'][1117] = 0;
  _$jscoverage['require.js'][1121] = 0;
  _$jscoverage['require.js'][1122] = 0;
  _$jscoverage['require.js'][1130] = 0;
  _$jscoverage['require.js'][1131] = 0;
  _$jscoverage['require.js'][1132] = 0;
  _$jscoverage['require.js'][1135] = 0;
  _$jscoverage['require.js'][1136] = 0;
  _$jscoverage['require.js'][1142] = 0;
  _$jscoverage['require.js'][1160] = 0;
  _$jscoverage['require.js'][1161] = 0;
  _$jscoverage['require.js'][1179] = 0;
  _$jscoverage['require.js'][1180] = 0;
  _$jscoverage['require.js'][1182] = 0;
  _$jscoverage['require.js'][1183] = 0;
  _$jscoverage['require.js'][1184] = 0;
  _$jscoverage['require.js'][1186] = 0;
  _$jscoverage['require.js'][1187] = 0;
  _$jscoverage['require.js'][1189] = 0;
  _$jscoverage['require.js'][1192] = 0;
  _$jscoverage['require.js'][1203] = 0;
  _$jscoverage['require.js'][1207] = 0;
  _$jscoverage['require.js'][1209] = 0;
  _$jscoverage['require.js'][1210] = 0;
  _$jscoverage['require.js'][1212] = 0;
  _$jscoverage['require.js'][1213] = 0;
  _$jscoverage['require.js'][1214] = 0;
  _$jscoverage['require.js'][1215] = 0;
  _$jscoverage['require.js'][1218] = 0;
  _$jscoverage['require.js'][1220] = 0;
  _$jscoverage['require.js'][1223] = 0;
  _$jscoverage['require.js'][1224] = 0;
  _$jscoverage['require.js'][1228] = 0;
  _$jscoverage['require.js'][1229] = 0;
  _$jscoverage['require.js'][1231] = 0;
  _$jscoverage['require.js'][1234] = 0;
  _$jscoverage['require.js'][1237] = 0;
  _$jscoverage['require.js'][1240] = 0;
  _$jscoverage['require.js'][1243] = 0;
  _$jscoverage['require.js'][1247] = 0;
  _$jscoverage['require.js'][1248] = 0;
  _$jscoverage['require.js'][1249] = 0;
  _$jscoverage['require.js'][1250] = 0;
  _$jscoverage['require.js'][1251] = 0;
  _$jscoverage['require.js'][1252] = 0;
  _$jscoverage['require.js'][1256] = 0;
  _$jscoverage['require.js'][1257] = 0;
  _$jscoverage['require.js'][1259] = 0;
  _$jscoverage['require.js'][1265] = 0;
  _$jscoverage['require.js'][1266] = 0;
  _$jscoverage['require.js'][1269] = 0;
  _$jscoverage['require.js'][1270] = 0;
  _$jscoverage['require.js'][1302] = 0;
  _$jscoverage['require.js'][1304] = 0;
  _$jscoverage['require.js'][1305] = 0;
  _$jscoverage['require.js'][1306] = 0;
  _$jscoverage['require.js'][1308] = 0;
  _$jscoverage['require.js'][1309] = 0;
  _$jscoverage['require.js'][1312] = 0;
  _$jscoverage['require.js'][1313] = 0;
  _$jscoverage['require.js'][1316] = 0;
  _$jscoverage['require.js'][1317] = 0;
  _$jscoverage['require.js'][1321] = 0;
  _$jscoverage['require.js'][1322] = 0;
  _$jscoverage['require.js'][1323] = 0;
  _$jscoverage['require.js'][1324] = 0;
  _$jscoverage['require.js'][1326] = 0;
  _$jscoverage['require.js'][1327] = 0;
  _$jscoverage['require.js'][1328] = 0;
  _$jscoverage['require.js'][1329] = 0;
  _$jscoverage['require.js'][1330] = 0;
  _$jscoverage['require.js'][1332] = 0;
  _$jscoverage['require.js'][1334] = 0;
  _$jscoverage['require.js'][1366] = 0;
  _$jscoverage['require.js'][1390] = 0;
  _$jscoverage['require.js'][1391] = 0;
  _$jscoverage['require.js'][1393] = 0;
  _$jscoverage['require.js'][1395] = 0;
  _$jscoverage['require.js'][1396] = 0;
  _$jscoverage['require.js'][1397] = 0;
  _$jscoverage['require.js'][1399] = 0;
  _$jscoverage['require.js'][1400] = 0;
  _$jscoverage['require.js'][1401] = 0;
  _$jscoverage['require.js'][1402] = 0;
  _$jscoverage['require.js'][1405] = 0;
}
_$jscoverage['require.js'].source = ["<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>","  userConfig<span class=\"k\">,</span> ","  defaultConfig<span class=\"k\">,</span> ","  has","<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"c\">//</span>","  <span class=\"c\">// This function defines the backdraft JavaScript script-inject loader--an AMD-compliant </span>","  <span class=\"c\">// (http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition), requirejs-compatible </span>","  <span class=\"c\">// (http://requirejs.org/) loader. </span>","  <span class=\"c\">// </span>","  <span class=\"c\">// This loader exists under a separate project named bdLoad.</span>","  <span class=\"c\">// </span>","  <span class=\"c\">// For a complete tutorial on the use of this loader, see </span>","  <span class=\"c\">// http://bdframework.org/docs/loader/loader.html.</span>","  <span class=\"c\">// </span>","  <span class=\"c\">// The loader may be run-time configured with several configuration variables; </span>","  <span class=\"c\">// see http://bdframework.org/docs/loader/loader.html#configVariables.</span>","  <span class=\"c\">// </span>","  <span class=\"c\">// The loader may be run-time and/or build-time configured with has.js switches; </span>","  <span class=\"c\">// see http://bdframework.org/docs/loader/loader.html#has.</span>","  <span class=\"c\">// </span>","  <span class=\"c\">// In addition to AMD-compliance and requirejs-compatibility, the loader has the following</span>","  <span class=\"c\">// features:</span>","  <span class=\"c\">// </span>","  <span class=\"c\">//  * It is highly configurable. The has.js interface is used for both run-time and build-time</span>","  <span class=\"c\">//    configuration. The default implementation assumes a full feature set for the browser. </span>","  <span class=\"c\">//    However, this can be changed quite dramatically by providing a has.js implementation</span>","  <span class=\"c\">//    and configuration prior to entry. For example, by providing alternate inject functions </span>","  <span class=\"c\">//    and a has.js configuration that detects a non-browser environment (e.g., V8), the loader</span>","  <span class=\"c\">//    is can be made available to a wide variety of non-browser environments. For example, the resource</span>","  <span class=\"c\">//    lib/node.js configures the the loader for use in node.</span>","  <span class=\"c\">// </span>","  <span class=\"c\">//  * The features mentioned above are useful in constructing highly optimized release</span>","  <span class=\"c\">//    packaging. For example, it is possible to remove all dynamic script-injecting and receiving</span>","  <span class=\"c\">//    so that an entire application can be bundled into a single file.</span>","  <span class=\"c\">// </span>","  <span class=\"c\">//  * Generalized error detection and reporting, configurable tracing, and descriptive object </span>","  <span class=\"c\">//    state variables are included to help find and solve programming errors, with special</span>","  <span class=\"c\">//    emphasis on loading errors.</span>","  <span class=\"c\">// </span>","  <span class=\"c\">// Since this machinery implements a loader, it does not have the luxury of using a load system and/or</span>","  <span class=\"c\">// leveraging a utility library. This results in an unpleasantly long file; here is a roadmap of the contents:</span>","  <span class=\"c\">// </span>","  <span class=\"c\">//   1. Define the global require function upon which the loader will be built.</span>","  <span class=\"c\">//   2. Figure out which has.js implementation to use; set lexical has accordingly.</span>","  <span class=\"c\">//   3. Small library for use implementing the loader.</span>","  <span class=\"c\">//   4. Define the core loader data variables.</span>","  <span class=\"c\">//   5. Define configuration machinery and configure the loader.</span>","  <span class=\"c\">//   6. Once-only protection.</span>","  <span class=\"c\">//   7. Core loader machinery that instantiates modules as given by factories and dependencies.</span>","  <span class=\"c\">//   8. Core loader injection machinery</span>","  <span class=\"c\">//   9. Optional loader timeout API.</span>","  <span class=\"c\">//  10. Browser-only machinery:</span>","  <span class=\"c\">//        * minimal event connection machinery</span>","  <span class=\"c\">//        * script-injection machinery</span>","  <span class=\"c\">//        * optional sniff API</span>","  <span class=\"c\">//        * optional DOM content loaded detect API</span>","  <span class=\"c\">//  11. Optional trace machinery.</span>","  <span class=\"c\">//  12. Optional error reporting machinery.</span>","  <span class=\"c\">//  13. AMD define function.</span>","  <span class=\"c\">//  14. Optional automatic has module creation.</span>","  <span class=\"c\">//  15. Optional loader variable publishing</span>","  <span class=\"c\">//  16. Publish require and define to the global space.</span>","  <span class=\"c\">//  17. optional requirejs compat layer</span>","  <span class=\"c\">//  18. Start loading iaw configuration.</span>","  <span class=\"c\">//  19. Arguments to the loader constructor: (user-config, default-config, default-has-impl)</span>","  <span class=\"c\">// </span>","  <span class=\"c\">// Language and Acronyms and Idioms</span>","  <span class=\"c\">// </span>","  <span class=\"c\">// moduleId: a CJS module identifier, (used for public APIs)</span>","  <span class=\"c\">// mid: moduleId (used internally)</span>","  <span class=\"c\">// packageId: a package identifier (used for public APIs)</span>","  <span class=\"c\">// pid: packageId (used internally); the implied system or default package has pid===\"\"</span>","  <span class=\"c\">// package-qualified name: a mid qualified by the pid of which the module is a member; result is the string pid + \"*\" + mid</span>","  <span class=\"c\">// pqn: package-qualified name</span>","  <span class=\"c\">// pack: package is used internally to reference a package object (since javascript has lame reserved words including \"package\")</span>","  <span class=\"c\">// The integer constant 1 is used in place of true and 0 in place of false.</span>","","  <span class=\"k\">var</span>","    <span class=\"c\">//bring in the backdraft documentation generating machinery (stripped during builds)</span>","    bd<span class=\"k\">=</span> <span class=\"k\">{</span>","      docGen<span class=\"k\">:</span> ","        <span class=\"c\">// Documentation generator hook; facilitates generating documentation for named entities that have </span>","        <span class=\"c\">// no place in normal JavaScript code such as keyword arguments, overload function signatures, and types.</span>","        <span class=\"c\">// </span>","        <span class=\"c\">// bd.docGen has no actual run-time function; if called it simply execute a no-op. All bd.doc</span>","        <span class=\"c\">// calls are removed by the Backdraft build utility (and/or other intelligent compilers) for</span>","        <span class=\"c\">// release versions of the code.  See the ALTOVISO js-proc manual for further details.</span>","        noop","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// this will be the global require function; define it immediately so we can start hanging things off of it</span>","    req<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>","      config<span class=\"k\">,</span>       <span class=\"c\">//(object, optional) hash of configuration properties</span>","      dependencies<span class=\"k\">,</span> <span class=\"c\">//(array of commonjs.moduleId, optional) list of modules to be loaded before applying callback </span>","      callback      <span class=\"c\">//(function, optional) lamda expression to apply to module values implied by dependencies</span>","    <span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> contextRequire<span class=\"k\">(</span>config<span class=\"k\">,</span> dependencies<span class=\"k\">,</span> callback<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> req<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  ","  req<span class=\"k\">.</span>has<span class=\"k\">=</span> has<span class=\"k\">=</span> userConfig<span class=\"k\">.</span>has <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>has <span class=\"k\">||</span> has<span class=\"k\">;</span>"," ","  <span class=\"k\">var</span>","    <span class=\"c\">// define a minimal library to help build the loader</span>","    noop<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    isEmpty<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>it<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> p <span class=\"k\">in</span> it<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">return</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    toString <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">.</span>toString<span class=\"k\">,</span>","    testPrefix<span class=\"k\">=</span> <span class=\"s\">\"[object \"</span><span class=\"k\">,</span>","    functionMarker<span class=\"k\">=</span> testPrefix <span class=\"k\">+</span> <span class=\"s\">\"Function]\"</span><span class=\"k\">,</span>","    arrayMarker<span class=\"k\">=</span> testPrefix <span class=\"k\">+</span> <span class=\"s\">\"Array]\"</span><span class=\"k\">,</span>","    stringMarker<span class=\"k\">=</span> testPrefix <span class=\"k\">+</span> <span class=\"s\">\"String]\"</span><span class=\"k\">,</span>","    ","    isFunction<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>it<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> toString<span class=\"k\">.</span>call<span class=\"k\">(</span>it<span class=\"k\">)==</span>functionMarker<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    ","    isString<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>it<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> toString<span class=\"k\">.</span>call<span class=\"k\">(</span>it<span class=\"k\">)==</span>stringMarker<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    isArray<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>it<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> toString<span class=\"k\">.</span>call<span class=\"k\">(</span>it<span class=\"k\">)==</span>arrayMarker<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    forEach<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>vector<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> vector <span class=\"k\">&amp;&amp;</span> i<span class=\"k\">&lt;</span>vector<span class=\"k\">.</span>length<span class=\"k\">;)</span> callback<span class=\"k\">(</span>vector<span class=\"k\">[</span>i<span class=\"k\">++]);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    setIns<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>set<span class=\"k\">,</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","      set<span class=\"k\">[</span>name<span class=\"k\">]=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    setDel<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>set<span class=\"k\">,</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">delete</span> set<span class=\"k\">[</span>name<span class=\"k\">];</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    mix<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>dest<span class=\"k\">,</span> src<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> p <span class=\"k\">in</span> src<span class=\"k\">)</span> dest<span class=\"k\">[</span>p<span class=\"k\">]=</span> src<span class=\"k\">[</span>p<span class=\"k\">];</span>","      <span class=\"k\">return</span> dest<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    escapeRegEx<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>s<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> s<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>c<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"s\">\"</span><span class=\"t\">\\\\</span><span class=\"s\">\"</span> <span class=\"k\">+</span> c<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    uidSeed<span class=\"k\">=</span> ","      <span class=\"s\">1</span><span class=\"k\">,</span>","","    uid<span class=\"k\">=</span> ","      <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"c\">///</span>","        <span class=\"c\">// Returns a unique indentifier (within the lifetime of the document) of the form /_d+/.</span>","        <span class=\"k\">return</span> <span class=\"s\">\"_\"</span> <span class=\"k\">+</span> uidSeed<span class=\"k\">++;</span> ","      <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// the loader will use these like symbols</span>","    requested<span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","    arrived<span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","    nonmodule<span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","","    <span class=\"c\">// begin defining the loader</span>","","    pathTransforms<span class=\"k\">=</span>","      <span class=\"c\">// list of functions from URL(string) to URL(string)</span>","      req<span class=\"k\">.</span>pathTransforms<span class=\"k\">=</span> <span class=\"k\">[],</span>","","    paths<span class=\"k\">=</span>","      <span class=\"c\">// CommonJS paths</span>","      <span class=\"k\">{}</span><span class=\"k\">,</span>","","    pathsMapProg<span class=\"k\">=</span>","      <span class=\"c\">// list of (from-path, to-path, regex, length) derived from paths;</span>","      <span class=\"c\">// a \"program\" to apply paths; see computeMapProg</span>","      <span class=\"k\">[],</span>","","    packages<span class=\"k\">=</span>","      <span class=\"c\">// a map from packageId to package configuration object</span>","      <span class=\"k\">{}</span><span class=\"k\">,</span>","","    packageMap<span class=\"k\">=</span>","      <span class=\"c\">// map from package name to local-installed package name</span>","      <span class=\"k\">{}</span><span class=\"k\">,</span>","","    packageMapProg<span class=\"k\">=</span>","      <span class=\"c\">// list of (from-package, to-package, regex, length) derived from packageMap;</span>","      <span class=\"c\">// a \"program\" to apply paths; see computeMapProg</span>","      <span class=\"k\">[],</span>","","    modules<span class=\"k\">=</span>","      <span class=\"c\">// A hash:(pqn) --&gt; (module-object). module objects are simple JavaScript objects with the</span>","      <span class=\"c\">// following properties:</span>","      <span class=\"c\">// </span>","      <span class=\"c\">//   pid: the package identifier to which the module belongs; \"\" indicates the system or default package</span>","      <span class=\"c\">//   id: the module identifier without the package identifier</span>","      <span class=\"c\">//   pqn: the full context-qualified name</span>","      <span class=\"c\">//   url: the URL from which the module was retrieved</span>","      <span class=\"c\">//   pack: the package object of the package to which the module belongs</span>","      <span class=\"c\">//   path: the full module name (package + path) resolved with respect to the loader (i.e., mappings have been applied)</span>","      <span class=\"c\">//   executed: 1 &lt;==&gt; the factory has been executed</span>","      <span class=\"c\">//   deps: the dependency vector for this module (vector of modules objects)</span>","      <span class=\"c\">//   def: the factory for this module</span>","      <span class=\"c\">//   result: the result of the running the factory for this module</span>","      <span class=\"c\">//   injected: (requested | arrived | nonmodule) the status of the module; nonmodule means the resource did not call define</span>","      <span class=\"c\">//   ready: 1 &lt;==&gt; all prerequisite fullfilled to execute the module</span>","      <span class=\"c\">//   load: plugin load function; applicable only for plugins</span>","      <span class=\"c\">// </span>","      <span class=\"c\">// Modules go through several phases in creation:</span>","      <span class=\"c\">// </span>","      <span class=\"c\">// 1. Requested: some other module's definition contains the requested module in</span>","      <span class=\"c\">//    its dependency vector or executing code explicitly demands a module via req.require.</span>","      <span class=\"c\">// </span>","      <span class=\"c\">// 2. Injected: a script element has been appended to the head element demanding the resource implied by the URL</span>","      <span class=\"c\">// </span>","      <span class=\"c\">// 3. Loaded: the resource injected in [2] has been evaluated.</span>","      <span class=\"c\">// </span>","      <span class=\"c\">// 4. Defined: the resource contained a define statement that advised the loader</span>","      <span class=\"c\">//    about the module. Notice that some resources may just contain a bundle of code</span>","      <span class=\"c\">//    and never formally define a module via define</span>","      <span class=\"c\">// </span>","      <span class=\"c\">// 5. Evaluated: the module was defined via define and the loader has evaluated the factory and computed a result.</span>","      <span class=\"k\">{}</span><span class=\"k\">,</span>","","    cache<span class=\"k\">=</span>","      <span class=\"c\">///</span>","      <span class=\"c\">// hash:(pqn)--&gt;(function)</span>","      <span class=\"c\">///</span>","      <span class=\"c\">// Gives the contents of a cached resource; function should cause the same actions as if the given pqn was downloaded</span>","      <span class=\"c\">// and evaluated by the host environment</span>","      <span class=\"k\">{}</span><span class=\"k\">,</span>","","    <span class=\"c\">// configuration machinery</span>","","    computeMapProg<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>map<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// This routine takes a map target-prefix(string)--&gt;replacement(string) into a vector </span>","      <span class=\"c\">// of quads (target-prefix, replacement, regex-for-target-prefix, length-of-target-prefix)</span>","      <span class=\"c\">// </span>","      <span class=\"c\">// The loader contains processes that map one string prefix to another. These</span>","      <span class=\"c\">// are encountered when applying the requirejs paths configuration and when mapping</span>","      <span class=\"c\">// package names. We can make the mapping and any replacement easier and faster by</span>","      <span class=\"c\">// replacing the map with a vector of quads and then using this structure in simple machine.</span>","      <span class=\"k\">var</span> p<span class=\"k\">,</span> i<span class=\"k\">,</span> item<span class=\"k\">,</span> mapProg<span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>p <span class=\"k\">in</span> map<span class=\"k\">)</span> mapProg<span class=\"k\">.</span>push<span class=\"k\">([</span>p<span class=\"k\">,</span> map<span class=\"k\">[</span>p<span class=\"k\">]]);</span>","      mapProg<span class=\"k\">.</span>sort<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>lhs<span class=\"k\">,</span> rhs<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> rhs<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length <span class=\"k\">-</span> lhs<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">);</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>mapProg<span class=\"k\">.</span>length<span class=\"k\">;)</span> <span class=\"k\">{</span>","        item<span class=\"k\">=</span> mapProg<span class=\"k\">[</span>i<span class=\"k\">++];</span>","        item<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]=</span> <span class=\"k\">new</span> RegExp<span class=\"k\">(</span><span class=\"s\">\"^\"</span> <span class=\"k\">+</span> escapeRegEx<span class=\"k\">(</span>item<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">])</span> <span class=\"k\">+</span> <span class=\"s\">\"(</span><span class=\"t\">\\/</span><span class=\"s\">|$)\"</span><span class=\"k\">);</span>","        item<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">]=</span> item<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> mapProg<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    fixupPackageInfo<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>packageInfo<span class=\"k\">,</span> baseUrl<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// calculate the precise (name, baseUrl, lib, main, mappings) for a package</span>","      baseUrl<span class=\"k\">=</span> baseUrl <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","      packageInfo<span class=\"k\">=</span> mix<span class=\"k\">(</span><span class=\"k\">{</span>lib<span class=\"k\">:</span><span class=\"s\">\"lib\"</span><span class=\"k\">,</span> main<span class=\"k\">:</span><span class=\"s\">\"main\"</span><span class=\"k\">,</span> pathTransforms<span class=\"k\">:[]</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">(</span>isString<span class=\"k\">(</span>packageInfo<span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"k\">{</span>name<span class=\"k\">:</span>packageInfo<span class=\"k\">}</span> <span class=\"k\">:</span> packageInfo<span class=\"k\">));</span>","      packageInfo<span class=\"k\">.</span>location<span class=\"k\">=</span> baseUrl <span class=\"k\">+</span> <span class=\"k\">(</span>packageInfo<span class=\"k\">.</span>location <span class=\"k\">?</span> packageInfo<span class=\"k\">.</span>location <span class=\"k\">:</span> packageInfo<span class=\"k\">.</span>name<span class=\"k\">);</span>","      packageInfo<span class=\"k\">.</span>mapProg<span class=\"k\">=</span> computeMapProg<span class=\"k\">(</span>packageInfo<span class=\"k\">.</span>packageMap<span class=\"k\">);</span>","      <span class=\"k\">var</span> name<span class=\"k\">=</span> packageInfo<span class=\"k\">.</span>name<span class=\"k\">;</span>","","      <span class=\"c\">// now that we've got a fully-resolved package object, push it into the configuration</span>","      packages<span class=\"k\">[</span>name<span class=\"k\">]=</span> packageInfo<span class=\"k\">;</span>","      packageMap<span class=\"k\">[</span>name<span class=\"k\">]=</span> name<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    doWork<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>deps<span class=\"k\">,</span> callback<span class=\"k\">,</span> onLoadCallback<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">((</span>deps <span class=\"k\">&amp;&amp;</span> deps<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">||</span> callback<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> req<span class=\"k\">(</span>deps <span class=\"k\">||</span> <span class=\"k\">[],</span> callback <span class=\"k\">||</span> noop<span class=\"k\">);</span>","      onLoadCallback <span class=\"k\">&amp;&amp;</span> req<span class=\"k\">.</span>ready<span class=\"k\">(</span>onLoadCallback<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    config<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>config<span class=\"k\">,</span> booting<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// mix config into require, but don't trash the pathTransforms</span>","      <span class=\"k\">var</span> p<span class=\"k\">,</span> i<span class=\"k\">,</span> transforms<span class=\"k\">;</span>","","      <span class=\"c\">//note: bdLoad ignores requirejs waitSecond; change your code to use \"timeout\" if required</span>","","      <span class=\"c\">// push config into require, but don't step on certain properties that are expected and/or</span>","      <span class=\"c\">// require special processing; notice that client code can use config to hold client</span>","      <span class=\"c\">// configuration switches that have nothing to do with require</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>p <span class=\"k\">in</span> config<span class=\"k\">)</span> <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"s\">/pathTransforms|paths|packages|packageMap|packagePaths|cache|ready/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>p<span class=\"k\">))</span> <span class=\"k\">{</span>","        req<span class=\"k\">[</span>p<span class=\"k\">]=</span> config<span class=\"k\">[</span>p<span class=\"k\">];</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">// make sure baseUrl ends with a slash</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>req<span class=\"k\">.</span>baseUrl<span class=\"k\">)</span> <span class=\"k\">{</span>","        req<span class=\"k\">.</span>baseUrl<span class=\"k\">=</span> <span class=\"s\">\"./\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"s\">/\\/$/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>req<span class=\"k\">.</span>baseUrl<span class=\"k\">))</span> <span class=\"k\">{</span>","        req<span class=\"k\">.</span>baseUrl<span class=\"k\">+=</span> <span class=\"s\">\"/\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// interpret a pathTransforms as items that should be added to the end of the existing map</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>transforms<span class=\"k\">=</span> config<span class=\"k\">.</span>pathTransforms<span class=\"k\">,</span> i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> transforms <span class=\"k\">&amp;&amp;</span> i<span class=\"k\">&lt;</span>transforms<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        pathTransforms<span class=\"k\">.</span>push<span class=\"k\">(</span>transforms<span class=\"k\">[</span>i<span class=\"k\">]);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// push in any paths and recompute the internal pathmap</span>","      pathsMapProg<span class=\"k\">=</span> computeMapProg<span class=\"k\">(</span>mix<span class=\"k\">(</span>paths<span class=\"k\">,</span> config<span class=\"k\">.</span>paths<span class=\"k\">));</span>","","      <span class=\"c\">// for each package found in any packages config item, augment the packages map owned by the loader</span>","      forEach<span class=\"k\">(</span>config<span class=\"k\">.</span>packages<span class=\"k\">,</span> fixupPackageInfo<span class=\"k\">);</span>","","      <span class=\"c\">// for each packagePath found in any packagePaths config item, augment the packages map owned by the loader</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>baseUrl <span class=\"k\">in</span> config<span class=\"k\">.</span>packagePaths<span class=\"k\">)</span> <span class=\"k\">{</span>","        forEach<span class=\"k\">(</span>config<span class=\"k\">.</span>packagePaths<span class=\"k\">[</span>baseUrl<span class=\"k\">],</span> <span class=\"k\">function</span><span class=\"k\">(</span>packageInfo<span class=\"k\">)</span> <span class=\"k\">{</span>","          fixupPackageInfo<span class=\"k\">(</span>packageInfo<span class=\"k\">,</span> baseUrl <span class=\"k\">+</span> <span class=\"s\">\"/\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// mix any packageMap config item and recompute the internal packageMapProg</span>","      packageMapProg<span class=\"k\">=</span> computeMapProg<span class=\"k\">(</span>mix<span class=\"k\">(</span>packageMap<span class=\"k\">,</span> config<span class=\"k\">.</span>packageMap<span class=\"k\">));</span>","","      <span class=\"c\">// push in any new cache values</span>","      mix<span class=\"k\">(</span>cache<span class=\"k\">,</span> config<span class=\"k\">.</span>cache<span class=\"k\">);</span>","","      <span class=\"k\">if</span> <span class=\"k\">(!</span>booting<span class=\"k\">)</span> <span class=\"k\">{</span>","        doWork<span class=\"k\">(</span>config<span class=\"k\">.</span>deps<span class=\"k\">,</span> config<span class=\"k\">.</span>callback<span class=\"k\">,</span> config<span class=\"k\">.</span>ready<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">// configure the loader; let the user override defaults</span>","  config<span class=\"k\">(</span>defaultConfig<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","  config<span class=\"k\">(</span>userConfig<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","","","  <span class=\"c\">// the loader can be defined exactly once; look for global define which is the symbol AMD loaders are</span>","  <span class=\"c\">// *required* to define (as opposed to require, which is optional)</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-node\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>isFunction<span class=\"k\">(</span>global<span class=\"k\">.</span>define<span class=\"k\">))</span> <span class=\"k\">{</span>","      console<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">\"global define already defined; did you try to load multiple AMD loaders?\"</span><span class=\"k\">);</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>isFunction<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>define<span class=\"k\">))</span> <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error<span class=\"k\">(</span><span class=\"s\">\"global define already defined; did you try to load multiple AMD loaders?\"</span><span class=\"k\">);</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","","  <span class=\"c\">// build the basic loader</span>","  <span class=\"k\">var</span> ","    injectDependencies<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>module<span class=\"k\">)</span> <span class=\"k\">{</span>","      forEach<span class=\"k\">(</span>module<span class=\"k\">.</span>deps<span class=\"k\">,</span> injectModule<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","  ","    contextRequire<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>a1<span class=\"k\">,</span> a2<span class=\"k\">,</span> a3<span class=\"k\">,</span> referenceModule<span class=\"k\">,</span> contextRequire<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> module<span class=\"k\">,</span> syntheticMid<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>isString<span class=\"k\">(</span>a1<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"c\">// signature is (moduleId)</span>","        module<span class=\"k\">=</span> getModule<span class=\"k\">(</span>a1<span class=\"k\">,</span> referenceModule<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>module<span class=\"k\">.</span>plugin<span class=\"k\">)</span> <span class=\"k\">{</span>","          injectPlugin<span class=\"k\">(</span>module<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> module<span class=\"k\">.</span>result<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>isArray<span class=\"k\">(</span>a1<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"c\">// a1 is a configuration</span>","        config<span class=\"k\">(</span>a1<span class=\"k\">);</span>","","        <span class=\"c\">// juggle args; (a2, a3) may be (dependencies, callback)</span>","        a1<span class=\"k\">=</span> a2<span class=\"k\">;</span>","        a2<span class=\"k\">=</span> a3<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>isArray<span class=\"k\">(</span>a1<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"c\">// signature is (requestList [,callback])</span>","","        <span class=\"c\">// resolve the request list with respect to the reference module</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>a1<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","          a1<span class=\"k\">[</span>i<span class=\"k\">]=</span> getModule<span class=\"k\">(</span>a1<span class=\"k\">[</span>i<span class=\"k\">],</span> referenceModule<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// construct a synthetic module to control execution of the requestList, and, optionally, callback</span>","        syntheticMid<span class=\"k\">=</span> uid<span class=\"k\">();</span>","        module<span class=\"k\">=</span> mix<span class=\"k\">(</span>makeModuleInfo<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">,</span> syntheticMid<span class=\"k\">,</span> <span class=\"s\">\"*\"</span><span class=\"k\">+</span>syntheticMid<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">),</span> <span class=\"k\">{</span>","          injected<span class=\"k\">:</span>arrived<span class=\"k\">,</span>","          deps<span class=\"k\">:</span>a1<span class=\"k\">,</span>","          def<span class=\"k\">:</span>a2<span class=\"k\">||</span>noop","        <span class=\"k\">}</span><span class=\"k\">);</span>","        injectDependencies<span class=\"k\">(</span>module<span class=\"k\">);</span>","        <span class=\"c\">// try to immediately execute</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>execModule<span class=\"k\">(</span>module<span class=\"k\">)===</span>abortExec<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"c\">// some deps weren't on board; therefore, push into the execQ</span>","          execQ<span class=\"k\">.</span>push<span class=\"k\">(</span>module<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> contextRequire<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    createRequire<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>module<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> result<span class=\"k\">=</span> module<span class=\"k\">.</span>require<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>result<span class=\"k\">)</span> <span class=\"k\">{</span>","        result<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>a1<span class=\"k\">,</span> a2<span class=\"k\">,</span> a3<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> contextRequire<span class=\"k\">(</span>a1<span class=\"k\">,</span> a2<span class=\"k\">,</span> a3<span class=\"k\">,</span> module<span class=\"k\">,</span> result<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","        module<span class=\"k\">.</span>require<span class=\"k\">=</span> mix<span class=\"k\">(</span>result<span class=\"k\">,</span> req<span class=\"k\">);</span>","        result<span class=\"k\">.</span>nameToUrl<span class=\"k\">=</span> result<span class=\"k\">.</span>toUrl<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> ext<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> nameToUrl<span class=\"k\">(</span>name<span class=\"k\">,</span> ext<span class=\"k\">,</span> module<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","        result<span class=\"k\">.</span>toAbsMid<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>mid<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> getModuleInfo<span class=\"k\">(</span>mid<span class=\"k\">,</span> module<span class=\"k\">,</span> packages<span class=\"k\">,</span> modules<span class=\"k\">,</span> req<span class=\"k\">.</span>baseUrl<span class=\"k\">,</span> <span class=\"s\">\".\"</span><span class=\"k\">,</span> packageMapProg<span class=\"k\">,</span> pathsMapProg<span class=\"k\">,</span> pathTransforms<span class=\"k\">).</span>path<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-undefApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","          result<span class=\"k\">.</span>undef<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>moduleId<span class=\"k\">)</span> <span class=\"k\">{</span>","           <span class=\"c\">// In order to reload a module, it must be undefined (this routine) and then re-requested.</span>","           <span class=\"c\">// This is useful for testing frameworks (at least).</span>","             <span class=\"k\">var</span> ","               module<span class=\"k\">=</span> getModule<span class=\"k\">(</span>moduleId<span class=\"k\">,</span> module<span class=\"k\">),</span>","               pqn<span class=\"k\">=</span> module<span class=\"k\">.</span>pqn<span class=\"k\">;</span>","             setDel<span class=\"k\">(</span>modules<span class=\"k\">,</span> pqn<span class=\"k\">);</span>","             setDel<span class=\"k\">(</span>waiting<span class=\"k\">,</span> pqn<span class=\"k\">);</span>","             setDel<span class=\"k\">(</span>injectedUrls<span class=\"k\">,</span> module<span class=\"k\">.</span>url<span class=\"k\">);</span>","          <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> result<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    execQ<span class=\"k\">=</span>","      <span class=\"c\">///</span>","      <span class=\"c\">// The list of modules that need to be evaluated.</span>","      <span class=\"k\">[],</span>","","    waiting<span class=\"k\">=</span> ","      <span class=\"c\">// The set of modules upon which the loader is waiting for definition to arrive</span>","      <span class=\"k\">{}</span><span class=\"k\">,</span>","","    execComplete<span class=\"k\">=</span>","      <span class=\"c\">// says the loader has completed (or not) its work</span>","      <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> defQ <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>defQ<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> isEmpty<span class=\"k\">(</span>waiting<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>execQ<span class=\"k\">.</span>length<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","    runMapProg<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>targetMid<span class=\"k\">,</span> map<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// search for targetMid in map; return the map item if found; falsy otherwise</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>map<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>map<span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">2</span><span class=\"k\">].</span>test<span class=\"k\">(</span>targetMid<span class=\"k\">))</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> map<span class=\"k\">[</span>i<span class=\"k\">];</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    compactPath<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>path<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">while</span><span class=\"k\">(</span><span class=\"s\">/\\/\\.\\//</span><span class=\"k\">.</span>test<span class=\"k\">(</span>path<span class=\"k\">))</span> path<span class=\"k\">=</span> path<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/\\/\\.\\//</span><span class=\"k\">,</span> <span class=\"s\">\"/\"</span><span class=\"k\">);</span>","      path<span class=\"k\">=</span> path<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/(.*)\\/\\.$/</span><span class=\"k\">,</span> <span class=\"s\">\"$1\"</span><span class=\"k\">);</span>","<span class=\"c\">//TODO why \\. in [^\\/\\.] next</span>","      <span class=\"k\">while</span><span class=\"k\">(</span><span class=\"s\">/[^\\/\\.]+\\/\\.\\./</span><span class=\"k\">.</span>test<span class=\"k\">(</span>path<span class=\"k\">))</span> path<span class=\"k\">=</span> path<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/[^\\/]+\\/\\.\\.\\/?/</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">);</span>","      <span class=\"k\">return</span> path<span class=\"k\">;</span>","<span class=\"c\">/*</span>","<span class=\"c\"> * TODO: DEL</span>","<span class=\"c\">      if (!/\\./.test(path)) {</span>","<span class=\"c\">        // not dots in path; short-circuit return</span>","<span class=\"c\">        return path;</span>","<span class=\"c\">      }</span>","<span class=\"c\">      var </span>","<span class=\"c\">        parts= path.split(\"/\"),</span>","<span class=\"c\">        result= [],</span>","<span class=\"c\">        segment;</span>","<span class=\"c\">      while (parts.length) {</span>","<span class=\"c\">        segment= parts.shift();</span>","<span class=\"c\">        if (segment==\"..\") {</span>","<span class=\"c\">          if (result.length &amp;&amp; result[result.length-1].charAt(0)!=\".\") {</span>","<span class=\"c\">            result.pop();</span>","<span class=\"c\">          } else {</span>","<span class=\"c\">            result.push(\"..\");</span>","<span class=\"c\">          }</span>","<span class=\"c\">        } else if (segment!=\".\" || !result.length) {</span>","<span class=\"c\">          result.push(segment);</span>","<span class=\"c\">        }</span>","<span class=\"c\">      }</span>","<span class=\"c\">      return result.join(\"/\");</span>","<span class=\"c\">*/</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    transformPath<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>","      path<span class=\"k\">,</span> ","      transforms","    <span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> result<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> item<span class=\"k\">;</span> <span class=\"k\">!</span>result <span class=\"k\">&amp;&amp;</span> i<span class=\"k\">&lt;</span>transforms<span class=\"k\">.</span>length<span class=\"k\">;)</span> <span class=\"k\">{</span>","        item<span class=\"k\">=</span> transforms<span class=\"k\">[</span>i<span class=\"k\">++];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>isFunction<span class=\"k\">(</span>item<span class=\"k\">))</span> <span class=\"k\">{</span>","          result<span class=\"k\">=</span> item<span class=\"k\">(</span>path<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          result<span class=\"k\">=</span> item<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>test<span class=\"k\">(</span>path<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> path<span class=\"k\">.</span>replace<span class=\"k\">(</span>item<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> item<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> result<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    makeModuleInfo<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>pid<span class=\"k\">,</span> mid<span class=\"k\">,</span> pqn<span class=\"k\">,</span> pack<span class=\"k\">,</span> path<span class=\"k\">,</span> url<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> result<span class=\"k\">=</span> <span class=\"k\">{</span>pid<span class=\"k\">:</span>pid<span class=\"k\">,</span> mid<span class=\"k\">:</span>mid<span class=\"k\">,</span> pqn<span class=\"k\">:</span>pqn<span class=\"k\">,</span> pack<span class=\"k\">:</span>pack<span class=\"k\">,</span> path<span class=\"k\">:</span>path<span class=\"k\">,</span> url<span class=\"k\">:</span>url<span class=\"k\">}</span><span class=\"k\">;</span>","      <span class=\"k\">return</span> result<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    getModuleInfo<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>mid<span class=\"k\">,</span> referenceModule<span class=\"k\">,</span> packages<span class=\"k\">,</span> modules<span class=\"k\">,</span> baseUrl<span class=\"k\">,</span> pageUrl<span class=\"k\">,</span> packageMapProg<span class=\"k\">,</span> pathsMapProg<span class=\"k\">,</span> pathTransforms<span class=\"k\">,</span> alwaysCreate<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// arguments are passed instead of using lexical variables so that this function my be used independent of bdLoad (e.g., in bdBuild)</span>","      <span class=\"c\">// alwaysCreate is useful in this case so that getModuleInfo never returns references to real modules owned by the loader</span>","      <span class=\"k\">var</span> pid<span class=\"k\">,</span> pack<span class=\"k\">,</span> pqn<span class=\"k\">,</span> mapProg<span class=\"k\">,</span> mapItem<span class=\"k\">,</span> path<span class=\"k\">,</span> url<span class=\"k\">,</span> result<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">/(^\\/)|(\\:)|(\\.[^\\/]+$)/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>mid<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"c\">// absolute path or prototcol or file type was given; resolve relative to page location.pathname</span>","        <span class=\"c\">// note: this feature is totally unnecessary; you can get the same effect</span>","        <span class=\"c\">// be giving a relative path off of baseUrl or an absolute path</span>","        url<span class=\"k\">=</span> <span class=\"s\">/^\\./</span><span class=\"k\">.</span>test<span class=\"k\">(</span>mid<span class=\"k\">)</span> <span class=\"k\">?</span> compactPath<span class=\"k\">(</span>pageUrl <span class=\"k\">+</span> <span class=\"s\">\"/\"</span> <span class=\"k\">+</span> mid<span class=\"k\">)</span> <span class=\"k\">:</span> mid<span class=\"k\">;</span>","        <span class=\"k\">return</span> makeModuleInfo<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> url<span class=\"k\">,</span> <span class=\"s\">\"*\"</span> <span class=\"k\">+</span> url<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> url<span class=\"k\">,</span> url<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">/^\\./</span><span class=\"k\">.</span>test<span class=\"k\">(</span>mid<span class=\"k\">))</span> <span class=\"k\">{</span>","          <span class=\"c\">// relative module ids are relative to the referenceModule if provided, otherwise the baseUrl</span>","          mid<span class=\"k\">=</span> referenceModule <span class=\"k\">?</span> referenceModule<span class=\"k\">.</span>path <span class=\"k\">+</span> <span class=\"s\">\"/../\"</span> <span class=\"k\">+</span> mid <span class=\"k\">:</span> baseUrl <span class=\"k\">+</span> mid<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"c\">// get rid of all the dots</span>","        path<span class=\"k\">=</span> compactPath<span class=\"k\">(</span>mid<span class=\"k\">);</span>","        <span class=\"c\">// find the package indicated by the module id, if any</span>","        mapProg<span class=\"k\">=</span> referenceModule <span class=\"k\">&amp;&amp;</span> referenceModule<span class=\"k\">.</span>pack <span class=\"k\">&amp;&amp;</span> referenceModule<span class=\"k\">.</span>pack<span class=\"k\">.</span>mapProg<span class=\"k\">;</span>","        mapItem<span class=\"k\">=</span> <span class=\"k\">(</span>mapProg <span class=\"k\">&amp;&amp;</span> runMapProg<span class=\"k\">(</span>path<span class=\"k\">,</span> mapProg<span class=\"k\">))</span> <span class=\"k\">||</span> runMapProg<span class=\"k\">(</span>path<span class=\"k\">,</span> packageMapProg<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>mapItem<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"c\">// mid specified a module that's a member of a package; figure out the package id and module id</span>","          pid<span class=\"k\">=</span> mapItem<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","          mid<span class=\"k\">=</span> path<span class=\"k\">.</span>substring<span class=\"k\">(</span>mapItem<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">]);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          pid<span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","          mid<span class=\"k\">=</span> path<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        pqn<span class=\"k\">=</span> pid <span class=\"k\">+</span> <span class=\"s\">\"*\"</span> <span class=\"k\">+</span> mid<span class=\"k\">;</span>","        result<span class=\"k\">=</span> modules<span class=\"k\">[</span>pqn<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>result<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> alwaysCreate <span class=\"k\">?</span> makeModuleInfo<span class=\"k\">(</span>result<span class=\"k\">.</span>pid<span class=\"k\">,</span> result<span class=\"k\">.</span>mid<span class=\"k\">,</span> result<span class=\"k\">.</span>pqn<span class=\"k\">,</span> result<span class=\"k\">.</span>pack<span class=\"k\">,</span> result<span class=\"k\">.</span>path<span class=\"k\">,</span> result<span class=\"k\">.</span>url<span class=\"k\">)</span> <span class=\"k\">:</span> modules<span class=\"k\">[</span>pqn<span class=\"k\">];</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"c\">// get here iff the sought-after module does not yet exist; therefore, we need </span>","      <span class=\"c\">// to compute the URL url= pathsMap(default) || transformPath(default) || default</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>pid<span class=\"k\">)</span> <span class=\"k\">{</span>","        pack<span class=\"k\">=</span> packages<span class=\"k\">[</span>pid<span class=\"k\">];</span>","        path<span class=\"k\">=</span> pid <span class=\"k\">+</span> <span class=\"s\">\"/\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>mid <span class=\"k\">||</span> pack<span class=\"k\">.</span>main<span class=\"k\">);</span>","        url<span class=\"k\">=</span> pack<span class=\"k\">.</span>location <span class=\"k\">+</span> <span class=\"s\">\"/\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>pack<span class=\"k\">.</span>lib <span class=\"k\">?</span> pack<span class=\"k\">.</span>lib <span class=\"k\">+</span> <span class=\"s\">\"/\"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"k\">(</span>mid <span class=\"k\">||</span> pack<span class=\"k\">.</span>main<span class=\"k\">);</span>","        mapItem<span class=\"k\">=</span> runMapProg<span class=\"k\">(</span>url<span class=\"k\">,</span> pathsMapProg<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>mapItem<span class=\"k\">)</span> <span class=\"k\">{</span>","          url<span class=\"k\">=</span> mapItem<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+</span> url<span class=\"k\">.</span>substring<span class=\"k\">(</span>mapItem<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">]-</span><span class=\"s\">1</span><span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          url<span class=\"k\">=</span> transformPath<span class=\"k\">(</span>path<span class=\"k\">,</span> pack<span class=\"k\">.</span>pathTransforms<span class=\"k\">)</span> <span class=\"k\">||</span> url<span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        mapItem<span class=\"k\">=</span> runMapProg<span class=\"k\">(</span>path<span class=\"k\">,</span> pathsMapProg<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>mapItem<span class=\"k\">)</span> <span class=\"k\">{</span>","          url<span class=\"k\">=</span> mapItem<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+</span> path<span class=\"k\">.</span>substring<span class=\"k\">(</span>mapItem<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">]-</span><span class=\"s\">1</span><span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          url<span class=\"k\">=</span> transformPath<span class=\"k\">(</span>path<span class=\"k\">,</span> pathTransforms<span class=\"k\">)</span> <span class=\"k\">||</span> path<span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"c\">// if result is not absolute, add baseUrl</span>","      <span class=\"k\">if</span> <span class=\"k\">(!(</span><span class=\"s\">/(^\\/)|(\\:)/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>url<span class=\"k\">)))</span> <span class=\"k\">{</span>","        url<span class=\"k\">=</span> baseUrl <span class=\"k\">+</span> url<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      url<span class=\"k\">+=</span> <span class=\"s\">\".js\"</span><span class=\"k\">;</span>","      <span class=\"k\">return</span> makeModuleInfo<span class=\"k\">(</span>pid<span class=\"k\">,</span> mid<span class=\"k\">,</span> pqn<span class=\"k\">,</span> pack<span class=\"k\">,</span> path<span class=\"k\">,</span> compactPath<span class=\"k\">(</span>url<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    getModule<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>mid<span class=\"k\">,</span> referenceModule<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// compute and optionally construct (if necessary) the module implied by the mid with respect to referenceModule</span>","      <span class=\"k\">var</span> match<span class=\"k\">,</span> plugin<span class=\"k\">,</span> pluginResource<span class=\"k\">,</span> result<span class=\"k\">,</span> existing<span class=\"k\">,</span> pqn<span class=\"k\">;</span>","      match<span class=\"k\">=</span> mid<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">/^(.+?)\\!(.+)$/</span><span class=\"k\">);</span>","      <span class=\"c\">//TODO: change the regex above to this and test...match= mid.match(/^([^\\!]+)\\!(.+)$/);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>match<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// name was &lt;plugin-module&gt;!&lt;plugin-resource&gt;</span>","        plugin<span class=\"k\">=</span> getModule<span class=\"k\">(</span>match<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">],</span> referenceModule<span class=\"k\">),</span>","        pluginResource<span class=\"k\">=</span> match<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">];</span>","        pqn<span class=\"k\">=</span> plugin<span class=\"k\">.</span>pqn <span class=\"k\">+</span> <span class=\"s\">\"!\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>referenceModule <span class=\"k\">?</span> referenceModule<span class=\"k\">.</span>pqn <span class=\"k\">+</span> <span class=\"s\">\"!\"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> pluginResource<span class=\"k\">;</span>","        <span class=\"k\">return</span> modules<span class=\"k\">[</span>pqn<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">(</span>modules<span class=\"k\">[</span>pqn<span class=\"k\">]=</span> <span class=\"k\">{</span>plugin<span class=\"k\">:</span>plugin<span class=\"k\">,</span> mid<span class=\"k\">:</span>pluginResource<span class=\"k\">,</span> req<span class=\"k\">:(</span>referenceModule <span class=\"k\">?</span> createRequire<span class=\"k\">(</span>referenceModule<span class=\"k\">)</span> <span class=\"k\">:</span> req<span class=\"k\">),</span> pqn<span class=\"k\">:</span>pqn<span class=\"k\">}</span><span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        result<span class=\"k\">=</span> getModuleInfo<span class=\"k\">(</span>mid<span class=\"k\">,</span> referenceModule<span class=\"k\">,</span> packages<span class=\"k\">,</span> modules<span class=\"k\">,</span> req<span class=\"k\">.</span>baseUrl<span class=\"k\">,</span> <span class=\"s\">\".\"</span><span class=\"k\">,</span> packageMapProg<span class=\"k\">,</span> pathsMapProg<span class=\"k\">,</span> pathTransforms<span class=\"k\">);</span>","        <span class=\"k\">return</span> modules<span class=\"k\">[</span>result<span class=\"k\">.</span>pqn<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">(</span>modules<span class=\"k\">[</span>result<span class=\"k\">.</span>pqn<span class=\"k\">]=</span> result<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    nameToUrl<span class=\"k\">=</span> req<span class=\"k\">.</span>nameToUrl<span class=\"k\">=</span> req<span class=\"k\">.</span>toUrl<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> ext<span class=\"k\">,</span> referenceModule<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// slightly different algorithm depending upon whether or not name contains</span>","      <span class=\"c\">// a filetype. This is a requirejs artifact which we don't like.</span>","      <span class=\"k\">var</span>","        match<span class=\"k\">=</span> name<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">/(.+)(\\.[^\\/]+)$/</span><span class=\"k\">),</span>","        url<span class=\"k\">=</span> getModuleInfo<span class=\"k\">(</span>match <span class=\"k\">&amp;&amp;</span> match<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">||</span> name<span class=\"k\">,</span> referenceModule<span class=\"k\">,</span> packages<span class=\"k\">,</span> modules<span class=\"k\">,</span> req<span class=\"k\">.</span>baseUrl<span class=\"k\">,</span> <span class=\"s\">\".\"</span><span class=\"k\">,</span> packageMapProg<span class=\"k\">,</span> pathsMapProg<span class=\"k\">,</span> pathTransforms<span class=\"k\">).</span>url<span class=\"k\">;</span>","      <span class=\"c\">// recall, getModuleInfo always returns a url with a \".js\" suffix; therefore, we've got to trim it</span>","      <span class=\"k\">return</span> url<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> url<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">3</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"k\">(</span>ext <span class=\"k\">?</span> ext <span class=\"k\">:</span> <span class=\"k\">(</span>match <span class=\"k\">?</span> match<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","      ","    cjsModuleInfo<span class=\"k\">=</span> <span class=\"k\">{</span>","      injected<span class=\"k\">:</span> arrived<span class=\"k\">,</span>","      deps<span class=\"k\">:</span> <span class=\"k\">[],</span>","      executed<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>","      result<span class=\"k\">:</span> <span class=\"s\">1</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    cjsRequireModule<span class=\"k\">=</span> mix<span class=\"k\">(</span>getModule<span class=\"k\">(</span><span class=\"s\">\"require\"</span><span class=\"k\">),</span> cjsModuleInfo<span class=\"k\">),</span>","    cjsExportsModule<span class=\"k\">=</span> mix<span class=\"k\">(</span>getModule<span class=\"k\">(</span><span class=\"s\">\"exports\"</span><span class=\"k\">),</span> cjsModuleInfo<span class=\"k\">),</span>","    cjsModuleModule<span class=\"k\">=</span> mix<span class=\"k\">(</span>getModule<span class=\"k\">(</span><span class=\"s\">\"module\"</span><span class=\"k\">),</span> cjsModuleInfo<span class=\"k\">),</span>","","    <span class=\"c\">// this is a flag to say at least one factory was run during a deps tree</span>","    <span class=\"c\">// traversal</span>","    ranFactory<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","","    runFactory<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>pqn<span class=\"k\">,</span> factory<span class=\"k\">,</span> args<span class=\"k\">,</span> cjs<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-traceApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","        req<span class=\"k\">.</span>trace<span class=\"k\">(</span><span class=\"s\">\"loader-runFactory\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>pqn<span class=\"k\">]);</span>","      <span class=\"k\">}</span>","      ranFactory<span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","      <span class=\"k\">return</span> isFunction<span class=\"k\">(</span>factory<span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"k\">(</span>factory<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> args<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">(</span>cjs <span class=\"k\">&amp;&amp;</span> cjs<span class=\"k\">.</span>exports<span class=\"k\">))</span> <span class=\"k\">:</span> factory<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    abortExec<span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","","    evalOrder<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","","    execModule<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>","      module","    <span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// run the dependency vector, then run the factory for module</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>module<span class=\"k\">.</span>executed<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> module<span class=\"k\">.</span>def<span class=\"k\">==</span><span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> abortExec<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span>","          pqn<span class=\"k\">=</span> module<span class=\"k\">.</span>pqn<span class=\"k\">,</span>","          deps<span class=\"k\">=</span> module<span class=\"k\">.</span>deps <span class=\"k\">||</span> <span class=\"k\">[],</span>","          arg<span class=\"k\">,</span> argResult<span class=\"k\">,</span>","          args<span class=\"k\">=</span> <span class=\"k\">[],</span> ","          i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-traceApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","          req<span class=\"k\">.</span>trace<span class=\"k\">(</span><span class=\"s\">\"loader-execModule\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>pqn<span class=\"k\">]);</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// for circular dependencies, assume the first module encountered was executed OK</span>","        <span class=\"c\">// modules that circularly depend on a module that has not run its factory will get</span>","        <span class=\"c\">// the premade cjs.exports===module.result. They can take a reference to this object and/or</span>","        <span class=\"c\">// add properties to it. When the module finally runs its factory, the factory can </span>","        <span class=\"c\">// read/write/replace this object. Notice that so long as the object isn't replaced, any</span>","        <span class=\"c\">// reference taken earlier while walking the deps list is still valid.</span>","        module<span class=\"k\">.</span>executed<span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">while</span> <span class=\"k\">(</span>i<span class=\"k\">&lt;</span>deps<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","          arg<span class=\"k\">=</span> deps<span class=\"k\">[</span>i<span class=\"k\">++];</span>","          argResult<span class=\"k\">=</span> <span class=\"k\">((</span>arg<span class=\"k\">===</span>cjsRequireModule<span class=\"k\">)</span> <span class=\"k\">?</span> createRequire<span class=\"k\">(</span>module<span class=\"k\">)</span> <span class=\"k\">:</span>","                                                 <span class=\"k\">((</span>arg<span class=\"k\">===</span>cjsExportsModule<span class=\"k\">)</span> <span class=\"k\">?</span> module<span class=\"k\">.</span>exports <span class=\"k\">:</span>","                                                                             <span class=\"k\">((</span>arg<span class=\"k\">===</span>cjsModuleModule<span class=\"k\">)</span> <span class=\"k\">?</span> module <span class=\"k\">:</span>","                                                                                                        execModule<span class=\"k\">(</span>arg<span class=\"k\">))));</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>argResult<span class=\"k\">===</span>abortExec<span class=\"k\">)</span> <span class=\"k\">{</span>","            module<span class=\"k\">.</span>executed<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">return</span> abortExec<span class=\"k\">;</span>","          <span class=\"k\">}</span>","          args<span class=\"k\">.</span>push<span class=\"k\">(</span>argResult<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-catchApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","          <span class=\"k\">try</span> <span class=\"k\">{</span>","            module<span class=\"k\">.</span>result<span class=\"k\">=</span> runFactory<span class=\"k\">(</span>pqn<span class=\"k\">,</span> module<span class=\"k\">.</span>def<span class=\"k\">,</span> args<span class=\"k\">,</span> module<span class=\"k\">.</span>cjs<span class=\"k\">);</span>","          <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-errorApi\"</span><span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">!</span>req<span class=\"k\">.</span>onError<span class=\"k\">(</span><span class=\"s\">\"loader/exec\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>e<span class=\"k\">,</span> pqn<span class=\"k\">].</span>concat<span class=\"k\">(</span>args<span class=\"k\">)))</span> <span class=\"k\">{</span>","              <span class=\"k\">throw</span> e<span class=\"k\">;</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          module<span class=\"k\">.</span>result<span class=\"k\">=</span> runFactory<span class=\"k\">(</span>pqn<span class=\"k\">,</span> module<span class=\"k\">.</span>def<span class=\"k\">,</span> args<span class=\"k\">,</span> module<span class=\"k\">.</span>cjs<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        module<span class=\"k\">.</span>evalOrder<span class=\"k\">=</span> evalOrder<span class=\"k\">++;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>module<span class=\"k\">.</span>loadQ<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"c\">// this was a plugin module</span>","          <span class=\"k\">var</span>","            q<span class=\"k\">=</span> module<span class=\"k\">.</span>loadQ<span class=\"k\">,</span>","            load<span class=\"k\">=</span> module<span class=\"k\">.</span>load<span class=\"k\">=</span> module<span class=\"k\">.</span>result<span class=\"k\">.</span>load<span class=\"k\">;</span>","          <span class=\"k\">while</span> <span class=\"k\">(</span>q<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","            load<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> q<span class=\"k\">.</span>shift<span class=\"k\">());</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-traceApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","          req<span class=\"k\">.</span>trace<span class=\"k\">(</span><span class=\"s\">\"loader-execModule-out\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>pqn<span class=\"k\">]);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> module<span class=\"k\">.</span>result<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    checkCompleteRecursiveGuard<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","","    checkComplete<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>checkCompleteRecursiveGuard<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      checkCompleteRecursiveGuard<span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","      <span class=\"c\">// keep going through the execQ as long as at least one factory is executed</span>","      ranFactory<span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","      <span class=\"k\">while</span> <span class=\"k\">(</span>ranFactory<span class=\"k\">)</span> <span class=\"k\">{</span>","        ranFactory<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> result<span class=\"k\">,</span> i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>execQ<span class=\"k\">.</span>length<span class=\"k\">;)</span> <span class=\"k\">{</span>","          result<span class=\"k\">=</span> execModule<span class=\"k\">(</span>execQ<span class=\"k\">[</span>i<span class=\"k\">]);</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>result<span class=\"k\">!==</span>abortExec<span class=\"k\">)</span> <span class=\"k\">{</span>","            execQ<span class=\"k\">.</span>splice<span class=\"k\">(</span>i<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","          <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            i<span class=\"k\">++;</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      checkCompleteRecursiveGuard<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-pageLoadApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","        onLoad<span class=\"k\">();</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","  req<span class=\"k\">.</span>toAbsMid<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>id<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> id<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-undefApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","    req<span class=\"k\">.</span>undef<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>moduleId<span class=\"k\">)</span> <span class=\"k\">{</span>","     <span class=\"c\">// In order to reload a module, it must be undefined (this routine) and then re-requested.</span>","     <span class=\"c\">// This is useful for testing frameworks (at least).</span>","       <span class=\"k\">var</span> ","         module<span class=\"k\">=</span> getModule<span class=\"k\">(</span>moduleId<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">),</span>","         pqn<span class=\"k\">=</span> module<span class=\"k\">.</span>pqn<span class=\"k\">;</span>","       setDel<span class=\"k\">(</span>modules<span class=\"k\">,</span> pqn<span class=\"k\">);</span>","       setDel<span class=\"k\">(</span>waiting<span class=\"k\">,</span> pqn<span class=\"k\">);</span>","       setDel<span class=\"k\">(</span>injectedUrls<span class=\"k\">,</span> module<span class=\"k\">.</span>url<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-traceApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","    <span class=\"c\">// these make debugging nice</span>","    <span class=\"k\">var</span>","      symbols<span class=\"k\">=</span> ","        <span class=\"k\">{}</span><span class=\"k\">,</span>","","      symbol<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> symbols<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">(</span>symbols<span class=\"k\">[</span>name<span class=\"k\">]=</span> <span class=\"k\">{</span>value<span class=\"k\">:</span>name<span class=\"k\">}</span><span class=\"k\">);</span>    ","      <span class=\"k\">}</span><span class=\"k\">;</span>","","    requested <span class=\"k\">=</span>symbol<span class=\"k\">(</span><span class=\"s\">\"requested\"</span><span class=\"k\">);</span>","    arrived   <span class=\"k\">=</span>symbol<span class=\"k\">(</span><span class=\"s\">\"arrived\"</span><span class=\"k\">);</span>","    nonmodule <span class=\"k\">=</span>symbol<span class=\"k\">(</span><span class=\"s\">\"not-a-module\"</span><span class=\"k\">);</span>","  <span class=\"k\">}</span>","","","  <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-injectApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span>","      injectedUrls<span class=\"k\">=</span> ","        <span class=\"c\">///</span>","        <span class=\"c\">// hash:(pqn)--&gt;(requested | arrived)</span>","        <span class=\"c\">///</span>","        <span class=\"c\">//note</span>","        <span class=\"c\">// `requested` and `arrived` give \"symbol-like\" behavior since JavaScript doesn't have symbole; See</span>","        <span class=\"c\">// bd.symbol for an in-depth explanation.</span>","        <span class=\"c\">//</span>","        <span class=\"k\">{}</span><span class=\"k\">,</span>"," ","      injectPlugin<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>","        module<span class=\"k\">,</span>","        immediate","      <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// injects the plugin module given by module; may have to inject the plugin itself</span>","        <span class=\"k\">var</span> ","          pqn<span class=\"k\">=</span> module<span class=\"k\">.</span>pqn<span class=\"k\">,</span>","          onload<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>def<span class=\"k\">)</span> <span class=\"k\">{</span>","            mix<span class=\"k\">(</span>module<span class=\"k\">,</span> <span class=\"k\">{</span>executed<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span> result<span class=\"k\">:</span>def<span class=\"k\">}</span><span class=\"k\">);</span>           ","            setDel<span class=\"k\">(</span>waiting<span class=\"k\">,</span> pqn<span class=\"k\">);</span>","            checkComplete<span class=\"k\">();</span>","          <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>cache<span class=\"k\">[</span>pqn<span class=\"k\">])</span> <span class=\"k\">{</span>","          onload<span class=\"k\">(</span>cache<span class=\"k\">[</span>pqn<span class=\"k\">]);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> plugin<span class=\"k\">=</span> module<span class=\"k\">.</span>plugin<span class=\"k\">;</span>","          <span class=\"k\">if</span> <span class=\"k\">(!</span>plugin<span class=\"k\">.</span>load<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>plugin<span class=\"k\">.</span>executed<span class=\"k\">)</span> <span class=\"k\">{</span>","              plugin<span class=\"k\">.</span>load<span class=\"k\">=</span> plugin<span class=\"k\">.</span>result<span class=\"k\">.</span>load<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!</span>immediate<span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"c\">// don't go loading the plugin if were just looking for an immediate</span>","              <span class=\"c\">// make the client properly demand the module</span>","              plugin<span class=\"k\">.</span>loadQ<span class=\"k\">=</span> <span class=\"k\">[];</span>","              plugin<span class=\"k\">.</span>load<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>id<span class=\"k\">,</span> require<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","                plugin<span class=\"k\">.</span>loadQ<span class=\"k\">.</span>push<span class=\"k\">([</span>id<span class=\"k\">,</span> require<span class=\"k\">,</span> callback<span class=\"k\">]);</span>","              <span class=\"k\">}</span><span class=\"k\">;</span>","              injectModule<span class=\"k\">(</span>plugin<span class=\"k\">);</span>","              <span class=\"c\">// try to get plugins executed ASAP since they are presumably needed</span>","              <span class=\"c\">// to load dependencies for other modules</span>","              execQ<span class=\"k\">.</span>unshift<span class=\"k\">(</span>plugin<span class=\"k\">);</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","          <span class=\"k\">!</span>immediate <span class=\"k\">&amp;&amp;</span> setIns<span class=\"k\">(</span>waiting<span class=\"k\">,</span> pqn<span class=\"k\">);</span>","          plugin<span class=\"k\">.</span>load <span class=\"k\">&amp;&amp;</span> plugin<span class=\"k\">.</span>load<span class=\"k\">(</span>module<span class=\"k\">.</span>mid<span class=\"k\">,</span> module<span class=\"k\">.</span>req<span class=\"k\">,</span> onload<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      <span class=\"c\">// for IE, injecting a module may result in a recursive execution if the module is in the cache</span>","      <span class=\"c\">// the injecting stack informs define what is currently being injected in such cases</span>","      injecting<span class=\"k\">=</span> <span class=\"k\">[],</span>","","      injectModule<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>","        module","      <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// Inject the module. In the browser environment, this means appending a script element into </span>","        <span class=\"c\">// the head; in other environments, it means loading a file.</span>","","        <span class=\"k\">var</span> pqn<span class=\"k\">=</span> module<span class=\"k\">.</span>pqn<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>module<span class=\"k\">.</span>injected <span class=\"k\">||</span> waiting<span class=\"k\">[</span>pqn<span class=\"k\">])</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>module<span class=\"k\">.</span>plugin<span class=\"k\">)</span> <span class=\"k\">{</span>","          injectPlugin<span class=\"k\">(</span>module<span class=\"k\">);</span>","          <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    ","        <span class=\"c\">// a normal module (not a plugin)</span>","        module<span class=\"k\">.</span>injected<span class=\"k\">=</span> requested<span class=\"k\">;</span>","        setIns<span class=\"k\">(</span>waiting<span class=\"k\">,</span> pqn<span class=\"k\">);</span>","        <span class=\"k\">var</span> url<span class=\"k\">=</span> module<span class=\"k\">.</span>url<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>injectedUrls<span class=\"k\">[</span>url<span class=\"k\">])</span> <span class=\"k\">{</span>","          <span class=\"c\">// the script has already been requested (two different modules resolve to the same URL)</span>","          <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","  ","        <span class=\"c\">// the url implied by module has not been requested; therefore, request it</span>","        <span class=\"c\">// note that it is possible for two different pqns to imply the same url</span>","        injectedUrls<span class=\"k\">[</span>url<span class=\"k\">]=</span> requested<span class=\"k\">;</span>","        <span class=\"k\">var</span> onLoadCallback<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> ","          injectedUrls<span class=\"k\">[</span>url<span class=\"k\">]=</span> arrived<span class=\"k\">;</span>","          setDel<span class=\"k\">(</span>waiting<span class=\"k\">,</span> pqn<span class=\"k\">);</span>","          runDefQ<span class=\"k\">(</span>module<span class=\"k\">);</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>module<span class=\"k\">.</span>injected<span class=\"k\">!==</span>arrived<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// the script that contained the module arrived and has been executed yet</span>","            <span class=\"c\">// the injected prop was not advanced to arrived; therefore, onModule must</span>","            <span class=\"c\">// not have been called; therefore, it must not have been a module (it was</span>","            <span class=\"c\">// just some code); adjust state accordingly</span>","            mix<span class=\"k\">(</span>module<span class=\"k\">,</span> <span class=\"k\">{</span>","              injected<span class=\"k\">:</span> arrived<span class=\"k\">,</span>","              deps<span class=\"k\">:</span> <span class=\"k\">[],</span>","              def<span class=\"k\">:</span> nonmodule<span class=\"k\">,</span>","              result<span class=\"k\">:</span> nonmodule","            <span class=\"k\">}</span><span class=\"k\">);</span>","          <span class=\"k\">}</span>","          checkComplete<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>cache<span class=\"k\">[</span>pqn<span class=\"k\">])</span> <span class=\"k\">{</span>","          injecting<span class=\"k\">.</span>push<span class=\"k\">(</span>module<span class=\"k\">);</span>","          cache<span class=\"k\">[</span>pqn<span class=\"k\">].</span>call<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","          injecting<span class=\"k\">.</span>pop<span class=\"k\">();</span>","          onLoadCallback<span class=\"k\">();</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          injecting<span class=\"k\">.</span>push<span class=\"k\">(</span>module<span class=\"k\">);</span>","          module<span class=\"k\">.</span>node<span class=\"k\">=</span> req<span class=\"k\">.</span>injectUrl<span class=\"k\">(</span>url<span class=\"k\">,</span> onLoadCallback<span class=\"k\">);</span>","          injecting<span class=\"k\">.</span>pop<span class=\"k\">();</span>","          startTimer<span class=\"k\">();</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      defQ<span class=\"k\">=</span> ","        <span class=\"c\">// The queue of define arguments sent to loader.</span>","        <span class=\"k\">[],</span>","  ","      defineModule<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>module<span class=\"k\">,</span> deps<span class=\"k\">,</span> def<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-traceApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","          req<span class=\"k\">.</span>trace<span class=\"k\">(</span><span class=\"s\">\"loader-defineModule\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>module<span class=\"k\">,</span> deps<span class=\"k\">]);</span>","        <span class=\"k\">}</span>","  ","        <span class=\"k\">var</span> pqn<span class=\"k\">=</span> module<span class=\"k\">.</span>pqn<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>module<span class=\"k\">.</span>injected<span class=\"k\">==</span>arrived<span class=\"k\">)</span> <span class=\"k\">{</span>","          req<span class=\"k\">.</span>onError<span class=\"k\">(</span><span class=\"s\">\"loader/multiple-define\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>pqn<span class=\"k\">]);</span> ","          <span class=\"k\">return</span> module<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        mix<span class=\"k\">(</span>module<span class=\"k\">,</span> <span class=\"k\">{</span>","          injected<span class=\"k\">:</span> arrived<span class=\"k\">,</span>","          deps<span class=\"k\">:</span> deps<span class=\"k\">,</span>","          def<span class=\"k\">:</span> def<span class=\"k\">,</span>","          cjs<span class=\"k\">:</span> <span class=\"k\">{</span>","            id<span class=\"k\">:</span> module<span class=\"k\">.</span>path<span class=\"k\">,</span>","            uri<span class=\"k\">:</span> module<span class=\"k\">.</span>url<span class=\"k\">,</span>","            exports<span class=\"k\">:</span> <span class=\"k\">(</span>module<span class=\"k\">.</span>result<span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">),</span>","            setExports<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>exports<span class=\"k\">)</span> <span class=\"k\">{</span>","              module<span class=\"k\">.</span>cjs<span class=\"k\">.</span>exports<span class=\"k\">=</span> exports<span class=\"k\">;</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"c\">// resolve deps with respect to pid</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>deps<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","          deps<span class=\"k\">[</span>i<span class=\"k\">]=</span> getModule<span class=\"k\">(</span>deps<span class=\"k\">[</span>i<span class=\"k\">],</span> module<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        setDel<span class=\"k\">(</span>waiting<span class=\"k\">,</span> pqn<span class=\"k\">);</span>","  ","        <span class=\"c\">// don't inject dependencies; wait until the current script has completed executing and then inject. </span>","        <span class=\"c\">// This allows several definitions to be contained within one script without prematurely requesting</span>","        <span class=\"c\">// resources from the server.</span>","","        <span class=\"k\">return</span> module<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","  ","      runDefQ<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>referenceModule<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">//defQ is an array of [id, dependencies, factory]</span>","        <span class=\"k\">var</span>","          definedModules<span class=\"k\">=</span> <span class=\"k\">[],</span>","          module<span class=\"k\">,</span> args<span class=\"k\">;</span>","        <span class=\"k\">while</span> <span class=\"k\">(</span>defQ<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","          args<span class=\"k\">=</span> defQ<span class=\"k\">.</span>shift<span class=\"k\">();</span>","          <span class=\"c\">// explicit define indicates possible multiple modules in a single file; delay injecting dependencies until defQ fully</span>","          <span class=\"c\">// processed since modules earlier in the queue depend on already-arrived modules that are later in the queue</span>","          <span class=\"c\">// TODO: what if no args[0] and no referenceModule</span>","          module<span class=\"k\">=</span> args<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> getModule<span class=\"k\">(</span>args<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">])</span> <span class=\"k\">||</span> referenceModule<span class=\"k\">;</span>","          definedModules<span class=\"k\">.</span>push<span class=\"k\">(</span>defineModule<span class=\"k\">(</span>module<span class=\"k\">,</span> args<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">],</span> args<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]));</span>","        <span class=\"k\">}</span>","        forEach<span class=\"k\">(</span>definedModules<span class=\"k\">,</span> injectDependencies<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>"," ","  <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-timeoutApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span>","      <span class=\"c\">// Timer machinery that monitors how long the loader is waiting and signals</span>","      <span class=\"c\">// an error when the timer runs out.</span>","      timerId<span class=\"k\">=</span>","        <span class=\"s\">0</span><span class=\"k\">,</span>","  ","      clearTimer<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        timerId <span class=\"k\">&amp;&amp;</span> clearTimeout<span class=\"k\">(</span>timerId<span class=\"k\">);</span>","        timerId<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","  ","      startTimer<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        clearTimer<span class=\"k\">();</span>","        req<span class=\"k\">.</span>timeout <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>timerId<span class=\"k\">=</span> setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> ","          clearTimer<span class=\"k\">();</span>","          req<span class=\"k\">.</span>onError<span class=\"k\">(</span><span class=\"s\">\"loader/timeout\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>waiting<span class=\"k\">]);</span> ","        <span class=\"k\">}</span><span class=\"k\">,</span> req<span class=\"k\">.</span>timeout<span class=\"k\">));</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> ","      clearTimer<span class=\"k\">=</span> noop<span class=\"k\">,</span>","      startTimer<span class=\"k\">=</span> noop<span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"dom\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> doc<span class=\"k\">=</span> document<span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-pageLoadApi\"</span><span class=\"k\">)</span> <span class=\"k\">||</span> has<span class=\"k\">(</span><span class=\"s\">\"loader-injectApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> on<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">,</span> eventName<span class=\"k\">,</span> handler<span class=\"k\">,</span> useCapture<span class=\"k\">,</span> ieEventName<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// Add an event listener to a DOM node using the API appropriate for the current browser; </span>","        <span class=\"c\">// return a function that will disconnect the listener.</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"dom-addEventListener\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","          node<span class=\"k\">.</span>addEventListener<span class=\"k\">(</span>eventName<span class=\"k\">,</span> handler<span class=\"k\">,</span> <span class=\"k\">!!</span>useCapture<span class=\"k\">);</span>","          <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            node<span class=\"k\">.</span>removeEventListener<span class=\"k\">(</span>eventName<span class=\"k\">,</span> handler<span class=\"k\">,</span> <span class=\"k\">!!</span>useCapture<span class=\"k\">);</span>","          <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>ieEventName<span class=\"k\">!==</span><span class=\"k\">false</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            eventName<span class=\"k\">=</span> ieEventName <span class=\"k\">||</span> <span class=\"s\">\"on\"</span><span class=\"k\">+</span>eventName<span class=\"k\">;</span>","            node<span class=\"k\">.</span>attachEvent<span class=\"k\">(</span>eventName<span class=\"k\">,</span> handler<span class=\"k\">);</span>","            <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","              node<span class=\"k\">.</span>detachEvent<span class=\"k\">(</span>eventName<span class=\"k\">,</span> handler<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","          <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> noop<span class=\"k\">;</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-injectApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> head<span class=\"k\">=</span> doc<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"head\"</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">||</span> doc<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"html\"</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">];</span>","      req<span class=\"k\">.</span>injectUrl<span class=\"k\">=</span> req<span class=\"k\">.</span>injectUrl <span class=\"k\">||</span> <span class=\"k\">function</span><span class=\"k\">(</span>url<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// Append a script element to the head element with src=url; apply callback upon </span>","        <span class=\"c\">// detecting the script has loaded.</span>","        <span class=\"k\">var</span> ","          node<span class=\"k\">=</span> doc<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"script\"</span><span class=\"k\">),</span>","          onLoad<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            e<span class=\"k\">=</span> e <span class=\"k\">||</span> window<span class=\"k\">.</span>event<span class=\"k\">;</span>","            <span class=\"k\">var</span> node<span class=\"k\">=</span> e<span class=\"k\">.</span>target <span class=\"k\">||</span> e<span class=\"k\">.</span>srcElement<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>e<span class=\"k\">.</span>type<span class=\"k\">===</span><span class=\"s\">\"load\"</span> <span class=\"k\">||</span> <span class=\"s\">/complete|loaded/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>node<span class=\"k\">.</span>readyState<span class=\"k\">))</span> <span class=\"k\">{</span>","              disconnector<span class=\"k\">();</span>","              callback <span class=\"k\">&amp;&amp;</span> callback<span class=\"k\">();</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span><span class=\"k\">,</span>","          disconnector<span class=\"k\">=</span> on<span class=\"k\">(</span>node<span class=\"k\">,</span> <span class=\"s\">\"load\"</span><span class=\"k\">,</span> onLoad<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"onreadystatechange\"</span><span class=\"k\">);</span>","        node<span class=\"k\">.</span>src<span class=\"k\">=</span> url<span class=\"k\">;</span>","        node<span class=\"k\">.</span>type<span class=\"k\">=</span> <span class=\"s\">\"text/javascript\"</span><span class=\"k\">;</span>","        node<span class=\"k\">.</span>charset<span class=\"k\">=</span> <span class=\"s\">\"utf-8\"</span><span class=\"k\">;</span>","        head<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>node<span class=\"k\">);</span>","        <span class=\"k\">return</span> node<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>  ","    <span class=\"k\">}</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-sniffApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","      <span class=\"c\">// TODO: check that requirejs only sniff is not baseUrl</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>req<span class=\"k\">.</span>baseUrl<span class=\"k\">)</span> <span class=\"k\">{</span>","        req<span class=\"k\">.</span>baseUrl<span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> match<span class=\"k\">,</span> src<span class=\"k\">,</span> dataMain<span class=\"k\">,</span> scripts<span class=\"k\">=</span> doc<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"script\"</span><span class=\"k\">),</span> i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>scripts<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","          src<span class=\"k\">=</span> scripts<span class=\"k\">[</span>i<span class=\"k\">].</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"src\"</span><span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","          <span class=\"k\">if</span> <span class=\"k\">((</span>match<span class=\"k\">=</span> src<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">/require\\.js$/</span><span class=\"k\">)))</span> <span class=\"k\">{</span>","            req<span class=\"k\">.</span>baseUrl<span class=\"k\">=</span> src<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> match<span class=\"k\">.</span>index<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">\"./\"</span><span class=\"k\">;</span>","            dataMain<span class=\"k\">=</span> scripts<span class=\"k\">[</span>i<span class=\"k\">].</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"data-main\"</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>dataMain<span class=\"k\">)</span> <span class=\"k\">{</span>","              req<span class=\"k\">.</span>deps<span class=\"k\">=</span> req<span class=\"k\">.</span>deps <span class=\"k\">||</span> <span class=\"k\">[</span>dataMain<span class=\"k\">];</span>","            <span class=\"k\">}</span>","            <span class=\"c\">// remember the base node so other machinery can use it to pass parameters (e.g., djConfig)</span>","            req<span class=\"k\">.</span>baseNode<span class=\"k\">=</span> scripts<span class=\"k\">[</span>i<span class=\"k\">];</span>","            <span class=\"k\">break</span><span class=\"k\">;</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-pageLoadApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","      <span class=\"c\">// page load detect code derived from Dojo, Copyright (c) 2005-2010, The Dojo Foundation. Use, modification, and distribution subject to terms of license.</span>","","      <span class=\"c\">//warn</span>","      <span class=\"c\">// document.readyState does not work with Firefox before 3.6. To support</span>","      <span class=\"c\">// those browsers, manually init require.pageLoaded in configuration.</span>","    ","      <span class=\"c\">// require.pageLoaded can be set truthy to indicate the app \"knows\" the page is loaded and/or just wants it to behave as such</span>","      req<span class=\"k\">.</span>pageLoaded<span class=\"k\">=</span> req<span class=\"k\">.</span>pageLoaded <span class=\"k\">||</span> document<span class=\"k\">.</span>readyState<span class=\"k\">==</span><span class=\"s\">\"complete\"</span><span class=\"k\">;</span>","","      <span class=\"c\">// no need to detect if we already know...</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>req<span class=\"k\">.</span>pageLoaded<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span>","          loadDisconnector<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","          DOMContentLoadedDisconnector<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","          scrollIntervalId<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","          detectPageLoadedFired<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","          detectPageLoaded<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>detectPageLoadedFired<span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            detectPageLoadedFired<span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","      ","            <span class=\"k\">if</span> <span class=\"k\">(</span>scrollIntervalId<span class=\"k\">)</span> <span class=\"k\">{</span>","              clearInterval<span class=\"k\">(</span>scrollIntervalId<span class=\"k\">);</span>","              scrollIntervalId <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            loadDisconnector <span class=\"k\">&amp;&amp;</span> loadDisconnector<span class=\"k\">();</span>","            DOMContentLoadedDisconnector <span class=\"k\">&amp;&amp;</span> DOMContentLoadedDisconnector<span class=\"k\">();</span>","            req<span class=\"k\">.</span>pageLoaded<span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            onLoad<span class=\"k\">();</span>","          <span class=\"k\">}</span><span class=\"k\">;</span>","      ","        <span class=\"k\">if</span> <span class=\"k\">(!</span>req<span class=\"k\">.</span>pageLoaded<span class=\"k\">)</span> <span class=\"k\">{</span>","          loadDisconnector<span class=\"k\">=</span> on<span class=\"k\">(</span>window<span class=\"k\">,</span> <span class=\"s\">\"load\"</span><span class=\"k\">,</span> detectPageLoaded<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","          DOMContentLoadedDisconnector<span class=\"k\">=</span> on<span class=\"k\">(</span>doc<span class=\"k\">,</span> <span class=\"s\">\"DOMContentLoaded\"</span><span class=\"k\">,</span> detectPageLoaded<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(!</span>has<span class=\"k\">(</span><span class=\"s\">\"dom-addEventListener\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","          <span class=\"c\">// note: this code courtesy of James Burke (https://github.com/jrburke/requirejs)</span>","          <span class=\"c\">//DOMContentLoaded approximation, as found by Diego Perini:</span>","          <span class=\"c\">//http://javascript.nwbox.com/IEContentLoaded/</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>self <span class=\"k\">===</span> self<span class=\"k\">.</span>top<span class=\"k\">)</span> <span class=\"k\">{</span>","            scrollIntervalId <span class=\"k\">=</span> setInterval<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","              <span class=\"k\">try</span> <span class=\"k\">{</span>","                <span class=\"c\">//From this ticket:</span>","                <span class=\"c\">//http://bugs.dojotoolkit.org/ticket/11106,</span>","                <span class=\"c\">//In IE HTML Application (HTA), such as in a selenium test,</span>","                <span class=\"c\">//javascript in the iframe can't see anything outside</span>","                <span class=\"c\">//of it, so self===self.top is true, but the iframe is</span>","                <span class=\"c\">//not the top window and doScroll will be available</span>","                <span class=\"c\">//before document.body is set. Test document.body</span>","                <span class=\"c\">//before trying the doScroll trick.</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>doc<span class=\"k\">.</span>body<span class=\"k\">)</span> <span class=\"k\">{</span>","                  doc<span class=\"k\">.</span>documentElement<span class=\"k\">.</span>doScroll<span class=\"k\">(</span><span class=\"s\">\"left\"</span><span class=\"k\">);</span>","                  detectPageLoaded<span class=\"k\">();</span>","                <span class=\"k\">}</span>","              <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{}</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">30</span><span class=\"k\">);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">var</span> ","        loadQ<span class=\"k\">=</span> ","          <span class=\"c\">// The queue of functions waiting to execute as soon as all conditions given</span>","          <span class=\"c\">// in require.onLoad are satisfied; see require.onLoad</span>","          <span class=\"k\">[],</span>","","        onLoadRecursiveGuard<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","        onLoad<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","          <span class=\"k\">while</span> <span class=\"k\">(</span>execComplete<span class=\"k\">()</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>checkCompleteRecursiveGuard <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>onLoadRecursiveGuard <span class=\"k\">&amp;&amp;</span> req<span class=\"k\">.</span>pageLoaded <span class=\"k\">&amp;&amp;</span> loadQ<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">//guard against recursions into this function</span>","            onLoadRecursiveGuard<span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> f<span class=\"k\">=</span> loadQ<span class=\"k\">.</span>shift<span class=\"k\">();</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-catchApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","              <span class=\"k\">try</span> <span class=\"k\">{</span>","                f<span class=\"k\">();</span>","              <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                onLoadRecursiveGuard<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span>req<span class=\"k\">.</span>onError<span class=\"k\">(</span><span class=\"s\">\"loader/onLoad\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>e<span class=\"k\">]))</span> <span class=\"k\">{</span>","                  <span class=\"k\">throw</span> e<span class=\"k\">;</span>","                <span class=\"k\">}</span>","              <span class=\"k\">}</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","              f<span class=\"k\">();</span>","            <span class=\"k\">}</span>","            onLoadRecursiveGuard<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","      req<span class=\"k\">.</span>ready<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>","        context<span class=\"k\">,</span> <span class=\"c\">//(object) The context in which to run execute callback</span>","                 <span class=\"c\">//(function) callback, if context missing</span>","        callback <span class=\"c\">//(function) The function to execute.</span>","      <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">///</span>","        <span class=\"c\">// Add a function to execute on DOM content loaded and all requests have arrived and been evaluated.</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>callback<span class=\"k\">)</span> <span class=\"k\">{</span>","          loadQ<span class=\"k\">.</span>push<span class=\"k\">(</span>isString<span class=\"k\">(</span>callback<span class=\"k\">)</span> <span class=\"k\">?</span>","            <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>context<span class=\"k\">[</span>callback<span class=\"k\">]();</span><span class=\"k\">}</span> <span class=\"k\">:</span>","            <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>callback<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">);</span><span class=\"k\">}</span>","          <span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          loadQ<span class=\"k\">.</span>push<span class=\"k\">(</span>context<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        onLoad<span class=\"k\">();</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","      req<span class=\"k\">.</span>ready<span class=\"k\">=</span> noop<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-traceApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","    req<span class=\"k\">.</span>trace<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>","      group<span class=\"k\">,</span> <span class=\"c\">// the trace group to which this application belongs</span>","      args   <span class=\"c\">// the contents of the trace</span>","    <span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">///</span>","      <span class=\"c\">// Tracing interface by group.</span>","      <span class=\"c\">// </span>","      <span class=\"c\">// Sends the contents of args to the console iff require.trace[group] is truthy.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>req<span class=\"k\">.</span>traceSet<span class=\"k\">[</span>group<span class=\"k\">])</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"console-log-apply\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","          console<span class=\"k\">.</span>log<span class=\"k\">.</span>apply<span class=\"k\">(</span>console<span class=\"k\">,</span> <span class=\"k\">[</span>group<span class=\"k\">+</span><span class=\"s\">\": \"</span><span class=\"k\">].</span>concat<span class=\"k\">(</span>args<span class=\"k\">));</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          <span class=\"c\">//IE...</span>","          <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>args<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            console<span class=\"k\">.</span>log<span class=\"k\">(</span>args<span class=\"k\">[</span>i<span class=\"k\">]);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    req<span class=\"k\">.</span>trace<span class=\"k\">=</span> req<span class=\"k\">.</span>trace <span class=\"k\">||</span> noop<span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  <span class=\"c\">//</span>","  <span class=\"c\">// Error Detection and Recovery</span>","  <span class=\"c\">//</span>","  <span class=\"c\">// Several things can go wrong during loader operation:</span>","  <span class=\"c\">//</span>","  <span class=\"c\">// * A resource may not be accessible, giving a 404 error in the browser or a file error in other environments</span>","  <span class=\"c\">//   (this is usally caught by a loader timeout (see require.timeout) in the browser environment).</span>","  <span class=\"c\">// * The loader may timeout (after the period set by require.timeout) waiting for a resource to be delivered.</span>","  <span class=\"c\">// * Executing a module may cause an exception to be thrown.</span>","  <span class=\"c\">// * Executing the onLoad queue may cause an exception to be thrown.</span>","  <span class=\"c\">// </span>","  <span class=\"c\">// In all these cases, the loader publishes the problem to interested subscribers via the function require.onError.</span>","  <span class=\"c\">// If the error was an uncaught exception, then if some subscriber signals that it has taken actions to recover </span>","  <span class=\"c\">// and it is OK to continue by returning truthy, the exception is quashed; otherwise, the exception is rethrown. </span>","  <span class=\"c\">// Other error conditions are handled as applicable for the particular error.</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-errorApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> onError<span class=\"k\">=</span> req<span class=\"k\">.</span>onError<span class=\"k\">=</span> ","      <span class=\"k\">function</span><span class=\"k\">(</span>","        messageId<span class=\"k\">,</span> <span class=\"c\">//(string) The topic to publish</span>","        args       <span class=\"c\">//(array of anything, optional, undefined) The arguments to be applied to each subscriber.</span>","      <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">///</span>","        <span class=\"c\">// Publishes messageId to all subscribers, passing args; returns result as affected by subscribers.</span>","        <span class=\"c\">///</span>","        <span class=\"c\">// A listener subscribes by writing</span>","        <span class=\"c\">// </span>","        <span class=\"c\">//code</span>","        <span class=\"c\">// require.onError.listeners.push(myListener);</span>","        <span class=\"c\">///</span>","        <span class=\"c\">// The listener signature must be `function(messageId, args`) where messageId indentifies </span>","        <span class=\"c\">// where the exception was caught and args is an array of information gathered by the catch</span>","        <span class=\"c\">// clause. If the listener has taken corrective actions and want to stop the exception and</span>","        <span class=\"c\">// let the loader continue, it must return truthy. If no listener returns truthy, then</span>","        <span class=\"c\">// the exception is rethrown.</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> errorbacks<span class=\"k\">=</span> onError<span class=\"k\">.</span>listeners<span class=\"k\">,</span> result<span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">,</span> i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>errorbacks<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","          result<span class=\"k\">=</span> result <span class=\"k\">||</span> errorbacks<span class=\"k\">[</span>i<span class=\"k\">](</span>messageId<span class=\"k\">,</span> args<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        console<span class=\"k\">.</span>error<span class=\"k\">(</span>messageId<span class=\"k\">,</span> args<span class=\"k\">);</span>","        onError<span class=\"k\">.</span>log<span class=\"k\">.</span>push<span class=\"k\">(</span>args<span class=\"k\">);</span>","        <span class=\"k\">return</span> result<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    onError<span class=\"k\">.</span>listeners<span class=\"k\">=</span> <span class=\"k\">[];</span>","    onError<span class=\"k\">.</span>log<span class=\"k\">=</span> <span class=\"k\">[];</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    req<span class=\"k\">.</span>onError<span class=\"k\">=</span> req<span class=\"k\">.</span>onError <span class=\"k\">||</span> noop<span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">var</span> def<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>","    mid<span class=\"k\">,</span>          <span class=\"c\">//(commonjs.moduleId, optional) list of modules to be loaded before running factory</span>","    dependencies<span class=\"k\">,</span> <span class=\"c\">//(array of commonjs.moduleId, optional)</span>","    factory       <span class=\"c\">//(any)</span>","  <span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"c\">///</span>","    <span class=\"c\">// Advises the loader of a module factory. //Implements http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition.</span>","    <span class=\"c\">///</span>","    <span class=\"c\">//note</span>","    <span class=\"c\">// CommonJS factory scan courtesy of http://requirejs.org</span>","","    <span class=\"k\">var</span> ","      arity<span class=\"k\">=</span> arguments<span class=\"k\">.</span>length<span class=\"k\">,</span>","      args<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","      defaultDeps<span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"require\"</span><span class=\"k\">,</span> <span class=\"s\">\"exports\"</span><span class=\"k\">,</span> <span class=\"s\">\"module\"</span><span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>arity<span class=\"k\">==</span><span class=\"s\">3</span> <span class=\"k\">&amp;&amp;</span> dependencies<span class=\"k\">==</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// immediate signature</span>","      execModule<span class=\"k\">(</span>defineModule<span class=\"k\">(</span>getModule<span class=\"k\">(</span>mid<span class=\"k\">),</span> <span class=\"k\">[],</span> factory<span class=\"k\">));</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-amdFactoryScan\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>arity<span class=\"k\">==</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        dependencies<span class=\"k\">=</span> <span class=\"k\">[];</span>","        mid<span class=\"k\">.</span>toString<span class=\"k\">()</span>","          <span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/(\\/\\*([\\s\\S]*?)\\*\\/|\\/\\/(.*)$)/mg</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span>","          <span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/require\\([\"']([\\w\\!\\-_\\.\\/]+)[\"']\\)/g</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>match<span class=\"k\">,</span> dep<span class=\"k\">)</span> <span class=\"k\">{</span>","            dependencies<span class=\"k\">.</span>push<span class=\"k\">(</span>dep<span class=\"k\">);</span>","          <span class=\"k\">}</span><span class=\"k\">);</span>","        args<span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">,</span> defaultDeps<span class=\"k\">.</span>concat<span class=\"k\">(</span>dependencies<span class=\"k\">),</span> mid<span class=\"k\">];</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>args<span class=\"k\">)</span> <span class=\"k\">{</span>","      args<span class=\"k\">=</span> arity<span class=\"k\">==</span><span class=\"s\">1</span> <span class=\"k\">?</span> <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">,</span> defaultDeps<span class=\"k\">,</span> mid<span class=\"k\">]</span> <span class=\"k\">:</span>","                       <span class=\"k\">(</span>arity<span class=\"k\">==</span><span class=\"s\">2</span> <span class=\"k\">?</span> <span class=\"k\">(</span>isArray<span class=\"k\">(</span>mid<span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">,</span> mid<span class=\"k\">,</span> dependencies<span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">[</span>mid<span class=\"k\">,</span> defaultDeps<span class=\"k\">,</span> dependencies<span class=\"k\">])</span> <span class=\"k\">:</span>","                                                   <span class=\"k\">[</span>mid<span class=\"k\">,</span> dependencies<span class=\"k\">,</span> factory<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-traceApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","      req<span class=\"k\">.</span>trace<span class=\"k\">(</span><span class=\"s\">\"loader-define\"</span><span class=\"k\">,</span> args<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">));</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>args<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">])</span> <span class=\"k\">{</span>","      <span class=\"c\">// if given a mid, always define the module immediately </span>","      <span class=\"c\">// (no reason to give auto-detect algorithms below a chance to find an edge case to that doesn't work!)</span>","      injectDependencies<span class=\"k\">(</span>defineModule<span class=\"k\">(</span>getModule<span class=\"k\">(</span>args<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]),</span> args<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">],</span> args<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]));</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","      <span class=\"c\">// anonymous module; therefore module id is implied by the resource being loaded</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"dom-addEventListener\"</span><span class=\"k\">)</span> <span class=\"k\">||</span> has<span class=\"k\">(</span><span class=\"s\">\"loader-node\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"c\">// not IE; therefore, onLoad will fire immediately after script finishes being evaluated</span>","        <span class=\"c\">// and the defQ can be run from that callback to detect the module id</span>","        defQ<span class=\"k\">.</span>push<span class=\"k\">(</span>args<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"c\">// IE; therefore, cannot depend on 1-to-1, in-order exec of onLoad with script eval and must manually detect here</span>","        <span class=\"k\">var</span> ","          length<span class=\"k\">=</span> injecting<span class=\"k\">.</span>length<span class=\"k\">,</span>","          targetModule<span class=\"k\">=</span> length <span class=\"k\">&amp;&amp;</span> injecting<span class=\"k\">[</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">],</span>","          pqn<span class=\"k\">,</span> module<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>targetModule<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">for</span> <span class=\"k\">(</span>pqn <span class=\"k\">in</span> waiting<span class=\"k\">)</span> <span class=\"k\">{</span>","            module<span class=\"k\">=</span> modules<span class=\"k\">[</span>pqn<span class=\"k\">];</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>module<span class=\"k\">.</span>node <span class=\"k\">&amp;&amp;</span> module<span class=\"k\">.</span>node<span class=\"k\">.</span>readyState <span class=\"k\">===</span> <span class=\"s\">'interactive'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","              targetModule<span class=\"k\">=</span> module<span class=\"k\">;</span>","              <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>targetModule<span class=\"k\">)</span> <span class=\"k\">{</span>","          injectDependencies<span class=\"k\">(</span>defineModule<span class=\"k\">(</span>targetModule<span class=\"k\">,</span> args<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">],</span> args<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]));</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          req<span class=\"k\">.</span>onError<span class=\"k\">(</span><span class=\"s\">\"loader/define-ie\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-createHasModule\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","    mix<span class=\"k\">(</span>getModule<span class=\"k\">(</span><span class=\"s\">\"has\"</span><span class=\"k\">),</span> <span class=\"k\">{</span>injected<span class=\"k\">:</span>arrived<span class=\"k\">,</span> deps<span class=\"k\">:[],</span> executed<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span> result<span class=\"k\">:</span>has<span class=\"k\">}</span><span class=\"k\">);</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-publish-privates\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","    mix<span class=\"k\">(</span>req<span class=\"k\">,</span> <span class=\"k\">{</span>","      <span class=\"c\">// these may be interesting for other modules to use</span>","      isEmpty<span class=\"k\">:</span>isEmpty<span class=\"k\">,</span>","      isFunction<span class=\"k\">:</span>isFunction<span class=\"k\">,</span>","      isString<span class=\"k\">:</span>isString<span class=\"k\">,</span>","      isArray<span class=\"k\">:</span>isArray<span class=\"k\">,</span>","      forEach<span class=\"k\">:</span>forEach<span class=\"k\">,</span>","      setIns<span class=\"k\">:</span>setIns<span class=\"k\">,</span>","      setDel<span class=\"k\">:</span>setDel<span class=\"k\">,</span>","      mix<span class=\"k\">:</span>mix<span class=\"k\">,</span>","      uid<span class=\"k\">:</span>uid<span class=\"k\">,</span>","      on<span class=\"k\">:</span>on<span class=\"k\">,</span>","  ","      <span class=\"c\">// these may be interesting to look at when debugging</span>","      paths<span class=\"k\">:</span>paths<span class=\"k\">,</span>","      packages<span class=\"k\">:</span>packages<span class=\"k\">,</span>","      modules<span class=\"k\">:</span>modules<span class=\"k\">,</span>","      execQ<span class=\"k\">:</span>execQ<span class=\"k\">,</span>","      defQ<span class=\"k\">:</span>defQ<span class=\"k\">,</span>","      waiting<span class=\"k\">:</span>waiting<span class=\"k\">,</span>","      injectedUrls<span class=\"k\">:</span>injectedUrls<span class=\"k\">,</span>","      loadQ<span class=\"k\">:</span>loadQ<span class=\"k\">,</span>","  ","      <span class=\"c\">// these are used by bdBuild (at least)</span>","      computeMapProg<span class=\"k\">:</span>computeMapProg<span class=\"k\">,</span>","      runMapProg<span class=\"k\">:</span>runMapProg<span class=\"k\">,</span>","      compactPath<span class=\"k\">:</span>compactPath<span class=\"k\">,</span>","      transformPath<span class=\"k\">:</span>transformPath<span class=\"k\">,</span>","      getModuleInfo<span class=\"k\">:</span>getModuleInfo","    <span class=\"k\">}</span><span class=\"k\">);</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-node\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","    <span class=\"c\">// publish require as a property of define; the node bootstrap will export this and then delete it</span>","    def<span class=\"k\">.</span>require<span class=\"k\">=</span> req<span class=\"k\">;</span>","    global<span class=\"k\">.</span>define<span class=\"k\">=</span> def<span class=\"k\">;</span>","    req<span class=\"k\">.</span>deps<span class=\"k\">=</span> req<span class=\"k\">.</span>deps <span class=\"k\">||</span> <span class=\"k\">[];</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    define<span class=\"k\">=</span> def<span class=\"k\">;</span>","    require<span class=\"k\">=</span> req<span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-requirejsApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","    req<span class=\"k\">.</span>def<span class=\"k\">=</span> define<span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>has<span class=\"k\">(</span><span class=\"s\">\"loader-injectApi\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","    doWork<span class=\"k\">(</span>req<span class=\"k\">.</span>deps<span class=\"k\">,</span> req<span class=\"k\">.</span>callback<span class=\"k\">,</span> userConfig<span class=\"k\">.</span>ready<span class=\"k\">);</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    <span class=\"c\">// the cache holds a map from pqn to {deps, def} of all modules that should be instantiated</span>","    <span class=\"c\">// in this mode, path and url are useless, and therefore not initialized</span>","    <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> p<span class=\"k\">;</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>p <span class=\"k\">in</span> cache<span class=\"k\">)</span> <span class=\"k\">{</span>","        modules<span class=\"k\">[</span>p<span class=\"k\">]=</span> cache<span class=\"k\">[</span>p<span class=\"k\">];</span>","      <span class=\"k\">}</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>p <span class=\"k\">in</span> cache<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> module<span class=\"k\">=</span> modules<span class=\"k\">[</span>p<span class=\"k\">];</span>","        module<span class=\"k\">.</span>pqn<span class=\"k\">=</span> p<span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>deps<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","          deps<span class=\"k\">[</span>i<span class=\"k\">]=</span> getModule<span class=\"k\">(</span>deps<span class=\"k\">[</span>i<span class=\"k\">],</span> module<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        execQ<span class=\"k\">.</span>push<span class=\"k\">(</span>module<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      doCheckComplete<span class=\"k\">();</span>","    <span class=\"k\">}</span><span class=\"k\">)();</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">)</span>","<span class=\"c\">// begin default bootstrap configuration</span>","<span class=\"c\">// note: typically, some or all of these arguments are replaced when compiling the loader for a particular target</span>","<span class=\"k\">(</span>","  <span class=\"c\">// the user can send in a configuration by defining a global require object</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>require <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">,</span> ","","  <span class=\"c\">// default configuration</span>","  <span class=\"k\">{</span>","    vendor<span class=\"k\">:</span><span class=\"s\">\"altoviso.com\"</span><span class=\"k\">,</span>","    version<span class=\"k\">:</span><span class=\"s\">\"1.0-beta\"</span><span class=\"k\">,</span>","    baseUrl<span class=\"k\">:</span><span class=\"s\">\".\"</span><span class=\"k\">,</span>","    host<span class=\"k\">:</span><span class=\"s\">\"browser\"</span><span class=\"k\">,</span>","    isBrowser<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","    timeout<span class=\"k\">:</span><span class=\"s\">0</span><span class=\"k\">,</span>","    traceSet<span class=\"k\">:</span><span class=\"k\">{</span>","      <span class=\"c\">// these are listed so its simple to turn them on/off while debugging bdLoad</span>","      <span class=\"s\">\"loader-define\"</span><span class=\"k\">:</span><span class=\"s\">0</span><span class=\"k\">,</span>","      <span class=\"s\">\"loader-runFactory\"</span><span class=\"k\">:</span><span class=\"s\">0</span><span class=\"k\">,</span>","      <span class=\"s\">\"loader-execModule\"</span><span class=\"k\">:</span><span class=\"s\">0</span><span class=\"k\">,</span>","      <span class=\"s\">\"loader-execModule-out\"</span><span class=\"k\">:</span><span class=\"s\">0</span><span class=\"k\">,</span>","      <span class=\"s\">\"loader-defineModule\"</span><span class=\"k\">:</span><span class=\"s\">0</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">// has.js</span>","  <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"c\">// if has is not provided, define a standard implementation</span>","    <span class=\"c\">// this implementation adopted from https://github.com/phiggins42/has.js</span>","    <span class=\"k\">var</span>","      global<span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","      doc<span class=\"k\">=</span> document<span class=\"k\">,</span>","      element<span class=\"k\">=</span> doc<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"div\"</span><span class=\"k\">),</span>","      cache<span class=\"k\">=</span> <span class=\"k\">{</span>","        <span class=\"s\">\"dom\"</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","        <span class=\"s\">\"dom-addEventListener\"</span><span class=\"k\">:!!</span>document<span class=\"k\">.</span>addEventListener<span class=\"k\">,</span>","        <span class=\"s\">\"console\"</span><span class=\"k\">:</span><span class=\"k\">typeof</span> console<span class=\"k\">!=</span><span class=\"s\">\"undefined\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"console-log-apply\"</span><span class=\"k\">:!!(</span><span class=\"k\">typeof</span> console<span class=\"k\">!=</span><span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> console<span class=\"k\">.</span>log <span class=\"k\">&amp;&amp;</span> console<span class=\"k\">.</span>log<span class=\"k\">.</span>apply<span class=\"k\">),</span>","        <span class=\"s\">\"loader-injectApi\"</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","        <span class=\"s\">\"loader-timeoutApi\"</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","        <span class=\"s\">\"loader-traceApi\"</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","        <span class=\"s\">\"loader-catchApi\"</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","        <span class=\"s\">\"loader-pageLoadApi\"</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","        <span class=\"s\">\"loader-errorApi\"</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","        <span class=\"s\">\"loader-sniffApi\"</span><span class=\"k\">:</span><span class=\"s\">0</span><span class=\"k\">,</span>","        <span class=\"s\">\"loader-undefApi\"</span><span class=\"k\">:</span><span class=\"s\">0</span><span class=\"k\">,</span>","        <span class=\"s\">\"loader-requirejsApi\"</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","        <span class=\"s\">\"loader-createHasModule\"</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","        <span class=\"s\">\"loader-amdFactoryScan\"</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","        <span class=\"s\">\"loader-publish-privates\"</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","        <span class=\"s\">\"native-xhr\"</span><span class=\"k\">:!!</span><span class=\"k\">this</span><span class=\"k\">.</span>XMLHttpRequest","      <span class=\"k\">}</span><span class=\"k\">,</span>","      has<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> cache<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          cache<span class=\"k\">[</span>name<span class=\"k\">]=</span> cache<span class=\"k\">[</span>name<span class=\"k\">](</span>global<span class=\"k\">,</span> doc<span class=\"k\">,</span> element<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> cache<span class=\"k\">[</span>name<span class=\"k\">];</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","      has<span class=\"k\">.</span>cache<span class=\"k\">=</span> cache<span class=\"k\">;</span>","      has<span class=\"k\">.</span>add<span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> test<span class=\"k\">,</span> now<span class=\"k\">)</span> <span class=\"k\">{</span>","        cache<span class=\"k\">[</span>name<span class=\"k\">]=</span> now <span class=\"k\">?</span> test<span class=\"k\">(</span>global<span class=\"k\">,</span> doc<span class=\"k\">,</span> element<span class=\"k\">)</span> <span class=\"k\">:</span> test<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>has<span class=\"k\">)</span> <span class=\"k\">{</span>","        has<span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>has<span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> p <span class=\"k\">in</span> cache<span class=\"k\">)</span> <span class=\"k\">{</span>","          has<span class=\"k\">.</span>add<span class=\"k\">(</span>p<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">return</span> cach<span class=\"k\">[</span>p<span class=\"k\">];</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> has<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">)()</span>","<span class=\"k\">);</span>","<span class=\"c\">// Copyright (c) 2008-2010, Rawld Gill and ALTOVISO LLC (www.altoviso.com). Use, modification, and distribution subject to terms of license.</span>"];
_$jscoverage['require.js'][1]++;
(function (userConfig, defaultConfig, has) {
  _$jscoverage['require.js'][79]++;
  var bd = {docGen: noop}, req = (function (config, dependencies, callback) {
  _$jscoverage['require.js'][98]++;
  return contextRequire(config, dependencies, callback, 0, req);
});
  _$jscoverage['require.js'][101]++;
  req.has = (has = (userConfig.has || this.has || has));
  _$jscoverage['require.js'][103]++;
  var noop = (function () {
}), isEmpty = (function (it) {
  _$jscoverage['require.js'][109]++;
  for (var p in it) {
    _$jscoverage['require.js'][109]++;
    return 0;
}
  _$jscoverage['require.js'][110]++;
  return 1;
}), toString = ({}).toString, testPrefix = "[object ", functionMarker = (testPrefix + "Function]"), arrayMarker = (testPrefix + "Array]"), stringMarker = (testPrefix + "String]"), isFunction = (function (it) {
  _$jscoverage['require.js'][120]++;
  return (toString.call(it) == functionMarker);
}), isString = (function (it) {
  _$jscoverage['require.js'][124]++;
  return (toString.call(it) == stringMarker);
}), isArray = (function (it) {
  _$jscoverage['require.js'][128]++;
  return (toString.call(it) == arrayMarker);
}), forEach = (function (vector, callback) {
  _$jscoverage['require.js'][132]++;
  for (var i = 0; (vector && (i < vector.length));) {
    _$jscoverage['require.js'][132]++;
    callback(vector[(i++)]);
}
}), setIns = (function (set, name) {
  _$jscoverage['require.js'][136]++;
  set[name] = 1;
}), setDel = (function (set, name) {
  _$jscoverage['require.js'][140]++;
  (delete set[name]);
}), mix = (function (dest, src) {
  _$jscoverage['require.js'][144]++;
  for (var p in src) {
    _$jscoverage['require.js'][144]++;
    dest[p] = src[p];
}
  _$jscoverage['require.js'][145]++;
  return dest;
}), escapeRegEx = (function (s) {
  _$jscoverage['require.js'][149]++;
  return s.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, (function (c) {
  _$jscoverage['require.js'][150]++;
  return ("\\" + c);
}));
}), uidSeed = 1, uid = (function () {
  _$jscoverage['require.js'][161]++;
  return ("_" + (uidSeed++));
}), requested = {}, arrived = {}, nonmodule = {}, pathTransforms = (req.pathTransforms = []), paths = {}, pathsMapProg = [], packages = {}, packageMap = {}, packageMapProg = [], modules = {}, cache = {}, computeMapProg = (function (map) {
  _$jscoverage['require.js'][249]++;
  var p, i, item, mapProg = [];
  _$jscoverage['require.js'][250]++;
  for (p in map) {
    _$jscoverage['require.js'][250]++;
    mapProg.push([p, map[p]]);
}
  _$jscoverage['require.js'][251]++;
  mapProg.sort((function (lhs, rhs) {
  _$jscoverage['require.js'][251]++;
  return (rhs[0].length - lhs[0].length);
}));
  _$jscoverage['require.js'][252]++;
  for (i = 0; (i < mapProg.length);) {
    _$jscoverage['require.js'][253]++;
    item = mapProg[(i++)];
    _$jscoverage['require.js'][254]++;
    item[2] = new RegExp(("^" + escapeRegEx(item[0]) + "(/|$)"));
    _$jscoverage['require.js'][255]++;
    item[3] = (item[0].length + 1);
}
  _$jscoverage['require.js'][257]++;
  return mapProg;
}), fixupPackageInfo = (function (packageInfo, baseUrl) {
  _$jscoverage['require.js'][262]++;
  baseUrl = (baseUrl || "");
  _$jscoverage['require.js'][263]++;
  packageInfo = mix({lib: "lib", main: "main", pathTransforms: []}, (isString(packageInfo)? {name: packageInfo}: packageInfo));
  _$jscoverage['require.js'][264]++;
  packageInfo.location = (baseUrl + (packageInfo.location? packageInfo.location: packageInfo.name));
  _$jscoverage['require.js'][265]++;
  packageInfo.mapProg = computeMapProg(packageInfo.packageMap);
  _$jscoverage['require.js'][266]++;
  var name = packageInfo.name;
  _$jscoverage['require.js'][269]++;
  packages[name] = packageInfo;
  _$jscoverage['require.js'][270]++;
  packageMap[name] = name;
}), doWork = (function (deps, callback, onLoadCallback) {
  _$jscoverage['require.js'][274]++;
  (((deps && deps.length) || callback) && req((deps || []), (callback || noop)));
  _$jscoverage['require.js'][275]++;
  (onLoadCallback && req.ready(onLoadCallback));
}), config = (function (config, booting) {
  _$jscoverage['require.js'][280]++;
  var p, i, transforms;
  _$jscoverage['require.js'][287]++;
  for (p in config) {
    _$jscoverage['require.js'][287]++;
    if ((! /pathTransforms|paths|packages|packageMap|packagePaths|cache|ready/.test(p))) {
      _$jscoverage['require.js'][288]++;
      req[p] = config[p];
    }
}
  _$jscoverage['require.js'][289]++;
  ;
  _$jscoverage['require.js'][292]++;
  if ((! req.baseUrl)) {
    _$jscoverage['require.js'][293]++;
    req.baseUrl = "./";
  }
  else {
    _$jscoverage['require.js'][294]++;
    if ((! /\/$/.test(req.baseUrl))) {
      _$jscoverage['require.js'][295]++;
      req.baseUrl += "/";
    }
  }
  _$jscoverage['require.js'][299]++;
  for (((transforms = config.pathTransforms), (i = 0)); (transforms && (i < transforms.length)); (i++)) {
    _$jscoverage['require.js'][300]++;
    pathTransforms.push(transforms[i]);
}
  _$jscoverage['require.js'][304]++;
  pathsMapProg = computeMapProg(mix(paths, config.paths));
  _$jscoverage['require.js'][307]++;
  forEach(config.packages, fixupPackageInfo);
  _$jscoverage['require.js'][310]++;
  for (baseUrl in config.packagePaths) {
    _$jscoverage['require.js'][311]++;
    forEach(config.packagePaths[baseUrl], (function (packageInfo) {
  _$jscoverage['require.js'][312]++;
  fixupPackageInfo(packageInfo, (baseUrl + "/"));
}));
}
  _$jscoverage['require.js'][317]++;
  packageMapProg = computeMapProg(mix(packageMap, config.packageMap));
  _$jscoverage['require.js'][320]++;
  mix(cache, config.cache);
  _$jscoverage['require.js'][322]++;
  if ((! booting)) {
    _$jscoverage['require.js'][323]++;
    doWork(config.deps, config.callback, config.ready);
  }
});
  _$jscoverage['require.js'][328]++;
  config(defaultConfig, 1);
  _$jscoverage['require.js'][329]++;
  config(userConfig, 1);
  _$jscoverage['require.js'][334]++;
  if (has("loader-node")) {
    _$jscoverage['require.js'][335]++;
    if (isFunction(global.define)) {
      _$jscoverage['require.js'][336]++;
      console.log("global define already defined; did you try to load multiple AMD loaders?");
      _$jscoverage['require.js'][337]++;
      return;
    }
  }
  else {
    _$jscoverage['require.js'][340]++;
    if (isFunction(this.define)) {
      _$jscoverage['require.js'][341]++;
      console.error("global define already defined; did you try to load multiple AMD loaders?");
      _$jscoverage['require.js'][342]++;
      return;
    }
  }
  _$jscoverage['require.js'][347]++;
  var injectDependencies = (function (module) {
  _$jscoverage['require.js'][349]++;
  forEach(module.deps, injectModule);
}), contextRequire = (function (a1, a2, a3, referenceModule, contextRequire) {
  _$jscoverage['require.js'][353]++;
  var module, syntheticMid;
  _$jscoverage['require.js'][354]++;
  if (isString(a1)) {
    _$jscoverage['require.js'][356]++;
    module = getModule(a1, referenceModule);
    _$jscoverage['require.js'][357]++;
    if (module.plugin) {
      _$jscoverage['require.js'][358]++;
      injectPlugin(module, true);
    }
    _$jscoverage['require.js'][360]++;
    return module.result;
  }
  _$jscoverage['require.js'][362]++;
  if ((! isArray(a1))) {
    _$jscoverage['require.js'][364]++;
    config(a1);
    _$jscoverage['require.js'][367]++;
    a1 = a2;
    _$jscoverage['require.js'][368]++;
    a2 = a3;
  }
  _$jscoverage['require.js'][370]++;
  if (isArray(a1)) {
    _$jscoverage['require.js'][374]++;
    for (var i = 0; (i < a1.length); (i++)) {
      _$jscoverage['require.js'][375]++;
      a1[i] = getModule(a1[i], referenceModule);
}
    _$jscoverage['require.js'][379]++;
    syntheticMid = uid();
    _$jscoverage['require.js'][380]++;
    module = mix(makeModuleInfo("", syntheticMid, ("*" + syntheticMid), 0, "", ""), {injected: arrived, deps: a1, def: (a2 || noop)});
    _$jscoverage['require.js'][385]++;
    injectDependencies(module);
    _$jscoverage['require.js'][387]++;
    if ((execModule(module) === abortExec)) {
      _$jscoverage['require.js'][389]++;
      execQ.push(module);
    }
  }
  _$jscoverage['require.js'][392]++;
  return contextRequire;
}), createRequire = (function (module) {
  _$jscoverage['require.js'][396]++;
  var result = module.require;
  _$jscoverage['require.js'][397]++;
  if ((! result)) {
    _$jscoverage['require.js'][398]++;
    result = (function (a1, a2, a3) {
  _$jscoverage['require.js'][399]++;
  return contextRequire(a1, a2, a3, module, result);
});
    _$jscoverage['require.js'][401]++;
    module.require = mix(result, req);
    _$jscoverage['require.js'][402]++;
    result.nameToUrl = (result.toUrl = (function (name, ext) {
  _$jscoverage['require.js'][403]++;
  return nameToUrl(name, ext, module);
}));
    _$jscoverage['require.js'][405]++;
    result.toAbsMid = (function (mid) {
  _$jscoverage['require.js'][406]++;
  return getModuleInfo(mid, module, packages, modules, req.baseUrl, ".", packageMapProg, pathsMapProg, pathTransforms).path;
});
    _$jscoverage['require.js'][408]++;
    if (has("loader-undefApi")) {
      _$jscoverage['require.js'][409]++;
      result.undef = (function (moduleId) {
  _$jscoverage['require.js'][412]++;
  var module = getModule(moduleId, module), pqn = module.pqn;
  _$jscoverage['require.js'][415]++;
  setDel(modules, pqn);
  _$jscoverage['require.js'][416]++;
  setDel(waiting, pqn);
  _$jscoverage['require.js'][417]++;
  setDel(injectedUrls, module.url);
});
    }
  }
  _$jscoverage['require.js'][421]++;
  return result;
}), execQ = [], waiting = {}, execComplete = (function () {
  _$jscoverage['require.js'][436]++;
  return (defQ && (! defQ.length) && isEmpty(waiting) && (! execQ.length));
}), runMapProg = (function (targetMid, map) {
  _$jscoverage['require.js'][441]++;
  for (var i = 0; (i < map.length); (i++)) {
    _$jscoverage['require.js'][442]++;
    if (map[i][2].test(targetMid)) {
      _$jscoverage['require.js'][443]++;
      return map[i];
    }
}
  _$jscoverage['require.js'][446]++;
  return 0;
}), compactPath = (function (path) {
  _$jscoverage['require.js'][450]++;
  while (/\/\.\//.test(path)) {
    _$jscoverage['require.js'][450]++;
    path = path.replace(/\/\.\//, "/");
}
  _$jscoverage['require.js'][451]++;
  path = path.replace(/(.*)\/\.$/, "$1");
  _$jscoverage['require.js'][453]++;
  while (/[^\/\.]+\/\.\./.test(path)) {
    _$jscoverage['require.js'][453]++;
    path = path.replace(/[^\/]+\/\.\.\/?/, "");
}
  _$jscoverage['require.js'][454]++;
  return path;
}), transformPath = (function (path, transforms) {
  _$jscoverage['require.js'][485]++;
  for (var i = 0, result = 0, item; ((! result) && (i < transforms.length));) {
    _$jscoverage['require.js'][486]++;
    item = transforms[(i++)];
    _$jscoverage['require.js'][487]++;
    if (isFunction(item)) {
      _$jscoverage['require.js'][488]++;
      result = item(path);
    }
    else {
      _$jscoverage['require.js'][490]++;
      result = (item[0].test(path) && path.replace(item[0], item[1]));
    }
}
  _$jscoverage['require.js'][493]++;
  return result;
}), makeModuleInfo = (function (pid, mid, pqn, pack, path, url) {
  _$jscoverage['require.js'][497]++;
  var result = {pid: pid, mid: mid, pqn: pqn, pack: pack, path: path, url: url};
  _$jscoverage['require.js'][498]++;
  return result;
}), getModuleInfo = (function (mid, referenceModule, packages, modules, baseUrl, pageUrl, packageMapProg, pathsMapProg, pathTransforms, alwaysCreate) {
  _$jscoverage['require.js'][504]++;
  var pid, pack, pqn, mapProg, mapItem, path, url, result;
  _$jscoverage['require.js'][505]++;
  if (/(^\/)|(\:)|(\.[^\/]+$)/.test(mid)) {
    _$jscoverage['require.js'][509]++;
    url = (/^\./.test(mid)? compactPath((pageUrl + "/" + mid)): mid);
    _$jscoverage['require.js'][510]++;
    return makeModuleInfo(0, url, ("*" + url), 0, url, url);
  }
  else {
    _$jscoverage['require.js'][512]++;
    if (/^\./.test(mid)) {
      _$jscoverage['require.js'][514]++;
      mid = (referenceModule? (referenceModule.path + "/../" + mid): (baseUrl + mid));
    }
    _$jscoverage['require.js'][517]++;
    path = compactPath(mid);
    _$jscoverage['require.js'][519]++;
    mapProg = (referenceModule && referenceModule.pack && referenceModule.pack.mapProg);
    _$jscoverage['require.js'][520]++;
    mapItem = ((mapProg && runMapProg(path, mapProg)) || runMapProg(path, packageMapProg));
    _$jscoverage['require.js'][521]++;
    if (mapItem) {
      _$jscoverage['require.js'][523]++;
      pid = mapItem[1];
      _$jscoverage['require.js'][524]++;
      mid = path.substring(mapItem[3]);
    }
    else {
      _$jscoverage['require.js'][526]++;
      pid = "";
      _$jscoverage['require.js'][527]++;
      mid = path;
    }
    _$jscoverage['require.js'][529]++;
    pqn = (pid + "*" + mid);
    _$jscoverage['require.js'][530]++;
    result = modules[pqn];
    _$jscoverage['require.js'][531]++;
    if (result) {
      _$jscoverage['require.js'][532]++;
      return (alwaysCreate? makeModuleInfo(result.pid, result.mid, result.pqn, result.pack, result.path, result.url): modules[pqn]);
    }
  }
  _$jscoverage['require.js'][537]++;
  if (pid) {
    _$jscoverage['require.js'][538]++;
    pack = packages[pid];
    _$jscoverage['require.js'][539]++;
    path = (pid + "/" + (mid || pack.main));
    _$jscoverage['require.js'][540]++;
    url = (pack.location + "/" + (pack.lib? (pack.lib + "/"): "") + (mid || pack.main));
    _$jscoverage['require.js'][541]++;
    mapItem = runMapProg(url, pathsMapProg);
    _$jscoverage['require.js'][542]++;
    if (mapItem) {
      _$jscoverage['require.js'][543]++;
      url = (mapItem[1] + url.substring((mapItem[3] - 1)));
    }
    else {
      _$jscoverage['require.js'][545]++;
      url = (transformPath(path, pack.pathTransforms) || url);
    }
  }
  else {
    _$jscoverage['require.js'][548]++;
    mapItem = runMapProg(path, pathsMapProg);
    _$jscoverage['require.js'][549]++;
    if (mapItem) {
      _$jscoverage['require.js'][550]++;
      url = (mapItem[1] + path.substring((mapItem[3] - 1)));
    }
    else {
      _$jscoverage['require.js'][552]++;
      url = (transformPath(path, pathTransforms) || path);
    }
  }
  _$jscoverage['require.js'][556]++;
  if ((! /(^\/)|(\:)/.test(url))) {
    _$jscoverage['require.js'][557]++;
    url = (baseUrl + url);
  }
  _$jscoverage['require.js'][559]++;
  url += ".js";
  _$jscoverage['require.js'][560]++;
  return makeModuleInfo(pid, mid, pqn, pack, path, compactPath(url));
}), getModule = (function (mid, referenceModule) {
  _$jscoverage['require.js'][565]++;
  var match, plugin, pluginResource, result, existing, pqn;
  _$jscoverage['require.js'][566]++;
  match = mid.match(/^(.+?)\!(.+)$/);
  _$jscoverage['require.js'][568]++;
  if (match) {
    _$jscoverage['require.js'][570]++;
    ((plugin = getModule(match[1], referenceModule)), (pluginResource = match[2]));
    _$jscoverage['require.js'][572]++;
    pqn = (plugin.pqn + "!" + (referenceModule? (referenceModule.pqn + "!"): "") + pluginResource);
    _$jscoverage['require.js'][573]++;
    return (modules[pqn] || (modules[pqn] = {plugin: plugin, mid: pluginResource, req: (referenceModule? createRequire(referenceModule): req), pqn: pqn}));
  }
  else {
    _$jscoverage['require.js'][575]++;
    result = getModuleInfo(mid, referenceModule, packages, modules, req.baseUrl, ".", packageMapProg, pathsMapProg, pathTransforms);
    _$jscoverage['require.js'][576]++;
    return (modules[result.pqn] || (modules[result.pqn] = result));
  }
}), nameToUrl = (req.nameToUrl = (req.toUrl = (function (name, ext, referenceModule) {
  _$jscoverage['require.js'][583]++;
  var match = name.match(/(.+)(\.[^\/]+)$/), url = getModuleInfo(((match && match[1]) || name), referenceModule, packages, modules, req.baseUrl, ".", packageMapProg, pathsMapProg, pathTransforms).url;
  _$jscoverage['require.js'][587]++;
  return (url.substring(0, (url.length - 3)) + (ext? ext: (match? match[2]: "")));
}))), cjsModuleInfo = {injected: arrived, deps: [], executed: 1, result: 1}, cjsRequireModule = mix(getModule("require"), cjsModuleInfo), cjsExportsModule = mix(getModule("exports"), cjsModuleInfo), cjsModuleModule = mix(getModule("module"), cjsModuleInfo), ranFactory = 0, runFactory = (function (pqn, factory, args, cjs) {
  _$jscoverage['require.js'][605]++;
  if (has("loader-traceApi")) {
    _$jscoverage['require.js'][606]++;
    req.trace("loader-runFactory", [pqn]);
  }
  _$jscoverage['require.js'][608]++;
  ranFactory = 1;
  _$jscoverage['require.js'][609]++;
  return (isFunction(factory)? (factory.apply(null, args) || (cjs && cjs.exports)): factory);
}), abortExec = {}, evalOrder = 0, execModule = (function (module) {
  _$jscoverage['require.js'][620]++;
  if ((! module.executed)) {
    _$jscoverage['require.js'][621]++;
    if (((typeof module.def) == "undefined")) {
      _$jscoverage['require.js'][622]++;
      return abortExec;
    }
    _$jscoverage['require.js'][624]++;
    var pqn = module.pqn, deps = (module.deps || []), arg, argResult, args = [], i = 0;
    _$jscoverage['require.js'][631]++;
    if (has("loader-traceApi")) {
      _$jscoverage['require.js'][632]++;
      req.trace("loader-execModule", [pqn]);
    }
    _$jscoverage['require.js'][641]++;
    module.executed = 1;
    _$jscoverage['require.js'][642]++;
    while ((i < deps.length)) {
      _$jscoverage['require.js'][643]++;
      arg = deps[(i++)];
      _$jscoverage['require.js'][644]++;
      argResult = ((arg === cjsRequireModule)? createRequire(module): ((arg === cjsExportsModule)? module.exports: ((arg === cjsModuleModule)? module: execModule(arg))));
      _$jscoverage['require.js'][648]++;
      if ((argResult === abortExec)) {
        _$jscoverage['require.js'][649]++;
        module.executed = 0;
        _$jscoverage['require.js'][650]++;
        return abortExec;
      }
      _$jscoverage['require.js'][652]++;
      args.push(argResult);
}
    _$jscoverage['require.js'][654]++;
    if (has("loader-catchApi")) {
      _$jscoverage['require.js'][655]++;
      try {
        _$jscoverage['require.js'][656]++;
        module.result = runFactory(pqn, module.def, args, module.cjs);
      }
      catch (e) {
        _$jscoverage['require.js'][658]++;
        if (((! has("loader-errorApi")) || (! req.onError("loader/exec", [e, pqn].concat(args))))) {
          _$jscoverage['require.js'][659]++;
          throw e;
        }
      }
    }
    else {
      _$jscoverage['require.js'][663]++;
      module.result = runFactory(pqn, module.def, args, module.cjs);
    }
    _$jscoverage['require.js'][665]++;
    module.evalOrder = (evalOrder++);
    _$jscoverage['require.js'][666]++;
    if (module.loadQ) {
      _$jscoverage['require.js'][668]++;
      var q = module.loadQ, load = (module.load = module.result.load);
      _$jscoverage['require.js'][671]++;
      while (q.length) {
        _$jscoverage['require.js'][672]++;
        load.apply(null, q.shift());
}
    }
    _$jscoverage['require.js'][675]++;
    if (has("loader-traceApi")) {
      _$jscoverage['require.js'][676]++;
      req.trace("loader-execModule-out", [pqn]);
    }
  }
  _$jscoverage['require.js'][679]++;
  return module.result;
}), checkCompleteRecursiveGuard = 0, checkComplete = (function () {
  _$jscoverage['require.js'][685]++;
  if (checkCompleteRecursiveGuard) {
    _$jscoverage['require.js'][686]++;
    return;
  }
  _$jscoverage['require.js'][688]++;
  checkCompleteRecursiveGuard = 1;
  _$jscoverage['require.js'][691]++;
  ranFactory = 1;
  _$jscoverage['require.js'][692]++;
  while (ranFactory) {
    _$jscoverage['require.js'][693]++;
    ranFactory = 0;
    _$jscoverage['require.js'][694]++;
    for (var result, i = 0; (i < execQ.length);) {
      _$jscoverage['require.js'][695]++;
      result = execModule(execQ[i]);
      _$jscoverage['require.js'][696]++;
      if ((result !== abortExec)) {
        _$jscoverage['require.js'][697]++;
        execQ.splice(i, 1);
      }
      else {
        _$jscoverage['require.js'][699]++;
        (i++);
      }
}
}
  _$jscoverage['require.js'][704]++;
  checkCompleteRecursiveGuard = 0;
  _$jscoverage['require.js'][705]++;
  if (has("loader-pageLoadApi")) {
    _$jscoverage['require.js'][706]++;
    onLoad();
  }
});
  _$jscoverage['require.js'][710]++;
  req.toAbsMid = (function (id) {
  _$jscoverage['require.js'][711]++;
  return id;
});
  _$jscoverage['require.js'][714]++;
  if (has("loader-undefApi")) {
    _$jscoverage['require.js'][715]++;
    req.undef = (function (moduleId) {
  _$jscoverage['require.js'][718]++;
  var module = getModule(moduleId, 0), pqn = module.pqn;
  _$jscoverage['require.js'][721]++;
  setDel(modules, pqn);
  _$jscoverage['require.js'][722]++;
  setDel(waiting, pqn);
  _$jscoverage['require.js'][723]++;
  setDel(injectedUrls, module.url);
});
  }
  _$jscoverage['require.js'][727]++;
  if (has("loader-traceApi")) {
    _$jscoverage['require.js'][729]++;
    var symbols = {}, symbol = (function (name) {
  _$jscoverage['require.js'][734]++;
  return (symbols[name] || (symbols[name] = {value: name}));
});
    _$jscoverage['require.js'][737]++;
    requested = symbol("requested");
    _$jscoverage['require.js'][738]++;
    arrived = symbol("arrived");
    _$jscoverage['require.js'][739]++;
    nonmodule = symbol("not-a-module");
  }
  _$jscoverage['require.js'][743]++;
  if (has("loader-injectApi")) {
    _$jscoverage['require.js'][744]++;
    var injectedUrls = {}, injectPlugin = (function (module, immediate) {
  _$jscoverage['require.js'][760]++;
  var pqn = module.pqn, onload = (function (def) {
  _$jscoverage['require.js'][763]++;
  mix(module, {executed: 1, result: def});
  _$jscoverage['require.js'][764]++;
  setDel(waiting, pqn);
  _$jscoverage['require.js'][765]++;
  checkComplete();
});
  _$jscoverage['require.js'][767]++;
  if (cache[pqn]) {
    _$jscoverage['require.js'][768]++;
    onload(cache[pqn]);
  }
  else {
    _$jscoverage['require.js'][770]++;
    var plugin = module.plugin;
    _$jscoverage['require.js'][771]++;
    if ((! plugin.load)) {
      _$jscoverage['require.js'][772]++;
      if (plugin.executed) {
        _$jscoverage['require.js'][773]++;
        plugin.load = plugin.result.load;
      }
      else {
        _$jscoverage['require.js'][774]++;
        if ((! immediate)) {
          _$jscoverage['require.js'][777]++;
          plugin.loadQ = [];
          _$jscoverage['require.js'][778]++;
          plugin.load = (function (id, require, callback) {
  _$jscoverage['require.js'][779]++;
  plugin.loadQ.push([id, require, callback]);
});
          _$jscoverage['require.js'][781]++;
          injectModule(plugin);
          _$jscoverage['require.js'][784]++;
          execQ.unshift(plugin);
        }
      }
    }
    _$jscoverage['require.js'][787]++;
    ((! immediate) && setIns(waiting, pqn));
    _$jscoverage['require.js'][788]++;
    (plugin.load && plugin.load(module.mid, module.req, onload));
  }
}), injecting = [], injectModule = (function (module) {
  _$jscoverage['require.js'][802]++;
  var pqn = module.pqn;
  _$jscoverage['require.js'][803]++;
  if ((module.injected || waiting[pqn])) {
    _$jscoverage['require.js'][804]++;
    return;
  }
  _$jscoverage['require.js'][806]++;
  if (module.plugin) {
    _$jscoverage['require.js'][807]++;
    injectPlugin(module);
    _$jscoverage['require.js'][808]++;
    return;
  }
  _$jscoverage['require.js'][812]++;
  module.injected = requested;
  _$jscoverage['require.js'][813]++;
  setIns(waiting, pqn);
  _$jscoverage['require.js'][814]++;
  var url = module.url;
  _$jscoverage['require.js'][815]++;
  if (injectedUrls[url]) {
    _$jscoverage['require.js'][817]++;
    return;
  }
  _$jscoverage['require.js'][822]++;
  injectedUrls[url] = requested;
  _$jscoverage['require.js'][823]++;
  var onLoadCallback = (function () {
  _$jscoverage['require.js'][824]++;
  injectedUrls[url] = arrived;
  _$jscoverage['require.js'][825]++;
  setDel(waiting, pqn);
  _$jscoverage['require.js'][826]++;
  runDefQ(module);
  _$jscoverage['require.js'][827]++;
  if ((module.injected !== arrived)) {
    _$jscoverage['require.js'][832]++;
    mix(module, {injected: arrived, deps: [], def: nonmodule, result: nonmodule});
  }
  _$jscoverage['require.js'][839]++;
  checkComplete();
});
  _$jscoverage['require.js'][841]++;
  if (cache[pqn]) {
    _$jscoverage['require.js'][842]++;
    injecting.push(module);
    _$jscoverage['require.js'][843]++;
    cache[pqn].call(null);
    _$jscoverage['require.js'][844]++;
    injecting.pop();
    _$jscoverage['require.js'][845]++;
    onLoadCallback();
  }
  else {
    _$jscoverage['require.js'][847]++;
    injecting.push(module);
    _$jscoverage['require.js'][848]++;
    module.node = req.injectUrl(url, onLoadCallback);
    _$jscoverage['require.js'][849]++;
    injecting.pop();
    _$jscoverage['require.js'][850]++;
    startTimer();
  }
}), defQ = [], defineModule = (function (module, deps, def) {
  _$jscoverage['require.js'][859]++;
  if (has("loader-traceApi")) {
    _$jscoverage['require.js'][860]++;
    req.trace("loader-defineModule", [module, deps]);
  }
  _$jscoverage['require.js'][863]++;
  var pqn = module.pqn;
  _$jscoverage['require.js'][864]++;
  if ((module.injected == arrived)) {
    _$jscoverage['require.js'][865]++;
    req.onError("loader/multiple-define", [pqn]);
    _$jscoverage['require.js'][866]++;
    return module;
  }
  _$jscoverage['require.js'][868]++;
  mix(module, {injected: arrived, deps: deps, def: def, cjs: {id: module.path, uri: module.url, exports: (module.result = {}), setExports: (function (exports) {
  _$jscoverage['require.js'][877]++;
  module.cjs.exports = exports;
})}});
  _$jscoverage['require.js'][883]++;
  for (var i = 0; (i < deps.length); (i++)) {
    _$jscoverage['require.js'][884]++;
    deps[i] = getModule(deps[i], module);
}
  _$jscoverage['require.js'][887]++;
  setDel(waiting, pqn);
  _$jscoverage['require.js'][893]++;
  return module;
}), runDefQ = (function (referenceModule) {
  _$jscoverage['require.js'][898]++;
  var definedModules = [], module, args;
  _$jscoverage['require.js'][901]++;
  while (defQ.length) {
    _$jscoverage['require.js'][902]++;
    args = defQ.shift();
    _$jscoverage['require.js'][906]++;
    module = ((args[0] && getModule(args[0])) || referenceModule);
    _$jscoverage['require.js'][907]++;
    definedModules.push(defineModule(module, args[1], args[2]));
}
  _$jscoverage['require.js'][909]++;
  forEach(definedModules, injectDependencies);
});
  }
  _$jscoverage['require.js'][913]++;
  if (has("loader-timeoutApi")) {
    _$jscoverage['require.js'][914]++;
    var timerId = 0, clearTimer = (function () {
  _$jscoverage['require.js'][921]++;
  (timerId && clearTimeout(timerId));
  _$jscoverage['require.js'][922]++;
  timerId = 0;
}), startTimer = (function () {
  _$jscoverage['require.js'][926]++;
  clearTimer();
  _$jscoverage['require.js'][927]++;
  (req.timeout && (timerId = setTimeout((function () {
  _$jscoverage['require.js'][928]++;
  clearTimer();
  _$jscoverage['require.js'][929]++;
  req.onError("loader/timeout", [waiting]);
}), req.timeout)));
});
  }
  else {
    _$jscoverage['require.js'][933]++;
    var clearTimer = noop, startTimer = noop;
  }
  _$jscoverage['require.js'][938]++;
  if (has("dom")) {
    _$jscoverage['require.js'][939]++;
    var doc = document;
    _$jscoverage['require.js'][941]++;
    if ((has("loader-pageLoadApi") || has("loader-injectApi"))) {
      _$jscoverage['require.js'][942]++;
      var on = (function (node, eventName, handler, useCapture, ieEventName) {
  _$jscoverage['require.js'][945]++;
  if (has("dom-addEventListener")) {
    _$jscoverage['require.js'][946]++;
    node.addEventListener(eventName, handler, (! (! useCapture)));
    _$jscoverage['require.js'][947]++;
    return (function () {
  _$jscoverage['require.js'][948]++;
  node.removeEventListener(eventName, handler, (! (! useCapture)));
});
  }
  else {
    _$jscoverage['require.js'][951]++;
    if ((ieEventName !== false)) {
      _$jscoverage['require.js'][952]++;
      eventName = (ieEventName || ("on" + eventName));
      _$jscoverage['require.js'][953]++;
      node.attachEvent(eventName, handler);
      _$jscoverage['require.js'][954]++;
      return (function () {
  _$jscoverage['require.js'][955]++;
  node.detachEvent(eventName, handler);
});
    }
    else {
      _$jscoverage['require.js'][958]++;
      return noop;
    }
  }
});
    }
    _$jscoverage['require.js'][964]++;
    if (has("loader-injectApi")) {
      _$jscoverage['require.js'][965]++;
      var head = (doc.getElementsByTagName("head")[0] || doc.getElementsByTagName("html")[0]);
      _$jscoverage['require.js'][966]++;
      req.injectUrl = (req.injectUrl || (function (url, callback) {
  _$jscoverage['require.js'][969]++;
  var node = doc.createElement("script"), onLoad = (function (e) {
  _$jscoverage['require.js'][972]++;
  e = (e || window.event);
  _$jscoverage['require.js'][973]++;
  var node = (e.target || e.srcElement);
  _$jscoverage['require.js'][974]++;
  if (((e.type === "load") || /complete|loaded/.test(node.readyState))) {
    _$jscoverage['require.js'][975]++;
    disconnector();
    _$jscoverage['require.js'][976]++;
    (callback && callback());
  }
}), disconnector = on(node, "load", onLoad, false, "onreadystatechange");
  _$jscoverage['require.js'][980]++;
  node.src = url;
  _$jscoverage['require.js'][981]++;
  node.type = "text/javascript";
  _$jscoverage['require.js'][982]++;
  node.charset = "utf-8";
  _$jscoverage['require.js'][983]++;
  head.appendChild(node);
  _$jscoverage['require.js'][984]++;
  return node;
}));
    }
    _$jscoverage['require.js'][988]++;
    if (has("loader-sniffApi")) {
      _$jscoverage['require.js'][990]++;
      if ((! req.baseUrl)) {
        _$jscoverage['require.js'][991]++;
        req.baseUrl = "";
        _$jscoverage['require.js'][992]++;
        for (var match, src, dataMain, scripts = doc.getElementsByTagName("script"), i = 0; (i < scripts.length); (i++)) {
          _$jscoverage['require.js'][993]++;
          src = (scripts[i].getAttribute("src") || "");
          _$jscoverage['require.js'][994]++;
          if ((match = src.match(/require\.js$/))) {
            _$jscoverage['require.js'][995]++;
            req.baseUrl = (src.substring(0, match.index) || "./");
            _$jscoverage['require.js'][996]++;
            dataMain = scripts[i].getAttribute("data-main");
            _$jscoverage['require.js'][997]++;
            if (dataMain) {
              _$jscoverage['require.js'][998]++;
              req.deps = (req.deps || [dataMain]);
            }
            _$jscoverage['require.js'][1001]++;
            req.baseNode = scripts[i];
            _$jscoverage['require.js'][1002]++;
            break;
          }
}
      }
    }
    _$jscoverage['require.js'][1008]++;
    if (has("loader-pageLoadApi")) {
      _$jscoverage['require.js'][1016]++;
      req.pageLoaded = (req.pageLoaded || (document.readyState == "complete"));
      _$jscoverage['require.js'][1019]++;
      if ((! req.pageLoaded)) {
        _$jscoverage['require.js'][1020]++;
        var loadDisconnector = 0, DOMContentLoadedDisconnector = 0, scrollIntervalId = 0, detectPageLoadedFired = 0, detectPageLoaded = (function () {
  _$jscoverage['require.js'][1026]++;
  if (detectPageLoadedFired) {
    _$jscoverage['require.js'][1027]++;
    return;
  }
  _$jscoverage['require.js'][1029]++;
  detectPageLoadedFired = 1;
  _$jscoverage['require.js'][1031]++;
  if (scrollIntervalId) {
    _$jscoverage['require.js'][1032]++;
    clearInterval(scrollIntervalId);
    _$jscoverage['require.js'][1033]++;
    scrollIntervalId = 0;
  }
  _$jscoverage['require.js'][1035]++;
  (loadDisconnector && loadDisconnector());
  _$jscoverage['require.js'][1036]++;
  (DOMContentLoadedDisconnector && DOMContentLoadedDisconnector());
  _$jscoverage['require.js'][1037]++;
  req.pageLoaded = true;
  _$jscoverage['require.js'][1038]++;
  onLoad();
});
        _$jscoverage['require.js'][1041]++;
        if ((! req.pageLoaded)) {
          _$jscoverage['require.js'][1042]++;
          loadDisconnector = on(window, "load", detectPageLoaded, false);
          _$jscoverage['require.js'][1043]++;
          DOMContentLoadedDisconnector = on(doc, "DOMContentLoaded", detectPageLoaded, false, false);
        }
        _$jscoverage['require.js'][1046]++;
        if ((! has("dom-addEventListener"))) {
          _$jscoverage['require.js'][1050]++;
          if ((self === self.top)) {
            _$jscoverage['require.js'][1051]++;
            scrollIntervalId = setInterval((function () {
  _$jscoverage['require.js'][1052]++;
  try {
    _$jscoverage['require.js'][1061]++;
    if (doc.body) {
      _$jscoverage['require.js'][1062]++;
      doc.documentElement.doScroll("left");
      _$jscoverage['require.js'][1063]++;
      detectPageLoaded();
    }
  }
  catch (e) {
  }
}), 30);
          }
        }
      }
      _$jscoverage['require.js'][1071]++;
      var loadQ = [], onLoadRecursiveGuard = 0, onLoad = (function () {
  _$jscoverage['require.js'][1079]++;
  while ((execComplete() && (! checkCompleteRecursiveGuard) && (! onLoadRecursiveGuard) && req.pageLoaded && loadQ.length)) {
    _$jscoverage['require.js'][1081]++;
    onLoadRecursiveGuard = true;
    _$jscoverage['require.js'][1082]++;
    var f = loadQ.shift();
    _$jscoverage['require.js'][1083]++;
    if (has("loader-catchApi")) {
      _$jscoverage['require.js'][1084]++;
      try {
        _$jscoverage['require.js'][1085]++;
        f();
      }
      catch (e) {
        _$jscoverage['require.js'][1087]++;
        onLoadRecursiveGuard = 0;
        _$jscoverage['require.js'][1088]++;
        if ((! req.onError("loader/onLoad", [e]))) {
          _$jscoverage['require.js'][1089]++;
          throw e;
        }
      }
    }
    else {
      _$jscoverage['require.js'][1093]++;
      f();
    }
    _$jscoverage['require.js'][1095]++;
    onLoadRecursiveGuard = 0;
}
});
      _$jscoverage['require.js'][1099]++;
      req.ready = (function (context, callback) {
  _$jscoverage['require.js'][1106]++;
  if (callback) {
    _$jscoverage['require.js'][1107]++;
    loadQ.push((isString(callback)? (function () {
  _$jscoverage['require.js'][1108]++;
  (context[callback])();
}): (function () {
  _$jscoverage['require.js'][1109]++;
  callback.call(context);
})));
  }
  else {
    _$jscoverage['require.js'][1112]++;
    loadQ.push(context);
  }
  _$jscoverage['require.js'][1114]++;
  onLoad();
});
    }
    else {
      _$jscoverage['require.js'][1117]++;
      req.ready = noop;
    }
  }
  _$jscoverage['require.js'][1121]++;
  if (has("loader-traceApi")) {
    _$jscoverage['require.js'][1122]++;
    req.trace = (function (group, args) {
  _$jscoverage['require.js'][1130]++;
  if (req.traceSet[group]) {
    _$jscoverage['require.js'][1131]++;
    if (has("console-log-apply")) {
      _$jscoverage['require.js'][1132]++;
      console.log.apply(console, [(group + ": ")].concat(args));
    }
    else {
      _$jscoverage['require.js'][1135]++;
      for (var i = 0; (i < args.length); (i++)) {
        _$jscoverage['require.js'][1136]++;
        console.log(args[i]);
}
    }
  }
});
  }
  else {
    _$jscoverage['require.js'][1142]++;
    req.trace = (req.trace || noop);
  }
  _$jscoverage['require.js'][1160]++;
  if (has("loader-errorApi")) {
    _$jscoverage['require.js'][1161]++;
    var onError = (req.onError = (function (messageId, args) {
  _$jscoverage['require.js'][1179]++;
  for (var errorbacks = onError.listeners, result = false, i = 0; (i < errorbacks.length); (i++)) {
    _$jscoverage['require.js'][1180]++;
    result = (result || (errorbacks[i])(messageId, args));
}
  _$jscoverage['require.js'][1182]++;
  console.error(messageId, args);
  _$jscoverage['require.js'][1183]++;
  onError.log.push(args);
  _$jscoverage['require.js'][1184]++;
  return result;
}));
    _$jscoverage['require.js'][1186]++;
    onError.listeners = [];
    _$jscoverage['require.js'][1187]++;
    onError.log = [];
  }
  else {
    _$jscoverage['require.js'][1189]++;
    req.onError = (req.onError || noop);
  }
  _$jscoverage['require.js'][1192]++;
  var def = (function (mid, dependencies, factory) {
  _$jscoverage['require.js'][1203]++;
  var arity = arguments.length, args = 0, defaultDeps = ["require", "exports", "module"];
  _$jscoverage['require.js'][1207]++;
  if (((arity == 3) && (dependencies == 0))) {
    _$jscoverage['require.js'][1209]++;
    execModule(defineModule(getModule(mid), [], factory));
    _$jscoverage['require.js'][1210]++;
    return;
  }
  _$jscoverage['require.js'][1212]++;
  if (has("loader-amdFactoryScan")) {
    _$jscoverage['require.js'][1213]++;
    if ((arity == 1)) {
      _$jscoverage['require.js'][1214]++;
      dependencies = [];
      _$jscoverage['require.js'][1215]++;
      mid.toString().replace(/(\/\*([\s\S]*?)\*\/|\/\/(.*)$)/gm, "").replace(/require\(["']([\w\!\-_\.\/]+)["']\)/g, (function (match, dep) {
  _$jscoverage['require.js'][1218]++;
  dependencies.push(dep);
}));
      _$jscoverage['require.js'][1220]++;
      args = [0, defaultDeps.concat(dependencies), mid];
    }
  }
  _$jscoverage['require.js'][1223]++;
  if ((! args)) {
    _$jscoverage['require.js'][1224]++;
    args = ((arity == 1)? [0, defaultDeps, mid]: ((arity == 2)? (isArray(mid)? [0, mid, dependencies]: [mid, defaultDeps, dependencies]): [mid, dependencies, factory]));
  }
  _$jscoverage['require.js'][1228]++;
  if (has("loader-traceApi")) {
    _$jscoverage['require.js'][1229]++;
    req.trace("loader-define", args.slice(0, 2));
  }
  _$jscoverage['require.js'][1231]++;
  if (args[0]) {
    _$jscoverage['require.js'][1234]++;
    injectDependencies(defineModule(getModule(args[0]), args[1], args[2]));
  }
  else {
    _$jscoverage['require.js'][1237]++;
    if ((has("dom-addEventListener") || has("loader-node"))) {
      _$jscoverage['require.js'][1240]++;
      defQ.push(args);
    }
    else {
      _$jscoverage['require.js'][1243]++;
      var length = injecting.length, targetModule = (length && injecting[(length - 1)]), pqn, module;
      _$jscoverage['require.js'][1247]++;
      if ((! targetModule)) {
        _$jscoverage['require.js'][1248]++;
        for (pqn in waiting) {
          _$jscoverage['require.js'][1249]++;
          module = modules[pqn];
          _$jscoverage['require.js'][1250]++;
          if ((module.node && (module.node.readyState === "interactive"))) {
            _$jscoverage['require.js'][1251]++;
            targetModule = module;
            _$jscoverage['require.js'][1252]++;
            break;
          }
}
      }
      _$jscoverage['require.js'][1256]++;
      if (targetModule) {
        _$jscoverage['require.js'][1257]++;
        injectDependencies(defineModule(targetModule, args[1], args[2]));
      }
      else {
        _$jscoverage['require.js'][1259]++;
        req.onError("loader/define-ie");
      }
    }
  }
});
  _$jscoverage['require.js'][1265]++;
  if (has("loader-createHasModule")) {
    _$jscoverage['require.js'][1266]++;
    mix(getModule("has"), {injected: arrived, deps: [], executed: 1, result: has});
  }
  _$jscoverage['require.js'][1269]++;
  if (has("loader-publish-privates")) {
    _$jscoverage['require.js'][1270]++;
    mix(req, {isEmpty: isEmpty, isFunction: isFunction, isString: isString, isArray: isArray, forEach: forEach, setIns: setIns, setDel: setDel, mix: mix, uid: uid, on: on, paths: paths, packages: packages, modules: modules, execQ: execQ, defQ: defQ, waiting: waiting, injectedUrls: injectedUrls, loadQ: loadQ, computeMapProg: computeMapProg, runMapProg: runMapProg, compactPath: compactPath, transformPath: transformPath, getModuleInfo: getModuleInfo});
  }
  _$jscoverage['require.js'][1302]++;
  if (has("loader-node")) {
    _$jscoverage['require.js'][1304]++;
    def.require = req;
    _$jscoverage['require.js'][1305]++;
    global.define = def;
    _$jscoverage['require.js'][1306]++;
    req.deps = (req.deps || []);
  }
  else {
    _$jscoverage['require.js'][1308]++;
    define = def;
    _$jscoverage['require.js'][1309]++;
    require = req;
  }
  _$jscoverage['require.js'][1312]++;
  if (has("loader-requirejsApi")) {
    _$jscoverage['require.js'][1313]++;
    req.def = define;
  }
  _$jscoverage['require.js'][1316]++;
  if (has("loader-injectApi")) {
    _$jscoverage['require.js'][1317]++;
    doWork(req.deps, req.callback, userConfig.ready);
  }
  else {
    _$jscoverage['require.js'][1321]++;
    (function () {
  _$jscoverage['require.js'][1322]++;
  var p;
  _$jscoverage['require.js'][1323]++;
  for (p in cache) {
    _$jscoverage['require.js'][1324]++;
    modules[p] = cache[p];
}
  _$jscoverage['require.js'][1326]++;
  for (p in cache) {
    _$jscoverage['require.js'][1327]++;
    var module = modules[p];
    _$jscoverage['require.js'][1328]++;
    module.pqn = p;
    _$jscoverage['require.js'][1329]++;
    for (var i = 0; (i < deps.length); (i++)) {
      _$jscoverage['require.js'][1330]++;
      deps[i] = getModule(deps[i], module);
}
    _$jscoverage['require.js'][1332]++;
    execQ.push(module);
}
  _$jscoverage['require.js'][1334]++;
  doCheckComplete();
})();
  }
})((this.require || {}), {vendor: "altoviso.com", version: "1.0-beta", baseUrl: ".", host: "browser", isBrowser: 1, timeout: 0, traceSet: {"loader-define": 0, "loader-runFactory": 0, "loader-execModule": 0, "loader-execModule-out": 0, "loader-defineModule": 0}}, (function () {
  _$jscoverage['require.js'][1366]++;
  var global = this, doc = document, element = doc.createElement("div"), cache = {"dom": 1, "dom-addEventListener": (! (! document.addEventListener)), "console": ((typeof console) != "undefined"), "console-log-apply": (! (! (((typeof console) != "undefined") && console.log && console.log.apply))), "loader-injectApi": 1, "loader-timeoutApi": 1, "loader-traceApi": 1, "loader-catchApi": 1, "loader-pageLoadApi": 1, "loader-errorApi": 1, "loader-sniffApi": 0, "loader-undefApi": 0, "loader-requirejsApi": 1, "loader-createHasModule": 1, "loader-amdFactoryScan": 1, "loader-publish-privates": 1, "native-xhr": (! (! this.XMLHttpRequest))}, has = (function (name) {
  _$jscoverage['require.js'][1390]++;
  if (((typeof cache[name]) == "function")) {
    _$jscoverage['require.js'][1391]++;
    cache[name] = (cache[name])(global, doc, element);
  }
  _$jscoverage['require.js'][1393]++;
  return cache[name];
});
  _$jscoverage['require.js'][1395]++;
  has.cache = cache;
  _$jscoverage['require.js'][1396]++;
  has.add = (function (name, test, now) {
  _$jscoverage['require.js'][1397]++;
  cache[name] = (now? test(global, doc, element): test);
});
  _$jscoverage['require.js'][1399]++;
  if (this.has) {
    _$jscoverage['require.js'][1400]++;
    has = this.has;
    _$jscoverage['require.js'][1401]++;
    for (var p in cache) {
      _$jscoverage['require.js'][1402]++;
      has.add(p, (function () {
  _$jscoverage['require.js'][1402]++;
  return cach[p];
}), 1);
}
  }
  _$jscoverage['require.js'][1405]++;
  return has;
})());
