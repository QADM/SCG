/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['dataapi/cda.js']) {
  _$jscoverage['dataapi/cda.js'] = [];
  _$jscoverage['dataapi/cda.js'][1] = 0;
  _$jscoverage['dataapi/cda.js'][2] = 0;
  _$jscoverage['dataapi/cda.js'][11] = 0;
  _$jscoverage['dataapi/cda.js'][13] = 0;
  _$jscoverage['dataapi/cda.js'][17] = 0;
  _$jscoverage['dataapi/cda.js'][22] = 0;
  _$jscoverage['dataapi/cda.js'][23] = 0;
  _$jscoverage['dataapi/cda.js'][24] = 0;
  _$jscoverage['dataapi/cda.js'][25] = 0;
  _$jscoverage['dataapi/cda.js'][26] = 0;
  _$jscoverage['dataapi/cda.js'][27] = 0;
  _$jscoverage['dataapi/cda.js'][28] = 0;
  _$jscoverage['dataapi/cda.js'][34] = 0;
  _$jscoverage['dataapi/cda.js'][35] = 0;
  _$jscoverage['dataapi/cda.js'][37] = 0;
  _$jscoverage['dataapi/cda.js'][42] = 0;
  _$jscoverage['dataapi/cda.js'][50] = 0;
  _$jscoverage['dataapi/cda.js'][51] = 0;
  _$jscoverage['dataapi/cda.js'][52] = 0;
  _$jscoverage['dataapi/cda.js'][53] = 0;
  _$jscoverage['dataapi/cda.js'][54] = 0;
  _$jscoverage['dataapi/cda.js'][58] = 0;
  _$jscoverage['dataapi/cda.js'][60] = 0;
  _$jscoverage['dataapi/cda.js'][61] = 0;
  _$jscoverage['dataapi/cda.js'][62] = 0;
  _$jscoverage['dataapi/cda.js'][65] = 0;
  _$jscoverage['dataapi/cda.js'][68] = 0;
  _$jscoverage['dataapi/cda.js'][69] = 0;
  _$jscoverage['dataapi/cda.js'][71] = 0;
  _$jscoverage['dataapi/cda.js'][74] = 0;
  _$jscoverage['dataapi/cda.js'][79] = 0;
  _$jscoverage['dataapi/cda.js'][80] = 0;
  _$jscoverage['dataapi/cda.js'][81] = 0;
  _$jscoverage['dataapi/cda.js'][82] = 0;
  _$jscoverage['dataapi/cda.js'][84] = 0;
  _$jscoverage['dataapi/cda.js'][86] = 0;
  _$jscoverage['dataapi/cda.js'][87] = 0;
  _$jscoverage['dataapi/cda.js'][88] = 0;
  _$jscoverage['dataapi/cda.js'][90] = 0;
  _$jscoverage['dataapi/cda.js'][93] = 0;
  _$jscoverage['dataapi/cda.js'][94] = 0;
  _$jscoverage['dataapi/cda.js'][97] = 0;
  _$jscoverage['dataapi/cda.js'][98] = 0;
  _$jscoverage['dataapi/cda.js'][104] = 0;
  _$jscoverage['dataapi/cda.js'][106] = 0;
  _$jscoverage['dataapi/cda.js'][107] = 0;
  _$jscoverage['dataapi/cda.js'][116] = 0;
  _$jscoverage['dataapi/cda.js'][118] = 0;
  _$jscoverage['dataapi/cda.js'][119] = 0;
  _$jscoverage['dataapi/cda.js'][120] = 0;
  _$jscoverage['dataapi/cda.js'][121] = 0;
  _$jscoverage['dataapi/cda.js'][122] = 0;
  _$jscoverage['dataapi/cda.js'][126] = 0;
  _$jscoverage['dataapi/cda.js'][132] = 0;
  _$jscoverage['dataapi/cda.js'][133] = 0;
  _$jscoverage['dataapi/cda.js'][134] = 0;
  _$jscoverage['dataapi/cda.js'][137] = 0;
  _$jscoverage['dataapi/cda.js'][138] = 0;
  _$jscoverage['dataapi/cda.js'][139] = 0;
  _$jscoverage['dataapi/cda.js'][140] = 0;
  _$jscoverage['dataapi/cda.js'][141] = 0;
  _$jscoverage['dataapi/cda.js'][144] = 0;
  _$jscoverage['dataapi/cda.js'][146] = 0;
  _$jscoverage['dataapi/cda.js'][147] = 0;
  _$jscoverage['dataapi/cda.js'][153] = 0;
  _$jscoverage['dataapi/cda.js'][154] = 0;
  _$jscoverage['dataapi/cda.js'][155] = 0;
  _$jscoverage['dataapi/cda.js'][156] = 0;
  _$jscoverage['dataapi/cda.js'][157] = 0;
  _$jscoverage['dataapi/cda.js'][158] = 0;
  _$jscoverage['dataapi/cda.js'][159] = 0;
  _$jscoverage['dataapi/cda.js'][160] = 0;
  _$jscoverage['dataapi/cda.js'][161] = 0;
  _$jscoverage['dataapi/cda.js'][162] = 0;
  _$jscoverage['dataapi/cda.js'][165] = 0;
  _$jscoverage['dataapi/cda.js'][167] = 0;
  _$jscoverage['dataapi/cda.js'][168] = 0;
  _$jscoverage['dataapi/cda.js'][173] = 0;
  _$jscoverage['dataapi/cda.js'][177] = 0;
  _$jscoverage['dataapi/cda.js'][178] = 0;
  _$jscoverage['dataapi/cda.js'][180] = 0;
  _$jscoverage['dataapi/cda.js'][185] = 0;
  _$jscoverage['dataapi/cda.js'][186] = 0;
  _$jscoverage['dataapi/cda.js'][187] = 0;
  _$jscoverage['dataapi/cda.js'][188] = 0;
  _$jscoverage['dataapi/cda.js'][189] = 0;
  _$jscoverage['dataapi/cda.js'][201] = 0;
  _$jscoverage['dataapi/cda.js'][202] = 0;
  _$jscoverage['dataapi/cda.js'][203] = 0;
  _$jscoverage['dataapi/cda.js'][204] = 0;
  _$jscoverage['dataapi/cda.js'][212] = 0;
  _$jscoverage['dataapi/cda.js'][214] = 0;
  _$jscoverage['dataapi/cda.js'][216] = 0;
  _$jscoverage['dataapi/cda.js'][217] = 0;
  _$jscoverage['dataapi/cda.js'][219] = 0;
  _$jscoverage['dataapi/cda.js'][220] = 0;
  _$jscoverage['dataapi/cda.js'][222] = 0;
  _$jscoverage['dataapi/cda.js'][223] = 0;
  _$jscoverage['dataapi/cda.js'][224] = 0;
  _$jscoverage['dataapi/cda.js'][225] = 0;
  _$jscoverage['dataapi/cda.js'][230] = 0;
  _$jscoverage['dataapi/cda.js'][234] = 0;
  _$jscoverage['dataapi/cda.js'][237] = 0;
  _$jscoverage['dataapi/cda.js'][238] = 0;
  _$jscoverage['dataapi/cda.js'][247] = 0;
  _$jscoverage['dataapi/cda.js'][254] = 0;
}
_$jscoverage['dataapi/cda.js'].source = ["pentaho <span class=\"k\">=</span> <span class=\"k\">typeof</span> pentaho <span class=\"k\">==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> <span class=\"k\">{}</span> <span class=\"k\">:</span> pentaho<span class=\"k\">;</span>","pentaho<span class=\"k\">.</span>cda <span class=\"k\">=</span> <span class=\"k\">{</span>","\tdescriptors<span class=\"k\">:</span> <span class=\"k\">[],</span>","\t<span class=\"c\">/*</span>","<span class=\"c\">\t@description class function to discover the cube(s) on the Pentaho BI Server</span>","<span class=\"c\">\t@parameters - configuration object with options and callback function</span>","<span class=\"c\">\t@return - returns array of descriptors found on BI server via callback function</span>","<span class=\"c\">\t*/</span>","\tdiscoverDescriptors<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>func<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t<span class=\"c\">//If we already have some descriptors in the class variable, return early with those values</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>descriptors<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"c\">//console.log(\"Using Existing descriptors\");</span>","\t\t\tfunc<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>descriptors<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">//call BI server for all CDA files.</span>","\t\t\t\tpentaho<span class=\"k\">.</span>xhr<span class=\"k\">.</span>execute<span class=\"k\">(</span><span class=\"s\">\"/pentaho/content/cda/getCdaList\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\t\t\tasync<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","\t\t\t\t\tdataType<span class=\"k\">:</span> <span class=\"s\">\"json\"</span><span class=\"k\">,</span>","\t\t\t\t\ttype<span class=\"k\">:</span> <span class=\"s\">\"GET\"</span><span class=\"k\">,</span>","\t\t\t\t\tcomplete<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>response<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t\t\t\t\t<span class=\"k\">var</span> fileList <span class=\"k\">=</span> eval<span class=\"k\">(</span><span class=\"s\">'('</span> <span class=\"k\">+</span> response <span class=\"k\">+</span> <span class=\"s\">')'</span> <span class=\"k\">);</span>","\t\t\t\t\t\t<span class=\"k\">var</span> fileCount <span class=\"k\">=</span> fileList<span class=\"k\">.</span>resultset<span class=\"k\">.</span>length<span class=\"k\">;</span>","\t\t\t\t\t\t<span class=\"k\">var</span> result<span class=\"k\">;</span>","\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> fileCount <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span>i<span class=\"k\">&lt;</span>fileCount<span class=\"k\">;</span>i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\tresult <span class=\"k\">=</span> fileList<span class=\"k\">.</span>resultset<span class=\"k\">[</span>i<span class=\"k\">];</span>","\t\t\t\t\t\t\t\tpentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>descriptors<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\tname<span class=\"k\">:</span> result<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span>","\t\t\t\t\t\t\t\t\tpath<span class=\"k\">:</span> result<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span>","\t\t\t\t\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\t<span class=\"k\">}</span> ","\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> func <span class=\"k\">==</span> <span class=\"s\">'function'</span><span class=\"k\">)</span><span class=\"k\">{</span>","\t\t\t\t\t\t\tfunc<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>descriptors<span class=\"k\">);</span>","\t\t\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Unrecognized callback function to pentaho.cda.discoverDescriptors\"</span><span class=\"k\">);</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\t<span class=\"c\">//call success function if there is one</span>","\t\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"c\">// end on complete</span>","\t\t\t\t\terror<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>e<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t\t\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"unable to get pentaho descriptors\"</span><span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">}</span> <span class=\"c\">// end on error</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span> <span class=\"c\">// end xhr.execute</span>","\t\t\t<span class=\"k\">}</span>  <span class=\"c\">//end else length was zero</span>","\t\t<span class=\"k\">}</span> <span class=\"c\">// end discoverDescriptors</span>","\t","<span class=\"k\">}</span><span class=\"k\">;</span>","","pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>Descriptor <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>json<span class=\"k\">)</span><span class=\"k\">{</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>name        <span class=\"k\">=</span> json<span class=\"k\">.</span>name <span class=\"k\">||</span> <span class=\"s\">'Unknown'</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>path        <span class=\"k\">=</span> json<span class=\"k\">.</span>path <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>datasources <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>queries     <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t<span class=\"c\">//console.log(this.path);</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>Descriptor<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","\taddDataSource<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>connection<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>j<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>datasources<span class=\"k\">.</span>length<span class=\"k\">;</span>i<span class=\"k\">&lt;</span>j<span class=\"k\">;</span>i<span class=\"k\">++)</span><span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>datasources<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">==</span> connection<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>datasources<span class=\"k\">.</span>push<span class=\"k\">(</span>connection<span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">,</span>addQuery<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>query<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>j<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>queries<span class=\"k\">.</span>length<span class=\"k\">;</span>i<span class=\"k\">&lt;</span>j<span class=\"k\">;</span>i<span class=\"k\">++)</span><span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>queries<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">==</span> query<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">//console.log('found something');</span>","\t\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>dataaccesses<span class=\"k\">.</span>push<span class=\"k\">(</span>access<span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">,</span>toXML<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">//var xmlDoc = document.implementation.createDocument(namespaceURL, 'CDADescriptor', null);</span>","\t\t","\t\t<span class=\"k\">var</span> file <span class=\"k\">=</span> <span class=\"s\">'&lt;?xml version=</span><span class=\"t\">\\\"</span><span class=\"s\">1.0</span><span class=\"t\">\\\"</span><span class=\"s\"> encoding=</span><span class=\"t\">\\\"</span><span class=\"s\">utf-8</span><span class=\"t\">\\\"</span><span class=\"s\">?&gt;'</span><span class=\"k\">;</span>","\t\tfile <span class=\"k\">+=</span> <span class=\"s\">'&lt;CDADescriptor&gt;&lt;DataSources&gt;'</span><span class=\"k\">;</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>j<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>datasources<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>j<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\t\tfile <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>datasources<span class=\"k\">[</span>i<span class=\"k\">].</span>toXML<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span>","\t\tfile <span class=\"k\">+=</span> <span class=\"s\">'&lt;/DataSources&gt;'</span><span class=\"k\">;</span>","\t\t<span class=\"c\">//console.log(this.dataaccesses.length);</span>","\t\t<span class=\"k\">var</span> myda<span class=\"k\">;</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span>i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>j<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>dataaccesses<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>j<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\t\tmyda <span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>dataaccesses<span class=\"k\">[</span>i<span class=\"k\">];</span>","\t\t\t<span class=\"c\">//console.log(myda);</span>","\t\t\tfile <span class=\"k\">+=</span> myda<span class=\"k\">.</span>toXML<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span>","\t\t","\t\tfile <span class=\"k\">+=</span> <span class=\"s\">'&lt;/CDADescriptor&gt;'</span><span class=\"k\">;</span>","\t\t<span class=\"k\">return</span> file<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">,</span>save<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>path<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>path <span class=\"k\">=</span> path<span class=\"k\">;</span>","\t\t$<span class=\"k\">.</span>post<span class=\"k\">(</span><span class=\"s\">\"content/cda/writeCdaFile\"</span><span class=\"k\">,</span><span class=\"k\">{</span>path<span class=\"k\">:</span>path<span class=\"k\">,</span>data<span class=\"k\">:</span><span class=\"k\">this</span><span class=\"k\">.</span>toXML<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t<span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">//console.log(data);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">,</span>discoverQueries<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>func<span class=\"k\">)</span> <span class=\"k\">{</span>","    \t\t<span class=\"k\">var</span> that <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","\t\t","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>that<span class=\"k\">.</span>queries<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tpentaho<span class=\"k\">.</span>xhr<span class=\"k\">.</span>execute<span class=\"k\">(</span><span class=\"s\">\"/pentaho/content/cda/listQueries\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\t\tasync<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","\t\t\t\tdataType<span class=\"k\">:</span> <span class=\"s\">\"json\"</span><span class=\"k\">,</span>","\t\t\t\ttype<span class=\"k\">:</span> <span class=\"s\">\"GET\"</span><span class=\"k\">,</span>","\t\t\t\tdata<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\t\t\tpath<span class=\"k\">:</span> that<span class=\"k\">.</span>path<span class=\"k\">,</span>","\t\t\t\t\toutputType<span class=\"k\">:</span><span class=\"s\">'json'</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t\tcomplete<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> queryList <span class=\"k\">=</span> eval<span class=\"k\">(</span><span class=\"s\">'('</span> <span class=\"k\">+</span> data <span class=\"k\">+</span> <span class=\"s\">')'</span> <span class=\"k\">),</span>","\t\t\t\t\trs<span class=\"k\">=</span>queryList<span class=\"k\">.</span>resultset<span class=\"k\">,</span> query<span class=\"k\">,</span> loc<span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span>query <span class=\"k\">in</span> rs<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t\t\t\t\tloc <span class=\"k\">=</span> rs<span class=\"k\">[</span>query<span class=\"k\">];</span>","\t\t\t\t\t\tthat<span class=\"k\">.</span>queries<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">new</span> pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>Query<span class=\"k\">(</span><span class=\"k\">{</span>id<span class=\"k\">:</span>loc<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> name<span class=\"k\">:</span>loc<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]||</span>loc<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> type<span class=\"k\">:</span>loc<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span> that<span class=\"k\">));</span>","\t\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t\t\tfunc<span class=\"k\">(</span>that<span class=\"k\">.</span>queries<span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\tfunc<span class=\"k\">(</span>that<span class=\"k\">.</span>queries<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","\t<span class=\"c\">//,load: function(){load using getCdaFile}</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>Connection <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>json<span class=\"k\">)</span><span class=\"k\">{</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>id   <span class=\"k\">=</span> json<span class=\"k\">.</span>id <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> json<span class=\"k\">.</span>type <span class=\"k\">||</span> <span class=\"s\">'metadata.metadata'</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>MQLConnection <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>json<span class=\"k\">)</span> <span class=\"k\">{</span>","\tpentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>Connection<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> json<span class=\"k\">);</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>type   <span class=\"k\">=</span> <span class=\"s\">'metadata.metadata'</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>domain <span class=\"k\">=</span> json<span class=\"k\">.</span>domain<span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>xmi    <span class=\"k\">=</span> <span class=\"s\">'metadata.xmi'</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","inheritPrototype<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>MQLConnection<span class=\"k\">,</span> pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>Connection<span class=\"k\">);</span>","","pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>MQLConnection<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toXML <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> <span class=\"s\">'&lt;Connection id=</span><span class=\"t\">\\\"</span><span class=\"s\">'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>id <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\"> type=</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">+</span> <span class=\"s\">'</span><span class=\"t\">\\\"</span><span class=\"s\">&gt;'</span><span class=\"k\">+</span>","\t\t<span class=\"s\">'&lt;DomainId&gt;'</span><span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>domain <span class=\"k\">+</span> <span class=\"s\">'&lt;/DomainId&gt;'</span> <span class=\"k\">+</span>","\t\t<span class=\"s\">'&lt;XmiFile&gt;'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>xmi    <span class=\"k\">+</span> <span class=\"s\">'&lt;/XmiFile&gt;'</span>  <span class=\"k\">+</span>","\t\t<span class=\"s\">'&lt;/Connection&gt;'</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>DataAccess <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>json<span class=\"k\">)</span><span class=\"k\">{</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>id   <span class=\"k\">=</span> json<span class=\"k\">.</span>id <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> json<span class=\"k\">.</span>type <span class=\"k\">||</span> <span class=\"s\">'mql'</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>name <span class=\"k\">=</span> json<span class=\"k\">.</span>name <span class=\"k\">||</span> <span class=\"s\">'Unknown'</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>query <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>access <span class=\"k\">=</span> <span class=\"s\">'public'</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>cache  <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>cacheDuration <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>parameters <span class=\"k\">=</span> <span class=\"k\">[];</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>DataAccess<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","\ttoXML<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> str <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","\t\tstr <span class=\"k\">=</span> <span class=\"s\">\"&lt;DataAccess id=</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>id<span class=\"k\">+</span><span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\"> connection=</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>connection<span class=\"k\">.</span>id<span class=\"k\">+</span><span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\"> type=</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>type<span class=\"k\">+</span><span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\"> access=</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>access<span class=\"k\">+</span><span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">&gt;\"</span><span class=\"k\">+</span>","\t\t\t<span class=\"s\">\"&lt;Name&gt;\"</span><span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>name <span class=\"k\">+</span><span class=\"s\">\"&lt;/Name&gt;\"</span><span class=\"k\">+</span>","\t\t\t<span class=\"s\">\"&lt;Query&gt;\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>query <span class=\"k\">+</span> <span class=\"s\">\"&lt;/Query&gt;\"</span><span class=\"k\">+</span>","\t\t\t<span class=\"s\">\"&lt;/DataAccess&gt;\"</span><span class=\"k\">;</span>","\t\t<span class=\"c\">//console.log(str);</span>","\t\t<span class=\"k\">return</span> str<span class=\"k\">;</span>","\t\t","\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"c\">// end toXML</span>","\tsetConnection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>conn<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>conn <span class=\"k\">instanceof</span> pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>Connection<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>connection <span class=\"k\">=</span> conn<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>connection <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span> <span class=\"c\">//end pentaho.cda.DataAccess.prototype</span>","","pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>Query <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>query<span class=\"k\">,</span> file<span class=\"k\">)</span><span class=\"k\">{</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>file <span class=\"k\">=</span> file<span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>id   <span class=\"k\">=</span> query<span class=\"k\">.</span>id   <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>name <span class=\"k\">=</span> query<span class=\"k\">.</span>name <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">;</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> query<span class=\"k\">.</span>type <span class=\"k\">||</span> <span class=\"s\">'mql'</span><span class=\"k\">;</span>","<span class=\"c\">/*</span>","<span class=\"c\">\tif (query.connection) {</span>","<span class=\"c\">\t\tthis.connection = query.connection;</span>","<span class=\"c\">\t} else {</span>","<span class=\"c\">\t\tthis.connection = new pentaho.cda.Connection({});</span>","<span class=\"c\">\t}</span>","<span class=\"c\">\tthis.columns    = [];</span>","<span class=\"c\">\tthis.outputs    = [];</span>","<span class=\"c\">\tthis.rawquery      = '';</span>","<span class=\"c\">\t*/</span>","\t","\t<span class=\"k\">this</span><span class=\"k\">.</span>parameters <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span>query<span class=\"k\">.</span>parameters <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>discoverParameters<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"c\">//do nothing</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>cda<span class=\"k\">.</span>Query<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","\tdiscoverParameters<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>func<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> that <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>parameters<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t$<span class=\"k\">.</span>getJSON<span class=\"k\">(</span><span class=\"s\">\"/pentaho/content/cda/listParameters\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>path<span class=\"k\">:</span>that<span class=\"k\">.</span>file<span class=\"k\">.</span>path<span class=\"k\">,</span> dataAccessId<span class=\"k\">:</span><span class=\"k\">this</span><span class=\"k\">.</span>id<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t<span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>j<span class=\"k\">=</span>data<span class=\"k\">.</span>resultset<span class=\"k\">.</span>length<span class=\"k\">;</span>i<span class=\"k\">&lt;</span>j<span class=\"k\">;</span>i<span class=\"k\">++)</span><span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> rs <span class=\"k\">=</span> data<span class=\"k\">.</span>resultset<span class=\"k\">[</span>i<span class=\"k\">];</span>","\t\t\t\t\t<span class=\"c\">//that.parameters[i] = new pentaho.cda.Parameter({id:rs[0], name:rs[1], type:rs[2]});</span>","\t\t\t\t\tthat<span class=\"k\">.</span>parameters<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>id<span class=\"k\">:</span>rs<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> name<span class=\"k\">:</span>rs<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">],</span> type<span class=\"k\">:</span>rs<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> func <span class=\"k\">==</span> <span class=\"s\">'function'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tfunc<span class=\"k\">(</span>that<span class=\"k\">.</span>parameters<span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\tfunc<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>parameters<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">,</span>execute<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>func<span class=\"k\">)</span><span class=\"k\">{</span>","\t$<span class=\"k\">.</span>getJSON<span class=\"k\">(</span><span class=\"s\">\"/pentaho/content/cda/doQuery\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>path<span class=\"k\">:</span><span class=\"k\">this</span><span class=\"k\">.</span>file<span class=\"k\">.</span>path<span class=\"k\">,</span> dataAccessId<span class=\"k\">:</span><span class=\"k\">this</span><span class=\"k\">.</span>id<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t\t<span class=\"c\">//console.log(columns);</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> func <span class=\"k\">==</span> <span class=\"s\">'function'</span><span class=\"k\">)</span><span class=\"k\">{</span>","\t\t\t\tfunc<span class=\"k\">(</span>data<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t<span class=\"c\">/*</span>","<span class=\"c\">\t@method addColumn</span>","<span class=\"c\">\t@description Utility method to add a Column to the query</span>","<span class=\"c\">\t*/</span>","\taddColumn<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>column<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"c\">//we are passed a Column object</span>","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">.</span>push<span class=\"k\">(</span>column<span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t<span class=\"c\">/*</span>","<span class=\"c\">\t@method removeColumn</span>","<span class=\"c\">\t@description Utility method to remove a Column from the query</span>","<span class=\"c\">\t*/</span>","\tremoveColumn<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>index<span class=\"k\">)</span><span class=\"k\">{</span>","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>column<span class=\"k\">.</span>splice<span class=\"k\">(</span>index<span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","<span class=\"k\">}</span> <span class=\"c\">// end pentaho.cda.Query.prototype</span>"];
_$jscoverage['dataapi/cda.js'][1]++;
pentaho = (((typeof pentaho) == "undefined")? {}: pentaho);
_$jscoverage['dataapi/cda.js'][2]++;
pentaho.cda = {descriptors: [], discoverDescriptors: (function (func) {
  _$jscoverage['dataapi/cda.js'][11]++;
  if ((pentaho.cda.descriptors.length > 0)) {
    _$jscoverage['dataapi/cda.js'][13]++;
    func(pentaho.cda.descriptors);
  }
  else {
    _$jscoverage['dataapi/cda.js'][17]++;
    pentaho.xhr.execute("/pentaho/content/cda/getCdaList", {async: true, dataType: "json", type: "GET", complete: (function (response) {
  _$jscoverage['dataapi/cda.js'][22]++;
  var fileList = eval(("(" + response + ")"));
  _$jscoverage['dataapi/cda.js'][23]++;
  var fileCount = fileList.resultset.length;
  _$jscoverage['dataapi/cda.js'][24]++;
  var result;
  _$jscoverage['dataapi/cda.js'][25]++;
  if ((fileCount > 0)) {
    _$jscoverage['dataapi/cda.js'][26]++;
    for (var i = 0; (i < fileCount); (i++)) {
      _$jscoverage['dataapi/cda.js'][27]++;
      result = fileList.resultset[i];
      _$jscoverage['dataapi/cda.js'][28]++;
      pentaho.cda.descriptors[i] = {name: result[0], path: result[1]};
}
  }
  _$jscoverage['dataapi/cda.js'][34]++;
  if (((typeof func) == "function")) {
    _$jscoverage['dataapi/cda.js'][35]++;
    func(pentaho.cda.descriptors);
  }
  else {
    _$jscoverage['dataapi/cda.js'][37]++;
    throw new Error("Unrecognized callback function to pentaho.cda.discoverDescriptors");
  }
}), error: (function (e) {
  _$jscoverage['dataapi/cda.js'][42]++;
  throw new Error("unable to get pentaho descriptors");
})});
  }
})};
_$jscoverage['dataapi/cda.js'][50]++;
pentaho.cda.Descriptor = (function (json) {
  _$jscoverage['dataapi/cda.js'][51]++;
  this.name = (json.name || "Unknown");
  _$jscoverage['dataapi/cda.js'][52]++;
  this.path = (json.path || "");
  _$jscoverage['dataapi/cda.js'][53]++;
  this.datasources = [];
  _$jscoverage['dataapi/cda.js'][54]++;
  this.queries = [];
});
_$jscoverage['dataapi/cda.js'][58]++;
pentaho.cda.Descriptor.prototype = {addDataSource: (function (connection) {
  _$jscoverage['dataapi/cda.js'][60]++;
  for (var i = 0, j = this.datasources.length; (i < j); (i++)) {
    _$jscoverage['dataapi/cda.js'][61]++;
    if ((this.datasources[i] == connection)) {
      _$jscoverage['dataapi/cda.js'][62]++;
      return;
    }
}
  _$jscoverage['dataapi/cda.js'][65]++;
  this.datasources.push(connection);
}), addQuery: (function (query) {
  _$jscoverage['dataapi/cda.js'][68]++;
  for (var i = 0, j = this.queries.length; (i < j); (i++)) {
    _$jscoverage['dataapi/cda.js'][69]++;
    if ((this.queries[i] == query)) {
      _$jscoverage['dataapi/cda.js'][71]++;
      return;
    }
}
  _$jscoverage['dataapi/cda.js'][74]++;
  this.dataaccesses.push(access);
}), toXML: (function () {
  _$jscoverage['dataapi/cda.js'][79]++;
  var file = "<?xml version=\"1.0\" encoding=\"utf-8\"?>";
  _$jscoverage['dataapi/cda.js'][80]++;
  file += "<CDADescriptor><DataSources>";
  _$jscoverage['dataapi/cda.js'][81]++;
  for (var i = 0, j = this.datasources.length; (i < j); (i++)) {
    _$jscoverage['dataapi/cda.js'][82]++;
    file += this.datasources[i].toXML();
}
  _$jscoverage['dataapi/cda.js'][84]++;
  file += "</DataSources>";
  _$jscoverage['dataapi/cda.js'][86]++;
  var myda;
  _$jscoverage['dataapi/cda.js'][87]++;
  for (((i = 0), (j = this.dataaccesses.length)); (i < j); (i++)) {
    _$jscoverage['dataapi/cda.js'][88]++;
    myda = this.dataaccesses[i];
    _$jscoverage['dataapi/cda.js'][90]++;
    file += myda.toXML();
}
  _$jscoverage['dataapi/cda.js'][93]++;
  file += "</CDADescriptor>";
  _$jscoverage['dataapi/cda.js'][94]++;
  return file;
}), save: (function (path) {
  _$jscoverage['dataapi/cda.js'][97]++;
  this.path = path;
  _$jscoverage['dataapi/cda.js'][98]++;
  $.post("content/cda/writeCdaFile", {path: path, data: this.toXML()}, (function (data) {
}));
}), discoverQueries: (function (func) {
  _$jscoverage['dataapi/cda.js'][104]++;
  var that = this;
  _$jscoverage['dataapi/cda.js'][106]++;
  if ((that.queries.length == 0)) {
    _$jscoverage['dataapi/cda.js'][107]++;
    pentaho.xhr.execute("/pentaho/content/cda/listQueries", {async: true, dataType: "json", type: "GET", data: {path: that.path, outputType: "json"}, complete: (function (data) {
  _$jscoverage['dataapi/cda.js'][116]++;
  var queryList = eval(("(" + data + ")")), rs = queryList.resultset, query, loc;
  _$jscoverage['dataapi/cda.js'][118]++;
  for (query in rs) {
    _$jscoverage['dataapi/cda.js'][119]++;
    loc = rs[query];
    _$jscoverage['dataapi/cda.js'][120]++;
    that.queries.push(new (pentaho.cda.Query)({id: loc[0], name: (loc[1] || loc[0]), type: loc[2]}, that));
}
  _$jscoverage['dataapi/cda.js'][121]++;
  ;
  _$jscoverage['dataapi/cda.js'][122]++;
  func(that.queries);
})});
  }
  else {
    _$jscoverage['dataapi/cda.js'][126]++;
    func(that.queries);
  }
})};
_$jscoverage['dataapi/cda.js'][132]++;
pentaho.cda.Connection = (function (json) {
  _$jscoverage['dataapi/cda.js'][133]++;
  this.id = (json.id || 1);
  _$jscoverage['dataapi/cda.js'][134]++;
  this.type = (json.type || "metadata.metadata");
});
_$jscoverage['dataapi/cda.js'][137]++;
pentaho.cda.MQLConnection = (function (json) {
  _$jscoverage['dataapi/cda.js'][138]++;
  pentaho.cda.Connection.call(this, json);
  _$jscoverage['dataapi/cda.js'][139]++;
  this.type = "metadata.metadata";
  _$jscoverage['dataapi/cda.js'][140]++;
  this.domain = json.domain;
  _$jscoverage['dataapi/cda.js'][141]++;
  this.xmi = "metadata.xmi";
});
_$jscoverage['dataapi/cda.js'][144]++;
inheritPrototype(pentaho.cda.MQLConnection, pentaho.cda.Connection);
_$jscoverage['dataapi/cda.js'][146]++;
pentaho.cda.MQLConnection.prototype.toXML = (function () {
  _$jscoverage['dataapi/cda.js'][147]++;
  return ("<Connection id=\"" + this.id + "\" type=\"" + this.type + "\">" + "<DomainId>" + this.domain + "</DomainId>" + "<XmiFile>" + this.xmi + "</XmiFile>" + "</Connection>");
});
_$jscoverage['dataapi/cda.js'][153]++;
pentaho.cda.DataAccess = (function (json) {
  _$jscoverage['dataapi/cda.js'][154]++;
  this.id = (json.id || 1);
  _$jscoverage['dataapi/cda.js'][155]++;
  this.type = (json.type || "mql");
  _$jscoverage['dataapi/cda.js'][156]++;
  this.name = (json.name || "Unknown");
  _$jscoverage['dataapi/cda.js'][157]++;
  this.query = "";
  _$jscoverage['dataapi/cda.js'][158]++;
  this.access = "public";
  _$jscoverage['dataapi/cda.js'][159]++;
  this.cache = true;
  _$jscoverage['dataapi/cda.js'][160]++;
  this.cacheDuration = 1;
  _$jscoverage['dataapi/cda.js'][161]++;
  this.columns = [];
  _$jscoverage['dataapi/cda.js'][162]++;
  this.parameters = [];
});
_$jscoverage['dataapi/cda.js'][165]++;
pentaho.cda.DataAccess.prototype = {toXML: (function () {
  _$jscoverage['dataapi/cda.js'][167]++;
  var str = "";
  _$jscoverage['dataapi/cda.js'][168]++;
  str = ("<DataAccess id=\"" + this.id + "\" connection=\"" + this.connection.id + "\" type=\"" + this.type + "\" access=\"" + this.access + "\">" + "<Name>" + this.name + "</Name>" + "<Query>" + this.query + "</Query>" + "</DataAccess>");
  _$jscoverage['dataapi/cda.js'][173]++;
  return str;
}), setConnection: (function (conn) {
  _$jscoverage['dataapi/cda.js'][177]++;
  if ((conn instanceof pentaho.cda.Connection)) {
    _$jscoverage['dataapi/cda.js'][178]++;
    this.connection = conn;
  }
  else {
    _$jscoverage['dataapi/cda.js'][180]++;
    this.connection = {};
  }
})};
_$jscoverage['dataapi/cda.js'][185]++;
pentaho.cda.Query = (function (query, file) {
  _$jscoverage['dataapi/cda.js'][186]++;
  this.file = file;
  _$jscoverage['dataapi/cda.js'][187]++;
  this.id = (query.id || 1);
  _$jscoverage['dataapi/cda.js'][188]++;
  this.name = (query.name || "");
  _$jscoverage['dataapi/cda.js'][189]++;
  this.type = (query.type || "mql");
  _$jscoverage['dataapi/cda.js'][201]++;
  this.parameters = [];
  _$jscoverage['dataapi/cda.js'][202]++;
  if ((query.parameters == null)) {
    _$jscoverage['dataapi/cda.js'][203]++;
    try {
      _$jscoverage['dataapi/cda.js'][204]++;
      this.discoverParameters();
    }
    catch (e) {
    }
  }
});
_$jscoverage['dataapi/cda.js'][212]++;
pentaho.cda.Query.prototype = {discoverParameters: (function (func) {
  _$jscoverage['dataapi/cda.js'][214]++;
  var that = this;
  _$jscoverage['dataapi/cda.js'][216]++;
  if ((this.parameters.length == 0)) {
    _$jscoverage['dataapi/cda.js'][217]++;
    $.getJSON("/pentaho/content/cda/listParameters", {path: that.file.path, dataAccessId: this.id}, (function (data) {
  _$jscoverage['dataapi/cda.js'][219]++;
  for (var i = 0, j = data.resultset.length; (i < j); (i++)) {
    _$jscoverage['dataapi/cda.js'][220]++;
    var rs = data.resultset[i];
    _$jscoverage['dataapi/cda.js'][222]++;
    that.parameters[i] = {id: rs[0], name: rs[1], type: rs[2]};
}
  _$jscoverage['dataapi/cda.js'][223]++;
  ;
  _$jscoverage['dataapi/cda.js'][224]++;
  if (((typeof func) == "function")) {
    _$jscoverage['dataapi/cda.js'][225]++;
    func(that.parameters);
  }
}));
  }
  else {
    _$jscoverage['dataapi/cda.js'][230]++;
    func(this.parameters);
  }
}), execute: (function (func) {
  _$jscoverage['dataapi/cda.js'][234]++;
  $.getJSON("/pentaho/content/cda/doQuery", {path: this.file.path, dataAccessId: this.id}, (function (data) {
  _$jscoverage['dataapi/cda.js'][237]++;
  if (((typeof func) == "function")) {
    _$jscoverage['dataapi/cda.js'][238]++;
    func(data);
  }
}));
}), addColumn: (function (column) {
  _$jscoverage['dataapi/cda.js'][247]++;
  this.columns.push(column);
}), removeColumn: (function (index) {
  _$jscoverage['dataapi/cda.js'][254]++;
  this.column.splice(index, 1);
})};
