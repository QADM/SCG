/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['util/spin.js']) {
  _$jscoverage['util/spin.js'] = [];
  _$jscoverage['util/spin.js'][2] = 0;
  _$jscoverage['util/spin.js'][9] = 0;
  _$jscoverage['util/spin.js'][17] = 0;
  _$jscoverage['util/spin.js'][18] = 0;
  _$jscoverage['util/spin.js'][21] = 0;
  _$jscoverage['util/spin.js'][22] = 0;
  _$jscoverage['util/spin.js'][28] = 0;
  _$jscoverage['util/spin.js'][29] = 0;
  _$jscoverage['util/spin.js'][30] = 0;
  _$jscoverage['util/spin.js'][32] = 0;
  _$jscoverage['util/spin.js'][38] = 0;
  _$jscoverage['util/spin.js'][39] = 0;
  _$jscoverage['util/spin.js'][40] = 0;
  _$jscoverage['util/spin.js'][41] = 0;
  _$jscoverage['util/spin.js'][49] = 0;
  _$jscoverage['util/spin.js'][50] = 0;
  _$jscoverage['util/spin.js'][56] = 0;
  _$jscoverage['util/spin.js'][57] = 0;
  _$jscoverage['util/spin.js'][66] = 0;
  _$jscoverage['util/spin.js'][68] = 0;
  _$jscoverage['util/spin.js'][74] = 0;
  _$jscoverage['util/spin.js'][75] = 0;
  _$jscoverage['util/spin.js'][79] = 0;
  _$jscoverage['util/spin.js'][80] = 0;
  _$jscoverage['util/spin.js'][81] = 0;
  _$jscoverage['util/spin.js'][82] = 0;
  _$jscoverage['util/spin.js'][83] = 0;
  _$jscoverage['util/spin.js'][90] = 0;
  _$jscoverage['util/spin.js'][91] = 0;
  _$jscoverage['util/spin.js'][92] = 0;
  _$jscoverage['util/spin.js'][94] = 0;
  _$jscoverage['util/spin.js'][100] = 0;
  _$jscoverage['util/spin.js'][101] = 0;
  _$jscoverage['util/spin.js'][102] = 0;
  _$jscoverage['util/spin.js'][103] = 0;
  _$jscoverage['util/spin.js'][104] = 0;
  _$jscoverage['util/spin.js'][106] = 0;
  _$jscoverage['util/spin.js'][112] = 0;
  _$jscoverage['util/spin.js'][113] = 0;
  _$jscoverage['util/spin.js'][114] = 0;
  _$jscoverage['util/spin.js'][115] = 0;
  _$jscoverage['util/spin.js'][117] = 0;
  _$jscoverage['util/spin.js'][120] = 0;
  _$jscoverage['util/spin.js'][139] = 0;
  _$jscoverage['util/spin.js'][140] = 0;
  _$jscoverage['util/spin.js'][141] = 0;
  _$jscoverage['util/spin.js'][144] = 0;
  _$jscoverage['util/spin.js'][146] = 0;
  _$jscoverage['util/spin.js'][148] = 0;
  _$jscoverage['util/spin.js'][149] = 0;
  _$jscoverage['util/spin.js'][156] = 0;
  _$jscoverage['util/spin.js'][157] = 0;
  _$jscoverage['util/spin.js'][158] = 0;
  _$jscoverage['util/spin.js'][159] = 0;
  _$jscoverage['util/spin.js'][160] = 0;
  _$jscoverage['util/spin.js'][166] = 0;
  _$jscoverage['util/spin.js'][167] = 0;
  _$jscoverage['util/spin.js'][169] = 0;
  _$jscoverage['util/spin.js'][171] = 0;
  _$jscoverage['util/spin.js'][177] = 0;
  _$jscoverage['util/spin.js'][178] = 0;
  _$jscoverage['util/spin.js'][179] = 0;
  _$jscoverage['util/spin.js'][180] = 0;
  _$jscoverage['util/spin.js'][181] = 0;
  _$jscoverage['util/spin.js'][183] = 0;
  _$jscoverage['util/spin.js'][186] = 0;
  _$jscoverage['util/spin.js'][190] = 0;
  _$jscoverage['util/spin.js'][191] = 0;
  _$jscoverage['util/spin.js'][192] = 0;
  _$jscoverage['util/spin.js'][193] = 0;
  _$jscoverage['util/spin.js'][194] = 0;
  _$jscoverage['util/spin.js'][196] = 0;
  _$jscoverage['util/spin.js'][200] = 0;
  _$jscoverage['util/spin.js'][203] = 0;
  _$jscoverage['util/spin.js'][204] = 0;
  _$jscoverage['util/spin.js'][216] = 0;
  _$jscoverage['util/spin.js'][217] = 0;
  _$jscoverage['util/spin.js'][225] = 0;
  _$jscoverage['util/spin.js'][227] = 0;
  _$jscoverage['util/spin.js'][229] = 0;
  _$jscoverage['util/spin.js'][233] = 0;
  _$jscoverage['util/spin.js'][245] = 0;
  _$jscoverage['util/spin.js'][247] = 0;
  _$jscoverage['util/spin.js'][248] = 0;
  _$jscoverage['util/spin.js'][251] = 0;
  _$jscoverage['util/spin.js'][253] = 0;
  _$jscoverage['util/spin.js'][256] = 0;
  _$jscoverage['util/spin.js'][258] = 0;
  _$jscoverage['util/spin.js'][259] = 0;
  _$jscoverage['util/spin.js'][262] = 0;
  _$jscoverage['util/spin.js'][263] = 0;
  _$jscoverage['util/spin.js'][272] = 0;
  _$jscoverage['util/spin.js'][276] = 0;
  _$jscoverage['util/spin.js'][277] = 0;
  _$jscoverage['util/spin.js'][293] = 0;
  _$jscoverage['util/spin.js'][294] = 0;
  _$jscoverage['util/spin.js'][295] = 0;
  _$jscoverage['util/spin.js'][297] = 0;
  _$jscoverage['util/spin.js'][298] = 0;
  _$jscoverage['util/spin.js'][301] = 0;
  _$jscoverage['util/spin.js'][302] = 0;
  _$jscoverage['util/spin.js'][303] = 0;
  _$jscoverage['util/spin.js'][304] = 0;
  _$jscoverage['util/spin.js'][305] = 0;
  _$jscoverage['util/spin.js'][306] = 0;
  _$jscoverage['util/spin.js'][311] = 0;
  _$jscoverage['util/spin.js'][314] = 0;
  _$jscoverage['util/spin.js'][315] = 0;
  _$jscoverage['util/spin.js'][317] = 0;
}
_$jscoverage['util/spin.js'].source = ["<span class=\"c\">//fgnass.github.com/spin.js#v1.2.6</span>","<span class=\"k\">!</span><span class=\"k\">function</span><span class=\"k\">(</span>window<span class=\"k\">,</span> document<span class=\"k\">,</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Copyright (c) 2011 Felix Gnass [fgnass at neteye dot de]</span>","<span class=\"c\">   * Licensed under the MIT license</span>","<span class=\"c\">   */</span>","","  <span class=\"k\">var</span> prefixes <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">'webkit'</span><span class=\"k\">,</span> <span class=\"s\">'Moz'</span><span class=\"k\">,</span> <span class=\"s\">'ms'</span><span class=\"k\">,</span> <span class=\"s\">'O'</span><span class=\"k\">]</span> <span class=\"c\">/* Vendor prefixes */</span>","    <span class=\"k\">,</span> animations <span class=\"k\">=</span> <span class=\"k\">{}</span> <span class=\"c\">/* Animation rules keyed by their name */</span>","    <span class=\"k\">,</span> useCssAnimations","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Utility function to create elements. If no tag name is given,</span>","<span class=\"c\">   * a DIV is created. Optionally properties can be passed.</span>","<span class=\"c\">   */</span>","  <span class=\"k\">function</span> createEl<span class=\"k\">(</span>tag<span class=\"k\">,</span> prop<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> el <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span>tag <span class=\"k\">||</span> <span class=\"s\">'div'</span><span class=\"k\">)</span>","      <span class=\"k\">,</span> n","","    <span class=\"k\">for</span><span class=\"k\">(</span>n <span class=\"k\">in</span> prop<span class=\"k\">)</span> el<span class=\"k\">[</span>n<span class=\"k\">]</span> <span class=\"k\">=</span> prop<span class=\"k\">[</span>n<span class=\"k\">]</span>","    <span class=\"k\">return</span> el","  <span class=\"k\">}</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Appends children and returns the parent.</span>","<span class=\"c\">   */</span>","  <span class=\"k\">function</span> ins<span class=\"k\">(</span>parent <span class=\"c\">/* child1, child2, ...*/</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">1</span><span class=\"k\">,</span> n<span class=\"k\">=</span>arguments<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>n<span class=\"k\">;</span> i<span class=\"k\">++)</span>","      parent<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>arguments<span class=\"k\">[</span>i<span class=\"k\">])</span>","","    <span class=\"k\">return</span> parent","  <span class=\"k\">}</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Insert a new stylesheet to hold the @keyframe or VML rules.</span>","<span class=\"c\">   */</span>","  <span class=\"k\">var</span> sheet <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> el <span class=\"k\">=</span> createEl<span class=\"k\">(</span><span class=\"s\">'style'</span><span class=\"k\">,</span> <span class=\"k\">{</span>type <span class=\"k\">:</span> <span class=\"s\">'text/css'</span><span class=\"k\">}</span><span class=\"k\">)</span>","    ins<span class=\"k\">(</span>document<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">'head'</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">],</span> el<span class=\"k\">)</span>","    <span class=\"k\">return</span> el<span class=\"k\">.</span>sheet <span class=\"k\">||</span> el<span class=\"k\">.</span>styleSheet","  <span class=\"k\">}</span><span class=\"k\">()</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Creates an opacity keyframe animation rule and returns its name.</span>","<span class=\"c\">   * Since most mobile Webkits have timing issues with animation-delay,</span>","<span class=\"c\">   * we create separate rules for each line/segment.</span>","<span class=\"c\">   */</span>","  <span class=\"k\">function</span> addAnimation<span class=\"k\">(</span>alpha<span class=\"k\">,</span> trail<span class=\"k\">,</span> i<span class=\"k\">,</span> lines<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> name <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">'opacity'</span><span class=\"k\">,</span> trail<span class=\"k\">,</span> <span class=\"k\">~~(</span>alpha<span class=\"k\">*</span><span class=\"s\">100</span><span class=\"k\">),</span> i<span class=\"k\">,</span> lines<span class=\"k\">].</span>join<span class=\"k\">(</span><span class=\"s\">'-'</span><span class=\"k\">)</span>","      <span class=\"k\">,</span> start <span class=\"k\">=</span> <span class=\"s\">0.01</span> <span class=\"k\">+</span> i<span class=\"k\">/</span>lines<span class=\"k\">*</span><span class=\"s\">100</span>","      <span class=\"k\">,</span> z <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span><span class=\"s\">1</span> <span class=\"k\">-</span> <span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">-</span>alpha<span class=\"k\">)</span> <span class=\"k\">/</span> trail <span class=\"k\">*</span> <span class=\"k\">(</span><span class=\"s\">100</span><span class=\"k\">-</span>start<span class=\"k\">),</span> alpha<span class=\"k\">)</span>","      <span class=\"k\">,</span> prefix <span class=\"k\">=</span> useCssAnimations<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> useCssAnimations<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'Animation'</span><span class=\"k\">)).</span>toLowerCase<span class=\"k\">()</span>","      <span class=\"k\">,</span> pre <span class=\"k\">=</span> prefix <span class=\"k\">&amp;&amp;</span> <span class=\"s\">'-'</span><span class=\"k\">+</span>prefix<span class=\"k\">+</span><span class=\"s\">'-'</span> <span class=\"k\">||</span> <span class=\"s\">''</span>","","    <span class=\"k\">if</span> <span class=\"k\">(!</span>animations<span class=\"k\">[</span>name<span class=\"k\">])</span> <span class=\"k\">{</span>","      sheet<span class=\"k\">.</span>insertRule<span class=\"k\">(</span>","        <span class=\"s\">'@'</span> <span class=\"k\">+</span> pre <span class=\"k\">+</span> <span class=\"s\">'keyframes '</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">'{'</span> <span class=\"k\">+</span>","        <span class=\"s\">'0%{opacity:'</span> <span class=\"k\">+</span> z <span class=\"k\">+</span> <span class=\"s\">'}'</span> <span class=\"k\">+</span>","        start <span class=\"k\">+</span> <span class=\"s\">'%{opacity:'</span> <span class=\"k\">+</span> alpha <span class=\"k\">+</span> <span class=\"s\">'}'</span> <span class=\"k\">+</span>","        <span class=\"k\">(</span>start<span class=\"k\">+</span><span class=\"s\">0.01</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'%{opacity:1}'</span> <span class=\"k\">+</span>","        <span class=\"k\">(</span>start<span class=\"k\">+</span>trail<span class=\"k\">)</span> <span class=\"k\">%</span> <span class=\"s\">100</span> <span class=\"k\">+</span> <span class=\"s\">'%{opacity:'</span> <span class=\"k\">+</span> alpha <span class=\"k\">+</span> <span class=\"s\">'}'</span> <span class=\"k\">+</span>","        <span class=\"s\">'100%{opacity:'</span> <span class=\"k\">+</span> z <span class=\"k\">+</span> <span class=\"s\">'}'</span> <span class=\"k\">+</span>","        <span class=\"s\">'}'</span><span class=\"k\">,</span> sheet<span class=\"k\">.</span>cssRules<span class=\"k\">.</span>length<span class=\"k\">)</span>","","      animations<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">1</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> name","  <span class=\"k\">}</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Tries various vendor prefixes and returns the first supported property.</span>","<span class=\"c\">   **/</span>","  <span class=\"k\">function</span> vendor<span class=\"k\">(</span>el<span class=\"k\">,</span> prop<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> s <span class=\"k\">=</span> el<span class=\"k\">.</span>style","      <span class=\"k\">,</span> pp","      <span class=\"k\">,</span> i","","    <span class=\"k\">if</span><span class=\"k\">(</span>s<span class=\"k\">[</span>prop<span class=\"k\">]</span> <span class=\"k\">!==</span> undefined<span class=\"k\">)</span> <span class=\"k\">return</span> prop","    prop <span class=\"k\">=</span> prop<span class=\"k\">.</span>charAt<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">).</span>toUpperCase<span class=\"k\">()</span> <span class=\"k\">+</span> prop<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">for</span><span class=\"k\">(</span>i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>prefixes<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","      pp <span class=\"k\">=</span> prefixes<span class=\"k\">[</span>i<span class=\"k\">]+</span>prop","      <span class=\"k\">if</span><span class=\"k\">(</span>s<span class=\"k\">[</span>pp<span class=\"k\">]</span> <span class=\"k\">!==</span> undefined<span class=\"k\">)</span> <span class=\"k\">return</span> pp","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Sets multiple style properties at once.</span>","<span class=\"c\">   */</span>","  <span class=\"k\">function</span> css<span class=\"k\">(</span>el<span class=\"k\">,</span> prop<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> n <span class=\"k\">in</span> prop<span class=\"k\">)</span>","      el<span class=\"k\">.</span>style<span class=\"k\">[</span>vendor<span class=\"k\">(</span>el<span class=\"k\">,</span> n<span class=\"k\">)||</span>n<span class=\"k\">]</span> <span class=\"k\">=</span> prop<span class=\"k\">[</span>n<span class=\"k\">]</span>","","    <span class=\"k\">return</span> el","  <span class=\"k\">}</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Fills in default values.</span>","<span class=\"c\">   */</span>","  <span class=\"k\">function</span> merge<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> arguments<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> def <span class=\"k\">=</span> arguments<span class=\"k\">[</span>i<span class=\"k\">]</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> n <span class=\"k\">in</span> def<span class=\"k\">)</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">[</span>n<span class=\"k\">]</span> <span class=\"k\">===</span> undefined<span class=\"k\">)</span> obj<span class=\"k\">[</span>n<span class=\"k\">]</span> <span class=\"k\">=</span> def<span class=\"k\">[</span>n<span class=\"k\">]</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> obj","  <span class=\"k\">}</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Returns the absolute page-offset of the given element.</span>","<span class=\"c\">   */</span>","  <span class=\"k\">function</span> pos<span class=\"k\">(</span>el<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> o <span class=\"k\">=</span> <span class=\"k\">{</span> x<span class=\"k\">:</span>el<span class=\"k\">.</span>offsetLeft<span class=\"k\">,</span> y<span class=\"k\">:</span>el<span class=\"k\">.</span>offsetTop <span class=\"k\">}</span>","    <span class=\"k\">while</span><span class=\"k\">((</span>el <span class=\"k\">=</span> el<span class=\"k\">.</span>offsetParent<span class=\"k\">))</span>","      o<span class=\"k\">.</span>x<span class=\"k\">+=</span>el<span class=\"k\">.</span>offsetLeft<span class=\"k\">,</span> o<span class=\"k\">.</span>y<span class=\"k\">+=</span>el<span class=\"k\">.</span>offsetTop","","    <span class=\"k\">return</span> o","  <span class=\"k\">}</span>","","  <span class=\"k\">var</span> defaults <span class=\"k\">=</span> <span class=\"k\">{</span>","    lines<span class=\"k\">:</span> <span class=\"s\">12</span><span class=\"k\">,</span>            <span class=\"c\">// The number of lines to draw</span>","    length<span class=\"k\">:</span> <span class=\"s\">7</span><span class=\"k\">,</span>            <span class=\"c\">// The length of each line</span>","    width<span class=\"k\">:</span> <span class=\"s\">5</span><span class=\"k\">,</span>             <span class=\"c\">// The line thickness</span>","    radius<span class=\"k\">:</span> <span class=\"s\">10</span><span class=\"k\">,</span>           <span class=\"c\">// The radius of the inner circle</span>","    rotate<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>            <span class=\"c\">// Rotation offset</span>","    corners<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>           <span class=\"c\">// Roundness (0..1)</span>","    color<span class=\"k\">:</span> <span class=\"s\">'#000'</span><span class=\"k\">,</span>        <span class=\"c\">// #rgb or #rrggbb</span>","    speed<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>             <span class=\"c\">// Rounds per second</span>","    trail<span class=\"k\">:</span> <span class=\"s\">100</span><span class=\"k\">,</span>           <span class=\"c\">// Afterglow percentage</span>","    opacity<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">/</span><span class=\"s\">4</span><span class=\"k\">,</span>         <span class=\"c\">// Opacity of the lines</span>","    fps<span class=\"k\">:</span> <span class=\"s\">20</span><span class=\"k\">,</span>              <span class=\"c\">// Frames per second when using setTimeout()</span>","    zIndex<span class=\"k\">:</span> <span class=\"s\">2e9</span><span class=\"k\">,</span>          <span class=\"c\">// Use a high z-index by default</span>","    className<span class=\"k\">:</span> <span class=\"s\">'spinner'</span><span class=\"k\">,</span> <span class=\"c\">// CSS class to assign to the element</span>","    top<span class=\"k\">:</span> <span class=\"s\">'auto'</span><span class=\"k\">,</span>          <span class=\"c\">// center vertically</span>","    left<span class=\"k\">:</span> <span class=\"s\">'auto'</span>          <span class=\"c\">// center horizontally</span>","  <span class=\"k\">}</span>","","  <span class=\"c\">/** The constructor */</span>","  <span class=\"k\">var</span> Spinner <span class=\"k\">=</span> <span class=\"k\">function</span> Spinner<span class=\"k\">(</span>o<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>spin<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">new</span> Spinner<span class=\"k\">(</span>o<span class=\"k\">)</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>opts <span class=\"k\">=</span> merge<span class=\"k\">(</span>o <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">,</span> Spinner<span class=\"k\">.</span>defaults<span class=\"k\">,</span> defaults<span class=\"k\">)</span>","  <span class=\"k\">}</span>","","  Spinner<span class=\"k\">.</span>defaults <span class=\"k\">=</span> <span class=\"k\">{}</span>","","  merge<span class=\"k\">(</span>Spinner<span class=\"k\">.</span>prototype<span class=\"k\">,</span> <span class=\"k\">{</span>","    spin<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>target<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>stop<span class=\"k\">()</span>","      <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span>","        <span class=\"k\">,</span> o <span class=\"k\">=</span> self<span class=\"k\">.</span>opts","        <span class=\"k\">,</span> el <span class=\"k\">=</span> self<span class=\"k\">.</span>el <span class=\"k\">=</span> css<span class=\"k\">(</span>createEl<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">{</span>className<span class=\"k\">:</span> o<span class=\"k\">.</span>className<span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"k\">{</span>position<span class=\"k\">:</span> <span class=\"s\">'relative'</span><span class=\"k\">,</span> width<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> zIndex<span class=\"k\">:</span> o<span class=\"k\">.</span>zIndex<span class=\"k\">}</span><span class=\"k\">)</span>","        <span class=\"k\">,</span> mid <span class=\"k\">=</span> o<span class=\"k\">.</span>radius<span class=\"k\">+</span>o<span class=\"k\">.</span>length<span class=\"k\">+</span>o<span class=\"k\">.</span>width","        <span class=\"k\">,</span> ep <span class=\"c\">// element position</span>","        <span class=\"k\">,</span> tp <span class=\"c\">// target position</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>target<span class=\"k\">)</span> <span class=\"k\">{</span>","        target<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>el<span class=\"k\">,</span> target<span class=\"k\">.</span>firstChild<span class=\"k\">||</span><span class=\"k\">null</span><span class=\"k\">)</span>","        tp <span class=\"k\">=</span> pos<span class=\"k\">(</span>target<span class=\"k\">)</span>","        ep <span class=\"k\">=</span> pos<span class=\"k\">(</span>el<span class=\"k\">)</span>","        css<span class=\"k\">(</span>el<span class=\"k\">,</span> <span class=\"k\">{</span>","          left<span class=\"k\">:</span> <span class=\"k\">(</span>o<span class=\"k\">.</span>left <span class=\"k\">==</span> <span class=\"s\">'auto'</span> <span class=\"k\">?</span> tp<span class=\"k\">.</span>x<span class=\"k\">-</span>ep<span class=\"k\">.</span>x <span class=\"k\">+</span> <span class=\"k\">(</span>target<span class=\"k\">.</span>offsetWidth <span class=\"k\">&gt;&gt;</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">:</span> parseInt<span class=\"k\">(</span>o<span class=\"k\">.</span>left<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">)</span> <span class=\"k\">+</span> mid<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'px'</span><span class=\"k\">,</span>","          top<span class=\"k\">:</span> <span class=\"k\">(</span>o<span class=\"k\">.</span>top <span class=\"k\">==</span> <span class=\"s\">'auto'</span> <span class=\"k\">?</span> tp<span class=\"k\">.</span>y<span class=\"k\">-</span>ep<span class=\"k\">.</span>y <span class=\"k\">+</span> <span class=\"k\">(</span>target<span class=\"k\">.</span>offsetHeight <span class=\"k\">&gt;&gt;</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">:</span> parseInt<span class=\"k\">(</span>o<span class=\"k\">.</span>top<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">)</span> <span class=\"k\">+</span> mid<span class=\"k\">)</span>  <span class=\"k\">+</span> <span class=\"s\">'px'</span>","        <span class=\"k\">}</span><span class=\"k\">)</span>","      <span class=\"k\">}</span>","","      el<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">'aria-role'</span><span class=\"k\">,</span> <span class=\"s\">'progressbar'</span><span class=\"k\">)</span>","      self<span class=\"k\">.</span>lines<span class=\"k\">(</span>el<span class=\"k\">,</span> self<span class=\"k\">.</span>opts<span class=\"k\">)</span>","","      <span class=\"k\">if</span> <span class=\"k\">(!</span>useCssAnimations<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// No CSS animation support, use setTimeout() instead</span>","        <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span>","          <span class=\"k\">,</span> fps <span class=\"k\">=</span> o<span class=\"k\">.</span>fps","          <span class=\"k\">,</span> f <span class=\"k\">=</span> fps<span class=\"k\">/</span>o<span class=\"k\">.</span>speed","          <span class=\"k\">,</span> ostep <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">-</span>o<span class=\"k\">.</span>opacity<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"k\">(</span>f<span class=\"k\">*</span>o<span class=\"k\">.</span>trail <span class=\"k\">/</span> <span class=\"s\">100</span><span class=\"k\">)</span>","          <span class=\"k\">,</span> astep <span class=\"k\">=</span> f<span class=\"k\">/</span>o<span class=\"k\">.</span>lines","","        <span class=\"k\">;(</span><span class=\"k\">function</span> anim<span class=\"k\">()</span> <span class=\"k\">{</span>","          i<span class=\"k\">++;</span>","          <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> s<span class=\"k\">=</span>o<span class=\"k\">.</span>lines<span class=\"k\">;</span> s<span class=\"k\">;</span> s<span class=\"k\">--)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> alpha <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">-(</span>i<span class=\"k\">+</span>s<span class=\"k\">*</span>astep<span class=\"k\">)%</span>f <span class=\"k\">*</span> ostep<span class=\"k\">,</span> o<span class=\"k\">.</span>opacity<span class=\"k\">)</span>","            self<span class=\"k\">.</span>opacity<span class=\"k\">(</span>el<span class=\"k\">,</span> o<span class=\"k\">.</span>lines<span class=\"k\">-</span>s<span class=\"k\">,</span> alpha<span class=\"k\">,</span> o<span class=\"k\">)</span>","          <span class=\"k\">}</span>","          self<span class=\"k\">.</span>timeout <span class=\"k\">=</span> self<span class=\"k\">.</span>el <span class=\"k\">&amp;&amp;</span> setTimeout<span class=\"k\">(</span>anim<span class=\"k\">,</span> <span class=\"k\">~~(</span><span class=\"s\">1000</span><span class=\"k\">/</span>fps<span class=\"k\">))</span>","        <span class=\"k\">}</span><span class=\"k\">)()</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> self","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    stop<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> el <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>el","      <span class=\"k\">if</span> <span class=\"k\">(</span>el<span class=\"k\">)</span> <span class=\"k\">{</span>","        clearTimeout<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>timeout<span class=\"k\">)</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>el<span class=\"k\">.</span>parentNode<span class=\"k\">)</span> el<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>el<span class=\"k\">)</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>el <span class=\"k\">=</span> undefined","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    lines<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>el<span class=\"k\">,</span> o<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span>","        <span class=\"k\">,</span> seg","","      <span class=\"k\">function</span> fill<span class=\"k\">(</span>color<span class=\"k\">,</span> shadow<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> css<span class=\"k\">(</span>createEl<span class=\"k\">(),</span> <span class=\"k\">{</span>","          position<span class=\"k\">:</span> <span class=\"s\">'absolute'</span><span class=\"k\">,</span>","          width<span class=\"k\">:</span> <span class=\"k\">(</span>o<span class=\"k\">.</span>length<span class=\"k\">+</span>o<span class=\"k\">.</span>width<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'px'</span><span class=\"k\">,</span>","          height<span class=\"k\">:</span> o<span class=\"k\">.</span>width <span class=\"k\">+</span> <span class=\"s\">'px'</span><span class=\"k\">,</span>","          background<span class=\"k\">:</span> color<span class=\"k\">,</span>","          boxShadow<span class=\"k\">:</span> shadow<span class=\"k\">,</span>","          transformOrigin<span class=\"k\">:</span> <span class=\"s\">'left'</span><span class=\"k\">,</span>","          transform<span class=\"k\">:</span> <span class=\"s\">'rotate('</span> <span class=\"k\">+</span> <span class=\"k\">~~(</span><span class=\"s\">360</span><span class=\"k\">/</span>o<span class=\"k\">.</span>lines<span class=\"k\">*</span>i<span class=\"k\">+</span>o<span class=\"k\">.</span>rotate<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'deg) translate('</span> <span class=\"k\">+</span> o<span class=\"k\">.</span>radius<span class=\"k\">+</span><span class=\"s\">'px'</span> <span class=\"k\">+</span><span class=\"s\">',0)'</span><span class=\"k\">,</span>","          borderRadius<span class=\"k\">:</span> <span class=\"k\">(</span>o<span class=\"k\">.</span>corners <span class=\"k\">*</span> o<span class=\"k\">.</span>width<span class=\"k\">&gt;&gt;</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'px'</span>","        <span class=\"k\">}</span><span class=\"k\">)</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">for</span> <span class=\"k\">(;</span> i <span class=\"k\">&lt;</span> o<span class=\"k\">.</span>lines<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        seg <span class=\"k\">=</span> css<span class=\"k\">(</span>createEl<span class=\"k\">(),</span> <span class=\"k\">{</span>","          position<span class=\"k\">:</span> <span class=\"s\">'absolute'</span><span class=\"k\">,</span>","          top<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">+~(</span>o<span class=\"k\">.</span>width<span class=\"k\">/</span><span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'px'</span><span class=\"k\">,</span>","          transform<span class=\"k\">:</span> o<span class=\"k\">.</span>hwaccel <span class=\"k\">?</span> <span class=\"s\">'translate3d(0,0,0)'</span> <span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">,</span>","          opacity<span class=\"k\">:</span> o<span class=\"k\">.</span>opacity<span class=\"k\">,</span>","          animation<span class=\"k\">:</span> useCssAnimations <span class=\"k\">&amp;&amp;</span> addAnimation<span class=\"k\">(</span>o<span class=\"k\">.</span>opacity<span class=\"k\">,</span> o<span class=\"k\">.</span>trail<span class=\"k\">,</span> i<span class=\"k\">,</span> o<span class=\"k\">.</span>lines<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">' '</span> <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">/</span>o<span class=\"k\">.</span>speed <span class=\"k\">+</span> <span class=\"s\">'s linear infinite'</span>","        <span class=\"k\">}</span><span class=\"k\">)</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>o<span class=\"k\">.</span>shadow<span class=\"k\">)</span> ins<span class=\"k\">(</span>seg<span class=\"k\">,</span> css<span class=\"k\">(</span>fill<span class=\"k\">(</span><span class=\"s\">'#000'</span><span class=\"k\">,</span> <span class=\"s\">'0 0 4px '</span> <span class=\"k\">+</span> <span class=\"s\">'#000'</span><span class=\"k\">),</span> <span class=\"k\">{</span>top<span class=\"k\">:</span> <span class=\"s\">2</span><span class=\"k\">+</span><span class=\"s\">'px'</span><span class=\"k\">}</span><span class=\"k\">))</span>","","        ins<span class=\"k\">(</span>el<span class=\"k\">,</span> ins<span class=\"k\">(</span>seg<span class=\"k\">,</span> fill<span class=\"k\">(</span>o<span class=\"k\">.</span>color<span class=\"k\">,</span> <span class=\"s\">'0 0 1px rgba(0,0,0,.1)'</span><span class=\"k\">)))</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> el","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    opacity<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>el<span class=\"k\">,</span> i<span class=\"k\">,</span> val<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> el<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length<span class=\"k\">)</span> el<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>i<span class=\"k\">].</span>style<span class=\"k\">.</span>opacity <span class=\"k\">=</span> val","    <span class=\"k\">}</span>","","  <span class=\"k\">}</span><span class=\"k\">)</span>","","  <span class=\"c\">/////////////////////////////////////////////////////////////////////////</span>","  <span class=\"c\">// VML rendering for IE</span>","  <span class=\"c\">/////////////////////////////////////////////////////////////////////////</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Check and init VML support</span>","<span class=\"c\">   */</span>","  <span class=\"k\">;(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","    <span class=\"k\">function</span> vml<span class=\"k\">(</span>tag<span class=\"k\">,</span> attr<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> createEl<span class=\"k\">(</span><span class=\"s\">'&lt;'</span> <span class=\"k\">+</span> tag <span class=\"k\">+</span> <span class=\"s\">' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\"&gt;'</span><span class=\"k\">,</span> attr<span class=\"k\">)</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> s <span class=\"k\">=</span> css<span class=\"k\">(</span>createEl<span class=\"k\">(</span><span class=\"s\">'group'</span><span class=\"k\">),</span> <span class=\"k\">{</span>behavior<span class=\"k\">:</span> <span class=\"s\">'url(#default#VML)'</span><span class=\"k\">}</span><span class=\"k\">)</span>","","    <span class=\"k\">if</span> <span class=\"k\">(!</span>vendor<span class=\"k\">(</span>s<span class=\"k\">,</span> <span class=\"s\">'transform'</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> s<span class=\"k\">.</span>adj<span class=\"k\">)</span> <span class=\"k\">{</span>","","      <span class=\"c\">// VML support detected. Insert CSS rule ...</span>","      sheet<span class=\"k\">.</span>addRule<span class=\"k\">(</span><span class=\"s\">'.spin-vml'</span><span class=\"k\">,</span> <span class=\"s\">'behavior:url(#default#VML)'</span><span class=\"k\">)</span>","","      Spinner<span class=\"k\">.</span>prototype<span class=\"k\">.</span>lines <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>el<span class=\"k\">,</span> o<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> r <span class=\"k\">=</span> o<span class=\"k\">.</span>length<span class=\"k\">+</span>o<span class=\"k\">.</span>width","          <span class=\"k\">,</span> s <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">*</span>r","","        <span class=\"k\">function</span> grp<span class=\"k\">()</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> css<span class=\"k\">(</span>","            vml<span class=\"k\">(</span><span class=\"s\">'group'</span><span class=\"k\">,</span> <span class=\"k\">{</span>","              coordsize<span class=\"k\">:</span> s <span class=\"k\">+</span> <span class=\"s\">' '</span> <span class=\"k\">+</span> s<span class=\"k\">,</span>","              coordorigin<span class=\"k\">:</span> <span class=\"k\">-</span>r <span class=\"k\">+</span> <span class=\"s\">' '</span> <span class=\"k\">+</span> <span class=\"k\">-</span>r","            <span class=\"k\">}</span><span class=\"k\">),</span>","            <span class=\"k\">{</span> width<span class=\"k\">:</span> s<span class=\"k\">,</span> height<span class=\"k\">:</span> s <span class=\"k\">}</span>","          <span class=\"k\">)</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> margin <span class=\"k\">=</span> <span class=\"k\">-(</span>o<span class=\"k\">.</span>width<span class=\"k\">+</span>o<span class=\"k\">.</span>length<span class=\"k\">)*</span><span class=\"s\">2</span> <span class=\"k\">+</span> <span class=\"s\">'px'</span>","          <span class=\"k\">,</span> g <span class=\"k\">=</span> css<span class=\"k\">(</span>grp<span class=\"k\">(),</span> <span class=\"k\">{</span>position<span class=\"k\">:</span> <span class=\"s\">'absolute'</span><span class=\"k\">,</span> top<span class=\"k\">:</span> margin<span class=\"k\">,</span> left<span class=\"k\">:</span> margin<span class=\"k\">}</span><span class=\"k\">)</span>","          <span class=\"k\">,</span> i","","        <span class=\"k\">function</span> seg<span class=\"k\">(</span>i<span class=\"k\">,</span> dx<span class=\"k\">,</span> filter<span class=\"k\">)</span> <span class=\"k\">{</span>","          ins<span class=\"k\">(</span>g<span class=\"k\">,</span>","            ins<span class=\"k\">(</span>css<span class=\"k\">(</span>grp<span class=\"k\">(),</span> <span class=\"k\">{</span>rotation<span class=\"k\">:</span> <span class=\"s\">360</span> <span class=\"k\">/</span> o<span class=\"k\">.</span>lines <span class=\"k\">*</span> i <span class=\"k\">+</span> <span class=\"s\">'deg'</span><span class=\"k\">,</span> left<span class=\"k\">:</span> <span class=\"k\">~~</span>dx<span class=\"k\">}</span><span class=\"k\">),</span>","              ins<span class=\"k\">(</span>css<span class=\"k\">(</span>vml<span class=\"k\">(</span><span class=\"s\">'roundrect'</span><span class=\"k\">,</span> <span class=\"k\">{</span>arcsize<span class=\"k\">:</span> o<span class=\"k\">.</span>corners<span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"k\">{</span>","                  width<span class=\"k\">:</span> r<span class=\"k\">,</span>","                  height<span class=\"k\">:</span> o<span class=\"k\">.</span>width<span class=\"k\">,</span>","                  left<span class=\"k\">:</span> o<span class=\"k\">.</span>radius<span class=\"k\">,</span>","                  top<span class=\"k\">:</span> <span class=\"k\">-</span>o<span class=\"k\">.</span>width<span class=\"k\">&gt;&gt;</span><span class=\"s\">1</span><span class=\"k\">,</span>","                  filter<span class=\"k\">:</span> filter","                <span class=\"k\">}</span><span class=\"k\">),</span>","                vml<span class=\"k\">(</span><span class=\"s\">'fill'</span><span class=\"k\">,</span> <span class=\"k\">{</span>color<span class=\"k\">:</span> o<span class=\"k\">.</span>color<span class=\"k\">,</span> opacity<span class=\"k\">:</span> o<span class=\"k\">.</span>opacity<span class=\"k\">}</span><span class=\"k\">),</span>","                vml<span class=\"k\">(</span><span class=\"s\">'stroke'</span><span class=\"k\">,</span> <span class=\"k\">{</span>opacity<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">}</span><span class=\"k\">)</span> <span class=\"c\">// transparent stroke to fix color bleeding upon opacity change</span>","              <span class=\"k\">)</span>","            <span class=\"k\">)</span>","          <span class=\"k\">)</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>o<span class=\"k\">.</span>shadow<span class=\"k\">)</span>","          <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&lt;=</span> o<span class=\"k\">.</span>lines<span class=\"k\">;</span> i<span class=\"k\">++)</span>","            seg<span class=\"k\">(</span>i<span class=\"k\">,</span> <span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)'</span><span class=\"k\">)</span>","","        <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&lt;=</span> o<span class=\"k\">.</span>lines<span class=\"k\">;</span> i<span class=\"k\">++)</span> seg<span class=\"k\">(</span>i<span class=\"k\">)</span>","        <span class=\"k\">return</span> ins<span class=\"k\">(</span>el<span class=\"k\">,</span> g<span class=\"k\">)</span>","      <span class=\"k\">}</span>","","      Spinner<span class=\"k\">.</span>prototype<span class=\"k\">.</span>opacity <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>el<span class=\"k\">,</span> i<span class=\"k\">,</span> val<span class=\"k\">,</span> o<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> c <span class=\"k\">=</span> el<span class=\"k\">.</span>firstChild","        o <span class=\"k\">=</span> o<span class=\"k\">.</span>shadow <span class=\"k\">&amp;&amp;</span> o<span class=\"k\">.</span>lines <span class=\"k\">||</span> <span class=\"s\">0</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>c <span class=\"k\">&amp;&amp;</span> i<span class=\"k\">+</span>o <span class=\"k\">&lt;</span> c<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","          c <span class=\"k\">=</span> c<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>i<span class=\"k\">+</span>o<span class=\"k\">];</span> c <span class=\"k\">=</span> c <span class=\"k\">&amp;&amp;</span> c<span class=\"k\">.</span>firstChild<span class=\"k\">;</span> c <span class=\"k\">=</span> c <span class=\"k\">&amp;&amp;</span> c<span class=\"k\">.</span>firstChild","          <span class=\"k\">if</span> <span class=\"k\">(</span>c<span class=\"k\">)</span> c<span class=\"k\">.</span>opacity <span class=\"k\">=</span> val","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","      useCssAnimations <span class=\"k\">=</span> vendor<span class=\"k\">(</span>s<span class=\"k\">,</span> <span class=\"s\">'animation'</span><span class=\"k\">)</span>","  <span class=\"k\">}</span><span class=\"k\">)()</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> define <span class=\"k\">==</span> <span class=\"s\">'function'</span> <span class=\"k\">&amp;&amp;</span> define<span class=\"k\">.</span>amd<span class=\"k\">)</span>","    define<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> Spinner <span class=\"k\">}</span><span class=\"k\">)</span>","  <span class=\"k\">else</span>","    window<span class=\"k\">.</span>Spinner <span class=\"k\">=</span> Spinner","","<span class=\"k\">}</span><span class=\"k\">(</span>window<span class=\"k\">,</span> document<span class=\"k\">)</span>"];
_$jscoverage['util/spin.js'][2]++;
(! (function (window, document, undefined) {
  _$jscoverage['util/spin.js'][9]++;
  var prefixes = ["webkit", "Moz", "ms", "O"], animations = {}, useCssAnimations;
  _$jscoverage['util/spin.js'][17]++;
  function createEl(tag, prop) {
    _$jscoverage['util/spin.js'][18]++;
    var el = document.createElement((tag || "div")), n;
    _$jscoverage['util/spin.js'][21]++;
    for (n in prop) {
      _$jscoverage['util/spin.js'][21]++;
      el[n] = prop[n];
}
    _$jscoverage['util/spin.js'][22]++;
    return el;
}
  _$jscoverage['util/spin.js'][28]++;
  function ins(parent) {
    _$jscoverage['util/spin.js'][29]++;
    for (var i = 1, n = arguments.length; (i < n); (i++)) {
      _$jscoverage['util/spin.js'][30]++;
      parent.appendChild(arguments[i]);
}
    _$jscoverage['util/spin.js'][32]++;
    return parent;
}
  _$jscoverage['util/spin.js'][38]++;
  var sheet = (function () {
  _$jscoverage['util/spin.js'][39]++;
  var el = createEl("style", {type: "text/css"});
  _$jscoverage['util/spin.js'][40]++;
  ins(document.getElementsByTagName("head")[0], el);
  _$jscoverage['util/spin.js'][41]++;
  return (el.sheet || el.styleSheet);
})();
  _$jscoverage['util/spin.js'][49]++;
  function addAnimation(alpha, trail, i, lines) {
    _$jscoverage['util/spin.js'][50]++;
    var name = ["opacity", trail, (~ (~ (alpha * 100))), i, lines].join("-"), start = (0.01 + ((i / lines) * 100)), z = Math.max((1 - (((1 - alpha) / trail) * (100 - start))), alpha), prefix = useCssAnimations.substring(0, useCssAnimations.indexOf("Animation")).toLowerCase(), pre = ((prefix && ("-" + prefix + "-")) || "");
    _$jscoverage['util/spin.js'][56]++;
    if ((! animations[name])) {
      _$jscoverage['util/spin.js'][57]++;
      sheet.insertRule(("@" + pre + "keyframes " + name + "{" + "0%{opacity:" + z + "}" + start + "%{opacity:" + alpha + "}" + (start + 0.01) + "%{opacity:1}" + ((start + trail) % 100) + "%{opacity:" + alpha + "}" + "100%{opacity:" + z + "}" + "}"), sheet.cssRules.length);
      _$jscoverage['util/spin.js'][66]++;
      animations[name] = 1;
    }
    _$jscoverage['util/spin.js'][68]++;
    return name;
}
  _$jscoverage['util/spin.js'][74]++;
  function vendor(el, prop) {
    _$jscoverage['util/spin.js'][75]++;
    var s = el.style, pp, i;
    _$jscoverage['util/spin.js'][79]++;
    if ((s[prop] !== undefined)) {
      _$jscoverage['util/spin.js'][79]++;
      return prop;
    }
    _$jscoverage['util/spin.js'][80]++;
    prop = (prop.charAt(0).toUpperCase() + prop.slice(1));
    _$jscoverage['util/spin.js'][81]++;
    for (i = 0; (i < prefixes.length); (i++)) {
      _$jscoverage['util/spin.js'][82]++;
      pp = (prefixes[i] + prop);
      _$jscoverage['util/spin.js'][83]++;
      if ((s[pp] !== undefined)) {
        _$jscoverage['util/spin.js'][83]++;
        return pp;
      }
}
}
  _$jscoverage['util/spin.js'][90]++;
  function css(el, prop) {
    _$jscoverage['util/spin.js'][91]++;
    for (var n in prop) {
      _$jscoverage['util/spin.js'][92]++;
      el.style[(vendor(el, n) || n)] = prop[n];
}
    _$jscoverage['util/spin.js'][94]++;
    return el;
}
  _$jscoverage['util/spin.js'][100]++;
  function merge(obj) {
    _$jscoverage['util/spin.js'][101]++;
    for (var i = 1; (i < arguments.length); (i++)) {
      _$jscoverage['util/spin.js'][102]++;
      var def = arguments[i];
      _$jscoverage['util/spin.js'][103]++;
      for (var n in def) {
        _$jscoverage['util/spin.js'][104]++;
        if ((obj[n] === undefined)) {
          _$jscoverage['util/spin.js'][104]++;
          obj[n] = def[n];
        }
}
}
    _$jscoverage['util/spin.js'][106]++;
    return obj;
}
  _$jscoverage['util/spin.js'][112]++;
  function pos(el) {
    _$jscoverage['util/spin.js'][113]++;
    var o = {x: el.offsetLeft, y: el.offsetTop};
    _$jscoverage['util/spin.js'][114]++;
    while ((el = el.offsetParent)) {
      _$jscoverage['util/spin.js'][115]++;
      ((o.x += el.offsetLeft), (o.y += el.offsetTop));
}
    _$jscoverage['util/spin.js'][117]++;
    return o;
}
  _$jscoverage['util/spin.js'][120]++;
  var defaults = {lines: 12, length: 7, width: 5, radius: 10, rotate: 0, corners: 1, color: "#000", speed: 1, trail: 100, opacity: 0.25, fps: 20, zIndex: 2000000000, className: "spinner", top: "auto", left: "auto"};
  _$jscoverage['util/spin.js'][139]++;
  var Spinner = (function Spinner(o) {
  _$jscoverage['util/spin.js'][140]++;
  if ((! this.spin)) {
    _$jscoverage['util/spin.js'][140]++;
    return new Spinner(o);
  }
  _$jscoverage['util/spin.js'][141]++;
  this.opts = merge((o || {}), Spinner.defaults, defaults);
});
  _$jscoverage['util/spin.js'][144]++;
  Spinner.defaults = {};
  _$jscoverage['util/spin.js'][146]++;
  merge(Spinner.prototype, {spin: (function (target) {
  _$jscoverage['util/spin.js'][148]++;
  this.stop();
  _$jscoverage['util/spin.js'][149]++;
  var self = this, o = self.opts, el = (self.el = css(createEl(0, {className: o.className}), {position: "relative", width: 0, zIndex: o.zIndex})), mid = (o.radius + o.length + o.width), ep, tp;
  _$jscoverage['util/spin.js'][156]++;
  if (target) {
    _$jscoverage['util/spin.js'][157]++;
    target.insertBefore(el, (target.firstChild || null));
    _$jscoverage['util/spin.js'][158]++;
    tp = pos(target);
    _$jscoverage['util/spin.js'][159]++;
    ep = pos(el);
    _$jscoverage['util/spin.js'][160]++;
    css(el, {left: (((o.left == "auto")? ((tp.x - ep.x) + (target.offsetWidth >> 1)): (parseInt(o.left, 10) + mid)) + "px"), top: (((o.top == "auto")? ((tp.y - ep.y) + (target.offsetHeight >> 1)): (parseInt(o.top, 10) + mid)) + "px")});
  }
  _$jscoverage['util/spin.js'][166]++;
  el.setAttribute("aria-role", "progressbar");
  _$jscoverage['util/spin.js'][167]++;
  self.lines(el, self.opts);
  _$jscoverage['util/spin.js'][169]++;
  if ((! useCssAnimations)) {
    _$jscoverage['util/spin.js'][171]++;
    var i = 0, fps = o.fps, f = (fps / o.speed), ostep = ((1 - o.opacity) / ((f * o.trail) / 100)), astep = (f / o.lines);
    _$jscoverage['util/spin.js'][177]++;
    (function anim() {
  _$jscoverage['util/spin.js'][178]++;
  (i++);
  _$jscoverage['util/spin.js'][179]++;
  for (var s = o.lines; s; (s--)) {
    _$jscoverage['util/spin.js'][180]++;
    var alpha = Math.max((1 - (((i + (s * astep)) % f) * ostep)), o.opacity);
    _$jscoverage['util/spin.js'][181]++;
    self.opacity(el, (o.lines - s), alpha, o);
}
  _$jscoverage['util/spin.js'][183]++;
  self.timeout = (self.el && setTimeout(anim, (~ (~ (1000 / fps)))));
})();
  }
  _$jscoverage['util/spin.js'][186]++;
  return self;
}), stop: (function () {
  _$jscoverage['util/spin.js'][190]++;
  var el = this.el;
  _$jscoverage['util/spin.js'][191]++;
  if (el) {
    _$jscoverage['util/spin.js'][192]++;
    clearTimeout(this.timeout);
    _$jscoverage['util/spin.js'][193]++;
    if (el.parentNode) {
      _$jscoverage['util/spin.js'][193]++;
      el.parentNode.removeChild(el);
    }
    _$jscoverage['util/spin.js'][194]++;
    this.el = undefined;
  }
  _$jscoverage['util/spin.js'][196]++;
  return this;
}), lines: (function (el, o) {
  _$jscoverage['util/spin.js'][200]++;
  var i = 0, seg;
  _$jscoverage['util/spin.js'][203]++;
  function fill(color, shadow) {
    _$jscoverage['util/spin.js'][204]++;
    return css(createEl(), {position: "absolute", width: (o.length + o.width + "px"), height: (o.width + "px"), background: color, boxShadow: shadow, transformOrigin: "left", transform: ("rotate(" + (~ (~ (((360 / o.lines) * i) + o.rotate))) + "deg) translate(" + o.radius + "px" + ",0)"), borderRadius: (((o.corners * o.width) >> 1) + "px")});
}
  _$jscoverage['util/spin.js'][216]++;
  for (; (i < o.lines); (i++)) {
    _$jscoverage['util/spin.js'][217]++;
    seg = css(createEl(), {position: "absolute", top: (1 + (~ (o.width / 2)) + "px"), transform: (o.hwaccel? "translate3d(0,0,0)": ""), opacity: o.opacity, animation: (useCssAnimations && (addAnimation(o.opacity, o.trail, i, o.lines) + " " + (1 / o.speed) + "s linear infinite"))});
    _$jscoverage['util/spin.js'][225]++;
    if (o.shadow) {
      _$jscoverage['util/spin.js'][225]++;
      ins(seg, css(fill("#000", "0 0 4px #000"), {top: "2px"}));
    }
    _$jscoverage['util/spin.js'][227]++;
    ins(el, ins(seg, fill(o.color, "0 0 1px rgba(0,0,0,.1)")));
}
  _$jscoverage['util/spin.js'][229]++;
  return el;
}), opacity: (function (el, i, val) {
  _$jscoverage['util/spin.js'][233]++;
  if ((i < el.childNodes.length)) {
    _$jscoverage['util/spin.js'][233]++;
    el.childNodes[i].style.opacity = val;
  }
})});
  _$jscoverage['util/spin.js'][245]++;
  (function () {
  _$jscoverage['util/spin.js'][247]++;
  function vml(tag, attr) {
    _$jscoverage['util/spin.js'][248]++;
    return createEl(("<" + tag + " xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">"), attr);
}
  _$jscoverage['util/spin.js'][251]++;
  var s = css(createEl("group"), {behavior: "url(#default#VML)"});
  _$jscoverage['util/spin.js'][253]++;
  if (((! vendor(s, "transform")) && s.adj)) {
    _$jscoverage['util/spin.js'][256]++;
    sheet.addRule(".spin-vml", "behavior:url(#default#VML)");
    _$jscoverage['util/spin.js'][258]++;
    Spinner.prototype.lines = (function (el, o) {
  _$jscoverage['util/spin.js'][259]++;
  var r = (o.length + o.width), s = (2 * r);
  _$jscoverage['util/spin.js'][262]++;
  function grp() {
    _$jscoverage['util/spin.js'][263]++;
    return css(vml("group", {coordsize: (s + " " + s), coordorigin: ((- r) + " " + (- r))}), {width: s, height: s});
}
  _$jscoverage['util/spin.js'][272]++;
  var margin = (((- (o.width + o.length)) * 2) + "px"), g = css(grp(), {position: "absolute", top: margin, left: margin}), i;
  _$jscoverage['util/spin.js'][276]++;
  function seg(i, dx, filter) {
    _$jscoverage['util/spin.js'][277]++;
    ins(g, ins(css(grp(), {rotation: (((360 / o.lines) * i) + "deg"), left: (~ (~ dx))}), ins(css(vml("roundrect", {arcsize: o.corners}), {width: r, height: o.width, left: o.radius, top: ((- o.width) >> 1), filter: filter}), vml("fill", {color: o.color, opacity: o.opacity}), vml("stroke", {opacity: 0}))));
}
  _$jscoverage['util/spin.js'][293]++;
  if (o.shadow) {
    _$jscoverage['util/spin.js'][294]++;
    for (i = 1; (i <= o.lines); (i++)) {
      _$jscoverage['util/spin.js'][295]++;
      seg(i, -2, "progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");
}
  }
  _$jscoverage['util/spin.js'][297]++;
  for (i = 1; (i <= o.lines); (i++)) {
    _$jscoverage['util/spin.js'][297]++;
    seg(i);
}
  _$jscoverage['util/spin.js'][298]++;
  return ins(el, g);
});
    _$jscoverage['util/spin.js'][301]++;
    Spinner.prototype.opacity = (function (el, i, val, o) {
  _$jscoverage['util/spin.js'][302]++;
  var c = el.firstChild;
  _$jscoverage['util/spin.js'][303]++;
  o = ((o.shadow && o.lines) || 0);
  _$jscoverage['util/spin.js'][304]++;
  if ((c && ((i + o) < c.childNodes.length))) {
    _$jscoverage['util/spin.js'][305]++;
    c = c.childNodes[(i + o)];
    _$jscoverage['util/spin.js'][305]++;
    c = (c && c.firstChild);
    _$jscoverage['util/spin.js'][305]++;
    c = (c && c.firstChild);
    _$jscoverage['util/spin.js'][306]++;
    if (c) {
      _$jscoverage['util/spin.js'][306]++;
      c.opacity = val;
    }
  }
});
  }
  else {
    _$jscoverage['util/spin.js'][311]++;
    useCssAnimations = vendor(s, "animation");
  }
})();
  _$jscoverage['util/spin.js'][314]++;
  if ((((typeof define) == "function") && define.amd)) {
    _$jscoverage['util/spin.js'][315]++;
    define((function () {
  _$jscoverage['util/spin.js'][315]++;
  return Spinner;
}));
  }
  else {
    _$jscoverage['util/spin.js'][317]++;
    window.Spinner = Spinner;
  }
})(window, document));
