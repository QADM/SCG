/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['util/local.js']) {
  _$jscoverage['util/local.js'] = [];
  _$jscoverage['util/local.js'][14] = 0;
  _$jscoverage['util/local.js'][15] = 0;
  _$jscoverage['util/local.js'][22] = 0;
  _$jscoverage['util/local.js'][23] = 0;
  _$jscoverage['util/local.js'][25] = 0;
  _$jscoverage['util/local.js'][32] = 0;
  _$jscoverage['util/local.js'][33] = 0;
  _$jscoverage['util/local.js'][41] = 0;
  _$jscoverage['util/local.js'][42] = 0;
  _$jscoverage['util/local.js'][43] = 0;
  _$jscoverage['util/local.js'][44] = 0;
  _$jscoverage['util/local.js'][52] = 0;
  _$jscoverage['util/local.js'][53] = 0;
  _$jscoverage['util/local.js'][54] = 0;
  _$jscoverage['util/local.js'][55] = 0;
  _$jscoverage['util/local.js'][56] = 0;
  _$jscoverage['util/local.js'][60] = 0;
  _$jscoverage['util/local.js'][66] = 0;
  _$jscoverage['util/local.js'][71] = 0;
  _$jscoverage['util/local.js'][73] = 0;
  _$jscoverage['util/local.js'][76] = 0;
  _$jscoverage['util/local.js'][90] = 0;
  _$jscoverage['util/local.js'][92] = 0;
  _$jscoverage['util/local.js'][93] = 0;
  _$jscoverage['util/local.js'][97] = 0;
  _$jscoverage['util/local.js'][99] = 0;
  _$jscoverage['util/local.js'][103] = 0;
}
_$jscoverage['util/local.js'].source = ["<span class=\"c\">/**</span>","<span class=\"c\"> * local.js: A RequireJS plugin that enables coordinating other framework's asynchronous loading mechanisms with \"local\" modules.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * For more information see https://github.com/jganoff/localjs</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Licensed under the Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0.txt)</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * This is a slight modification from the one found on Github. We use pen.define here (instead of define) so it can be</span>","<span class=\"c\"> * used outside of our build process.</span>","<span class=\"c\"> */</span>","<span class=\"c\">/*jslint regexp: false, nomen: false, plusplus: true, sloppy: true */</span>","<span class=\"c\">/*global require: false, define: false */</span>","","define<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> local<span class=\"k\">,</span> addCallback<span class=\"k\">,</span> invokeCallbacks<span class=\"k\">,</span> isDefined<span class=\"k\">,</span> registerLocal<span class=\"k\">,</span>","    defined <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span> required <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Register a local module object</span>","<span class=\"c\">   * @param {String} name Name of the local module</span>","<span class=\"c\">   */</span>","  registerLocal <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">,</span> module<span class=\"k\">)</span> <span class=\"k\">{</span>","    defined<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[</span>module<span class=\"k\">];</span>","    <span class=\"c\">// Call any callbacks waiting for this local to be defined and remove them from our cache</span>","    invokeCallbacks<span class=\"k\">(</span>name<span class=\"k\">,</span> module<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Determine if a local module has been defined</span>","<span class=\"c\">   * @param {String} name Name of the local module to check</span>","<span class=\"c\">   */</span>","  isDefined <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> defined<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">!==</span> undefined<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Add a callback to be called when the local module is loaded</span>","<span class=\"c\">   * @param {String} name Name of the local module the callback depends on</span>","<span class=\"c\">   * @param {Function} callback The function to execute when the local module is loaded</span>","<span class=\"c\">   */</span>","  addCallback <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> req <span class=\"k\">=</span> required<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">[];</span>","    req<span class=\"k\">.</span>push<span class=\"k\">(</span>callback<span class=\"k\">);</span>","    required<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> req<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Invokes callbacks registered for the local module and removes them from our cache</span>","<span class=\"c\">   * @param {String} name Name of the local module</span>","<span class=\"c\">   * @param {Object} local Local module to pass along to the callback</span>","<span class=\"c\">   */</span>","  invokeCallbacks <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">,</span> local<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> i<span class=\"k\">,</span> req <span class=\"k\">=</span> required<span class=\"k\">[</span>name<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>req <span class=\"k\">!==</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> req<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        req<span class=\"k\">[</span>i<span class=\"k\">].</span>call<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> local<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"c\">// This local module is no longer required by any callbacks, clean up memory.</span>","    <span class=\"k\">delete</span> required<span class=\"k\">[</span>name<span class=\"k\">];</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * local.js public interface</span>","<span class=\"c\">   */</span>","  local <span class=\"k\">=</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * RequireJS plugin API to load a module.</span>","<span class=\"c\">     */</span>","    load<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">,</span> req<span class=\"k\">,</span> load<span class=\"k\">,</span> config<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>isDefined<span class=\"k\">(</span>name<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"c\">// If we're already defined execute the callback immediately</span>","        load<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> defined<span class=\"k\">[</span>name<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"c\">// Cache the callback to be notified when the local module has been loaded</span>","        addCallback<span class=\"k\">(</span>name<span class=\"k\">,</span> load<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Provides a way for client code to define a local module. This is required until RequireJS provides a pluggable definition system.</span>","<span class=\"c\">     * Local modules may only be defined once.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * TODO Implement dependencies during define (would be best to hook into RequireJS for this)</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param {String} name Name of the local module to define</span>","<span class=\"c\">     * @param {Function} f The function that should return the defined module. This is optional.</span>","<span class=\"c\">     */</span>","    define<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">,</span> f<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> module<span class=\"k\">;</span>","      <span class=\"c\">// Only allow a local module to be defined once</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>isDefined<span class=\"k\">(</span>name<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"k\">throw</span> <span class=\"s\">\"local module is already defined: \"</span> <span class=\"k\">+</span> name<span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Evaluate the function to get the module's value</span>","      module <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> f <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">?</span> f<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"c\">// Register the local module</span>","      registerLocal<span class=\"k\">(</span>name<span class=\"k\">,</span> module<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"k\">return</span> local<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['util/local.js'][14]++;
define((function () {
  _$jscoverage['util/local.js'][15]++;
  var local, addCallback, invokeCallbacks, isDefined, registerLocal, defined = {}, required = {};
  _$jscoverage['util/local.js'][22]++;
  registerLocal = (function (name, module) {
  _$jscoverage['util/local.js'][23]++;
  defined[name] = [module];
  _$jscoverage['util/local.js'][25]++;
  invokeCallbacks(name, module);
});
  _$jscoverage['util/local.js'][32]++;
  isDefined = (function (name) {
  _$jscoverage['util/local.js'][33]++;
  return (defined[name] !== undefined);
});
  _$jscoverage['util/local.js'][41]++;
  addCallback = (function (name, callback) {
  _$jscoverage['util/local.js'][42]++;
  var req = (required[name] || []);
  _$jscoverage['util/local.js'][43]++;
  req.push(callback);
  _$jscoverage['util/local.js'][44]++;
  required[name] = req;
});
  _$jscoverage['util/local.js'][52]++;
  invokeCallbacks = (function (name, local) {
  _$jscoverage['util/local.js'][53]++;
  var i, req = required[name];
  _$jscoverage['util/local.js'][54]++;
  if ((req !== undefined)) {
    _$jscoverage['util/local.js'][55]++;
    for (i = 0; (i < req.length); (i++)) {
      _$jscoverage['util/local.js'][56]++;
      req[i].call(null, local);
}
  }
  _$jscoverage['util/local.js'][60]++;
  (delete required[name]);
});
  _$jscoverage['util/local.js'][66]++;
  local = {load: (function (name, req, load, config) {
  _$jscoverage['util/local.js'][71]++;
  if (isDefined(name)) {
    _$jscoverage['util/local.js'][73]++;
    load.call(null, defined[name][0]);
  }
  else {
    _$jscoverage['util/local.js'][76]++;
    addCallback(name, load);
  }
}), define: (function (name, f) {
  _$jscoverage['util/local.js'][90]++;
  var module;
  _$jscoverage['util/local.js'][92]++;
  if (isDefined(name)) {
    _$jscoverage['util/local.js'][93]++;
    throw ("local module is already defined: " + name);
  }
  _$jscoverage['util/local.js'][97]++;
  module = (((typeof f) !== "undefined")? f.call(null): null);
  _$jscoverage['util/local.js'][99]++;
  registerLocal(name, module);
})};
  _$jscoverage['util/local.js'][103]++;
  return local;
}));
