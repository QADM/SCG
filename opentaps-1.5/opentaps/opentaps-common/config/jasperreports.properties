# Relative path from current directory
net.sf.jasperreports.export.pdf.fontdir.jasper=../../../opentaps-common/lib/DejaVu

#
# Properties related to export to PDF.
# You can set these properties programmatically at runtime for a report.
#

# Whether the encryption key is 128 bits
net.sf.jasperreports.export.pdf.128.bit.key = false

# The PDF document should be compressed
net.sf.jasperreports.export.pdf.compressed = false

# Whether the PDF document should contain an outline section 
net.sf.jasperreports.export.pdf.create.batch.mode.bookmarks = false

# The final PDF document should be encrypted
net.sf.jasperreports.export.pdf.encrypted = false

# Whether report texts are broken into lines by iText in the same manner as done by the fill process.
#net.sf.jasperreports.export.pdf.force.linebreak.policy = 

# Rendering of SVG images using shapes
#net.sf.jasperreports.export.pdf.force.svg.shapes =

# The user defined JavaScript piece of code to be inserted in the generated PDF document 
#net.sf.jasperreports.export.pdf.javascript = 

# Version of PDF
#net.sf.jasperreports.export.pdf.version =

# The password belonging to the owner of the document, if it is encrypted
#net.sf.jasperreports.export.pdf.owner.password = 

# The user password needed to open the document, if it is encrypted.
#net.sf.jasperreports.export.pdf.user.password = 

#
# Properties related to export to HTML.
# You can set these properties programmatically at runtime for a report.
#

# Frames are to be exported as nested HTML tables
net.sf.jasperreports.export.html.frames.as.nested.tables = true

# The blank lines, that sometimes appear between rows, should be deleted
net.sf.jasperreports.export.html.remove.emtpy.space.between.rows = false

# Specifying the unit to use when measuring lengths or font size, e.g. "px", "pt"
net.sf.jasperreports.export.html.size.unit = px

# Specifying whether the export engine should use small images for aligning. 
net.sf.jasperreports.export.html.using.images.to.align = true

# The report background should be white
net.sf.jasperreports.export.html.white.page.background = true

# Export engine should use force wrapping by breaking words (CSS word-wrap: break-word).
net.sf.jasperreports.export.html.wrap.break.word = false


#
# Properties related to export to Excel spreadsheet.
# You can set these properties programmatically at runtime for a report.
#

# ExcelApi only. Specifies whether std Excel palette should be customized to original report colors.
net.sf.jasperreports.export.xls.create.custom.palette = true

# Collapsing row span and avoid merging cells across rows
net.sf.jasperreports.export.xls.collapse.row.span = true

# Whether the exporter should take into consideration the type of the original text field expressions
# and set the cell types and values accordingly.
net.sf.jasperreports.export.xls.detect.cell.type = true

# Decreasing font size so that texts fit into the specified cell height
net.sf.jasperreports.export.xls.font.size.fix.enabled = true

# Ignoring the cell border
net.sf.jasperreports.export.xls.ignore.cell.border = true

# Ignoring graphic elements and exporting text elements only
net.sf.jasperreports.export.xls.ignore.graphics = true

# Maximum number of rows allowed to be shown in a sheet
net.sf.jasperreports.export.xls.max.rows.per.sheet = 0

# Whether each report page should be written in a different XLS sheet
net.sf.jasperreports.export.xls.one.page.per.sheet = false

# Whether the empty spaces that could appear between rows should be removed or not
net.sf.jasperreports.export.xls.remove.empty.space.between.rows = true

# Whether the page background should be white or the default XLS background color
net.sf.jasperreports.export.xls.white.page.background = false

#
# Report governors properties. Should be enabled to prevent infinite 
# loops caused by invalid report templates;
#
# based on max pages
#net.sf.jasperreports.governor.max.pages.enabled = false
#net.sf.jasperreports.governor.max.pages =
#based on max execution time
#net.sf.jasperreports.governor.timeout.enabled = false
#net.sf.jasperreports.governor.timeout =

# Settings that apply to caching compiled Jasper reports.
# 
# Since compilation time are long enough you may decide increase expire time
# in production system. Keep in mind that only reason to compile reports at 
# runtime is a yearning to avoid restarting the system when new reports have 
# been added.
webapp.JasperReportsCompiled.expireTime=300000
webapp.JasperReportsCompiled.maxSize=0
webapp.JasperReportsCompiled.useFileSystemStore=false

#
# This option turns on report design verifying before each run.
# On by default but this feature should be deactivated in stable production system.
#
webapp.jasperreports.verify.design = true
