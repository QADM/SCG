/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */
/* Copyright (c) Open Source Strategies, Inc. */

/*
 *  Copyright (c) 2003 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Johan Isacsson
 *@author     David E. Jones (jonesde@ofbiz.org)
 *@version    $Rev: 364 $
 *@since      2.2
 */

import java.util.*;
import javolution.util.FastList;
import org.ofbiz.security.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.webapp.pseudotag.*;
import org.ofbiz.workeffort.workeffort.*;
import java.sql.Timestamp;
import org.opentaps.common.util.UtilCommon;

timeZone = UtilCommon.getTimeZone(request);

String currentDay = UtilCommon.getParameter(context, "currentDay");
String startParam = UtilCommon.getParameter(context, "start");

facilityId = UtilCommon.getParameter(context, "facilityId");
fixedAssetId = UtilCommon.getParameter(context, "fixedAssetId");

eventsParam = "";
if (fixedAssetId != null) {
    eventsParam = "fixedAssetId=" + fixedAssetId;
}

Timestamp now = UtilDateTime.getWeekStart(UtilDateTime.nowTimestamp(), timeZone, locale);
Timestamp start = null;
if(startParam != null) 
    start = new Timestamp(Long.parseLong(startParam));

if(start == null) {
    start = now;
} else {
    start = UtilDateTime.getWeekStart(start, timeZone, locale);
}

Timestamp prev = UtilDateTime.getDayStart(start, -7, timeZone, locale);
Timestamp next = UtilDateTime.getDayStart(start, 7, timeZone, locale);
Timestamp end = UtilDateTime.getDayStart(start, 6, timeZone, locale);

Map serviceCtx = UtilMisc.toMap("userLogin", userLogin, "start", start, "numPeriods", new Integer(7));
serviceCtx.put("partyIds", context.get("partyIds"));
serviceCtx.put("facilityId", facilityId);
serviceCtx.put("fixedAssetId", fixedAssetId);
serviceCtx.put("filterOutCanceledEvents", Boolean.TRUE);
serviceCtx.put("periodType", new Integer(Calendar.DATE));
serviceCtx.put("locale", locale);
serviceCtx.put("timeZone", timeZone);
if (facilityId != null) {
    eventsParam = "facilityId=" + facilityId;
    serviceCtx.put("calendarType", "CAL_MANUFACTURING");
}

Map result = dispatcher.runSync("getWorkEffortEventsByPeriod",serviceCtx);

periods = result.get("periods");
if (periods != null) {
    for (Map entries : periods) {
        if (entries == null)
            continue;
        calEntries = entries.get("calendarEntries");
        if (calEntries == null)
            continue;
        calEntriesFiltered = FastList.newInstance();
        for (Map calEntry : calEntries) {
            workEffort = calEntry.get("workEffort");
            if (workEffort == null)
                continue;
            if (!"PRUN_REVERTED".equals(workEffort.get("currentStatusId"))) {
                calEntriesFiltered.add(calEntry);
            }
        }
        entries.put("calendarEntries", calEntriesFiltered);
    }
}

context.put("periods",periods);
context.put("maxConcurrentEntries",result.get("maxConcurrentEntries"));
context.put("start",start);
context.put("end",end);
context.put("prev",prev);
context.put("next",next);
context.put("now",now);
context.put("eventsParam", eventsParam);
