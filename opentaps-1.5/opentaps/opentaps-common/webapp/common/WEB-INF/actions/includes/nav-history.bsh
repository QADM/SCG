/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilHttp;
import org.ofbiz.base.crypto.HashCrypt;
import javolution.util.FastList;
import javolution.util.FastMap;
import org.opentaps.common.util.UtilConfig;
import org.opentaps.common.util.UtilCommon;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.entity.condition.EntityExpr;
import org.ofbiz.entity.condition.EntityOperator;
import javax.servlet.ServletContext;
import org.ofbiz.base.component.ComponentConfig;


application = parameters.get("componentName");

if (UtilConfig.getPropertyBoolean(application, "opentaps.history.show", true)) {

    userLogin = parameters.get("userLogin");
    if (userLogin == null) {
        return;
    }

    servletContext = request.getAttribute("servletContext");
    serverId = servletContext.getAttribute("_serverId");
    contextPath = request.getContextPath();
    info = ComponentConfig.getWebAppInfo(serverId, contextPath);
    webAppName = info.getName();

    depth = UtilConfig.getPropertyInt(application, "opentaps.history.depth", 7);
    width = UtilConfig.getPropertyInt(application, "opentaps.history.width", 25);
    bgColor = UtilConfig.getPropertyValue(application, "opentaps.history.color.background");
    textColor = UtilConfig.getPropertyValue(application, "opentaps.history.color.text");
    hoverTextColor = UtilConfig.getPropertyValue(application, "opentaps.history.color.text.hover");
    decorationColor = UtilConfig.getPropertyValue(application, "opentaps.history.color.decoration");
    if (!UtilValidate.isEmpty(bgColor) && !UtilValidate.isEmpty(hoverTextColor) && !UtilValidate.isEmpty(textColor) && !UtilValidate.isEmpty(decorationColor)) {
        if ("section".equalsIgnoreCase(bgColor)) {
            bgcolor = UtilConfig.getSectionBgColor(application, context.get("sectionName"));
        };
        context{"historyBgColor"} = bgColor;
        context{"historyTextColor"} = textColor;
        context{"historyTextHoverColor"} = hoverTextColor;
        context{"historyDecorationColor"} = decorationColor;
    }

    historyItems = delegator.findByAndCache("ViewHistory", UtilMisc.toMap("userLoginId", userLogin.get("userLoginId"), "applicationName", application, "webAppName", webAppName), UtilMisc.toList("createdStamp DESC"));
    if (historyItems != null) {
        historyList = FastList.newInstance();
        int index = 0;
        for (item: historyItems) {
            if (index == depth) {
                // remove current since it is expired
                delegator.removeByCondition("ViewHistory", new EntityExpr("viewHistoryId", EntityOperator.EQUALS, item.get("viewHistoryId")), false);
                break;
            }
            newItem = FastMap.newInstance();
            newItem{"uri"} = UtilCommon.getCorrectUrlFromEncodeUrl(item.get("uri"));
            newItem{"text"} = item.get("contextInfo");
            historyList.add(newItem);
            index++;
        }
    }
    context{"historyList"} = historyList;
    context{"historyItemChars"} = (Integer)width;
}