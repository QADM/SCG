/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */
/* Copyright (c) Open Source Strategies, Inc. */

import org.opentaps.common.party.PartyHelper;
import org.opentaps.common.util.UtilCommon;
import javolution.util.FastList;
import javolution.util.FastMap;
import org.ofbiz.entity.condition.EntityExpr;
import org.ofbiz.entity.condition.EntityOperator;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.service.ServiceUtil;

boolean isInternalMessageSender = false;

if (userLogin == null) return;

isInternalMessageSender = PartyHelper.isInternalMessageSender(userLogin.getString("partyId"), delegator);
partyIdTo = userLogin.getString("partyId");

isRead = UtilCommon.getParameter(context, "isRead");

List processAddressBook(addressees) {
    partyList = FastList.newInstance();

    for (partyId : addressees) {
        partyInfo = FastMap.newInstance();

        partyInfo.put("partyId", partyId);
        partyInfo.put("partyName", org.ofbiz.party.party.PartyHelper.getPartyName(delegator, partyId, false));
        partyInfo.put("partyAddress", partyInfo.get("partyName") + " <" + partyId + ">");

        partyList.add(partyInfo);
    }

    return partyList;
}

addrs = PartyHelper.getInternalMessageRecipient(delegator);
if (addrs != null) {
    context.put("addressBook", processAddressBook(addrs));
}
