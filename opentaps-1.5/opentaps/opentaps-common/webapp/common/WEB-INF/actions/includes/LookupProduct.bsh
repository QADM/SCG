/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// product lookup which includes ability to search by GoodIdentification TODO: the results aren't distinct because there can be many idValues for a product
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilProperties;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.entity.condition.EntityCondition;
import org.ofbiz.entity.condition.EntityOperator;
import org.ofbiz.service.ServiceUtil;
import org.opentaps.common.util.UtilCommon;

// some pre-populated data for the lookup product
context.put("productTypes", delegator.findAllCache("ProductType", UtilMisc.toList("description")));
context.put("goodIdTypes", delegator.findAllCache("GoodIdentificationType", UtilMisc.toList("description")));

// clone the parameters because we need to modify them
inputFields = new HashMap(parameters);

// check if we're ignoring the good id
idValue = inputFields.get("idValue");
ignoreGoodId = (idValue == null || idValue.trim().length() == 0);

// get the description of the selected good ID type
if (!ignoreGoodId) {
    goodIdentificationTypeId = parameters.get("goodIdentificationTypeId");
    if (UtilValidate.isNotEmpty(goodIdentificationTypeId)) {
        goodIdType = delegator.findByPrimaryKeyCache("GoodIdentificationType", UtilMisc.toMap("goodIdentificationTypeId", goodIdentificationTypeId));
        context.put("goodIdentificationTypeDescription", goodIdType.get("description"));
        ignoreGoodType = true;
    } else {
        context.put("goodIdentificationTypeDescription", UtilProperties.getMessage("ProductUiLabels", "ProductGoodId", locale));
        context.put("goodIdentificationTypeIdDescription", UtilProperties.getMessage("ProductUiLabels", "ProductType", locale));
        ignoreGoodType = false;
    }
}

// because of the way the form is set up, we need to remove the type variable if no ID is filled in
if (ignoreGoodId) {
    inputFields.remove("idValue");
    ignoreGoodType = true;
}
if (ignoreGoodType) {
    inputFields.remove("goodIdentificationTypeId");
}
inputFields.remove("facilityId");

// prepare the find first, because we want to control the actual find by condition
results = dispatcher.runSync("prepareFind", UtilMisc.toMap("inputFields", inputFields, "entityName", "ProductAndGoodIdentification"));
if (ServiceUtil.isError(results)) return;
conditions = results.get("entityConditionList");
// this prevents an automatic find of all products when the Lookup Product screen first opens up
// but allows you to use the form without parameters to do a find because noConditionFind is a hidden paramater
if ((conditions == null) && (parameters.get("noConditionFind") == null)) return;

fields = UtilMisc.toList("productId", "productTypeId", "brandName", "internalName");
if (!ignoreGoodId) {
    if (!ignoreGoodType) fields.add("goodIdentificationTypeId");
    fields.add("idValue");
}

// add active product only filter
conditions = EntityCondition.makeCondition(
              conditions,
              EntityOperator.AND,
              EntityCondition.makeCondition(
                    EntityCondition.makeCondition("isActive", EntityOperator.EQUALS, null),
                    EntityOperator.OR,
                    EntityCondition.makeCondition("isActive", EntityOperator.EQUALS, "Y")
));

iterator = delegator.findListIteratorByCondition("ProductAndGoodIdentification", conditions, null, fields, null, UtilCommon.DISTINCT_READ_OPTIONS);

context.put("products", iterator);
