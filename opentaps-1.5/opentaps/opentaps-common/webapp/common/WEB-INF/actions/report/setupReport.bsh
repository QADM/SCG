/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */
import javolution.util.FastList;
import javolution.util.FastMap;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.json.JSONObject;
import org.ofbiz.base.location.ComponentLocationResolver;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.condition.EntityConditionList;
import org.ofbiz.entity.condition.EntityExpr;
import org.ofbiz.entity.condition.EntityOperator;
import org.ofbiz.entity.util.EntityUtil;
import org.opentaps.common.reporting.UtilReports;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.common.util.UtilConfig;
import org.opentaps.common.util.UtilMessage;
import org.opentaps.common.util.UtilAccountingTags;


reportId = UtilCommon.getParameter(context, "reportId");
if (UtilValidate.isEmpty(reportId)) return;

report = delegator.findByPrimaryKey("ReportRegistry", UtilMisc.toMap("reportId", reportId));
if (UtilValidate.isEmpty(report)) {
    String msg = UtilMessage.expandLabel("OpentapsError_ReportNotFound", locale, UtilMisc.toMap("location", reportId));
    UtilMessage.createAndLogEventError(request, "OpentapsError_ReportNotFound", UtilMisc.toMap("location", reportId), locale, "");
    context{"error"} = msg;
    return;
}
context{"report"} = report;

//make navigation history entry
reportName = report.getString("shortName");
if (reportName.startsWith("%")) {
    uiLabelMap = UtilMessage.getUiLabels(locale);
    String label = uiLabelMap.get(reportName.substring(1));
    if (UtilValidate.isNotEmpty(label)) {
        reportName = label;
    }
}
if (UtilValidate.isNotEmpty(reportName)) {
    context{"history"} = UtilCommon.makeHistoryEntry(reportName, "setupReport", UtilMisc.toList("reportId"));
}

reportParameters = FastList.newInstance();
parametersType = FastMap.newInstance();

location = report.getString("reportLocation");
if (UtilValidate.isEmpty(location)) {
    Debug.logError("Location of the report [" + reportId + "] is undefined. Check seed data.", "setupReport.bsh");
    return;
}
if (location.indexOf("analytics") > 0) {
    context.put("useQueryBuilder", Boolean.TRUE);
}
// get the jasper report file
filePath = UtilValidate.isUrl(location) ? ComponentLocationResolver.getBaseLocation(location).toString() : location;

// jrParameters may be here after request-redirect
jrParameters = request.getAttribute("jrParameters");

// parse the jasper report and put the parameters into the context for rendering as input fields
/*JasperDesign*/ design = JRXmlLoader.load(filePath);     
if (design != null) {
    // get list of parameters
    parametersList = design.getParametersList();
    for (/*jrDesignParameter*/ currentParameter : parametersList) {
        // check that the parameter is suitable for display on screen
        if (currentParameter.isForPrompting() && !currentParameter.SystemDefined) {
            parameterMap = FastMap.newInstance();
            if (UtilValidate.isNotEmpty(currentParameter.getDescription())) {
                parameterMap{"description"} = currentParameter.getDescription();
            }

            parameterName = currentParameter.getName();
            parameterMap{"name"} = parameterName;
            // get the type of the parameter
            if (UtilValidate.isNotEmpty(currentParameter.getValueClassName())) {
                parameterMap{"type"} = currentParameter.getValueClassName().substring(currentParameter.ValueClassName.lastIndexOf(".") + 1);
                parametersType.put(currentParameter.getName(), currentParameter.getValueClassName().substring(currentParameter.ValueClassName.lastIndexOf(".") + 1));
            }

            // sometimes we have previously entered values in attribute named jrParameters.
            // let's put them to context and use as defaults
            if (jrParameters != null) {
                currentParameterValue = jrParameters.get(parameterName);
                if (currentParameterValue != null) {
                    context.put(parameterName, currentParameterValue);
                }  
            }
            /*
            if we ever need to get default values, this is how.  The expression is of class JRExpression
            print(currentParameter.getDefaultValueExpression().getText());
            print(currentParameter.getDefaultValueExpression().getValueClassName());
            */
            reportParameters.addLast(parameterMap);
        }
    }
}

if (UtilValidate.isNotEmpty(reportParameters)) {
    context{"reportParameters"} = reportParameters;
    context{"parametersTypeJSON"} = JSONObject.fromObject(parametersType);
}

context{"reportTypes"} = UtilReports.getJRSupportedMimeType(delegator);

printers = UtilReports.enumeratePrinters();
if (printers != null && printers.size() > 0) {
    context{"printers"} = printers;
}

// AG10012008 - I'm putting the facilities list unconditionally for now into the context map
// AG10012008 - we should include it only if required by the report in next revision
organizationPartyId = UtilCommon.getParameter(context, "organizationPartyId");
if (UtilValidate.isEmpty(organizationPartyId)) {
    organizationPartyId = UtilConfig.getPropertyValue("crmsfa", "organizationPartyId");
}
if (UtilValidate.isNotEmpty(organizationPartyId)) {
    context{"organizationPartyId"} = organizationPartyId;
}

// put accounting tags
String acctgTagUsage = UtilCommon.getParameter(request, "acctgTagUsage");
if (UtilValidate.isNotEmpty(acctgTagUsage)) {
    context.put("tagTypes", UtilAccountingTags.getAccountingTagFiltersForOrganization(organizationPartyId, acctgTagUsage, delegator, locale));
}

facilities = UtilCommon.getOrganizationReceivingFacilities(organizationPartyId, delegator);
context{"facilities"} = facilities;

// This stuff supports organizationPartyId preconfigured field in setup report screen.
options = UtilCommon.DISTINCT_READ_OPTIONS;
orderBy = UtilMisc.toList("groupName");
