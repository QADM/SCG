<?xml version="1.0"?>
<!--
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
-->
<!--
 *  Copyright (c) 2001 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->

<project name="opentaps-common - Opentaps Common Component" default="jar" basedir=".">

    <!-- ================================================================== -->
    <!-- Initialization of all property settings                            -->
    <!-- ================================================================== -->

    <target name="init">
        <property environment="env"/>
        <property name="desc" value="Opentaps Common Component"/>
        <property name="name" value="opentaps-common"/>
        <property name="aspectname" value="opentaps-common-profiling"/>
        <property name="src.dir" value="src"/>
        <property name="dtd.dir" value="dtd"/>
        <property name="lib.dir" value="lib"/>
        <property name="build.dir" value="build"/>      
        <property name="gwt.deploy.dir" value="./webapp/commongwt"/>
        <property name="gwt.module.base" value="org.opentaps.gwt.common"/>
        <property name="gwt.src.common" value="./src/common/org/opentaps/gwt"/>
        <property name="gwt.src.constants" value="./src/constants/org/opentaps/base"/>
        <property name="gwt.src.base" value="./src/common/org/opentaps/gwt/common"/>
        <property name="gwt.module.list" value="voip,webapp"/>
        <!-- This parameter must point to your ofbiz/ directory or the libraries for the financials app would not be found.
         The default setting would work if you have checked out the financials module into your ofbiz/opentaps/ directory.
         It would NOT work if you checked it out somewhere else and symlinked to it in your opentaps/ directory.
         If you experience build problems, put the full path here -->
        <property name="ofbiz.dir" value="../../"/> 
        <property name="aopConfig" value="config/aop-profiling.xml"/>
    </target>

    <target name="classpath">
        <path id="local.class.path">
            <fileset dir="${lib.dir}" includes="*.jar" excludes="${lib.dir}/${aspectname}.jar ${lib.dir}/${name}-entities.jar ${lib.dir}/${name}-services.jar"/>
            <fileset dir="${lib.dir}/hibernate" includes="*.jar"/>
            <fileset dir="${lib.dir}/aspectwerkz" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/base/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/base/lib/commons" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/base/lib/scripting" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/base/lib/j2eespecs" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/base/lib/etl" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/base/build/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/entity/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/entity/build/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/datafile/build/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/security/build/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/service/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/service/build/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/minilang/build/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/webapp/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/webapp/build/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/common/build/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/framework/widget/build/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/applications/accounting/build/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/applications/order/build/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/applications/content/build/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/applications/party/build/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/applications/product/build/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/applications/manufacturing/build/lib" includes="*.jar"/>
        </path>
    </target>

    <target name="gwtclasspath" depends="init">
        <path id="gwt.class.path">
            <fileset dir="${ofbiz.dir}/framework/base/lib" includes="*.jar"/>
            <fileset dir="${ofbiz.dir}/opentaps/opentaps-common/lib" includes="gwt*.jar"/>
            <fileset dir="${ofbiz.dir}/opentaps/opentaps-common/lib/gwt-dev" includes="gwt*.jar"/>
            <pathelement location="${ofbiz.dir}/opentaps/opentaps-common/src/constants"/>
            <pathelement location="${ofbiz.dir}/opentaps/opentaps-common/src/common"/>
        </path>
    </target>

    <!-- ================================================================== -->
    <!-- Removes all created files and directories                          -->
    <!-- ================================================================== -->

    <target name="clean" depends="clean-lib">
        <delete dir="${build.dir}"/>
      	<delete file="${lib.dir}/${aspectname}.jar"/>
    </target>

    <target name="clean-lib" depends="init">
        <delete dir="${build.dir}/lib"/>
    </target>

    <target name="clean-gwt" depends="init">
      <delete dir="${gwt.deploy.dir}"/>
    </target>

    <!-- ================================================================== -->
    <!-- Makes sure the needed directory structure is in place              -->
    <!-- ================================================================== -->

    <target name="prepare" depends="clean-lib">
        <mkdir dir="${build.dir}/classes"/>
        <mkdir dir="${build.dir}/classes/constants"/>
        <mkdir dir="${build.dir}/classes/base"/>
        <mkdir dir="${build.dir}/classes/entities"/>
        <mkdir dir="${build.dir}/classes/services"/>
        <mkdir dir="${build.dir}/classes/common"/>
        <mkdir dir="${build.dir}/classes/prebuild"/>
        <mkdir dir="${build.dir}/lib"/>
    </target>

    <target name="prepare-docs" depends="init">
        <mkdir dir="${build.dir}/javadocs"/>
    </target>

    <target name="prepare-gwt" depends="gwtclasspath">
        <mkdir dir="${gwt.deploy.dir}"/>
    </target>

    <!-- ================================================================== -->
    <!-- Compilation of the source files                                    -->
    <!-- ================================================================== -->

    <target name="constants-classes" depends="prepare,classpath">
        <javac debug="on" deprecation="on" destdir="${build.dir}/classes/constants" fork="yes">
            <classpath>
                <path refid="local.class.path"/>
            </classpath>
            <src path="${src.dir}/constants/"/>
        </javac>
    </target>

    <target name="base-classes" depends="constants-classes">
        <javac debug="on" deprecation="on" destdir="${build.dir}/classes/base" fork="yes" memoryMaximumSize="1024M">
            <classpath>
                <path refid="local.class.path"/>
                <pathelement location="${build.dir}/classes/constants"/>
            </classpath>
            <src path="${src.dir}/base/"/>
        </javac>
    </target>

    <target name="entities-classes" depends="base-classes">
        <javac debug="on" deprecation="on" destdir="${build.dir}/classes/entities" fork="yes" memoryMaximumSize="1024M">
            <classpath>
                <path refid="local.class.path"/>
                <pathelement location="${build.dir}/classes/constants"/>
                <pathelement location="${build.dir}/classes/base"/>
            </classpath>
            <src path="${src.dir}/entities/"/>
        </javac>
    </target>

    <target name="services-classes" depends="entities-classes">
        <javac debug="on" deprecation="on" destdir="${build.dir}/classes/services" fork="yes" memoryMaximumSize="1024M">
            <classpath>
                <path refid="local.class.path"/>
                <pathelement location="${build.dir}/classes/constants"/>
                <pathelement location="${build.dir}/classes/base"/>
                <pathelement location="${build.dir}/classes/entities"/>
            </classpath>
            <src path="${src.dir}/services/"/>
        </javac>
    </target>

    <target name="classes" depends="base-classes,prepare,classpath">

        <javac debug="on" deprecation="on" destdir="${build.dir}/classes/common" fork="yes" memoryMaximumSize="1024M" encoding="utf-8">
            <classpath>
                <path refid="local.class.path"/>
                <pathelement location="${build.dir}/classes/constants"/>
                <pathelement location="${build.dir}/classes/base"/>
            </classpath>
            <src path="${src.dir}/common"/>
            <exclude name="org/opentaps/aspect/**"/>
        </javac>

        <!-- also put the DTDs in the jar file... -->
        <copy todir="${build.dir}/classes/common">
            <fileset dir="${src.dir}/common" includes="**/*.properties,**/*.xml,**/*.bsh,**/*.logic,**/*.js,**/*.jacl,**/*.py"/>
        </copy>
    </target>

    <target name="constants-jar" depends="constants-classes">
        <jar jarfile="${build.dir}/lib/${name}-constants.jar">
           <fileset dir="${build.dir}/classes/constants"/>
        </jar>
    </target>

    <target name="base-jar" depends="constants-jar,base-classes">
        <jar jarfile="${build.dir}/lib/${name}-base.jar">
           <fileset dir="${build.dir}/classes/base"/>
        </jar>
    </target>

    <target name="entities-jar" depends="base-jar,entities-classes">
        <jar jarfile="${lib.dir}/${name}-entities.jar">
           <fileset dir="${build.dir}/classes/entities"/>
        </jar>
    </target>

    <target name="services-jar" depends="entities-jar,services-classes">
        <jar jarfile="${lib.dir}/${name}-services.jar">
           <fileset dir="${build.dir}/classes/services"/>
        </jar>
    </target>

    <target name="jar" depends="constants-jar,base-jar,classes">
        <jar jarfile="${build.dir}/lib/${name}.jar">
           <fileset dir="${build.dir}/classes/common" excludes="org/opentaps/aspect/**"/>
        </jar>
    </target>

    <!-- ================================================================== -->
    <!-- Compilation of GWT files                                           -->
    <!-- ================================================================== -->

    <!-- Set the compiler style option, valid choices are OBF (obfuscated), PRETTY or DETAILED. PRETTY/DETAILED should be used for debugging purposes.
         NOTE: OBF causes conflicts when there are multiple GWT modules on the same page as it would initialize static methods with different
         obfuscated names in each module (eg: $wnd.Ext.Component.prototype.initComponent)
    -->
    <property name="gwt.compiler.style" value="PRETTY"/>
    <!-- We can compile modules in parallel, only works for applications that have more than one module defined -->
    <!-- IMPORTANT: GWT compilation is very demanding, keep this at false, or max 2/3 threads on high end machines with a lot of memory -->
    <property name="gwt.compiler.parallel" value="false"/>
    <property name="gwt.compiler.threads" value="2"/>

    <target name="gwt-code" depends="prepare-gwt">
        <antcall target="gwt-compile-modules" inheritall="true" inheritrefs="true"/>
    </target>

    <target name="gwt-compile-modules">
      <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
          <pathelement location="${ofbiz.dir}/opentaps/opentaps-common/lib/ant-contrib.jar"/>
        </classpath>
      </taskdef>
      <foreach list="${gwt.module.list}" target="gwt-compile" param="module" inheritall="true" inheritrefs="true" parallel="${gwt.compiler.parallel}" maxThreads="${gwt.compiler.threads}"/>
    </target>

    <!-- 
         Compare the main resulting js file for the module with all the source files (in the same directory as its .gwt.xml file)
         to determine if the module is alreayd up to date or if it should be recompiled.
         NB: This does not check the source files from the included modules, but it does check the opentaps common module sources.
    -->
    <target name="gwt-compile">
      <uptodate property="gwtmoduleuptodate" targetfile="${gwt.deploy.dir}/${gwt.module.base}.${module}.${module}/${gwt.module.base}.${module}.${module}.nocache.js">
        <srcfiles dir="${gwt.src.common}" includes="**/public/**/*.*"/>
        <srcfiles dir="${gwt.src.common}" includes="**/client/**/*.*"/>
        <srcfiles dir="${gwt.src.common}" includes="**/*.gwt.xml"/>
        <srcfiles dir="${gwt.src.constants}" includes="**/*.*"/>
      	<srcfiles dir="${gwt.src.base}/${module}" includes="**/public/**/*.*"/>
        <srcfiles dir="${gwt.src.base}/${module}" includes="**/client/**/*.*"/>
        <srcfiles dir="${gwt.src.base}/${module}" includes="**/*.gwt.xml"/>
      </uptodate>
      <if>
        <isfalse value="${gwtmoduleuptodate}"/>
        <then>
          <java classpathref="gwt.class.path" classname="com.google.gwt.dev.Compiler" fork="true" failonerror="true">
            <jvmarg line="-Xmx1024M"/>  
            <arg line="-style ${gwt.compiler.style}"/>
            <!-- draftCompile can be used to tell the compiler to skip optimization and seedup compilation for dev/testing -->
            <arg line="-draftCompile"/>
            <arg line="-war ${gwt.deploy.dir}"/>
            <arg line="${gwt.module.base}.${module}.${module}"/>
          </java>
        </then>
        <else>
          <echo message="Module ${module} is up to date"/>
        </else>
      </if>
      <!-- create WEB-INF/web.xml for enable gzip javascript and css files -->
      <mkdir dir="${gwt.deploy.dir}/WEB-INF" />
      <copy file="${gwt.deploy.dir}/../../../../opentaps/opentaps-common/templates/web.xml.ftl" tofile="${gwt.deploy.dir}/WEB-INF/web.xml" overwrite="true"/>    	
    </target>

    <target name="prebuild" depends="prepare,classpath">
        <javac debug="on" deprecation="on" destdir="${build.dir}/classes/prebuild" fork="yes" memoryMaximumSize="1024M">
            <classpath>
                <path refid="local.class.path"/>
            </classpath>
            <src path="${src.dir}/prebuild"/>
        </javac>

        <!-- also put the DTDs in the jar file... -->
        <copy todir="${build.dir}/classes/common">
            <fileset dir="${src.dir}/prebuild" includes="**/*.properties,**/*.xml,**/*.bsh,**/*.logic,**/*.js,**/*.jacl,**/*.py"/>
        </copy>
        <jar jarfile="${build.dir}/lib/prebuild.jar" basedir="${build.dir}/classes/prebuild"/>
    </target>

    <!-- ================================================================== -->
    <!-- Build JavaDoc                                                      -->
    <!-- ================================================================== -->

    <target name="docs" depends="prepare-docs,classpath">
        <javadoc packagenames="org.opentaps.common.*"
            classpathref="local.class.path"
            destdir="${build.dir}/javadocs"
            Windowtitle="Open Source Strategies - ${desc}">
            <sourcepath path="${src.dir}/common"/>
            <sourcepath path="${src.dir}/prebuild"/>
        </javadoc>
    </target>

    <target name="all" depends="jar,docs"/>

    <!-- ================================================================== -->
    <!-- Build profiling                                                    -->
    <!-- ================================================================== -->
    <target name="cleanaop">
        <delete dir="${build.dir}/classes/common/org/opentaps/aspect/profiling"/>
        <delete file="${lib.dir}/${aspectname}.jar"/>
    </target> 
    <target name="profiling" depends="jar,cleanaop">
		<javac srcdir="${src.dir}/common/org/opentaps/aspect" destdir="${build.dir}/classes/common" debug="on" source="1.5" target="1.5">
			<classpath refid="local.class.path" />
		</javac>
        <echo message="[build] =========== Start Building Profiling (Post Compile) ============="/>
		<java classname="org.codehaus.aspectwerkz.annotation.AnnotationC" fork="true">
			<jvmarg value="-Daspectwerkz.definition.file=${aopConfig}"/>
			<classpath refid="local.class.path" />
			<arg line="-src ${src.dir}/common/org/opentaps/aspect/profiling -classes ${build.dir}/classes/common" />
		</java>
        <echo message="[build] =========== Done Building Profiling (Post Compile) =============="/>        
        <echo message="[build] =========== Start Building Profiling (Weave) ============="/>
		<java classname="org.codehaus.aspectwerkz.compiler.AspectWerkzC" fork="true">
			<jvmarg value="-Daspectwerkz.definition.file=${aopConfig}"/>
			<jvmarg value="-Daspectwerkz.transform.filter=no"/>
			<arg value="-verify"/>
            <classpath>
                <path refid="local.class.path"/>
                <pathelement path="${build.dir}/classes/common"/>
            </classpath>
    		<!-- below is the jars to post-process, if these jar not effect each other you can put them in same pos, else please seperate them into another task -->	
    		<arg value="${ofbiz.dir}/framework/service/build/lib/ofbiz-service.jar"/>
    		<arg value="${ofbiz.dir}/framework/testtools/build/lib/ofbiz-testtools.jar"/>
		</java>
		<jar jarfile="${lib.dir}/${aspectname}.jar" update="true" basedir="${build.dir}/classes/common" includes="org/opentaps/aspect/profiling/**" />
		<!-- put aop.xml into target jar META-INF dir -->
		<mkdir dir="${build.dir}/classes/META-INF" />
		<copy file="${aopConfig}" tofile="${build.dir}/classes/META-INF/aop.xml" overwrite="true"/>
		<jar jarfile="${ofbiz.dir}/framework/service/build/lib/ofbiz-service.jar" update="true" basedir="${build.dir}/classes/" includes="META-INF/aop.xml" />
		<jar jarfile="${ofbiz.dir}/framework/testtools/build/lib/ofbiz-testtools.jar" update="true" basedir="${build.dir}/classes/" includes="META-INF/aop.xml" />
        <echo message="[build] =========== Done Building Profiling (Weave) =============="/>
    </target>

</project>
