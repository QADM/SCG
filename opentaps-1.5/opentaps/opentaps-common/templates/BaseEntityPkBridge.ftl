package org.opentaps.base.entities.bridge;

/*
* Copyright (c) Open Source Strategies, Inc.
*
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.util.Date;
import java.sql.Timestamp;
import java.math.BigDecimal;
import org.hibernate.search.annotations.Resolution;
import org.hibernate.search.bridge.builtin.*;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.Field.Index;
import org.apache.lucene.document.Field.Store;
import org.apache.lucene.document.Field.TermVector;
import org.hibernate.search.bridge.LuceneOptions;
import org.hibernate.search.bridge.TwoWayFieldBridge;
import org.opentaps.base.entities.${pkName};

/**
 * A FieldBridge for ${pkName}.
 */
public class ${entityName}PkBridge implements TwoWayFieldBridge {

    /**
     * getter method, return the ${pkName}.
     * @param name a <code>String</code> value
     * @param document a <code>Document</code> value
     * @return a <code>Object</code> value
     */
    public Object get(String name, Document document) {
        ${pkName} id = new ${pkName}();
        Field field = null;
    <#list primaryKeys as primaryKey>
        field = document.getField(name + ".${primaryKey}");
      <#if pkTypes.get(primaryKey) == "Timestamp">
        if (field.stringValue() != null && !field.stringValue().equals("")) {
            id.${setPkMethodNames.get(primaryKey)}(new Timestamp(((Date) (new DateBridge(Resolution.DAY)).stringToObject(field.stringValue())).getTime()));
        }
      <#elseif pkTypes.get(primaryKey) == "Date">
        if (field.stringValue() != null && !field.stringValue().equals("")) {
            id.${setPkMethodNames.get(primaryKey)}(new java.sql.Date(((Date) (new DateBridge(Resolution.DAY)).stringToObject(field.stringValue())).getTime()));
        }
      <#elseif pkTypes.get(primaryKey) == "BigDecimal">
        id.${setPkMethodNames.get(primaryKey)}((BigDecimal) (new BigDecimalBridge()).stringToObject(field.stringValue()));
      <#elseif pkTypes.get(primaryKey) == "Long">
        id.${setPkMethodNames.get(primaryKey)}((Long) (new LongBridge()).stringToObject(field.stringValue()));
      <#else>
        id.${setPkMethodNames.get(primaryKey)}(field.stringValue());
      </#if>
    </#list>
        return id;
    }

    /**
     * change object to String.
     * @param object a <code>Object</code> PK value
     * @return a <code>String</code> value
     */
    public String objectToString(Object object) {
        ${pkName} id = (${pkName}) object;
        StringBuilder sb = new StringBuilder();
    <#assign n = 0 />
    <#list primaryKeys as primaryKey>
      <#if n gt 0>
        sb.append("_");
      </#if>
        sb.append(id.${getPkMethodNames.get(primaryKey)}());
      <#assign n = n+1 />
    </#list>
        return sb.toString();
    }

    /**
     * set field value by pk.
     * @param name a <code>String</code> field name
     * @param value a <code>Object</code> value
     * @param document a <code>Document</code> value
     * @param luceneOptions a <code>LuceneOptions</code> value
     */
    public void set(String name, Object value, Document document, LuceneOptions luceneOptions) {
        ${pkName} id = (${pkName}) value;
        Store store = luceneOptions.getStore();
        Index index = luceneOptions.getIndex();
        TermVector termVector = luceneOptions.getTermVector();
        Float boost = luceneOptions.getBoost();

        Field field = null;
    <#list primaryKeys as primaryKey>
      <#if pkTypes.get(primaryKey) == "Timestamp" || pkTypes.get(primaryKey) == "Date">
        field = new Field(name + ".${primaryKey}", (new DateBridge(Resolution.DAY)).objectToString(id.${getPkMethodNames.get(primaryKey)}()), store, index, termVector);
      <#elseif pkTypes.get(primaryKey) == "BigDecimal" || pkTypes.get(primaryKey) == "Long">
        field = new Field(name + ".${primaryKey}", id.${getPkMethodNames.get(primaryKey)}().toString(), store, index, termVector);
      <#else>
        field = new Field(name + ".${primaryKey}", id.${getPkMethodNames.get(primaryKey)}(), store, index, termVector);
      </#if>
        field.setBoost(boost);
        document.add(field);
    </#list>

        field = new Field(name, objectToString(id), store, index, termVector);
        field.setBoost(boost);
        document.add(field);
    }

}
