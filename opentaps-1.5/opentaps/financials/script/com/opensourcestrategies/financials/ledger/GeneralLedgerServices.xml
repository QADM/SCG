<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
-->
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<!-- This file has been modified by Open Source Strategies, Inc. -->


<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <!-- ========== GL Posting Services ========== -->
    <simple-method method-name="createAcctgTransAndEntries" short-description="Verifies and posts a set of AcctgTransEntries">
        <!-- retrieve ledger rounding properties -->
        <property-to-field resource="arithmetic" property="ledger.decimals" field="ledgerDecimals"/>
        <property-to-field resource="arithmetic" property="ledger.rounding" field="roundingMode"/>
        <log level="info" message="Using ledger decimals [${ledgerDecimals}] and rounding [${roundingMode}]"/>        

        <!-- first loop through and make sure all the entries are valid  -->
        <iterate list="parameters.acctgTransEntries" entry="acctgTransEntry">
            <log level="info" message="${acctgTransEntry}"/>
            <!-- the organization party must be an internal organization -->
            <entity-one entity-name="PartyRole" value-field="partyRole" use-cache="true" auto-field-map="false">
                <field-map field-name="partyId" from-field="acctgTransEntry.organizationPartyId"/>
                <field-map field-name="roleTypeId" value="INTERNAL_ORGANIZATIO"/>
            </entity-one>
            <if-empty field="partyRole">
                <add-error><fail-message message="${acctgTransEntry.organizationPartyId} for transaction ${acctgTransEntry.acctgTransId} entry ${acctgTransEntry.acctTransEntrySeqId} is not an internal organization "/></add-error>
                <check-errors/>
            </if-empty>
            <!-- add up debits and credits -->
            <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="D">
                <calculate field="debitTotal" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                    <calcop operator="get" field="acctgTransEntry.amount"/>
                    <calcop operator="get" field="debitTotal"/>
                </calculate>
            </if-compare>
            <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="C">
                <calculate field="creditTotal" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                    <calcop operator="get" field="acctgTransEntry.amount"/>
                    <calcop operator="get" field="creditTotal"/>
                </calculate>
            </if-compare>
        </iterate>
        <calculate field="debitCreditDifference" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
            <calcop operator="get" field="debitTotal"/>
            <calcop operator="negative" field="creditTotal"/>
        </calculate>
        <!-- <log level="info" message="In createAcctgTransAndEntries: debitTotal = [${debitTotal}] creditTotal=[${creditTotal}] debitCreditDifference=[${debitCreditDifference}]"/> -->
        <!-- if the debit and credit totals do not balance, return an error -->
        <if-compare field="debitCreditDifference" operator="greater-equals" value="0.000001" type="Double">
            <add-error><fail-property resource="AccountingUiLabels" property="AccountingDebitCreditMustEqual"/></add-error>
        </if-compare>
        <if-compare field="debitCreditDifference" operator="less-equals" value="-0.000001" type="Double">
            <add-error><fail-property resource="AccountingUiLabels" property="AccountingDebitCreditMustEqual"/></add-error>
        </if-compare>
        <check-errors/>
        
        <!-- now do the posting. First, create the AcctgTrans entity -->
        <set-service-fields service-name="createAcctgTrans" map="parameters" to-map="createAcctgTransParams"/>
        <if-empty field="createAcctgTransParams.transactionDate">
            <now-timestamp field="createAcctgTransParams.transactionDate"/>
        </if-empty>
        <call-service service-name="createAcctgTrans" in-map-name="createAcctgTransParams">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        
        <!-- Next, create the AcctgTransEntry entities one by one -->
        <iterate list="parameters.acctgTransEntries" entry="acctgTransEntry">
            <!-- if any amount is negative, then get the absolute (positive) value of that amount, and flip the Debit/Credit flag  -->
            <if-compare field="acctgTransEntry.amount" operator="less" value="0">
                <log level="verbose" message="${acctgTransEntry} is going to get inverted"/>
                <calculate field="acctgTransEntry.amount">
                    <calcop field="acctgTransEntry.amount" operator="negative"/>
                </calculate>
                <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="D">
                    <set value="C" field="acctgTransEntry.debitCreditFlag"/>
                <else>
                    <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" value="C">
                        <set value="D" field="acctgTransEntry.debitCreditFlag"/>
                    </if-compare>
                </else>
                </if-compare>
            </if-compare>
            
            <!-- now create the AcctgTransEntry using the acctgTransId we already have from above -->
            <clear-field field="createAcctgTransEntryParams"/> <!-- VERY IMPORTANT: or values will carry from one entry to the other -->
            <set-service-fields service-name="createAcctgTransEntry" map="acctgTransEntry" to-map="createAcctgTransEntryParams"/>
            <set from-field="acctgTransId" field="createAcctgTransEntryParams.acctgTransId"/>
            <call-service service-name="createAcctgTransEntry" in-map-name="createAcctgTransEntryParams"/>
        </iterate>
        
        <!-- all done -->
        <field-to-result field="acctgTransId"/>
    </simple-method>

</simple-methods>
