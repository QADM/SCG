/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 *  
 */
 
 import org.ofbiz.base.util.UtilMisc;
 import org.ofbiz.base.util.UtilDateTime;
 import org.ofbiz.base.util.UtilValidate;
 import org.ofbiz.base.util.UtilHttp;
 import org.ofbiz.entity.model.DynamicViewEntity;
 import org.ofbiz.entity.model.ModelKeyMap;
 import org.ofbiz.entity.Delegator;
 import org.ofbiz.entity.condition.*;
 import org.ofbiz.entity.util.*;
 import javolution.util.FastList;
 import javolution.util.FastMap;
 import org.ofbiz.content.report.*;
 import org.opentaps.common.util.UtilCommon;
 import org.opentaps.common.util.UtilMessage;
 import org.opentaps.common.reporting.etl.UtilEtl;
 import java.text.ParseException;
 
 Delegator delegator = (Delegator) request.getAttribute("delegator");
 locale = UtilHttp.getLocale(request);
 timeZone = UtilCommon.getTimeZone(request);
 uiLabelMap = UtilMessage.getUiLabels(locale); 
  
 productStoreId = UtilCommon.getParameter(request, "productStoreId");  
 organizationPartyId = UtilCommon.getOrganizationPartyId(request);
 fromDateString = UtilCommon.getParameter(request, "fromDate_c_date");
 thruDateString = UtilCommon.getParameter(request, "thruDate_c_date");
 fromDate = null;
 thruDate = null;
  
 try {
     fromDate = UtilDateTime.getDayStart(UtilDateTime.stringToTimeStamp(fromDateString, UtilDateTime.getDateFormat(locale), timeZone, locale), timeZone, locale);
     // AG120208 : this is a better way to handle the localized date but it needs some more work
     // fromDate = UtilDateTime.stringToTimeStamp(UtilHttp.makeParamValueFromComposite(request, "fromDate", locale), timeZone, locale);
 } catch (ParseException) {
     if (UtilValidate.isNotEmpty(fromDate)) {
         UtilMessage.addError(request, "FinancialsError_IllegalDateFormat", UtilMisc.toMap("fieldName", uiLabelMap.get("CommonFromDate")));
         return "error";
     }
 }
 
 try {
     thruDate = UtilDateTime.getDayEnd(UtilDateTime.stringToTimeStamp(thruDateString, UtilDateTime.getDateFormat(locale), timeZone, locale), timeZone, locale);
     // AG120208 : this is a better way to handle the localized date but it needs some more work 
     // thruDate = UtilDateTime.stringToTimeStamp(UtilHttp.makeParamValueFromComposite(request, "thruDate", locale), timeZone, locale);
 } catch (ParseException) {
     if (UtilValidate.isNotEmpty(thruDate)) {
         UtilMessage.addError(request, "FinancialsError_IllegalDateFormat", UtilMisc.toMap("fieldName", uiLabelMap.get("CommonThruDate")));
         return "error";
     }
 }

 HashMap jrParameters = new HashMap();
 jrParameters.put("productStoreId", productStoreId);  
 jrParameters.put("organizationPartyId", organizationPartyId);
 // hack to simulate a dynamic query in iReport
 // ... AND (PS.PRODUCT_STORE_ID = $P{productStoreId} OR $P{productStoreId} = 'ALL_STORES')
 if (UtilValidate.isEmpty(productStoreId)) {
     productStoreId = "ALL_STORES";
 }
 jrParameters.put("productStoreId", productStoreId);
 jrParameters.put("fromDate", fromDate);
 jrParameters.put("thruDate", thruDate);
 jrParameters.put("SUBREPORT_DIR", request.getSession().getServletContext().getRealPath("/"));
 request.setAttribute("jrParameters", jrParameters);
 return "success";
 
