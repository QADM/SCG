/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
 
/**
 * Generates the report for a customer or vendor statement.
 * This report displays all the transaction entries for a
 * given date range between the organizationPartyId and the
 * customer or vendor partyId. 
 *
 * @author Leon Torres (leon@opensourcestrategies.com)
 * @author Si Chen (sichen@opensourcestrategies.com)
 */

import java.awt.Color;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.*;

import com.opensourcestrategies.financials.accounts.AccountsHelper;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.servlet.ServletUtilities;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.ui.RectangleInsets;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.service.*;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.common.util.UtilMessage;
import org.opentaps.foundation.infrastructure.Infrastructure;
import javolution.util.FastTable;

// the screen should tell us the report type (VENDOR, CUSTOMER, COMMISSION)
reportType = context.get("reportType");
if (reportType == null) reportType = parameters.get("reportType");

isVendor = false;
isCustomer = false;
isCommission = false;
chartTitle = "";
timeAxisLabel = "";
valueAxisLabel = "";

// our organization
organizationPartyId = UtilCommon.getOrganizationPartyId(request);
// Get the base currency for the organization
orgCurrencyUomId = UtilCommon.getOrgBaseCurrency(organizationPartyId, delegator);
context.put("orgCurrencyUomId", orgCurrencyUomId);
timeAxisLabel = "Date";
valueAxisLabel = "Total Balance (" + orgCurrencyUomId + ")";
balanceTypeEnumId = "";

if ("VENDOR".equals(reportType)) {
    isVendor = true;
    context{"history"} = UtilCommon.makeHistoryEntry(UtilMessage.getUiLabels(locale).get("FinancialsVendorStatement"), "vendorStatement", FastTable.newInstance());
    chartTitle = "Vendor Balances";
    balanceTypeEnumId = "SUPPLIERS";
} else if ("CUSTOMER".equals(reportType)) {
    isCustomer = true;
    context{"history"} = UtilCommon.makeHistoryEntry(UtilMessage.getUiLabels(locale).get("FinancialsCustomerStatement"), "customerStatement", FastTable.newInstance());
    chartTitle = "Customer Balances";
    balanceTypeEnumId = "CUSTOMERS";
} else if ("COMMISSIONS".equals(reportType)) {
    isCommission = true;
    context{"history"} = UtilCommon.makeHistoryEntry(UtilMessage.getUiLabels(locale).get("FinancialsCommissionsStatement"), "commissionsStatement", FastTable.newInstance());
    chartTitle = "Commission Balances";
    balanceTypeEnumId = "COMMISSIONS";
} else return;

context.put("isVendor", isVendor);
context.put("isCustomer", isCustomer);
context.put("isComission", isCommission);

// whether this is a receivable or payable report
isReceivable = isCustomer;
context.put("isReceivable", isReceivable);
isPayable = isVendor || isCommission;
context.put("isPayable", isPayable);

// we need the party from a partyId (form or parameter or whatever)
partyId = request.getParameter("partyId");
if (partyId == null) partyId = parameters.get("partyId");
context.put("partyId", partyId);

// tell the form that we want partyId input
partyLabel = (isVendor ? "FinancialsVendor" : isCustomer ? "FinancialsCustomer" : "PartyParty");
context.put("partyIdInputRequested", UtilMisc.toMap("label", partyLabel));

// get these from the common form parsing script
organizationPartyId = context.get("organizationPartyId");
glFiscalTypeId = context.get("glFiscalTypeId");

// make sure the party exists
party = delegator.findByPrimaryKeyCache("Party", UtilMisc.toMap("partyId", partyId));
if (party == null) return;

// get dates back from the context
fromDate = context.get("fromDate");
thruDate = context.get("thruDate");
if (fromDate == null || thruDate == null) return;

// account types
glAccountTypeIds = (isCustomer ? AccountsHelper.CUSTOMER_RECEIVABLE_ACCTS: isVendor ? AccountsHelper.VENDOR_PAYABLE_ACCTS : AccountsHelper.COMMISSION_PAYABLE_ACCTS);

// make our condition
conditions = UtilMisc.toList(
        new EntityExpr("transactionDate", EntityOperator.LESS_THAN_EQUAL_TO, thruDate),
        new EntityExpr("transactionDate", EntityOperator.GREATER_THAN, fromDate),
        new EntityExpr("organizationPartyId", EntityOperator.EQUALS, organizationPartyId),
        new EntityExpr("partyId", EntityOperator.EQUALS, partyId),
        new EntityExpr("isPosted", EntityOperator.EQUALS, "Y"),
        new EntityExpr("glAccountTypeId", EntityOperator.IN, glAccountTypeIds));
findConditions = new EntityConditionList(conditions, EntityOperator.AND);

// get transactions ordered by transactionDate
transactions = delegator.findByCondition("AcctgTransAndEntries", findConditions, null, UtilMisc.toList("transactionDate"));
transactionMaps = new ArrayList();


// next get the beginning balances for this party.
beginningBalance = null;
if (isCustomer) {
    beginningBalance = AccountsHelper.getBalanceForCustomerPartyId(partyId, organizationPartyId, glFiscalTypeId, fromDate, delegator);
} else {
    beginningBalance = AccountsHelper.getBalanceForVendorPartyId(partyId, organizationPartyId, glFiscalTypeId, fromDate, delegator);
}

context.put("beginningBalance", beginningBalance);

// calculate the running balance when processing each transaction
runningBalance = beginningBalance;
if (runningBalance == null) {
    runningBalance = BigDecimal.ZERO;
}

// processing transaction to retreive additional fields and calculate the running balance
for (transaction : transactions) {
    tmap = new HashMap(transaction);

    isCredit = "C".equals(transaction.get("debitCreditFlag"));

    // reverse the amount for paid debits or received credits
    transactionAmount = transaction.getBigDecimal("amount");
    if (isReceivable && isCredit || isPayable && !isCredit) {
        transactionAmount = transactionAmount.negate();
    }
    tmap.put("amount", transactionAmount);

    // calculate running balance
    runningBalance = runningBalance.add(transactionAmount);
    tmap.put("runningBalance", runningBalance);

    // get the transaction/invoice/payment type
    invoiceId = transaction.get("invoiceId");
    paymentId = transaction.get("paymentId");
    invoice = null;
    payment = null;
    if (UtilValidate.isNotEmpty(invoiceId)) {
        invoice = transaction.getRelatedOne("Invoice");
    } else if (UtilValidate.isNotEmpty(paymentId)) {
        payment = transaction.getRelatedOne("Payment");
    } else {
        transType = transaction.getRelatedOneCache("AcctgTransType").getString("description");
        tmap.put("transType", transType);
    }

    if (UtilValidate.isNotEmpty(invoice)) {
        invoiceType = invoice.getRelatedOneCache("InvoiceType").getString("description");
        tmap.put("invoiceType", invoiceType);
    } else if (UtilValidate.isNotEmpty(payment)) {
        paymentType = payment.getRelatedOneCache("PaymentType").getString("description");
        tmap.put("paymentType", paymentType);
    }

    // filter out internal payments related to the customer credits: refunds which are put to a credit, payments using a credit
    if (UtilValidate.isNotEmpty(payment) &&
        (("CUSTOMER_REFUND".equals(payment.getString("paymentTypeId")) && "EXT_BILLACT".equals(payment.getString("paymentMethodTypeId"))) ||
        ("CUSTOMER_PAYMENT".equals(payment.getString("paymentTypeId")) && "EXT_BILLACT".equals(payment.getString("paymentMethodTypeId"))))) {
        Debug.logInfo("CustomerVendorStatement.bsh: Transaction " + tmap + " will not show up on a statement because it is related to payment " + payment, "CustomerVendorStatement.bsh");
    } else {
        transactionMaps.add(tmap);
    }
}

context.put("transactions", transactionMaps);
context.put("organizationPartyId",organizationPartyId);

        // create time series charts
        TimeSeries timeSeries = new TimeSeries("Balance over Time", Day.class);
        String hql = "from AccountBalanceHistory eo where balanceTypeEnumId = :balanceTypeEnumId and eo.organizationPartyId = :organizationPartyId and eo.partyId = :partyId and eo.asOfDatetime > :fromDate and eo.asOfDatetime <= :thruDate order by eo.asOfDatetime";
        dispatcher = request.getAttribute("dispatcher");
        infrastructure = new Infrastructure(dispatcher);
        session = infrastructure.getSession();
        query = session.createQuery(hql);
        query.setString("balanceTypeEnumId", balanceTypeEnumId);
        query.setString("organizationPartyId", organizationPartyId);
        query.setString("partyId", partyId);
        query.setTimestamp("fromDate", fromDate);
        query.setTimestamp("thruDate", thruDate);
        list = query.list();
        //iterator all item of match result, and add it to timeSeries
        for (int i=0; i < list.size(); i++) {
         //set asOfDatetime field value as Y value, accountBalanceHistory as X value.
            accountBalanceHistory = list.get(i);
            Day asOfDatetime = new Day(accountBalanceHistory.getAsOfDatetime());
            timeSeries.addOrUpdate(asOfDatetime, accountBalanceHistory.getTotalBalance());
        }
        TimeSeriesCollection dataset = new TimeSeriesCollection();
       dataset.addSeries(timeSeries);
       dataset.setDomainIsPointsInTime(true);
       // create JFreechart componets
       JFreeChart chart = ChartFactory.createTimeSeriesChart(chartTitle,
                timeAxisLabel, valueAxisLabel,
                dataset,
                false, // legend
                false, // tooltips
                false // urls
            );
            //set chart style(back color/borderVisible/padding/paint)
       chart.setBackgroundPaint(Color.white);
       chart.setBorderVisible(true);
       chart.setPadding(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
       chart.setBackgroundPaint(Color.white);
       plot = chart.getXYPlot();
       axis = plot.getDomainAxis();
       //set date format
       axis.setDateFormatOverride(new SimpleDateFormat("dd-MMM-yyyy"));
       //set number format
       numberAxis = plot.getRangeAxis();
       numberAxis.setNumberFormatOverride(new DecimalFormat("0.000"));
       //set data point not visible
       plot.getRenderer().setBaseShapesVisible(false);
       //generate output graph
       String chartImage = ServletUtilities.saveChartAsPNG(chart, 500, 200, null);
       context{"chartImage"} = chartImage;
       session.close();
