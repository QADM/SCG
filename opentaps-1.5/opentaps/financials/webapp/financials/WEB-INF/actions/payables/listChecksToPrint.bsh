/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.math.BigDecimal;
import javolution.util.FastList;
import javolution.util.FastMap;

import com.opensourcestrategies.financials.util.UtilFinancial;
import org.ofbiz.accounting.payment.PaymentWorker;
import org.ofbiz.accounting.util.UtilAccounting;
import org.ofbiz.base.util.Debug;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.condition.EntityCondition;
import org.ofbiz.entity.condition.EntityOperator;
import org.ofbiz.entity.util.EntityFindOptions;
import org.ofbiz.entity.util.EntityUtil;
import org.ofbiz.party.party.PartyHelper;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.domain.DomainsLoader;
import org.opentaps.foundation.infrastructure.Infrastructure;
import org.opentaps.foundation.infrastructure.User;

organizationPartyId = UtilCommon.getOrganizationPartyId(request);
if (organizationPartyId == null) {
    return;
}
dl = new DomainsLoader(new Infrastructure(dispatcher), new User(userLogin));
organizationRepository = dl.loadDomainsDirectory().getOrganizationDomain().getOrganizationRepository();
organization = organizationRepository.getOrganizationById(organizationPartyId);
context.put("allocatePaymentTagsToApplications", organization.allocatePaymentTagsToApplications());


// find all payment methods for this organization which are still current.  The name "checkPaymentMethods" is out of date: it is now intended to include other payment methods as well
checkPaymentMethods = delegator.findByAnd("PaymentMethod", UtilMisc.toList(
            EntityCondition.makeCondition("partyId", EntityOperator.EQUALS, organizationPartyId),
            EntityUtil.getFilterByDateExpr()));
context.put("checkPaymentMethods", checkPaymentMethods);

// find payments of paymentMethodType PERSONAL_CHECK or COMPANY_CHECK with statusId NOT_PAID

if (!security.hasEntityPermission("ACCOUNTING", "_PRINT_CHECKS", userLogin)) {
    context.put("allowed", false);
    return;
}

paymentMethodId = parameters.get("paymentMethodId");
if (paymentMethodId != null) {
    context.put("paymentMethodId", paymentMethodId);
} else {
    context.put("paymentMethodId", "");
}

paymentsOrderBy = "effectiveDate";

// condition to find all payments that are not receipts or paychecks
paymentCond = EntityCondition.makeCondition(UtilMisc.toList(
                EntityCondition.makeCondition("partyIdFrom", EntityOperator.EQUALS, organizationPartyId),
                EntityCondition.makeCondition("paymentMethodId", EntityOperator.EQUALS, paymentMethodId),
                EntityCondition.makeCondition("statusId", EntityOperator.EQUALS, "PMNT_NOT_PAID")), EntityOperator.AND);

paymentMethodTypeCond = EntityCondition.makeCondition(UtilMisc.toList(
            EntityCondition.makeCondition("paymentMethodTypeId", EntityOperator.EQUALS, "PERSONAL_CHECK"),
            EntityCondition.makeCondition("paymentMethodTypeId", EntityOperator.EQUALS, "COMPANY_CHECK")), EntityOperator.OR);

paymentTypeCond = null;
if ("Y".equals(isPaycheck)) {
    paymentTypeCond = UtilFinancial.getPaymentTypeExpr(delegator, "PAY_CHECK");
} else {
    paymentTypeCond = EntityCondition.makeCondition(UtilMisc.toList(
                    UtilFinancial.getPaymentTypeExpr(delegator, "DISBURSEMENT"),
                    UtilFinancial.getPaymentTypeComplementExpr(delegator, "PAY_CHECK"),
                    UtilFinancial.getPaymentTypeComplementExpr(delegator, "RECEIPT")), EntityOperator.AND);
}

// build the main condition
conditionList = EntityCondition.makeCondition(UtilMisc.toList(
                   paymentCond,
                   paymentTypeCond), EntityOperator.AND);

if (organization.allocatePaymentTagsToApplications()) {
    conditionList = EntityCondition.makeCondition(UtilMisc.toList(
                   conditionList,
                   EntityCondition.makeCondition("openAmount", EntityOperator.EQUALS, BigDecimal.ZERO)), EntityOperator.AND);
}

// use a page builder to fetch the outstanding check list, because we need to filter receipts and paychecks
buildPaymentList(delegator, conditions) {
    entityName = "Payment";
    fieldsToSelect = UtilMisc.toList("paymentId");
    fieldsToSelect.add("paymentTypeId");
    fieldsToSelect.add("paymentMethodId");
    fieldsToSelect.add("paymentRefNum");
    fieldsToSelect.add("effectiveDate");
    fieldsToSelect.add("partyIdTo");
    fieldsToSelect.add("amount");
    orderBy = UtilMisc.toList(paymentsOrderBy);
    where = conditions;

    build(page) {
        newPage = FastList.newInstance();
        for (iter = page.iterator(); iter.hasNext(); ) {
            payment = iter.next();
            row = FastMap.newInstance();
            row.putAll(payment.getAllFields());
            row.put("paymentMethod", payment.getRelatedOneCache("PaymentMethod").get("description", locale));
            row.put("partyToName", PartyHelper.getPartyName(delegator, payment.get("partyIdTo"), false));
            if ("Y".equals(isPaycheck)) {
                row.put("view", "viewPaycheck");
            } else {
                row.put("view", "viewPayment");
            }
            newPage.add(row);
        }
        return newPage;
    }
    return this; // remember this, very important
}
context.put("paymentListBuilder", buildPaymentList(delegator, conditionList));
