/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  @author Ali Afzal Malik (ali@opensourcestrategies.com)
 */

import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.entity.util.EntityUtil;
import org.ofbiz.base.util.UtilMisc;
import java.util.List;
import org.ofbiz.base.util.*;
import org.opentaps.common.util.UtilMessage;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.common.util.UtilAccountingTags;
import org.opentaps.domain.DomainsLoader;
import org.opentaps.domain.ledger.AccountingTransaction;
import org.opentaps.foundation.exception.FoundationException;
import org.opentaps.foundation.repository.ofbiz.Repository;
import org.opentaps.foundation.infrastructure.*;

import org.opentaps.common.util.UtilMessage;

agrupador = UtilCommon.getParameter(context, "agrupador");

if (UtilValidate.isNotEmpty(parameters.get("agrupador"))) {
    acctgPolizasDetalleListado = delegator.findByAnd("AcctgPolizasDetalleListado", UtilMisc.toMap("agrupador", parameters.get("agrupador")), UtilMisc.toList("amount"));
    if (acctgPolizasDetalleListado == null) {
        UtilMessage.addError(request, "FinancialsError_GlAccountNotFound");
        return;
    }    
    context.put("acctgPolizasDetalleListado", acctgPolizasDetalleListado);
}

dl = new DomainsLoader(new Infrastructure(dispatcher), new User(userLogin));
ledgerDomain = dl.loadDomainsDirectory().getLedgerDomain();
ledgerRepository = ledgerDomain.getLedgerRepository();
ledgerSpecification = ledgerRepository.getSpecification();

try 
{	//AcctgPolizasDetalleLista = ledgerRepository.getAcctgPolizasDetalleLista(agrupador);
	acctgPolizasDetalleLista = delegator.findByAnd("AcctgPolizasDetalleLista", UtilMisc.toMap("agrupador", parameters.get("agrupador"), "debitCreditFlag", "D"), UtilMisc.toList("postedDate"));
	acctgPolizasClavesPresup = delegator.findByAnd("AcctgPolizasClavesPresup", UtilMisc.toMap("agrupador", parameters.get("agrupador")), UtilMisc.toList("clavePres"));
	//acctgPolizasClaPreTrans = delegator.findByAnd("AcctgTransPresupuestal", UtilMisc.toMap("agrupador", parameters.get("agrupador")), UtilMisc.toList("agrupador"));
	//acctgPolizasClaPreTrans = ledgerRepository.getAcctgTransPresupuestal(agrupador);
	
	print("acctgPolizasDetalleLista: " + acctgPolizasDetalleLista);             
	print("acctgPolizasClavesPresup: " + acctgPolizasClavesPresup);
	print("acctgPolizasClaPreTrans: " + acctgPolizasClaPreTrans);
	
} 
catch (FoundationException e) {
}


//context.put("acctgPolizasDetalleLista", Repository.genericValueFromEntity(delegator, acctgPolizasDetalleLista));
context.put("acctgPolizasDetalleLista", acctgPolizasDetalleLista);
context.put("acctgPolizasClavesPresup", acctgPolizasClavesPresup);



    




