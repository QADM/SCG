/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 *  
 */

/*
 * @author Si Chen (sichen@opensourcestrategies.com)
 * @author Leon Torres (leon@opensourcestrategies.com)
 */

import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.entity.util.EntityUtil;
import org.ofbiz.service.ServiceUtil;
import org.opentaps.common.util.UtilMessage;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.common.util.UtilAccountingTags;
import javolution.util.FastList;

// check that a report was asked first
reportFormType = context.get("reportFormType");
if (UtilValidate.isEmpty(reportFormType)) return;

// put to history
context{"history"} = UtilCommon.makeHistoryEntry(UtilMessage.getUiLabels(locale).get("AccountingIncomeStatement"), null, FastList.newInstance());

// get the from and thru date from parseReportOptions
fromDate = context.get("fromDate");
thruDate = context.get("thruDate");

// return if no from or thru dates set
if (fromDate == null && thruDate == null) {
    UtilMessage.addError(request, "FinancialsError_DateRangeMissing");
    return;
} else if (fromDate == null || thruDate == null) {
    UtilMessage.addError(request, "FinancialsError_FromOrThruDateMissing");
    return;
}

incomeStatementParams = UtilMisc.toMap("organizationPartyId", context.get("organizationPartyId"), "glFiscalTypeId", context.get("glFiscalTypeId"), "userLogin", userLogin);

// get the statement by these dates
incomeStatementParams.put("fromDate", fromDate);
incomeStatementParams.put("thruDate", thruDate);

// add tags from the request to the service parameters
UtilAccountingTags.addTagParameters(request, incomeStatementParams);

result = dispatcher.runSync("getIncomeStatementByDates", incomeStatementParams);
if (!ServiceUtil.isError(result)) {
    context.put("grossProfit", result.get("grossProfit"));
    context.put("operatingIncome", result.get("operatingIncome"));
    context.put("pretaxIncome", result.get("pretaxIncome"));
    context.put("netIncome", result.get("netIncome"));
    context.put("glAccountSums", result.get("glAccountSums"));
    context.put("glAccountGroupSums", result.get("glAccountGroupSums"));
    context.put("isClosed", result.get("isClosed"));
}

// Get the base currency for the organization
context.put("orgCurrencyUomId", UtilCommon.getOrgBaseCurrency(context.get("organizationPartyId"), delegator));

//TODO: invoke some kind of a service to figure out if the income statement period is really closed
