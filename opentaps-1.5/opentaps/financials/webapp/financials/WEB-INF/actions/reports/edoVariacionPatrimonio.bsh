/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 *  
 *  @author Leon Torres (leon@opensourcestrategies.com
 */

import org.ofbiz.entity.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.service.*;
import org.opentaps.common.util.UtilMessage;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.common.util.UtilAccountingTags;
import javolution.util.*;

//Se inicializan variables comunes
MIL = new BigDecimal(1000);
ZERO = BigDecimal.ZERO;
uiLabelMap = UtilMessage.getUiLabels(locale);

timeZone = UtilCommon.getTimeZone(request);

//put to history
context{"history"} = UtilCommon.makeHistoryEntry(UtilMessage.getUiLabels(locale).get("VariacionHacienda"), null, FastList.newInstance());

//Datos Principales
dateOption = UtilCommon.getParameter(request, "reportDateOption");
customTimePeriodId = UtilCommon.getParameter(request,"customTimePeriodId");
organizationPartyId = UtilCommon.getParameter(request,"organizationPartyId");
glFiscalTypeId = context.get("glFiscalTypeId");
asOfDate = context.get("asOfDate");
organizationPartyId = context.get("organizationPartyId");
locale = UtilHttp.getLocale(request);
timeZone = UtilHttp.getTimeZone(request);

if (dateOption == null) {
    return;
}

mapDatos = com.opensourcestrategies.financials.reports.FinancialReports.preparaDatosPreCompara(request);

// add tags from the request to the service parameters
UtilAccountingTags.addTagParameters(request, mapDatos);

result = dispatcher.runSync("getComparativeVariacionPatrimonio", 
			dispatcher.getDispatchContext().makeValidContext("getComparativeVariacionPatrimonio", ModelService.IN_PARAM, mapDatos));
if (ServiceUtil.isError(result)) return;

// put everything into the context

fromDateAccountBalances = result.get("fromDateAccountBalances");
thruDateAccountBalances = result.get("thruDateAccountBalances");

cuentasPatrimonioFr = fromDateAccountBalances.get("cuentasPatrimonio");
cuentasPatrimonioFrList = EntityUtil.orderBy((fromDateAccountBalances.get("cuentasPatrimonio")).keySet(), UtilMisc.toList("glAccountId"));
cuentasPatContribuidoFr = fromDateAccountBalances.get("cuentasPatContribuido");
cuentasPatContribuidoFrList = EntityUtil.orderBy((fromDateAccountBalances.get("cuentasPatContribuido")).keySet(), UtilMisc.toList("glAccountId"));
cuentasPatGenAnteriorFr = fromDateAccountBalances.get("cuentasPatGenAnterior");
cuentasPatGenAnteriorFrList = EntityUtil.orderBy((fromDateAccountBalances.get("cuentasPatGenAnterior")).keySet(), UtilMisc.toList("glAccountId"));
cuentasPatGeneradoFr = fromDateAccountBalances.get("cuentasPatGenerado");
cuentasPatGeneradoFrList = EntityUtil.orderBy((fromDateAccountBalances.get("cuentasPatGenerado")).keySet(), UtilMisc.toList("glAccountId"));

cuentasPatrimonioTr = thruDateAccountBalances.get("cuentasPatrimonio");
cuentasPatrimonioTrList = EntityUtil.orderBy((thruDateAccountBalances.get("cuentasPatrimonio")).keySet(), UtilMisc.toList("glAccountId"));
cuentasPatContribuidoTr = thruDateAccountBalances.get("cuentasPatContribuido");
cuentasPatContribuidoTrList = EntityUtil.orderBy((thruDateAccountBalances.get("cuentasPatContribuido")).keySet(), UtilMisc.toList("glAccountId"));
cuentasPatGenAnteriorTr = thruDateAccountBalances.get("cuentasPatGenAnterior");
cuentasPatGenAnteriorTrList = EntityUtil.orderBy((thruDateAccountBalances.get("cuentasPatGenAnterior")).keySet(), UtilMisc.toList("glAccountId"));
cuentasPatGeneradoTr = thruDateAccountBalances.get("cuentasPatGenerado");
cuentasPatGeneradoTrList = EntityUtil.orderBy((thruDateAccountBalances.get("cuentasPatGenerado")).keySet(), UtilMisc.toList("glAccountId"));

rows = FastList.newInstance();

primerBloque = FastMap.newInstance();
String nombre = null;

	//Estas cuentas se ordenan para mostrarse en la columna correspondiente
	for (GenericValue account : cuentasPatrimonioFrList) {
		
		String cuenta = account.getString("glAccountId");
		BigDecimal monto = cuentasPatrimonioFr.get(account) == null ? null : cuentasPatrimonioFr.get(account).divide(MIL);
		
		if(cuenta.equals("3.1")){
			primerBloque.put(Integer.valueOf(1), monto);
		} else if(cuenta.equals("3.2.2")){
			primerBloque.put(Integer.valueOf(2), monto);
		} else if(cuenta.equals("3.2.1")){
			primerBloque.put(Integer.valueOf(3), monto);
		} else if(cuenta.equals("3.3")){
			primerBloque.put(Integer.valueOf(4), monto);
			nombre = account.getString("accountName");
		}
		
	}

	BigDecimal total = ZERO;
	total = (primerBloque.get(Integer.valueOf(1)) == null ? ZERO : primerBloque.get(Integer.valueOf(1))).add(
			(primerBloque.get(Integer.valueOf(2)) == null ? ZERO : primerBloque.get(Integer.valueOf(2)))).add(
			(primerBloque.get(Integer.valueOf(3)) == null ? ZERO : primerBloque.get(Integer.valueOf(3)))).add(
			(primerBloque.get(Integer.valueOf(4)) == null ? ZERO : primerBloque.get(Integer.valueOf(4))));
	
	//Agregamos la primer fila
	row = FastMap.newInstance();
	row.put("accountName", uiLabelMap.get("PatrimonioNetoAnterior"));
	row.put("contribuido", primerBloque.get(Integer.valueOf(1)) == null ? null : primerBloque.get(Integer.valueOf(1)).divide(MIL));
	row.put("ejercicio", primerBloque.get(Integer.valueOf(2)) == null ? null : primerBloque.get(Integer.valueOf(2)).divide(MIL));
	row.put("anteriores", primerBloque.get(Integer.valueOf(3)) == null ? null : primerBloque.get(Integer.valueOf(3)).divide(MIL));
	row.put("ajustes", primerBloque.get(Integer.valueOf(4)) == null ? null : primerBloque.get(Integer.valueOf(4)).divide(MIL));
	row.put("total", total == null ? null : total.divide(MIL));
	row.put("accountTypeSeqNum", Integer.valueOf(1));
	rows.add(row);
	
	//Agregamos las filas de ejecicios anteriores
	com.opensourcestrategies.financials.reports.FinancialReports.armaVariacionPatri(rows, cuentasPatGenAnteriorFrList, null, null, cuentasPatGenAnteriorFr, null, Integer.valueOf(2));
	//Agregamos las filas de patrimonio contribuido
	com.opensourcestrategies.financials.reports.FinancialReports.armaVariacionPatri(rows, cuentasPatContribuidoFrList, cuentasPatContribuidoFr, null, null, null, Integer.valueOf(3));
	//Agregamos las filas de patrimonio generado en el ejercicio
	com.opensourcestrategies.financials.reports.FinancialReports.armaVariacionPatri(rows, cuentasPatGeneradoFrList, null, cuentasPatGeneradoFr, null, null, Integer.valueOf(4));
	
	//Agregamos las filas de patrimonio ajustes (Ultimo registro de el primer bloque)
	row = FastMap.newInstance();
	row.put("accountName", nombre);
	row.put("contribuido", null);
	row.put("ejercicio", null);
	row.put("anteriores", null);
	row.put("ajustes", primerBloque.get(Integer.valueOf(4))  == null ? null : primerBloque.get(Integer.valueOf(4)).divide(MIL));
	row.put("total", primerBloque.get(Integer.valueOf(4))  == null ? null : primerBloque.get(Integer.valueOf(4)).divide(MIL));
	row.put("accountTypeSeqNum", Integer.valueOf(5));
	rows.add(row);

	segundoBloque = FastMap.newInstance();
	String nombre1 = null;
	
	//Estas cuentas se ordenan para mostrarse en la columna correspondiente
	for (GenericValue account : cuentasPatrimonioTrList) {
		
		String cuenta = account.getString("glAccountId");
		BigDecimal monto = cuentasPatrimonioTr.get(account) == null ? null : cuentasPatrimonioTr.get(account).divide(MIL);
		if(cuenta.equals("3.1")){
			segundoBloque.put(Integer.valueOf(1), monto);
		} else if(cuenta.equals("3.2.2")){
			segundoBloque.put(Integer.valueOf(2), monto);
		} else if(cuenta.equals("3.2.1")){
			segundoBloque.put(Integer.valueOf(3), monto);
		} else if(cuenta.equals("3.3")){
			segundoBloque.put(Integer.valueOf(4), monto);
			nombre1 = account.getString("accountName");
		}
		
	}
	
	total = ZERO;
	total = (segundoBloque.get(Integer.valueOf(1)) == null ? ZERO : segundoBloque.get(Integer.valueOf(1))).add(
			(segundoBloque.get(Integer.valueOf(2)) == null ? ZERO : segundoBloque.get(Integer.valueOf(2)))).add(
			(segundoBloque.get(Integer.valueOf(3)) == null ? ZERO : segundoBloque.get(Integer.valueOf(3)))).add(
			(segundoBloque.get(Integer.valueOf(4)) == null ? ZERO : segundoBloque.get(Integer.valueOf(4))));
	
	//Agregamos la primer fila
	row = FastMap.newInstance();
	row.put("accountName", uiLabelMap.get("PatrimonioNeto"));
	row.put("contribuido", segundoBloque.get(Integer.valueOf(1)) == null ? null : segundoBloque.get(Integer.valueOf(1)).divide(MIL));
	row.put("ejercicio", segundoBloque.get(Integer.valueOf(2)) == null ? null : segundoBloque.get(Integer.valueOf(2)).divide(MIL));
	row.put("anteriores", segundoBloque.get(Integer.valueOf(3)) == null ? null : segundoBloque.get(Integer.valueOf(3)).divide(MIL));
	row.put("ajustes", segundoBloque.get(Integer.valueOf(4)) == null ? null : segundoBloque.get(Integer.valueOf(4)).divide(MIL));
	row.put("total", total == null ? null : total.divide(MIL));
	row.put("accountTypeSeqNum", Integer.valueOf(6));
	rows.add(row);
	
	//Agregamos las filas de ejecicios anteriores
	com.opensourcestrategies.financials.reports.FinancialReports.armaVariacionPatri(rows, cuentasPatGenAnteriorTrList, null, null, cuentasPatGenAnteriorTr, null, Integer.valueOf(7));
	//Agregamos las filas de patrimonio contribuido
	com.opensourcestrategies.financials.reports.FinancialReports.armaVariacionPatri(rows, cuentasPatContribuidoTrList, cuentasPatContribuidoTr, null, null, null, Integer.valueOf(8));
	//Agregamos las filas de patrimonio generado en el ejercicio
	com.opensourcestrategies.financials.reports.FinancialReports.armaVariacionPatri(rows, cuentasPatGeneradoTrList, null, cuentasPatGeneradoTr, null, null, Integer.valueOf(9));
	
	//Agregamos las filas de patrimonio ajustes
	row = FastMap.newInstance();
	row.put("accountName", nombre1);
	row.put("contribuido", null);
	row.put("ejercicio", null);
	row.put("anteriores", null);
	row.put("ajustes", segundoBloque.get(Integer.valueOf(4)) == null ? null : segundoBloque.get(Integer.valueOf(4)).divide(MIL));
	row.put("total", segundoBloque.get(Integer.valueOf(4)) == null ? null : segundoBloque.get(Integer.valueOf(4)).divide(MIL));
	row.put("accountTypeSeqNum", Integer.valueOf(10));
	rows.add(row);
	
context.put("listaReporte",rows);	


// put the correct GlFiscalTypes into the context for the display tier
fromGlFiscalType = delegator.findByPrimaryKey("GlFiscalType", UtilMisc.toMap("glFiscalTypeId", glFiscalTypeId));
toGlFiscalType = delegator.findByPrimaryKey("GlFiscalType", UtilMisc.toMap("glFiscalTypeId", glFiscalTypeId));
context.put("fromGlFiscalType", fromGlFiscalType);
context.put("toGlFiscalType", toGlFiscalType);
