/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 *  
 *  @author Leon Torres (leon@opensourcestrategies.com
 */


import org.ofbiz.entity.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.service.*;
import org.opentaps.common.util.UtilMessage;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.common.util.UtilAccountingTags;
import javolution.util.*;

//Se inicializan variables comunes
MIL = new BigDecimal(1000);
ZERO = BigDecimal.ZERO;
uiLabelMap = UtilMessage.getUiLabels(locale);

timeZone = UtilCommon.getTimeZone(request);

//put to history
context{"history"} = UtilCommon.makeHistoryEntry(UtilMessage.getUiLabels(locale).get("VariacionHacienda"), null, FastList.newInstance());

//Datos Principales
dateOption = UtilCommon.getParameter(request, "reportDateOption");
customTimePeriodId = UtilCommon.getParameter(request,"customTimePeriodId");
organizationPartyId = UtilCommon.getParameter(request,"organizationPartyId");
glFiscalTypeId = context.get("glFiscalTypeId");
asOfDate = context.get("asOfDate");
organizationPartyId = context.get("organizationPartyId");
locale = UtilHttp.getLocale(request);
timeZone = UtilHttp.getTimeZone(request);

if (dateOption == null) {
    return;
}

mapDatos = com.opensourcestrategies.financials.reports.FinancialReports.preparaDatosVariacion(request);

// add tags from the request to the service parameters
UtilAccountingTags.addTagParameters(request, mapDatos);

result = dispatcher.runSync("getComparativeVariacionPatrimonio", 
			dispatcher.getDispatchContext().makeValidContext("getComparativeVariacionPatrimonio", ModelService.IN_PARAM, mapDatos));
if (ServiceUtil.isError(result)) return;

secondLastDateResults = result.get("secondLastDateResults");
nextLastDateResults = result.get("nextLastDateResults");
lastDateResults = result.get("lastDateResults");

Timestamp fromDate = (Timestamp) mapDatos.get("fromDate");
int anioIni = UtilDateTime.getYear(fromDate, timeZone, locale);
anioIni = anioIni - 2;

listDatesAll = new ArrayList();
listDatesAll.add(secondLastDateResults);
listDatesAll.add(nextLastDateResults);
listDatesAll.add(lastDateResults);

rows = com.opensourcestrategies.financials.reports.FinancialReports.generaReporteVariacion(listDatesAll,uiLabelMap,anioIni);

// put everything into the context
context.put("listaReporte",rows);	

// put the correct GlFiscalTypes into the context for the display tier
fromGlFiscalType = delegator.findByPrimaryKey("GlFiscalType", UtilMisc.toMap("glFiscalTypeId", glFiscalTypeId));
toGlFiscalType = delegator.findByPrimaryKey("GlFiscalType", UtilMisc.toMap("glFiscalTypeId", glFiscalTypeId));
context.put("fromGlFiscalType", fromGlFiscalType);
context.put("toGlFiscalType", toGlFiscalType);
