/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 *  
 */

import org.ofbiz.accounting.payment.BillingAccountWorker;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.EntityUtil;

import org.ofbiz.party.party.PartyHelper;
import org.opentaps.common.util.UtilAccountingTags;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.common.util.UtilMessage;
import org.opentaps.domain.DomainsLoader;
import org.opentaps.domain.billing.invoice.Invoice;
import org.opentaps.domain.billing.invoice.InvoiceRepositoryInterface;
import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityNotFoundException;
import org.opentaps.foundation.exception.FoundationException;
import org.opentaps.foundation.infrastructure.Infrastructure;
import org.opentaps.foundation.infrastructure.User;
import org.opentaps.foundation.repository.ofbiz.Repository;

delegator = request.getAttribute("delegator");
organizationPartyId = UtilCommon.getOrganizationPartyId(request);

billingAccountId = parameters.get("billingAccountId");
context.put("billingAccountId", billingAccountId);  // BillingAccountForms.xml#EditBillingAccount uses this to lookup addresses

billingAccount = delegator.findByPrimaryKey("BillingAccount", UtilMisc.toMap("billingAccountId", billingAccountId));
billingAccountMap = billingAccount.getAllFields();

// The data model supports multiple roles to a billing account, but in reality all the applications only one BILL_TO_CUSTOMER role is used
billingAccountCustomer = EntityUtil.getFirst(EntityUtil.filterByDate(billingAccount.getRelatedByAnd("BillingAccountRole", UtilMisc.toMap("roleTypeId", "BILL_TO_CUSTOMER"))));
customerPartyId = null;
if (UtilValidate.isNotEmpty(billingAccountCustomer)) {
    customerPartyId = billingAccountCustomer.get("partyId");
    billingAccountMap.put("customerPartyId", customerPartyId);
    billingAccountMap.put("customerName", PartyHelper.getPartyName(delegator, billingAccountCustomer.get("partyId"), false));
}


context.put("billingAccount", billingAccountMap);

billAcctPaymentAndApplications = delegator.findByAnd("PaymentAndApplication", 
    UtilMisc.toList(new EntityExpr("billingAccountId", EntityOperator.EQUALS, billingAccountId),
    		new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "PMNT_NOT_PAID")),
    UtilMisc.toList("effectiveDate"));
context.put("billAcctPaymentAndApplications", billAcctPaymentAndApplications);

context.put("billAcctOpenOrders", BillingAccountWorker.getBillingAccountOpenOrders(delegator, billingAccountId));

// if available balance > 0
balance = com.opensourcestrategies.financials.accounts.BillingAccountWorker.getBillingAccountAvailableBalance(delegator, billingAccountId);
hasBalance = false;
if (balance.signum() == 1) {
    hasBalance = true;
    dl = new DomainsLoader(new Infrastructure(dispatcher), new User(userLogin));
    billingDomain = dl.loadDomainsDirectory().getBillingDomain();
    invoiceRepository = billingDomain.getInvoiceRepository();
    // get a list of invoices this billing account can be applied to
    if (UtilValidate.isNotEmpty(customerPartyId)) {
        conditions = UtilMisc.toList(new EntityExpr("partyId", EntityOperator.EQUALS, customerPartyId),
                                     new EntityExpr("partyIdFrom", EntityOperator.EQUALS, organizationPartyId),
                                     new EntityExpr("statusId", EntityOperator.NOT_IN, UtilMisc.toList("INVOICE_CANCELLED","INVOICE_WRITEOFF","INVOICE_PAID", "INVOICE_VOIDED")));
        entityConditionList = new EntityConditionList(conditions, EntityOperator.AND);
        List invoices = delegator.findByCondition("Invoice", entityConditionList, null, null);
        List invoicesDomain = Repository.loadFromGeneric(Invoice.class, invoices, invoiceRepository);
       
        // now create a list of Maps which hold invoice information, the amountApplied, and the amount to be applied (ie, still open)
        if (UtilValidate.isNotEmpty(invoicesDomain)) {
            organizationRepository = dl.loadDomainsDirectory().getOrganizationDomain().getOrganizationRepository();
            organization = organizationRepository.getOrganizationById(organizationPartyId);
            // get the tags
            context.put("allocatePaymentTagsToApplications", organization.allocatePaymentTagsToApplications());
            context.put("tagTypes", UtilAccountingTags.getAccountingTagsForOrganization(organizationPartyId, UtilAccountingTags.RECEIPT_PAYMENT_TAG, delegator));

            ArrayList invoicesList = new ArrayList();  // to pass back to the screeen list of unapplied invoices
            for (Invoice invoice : invoicesDomain) {
                outstandingAmount = invoice.getPendingOpenAmount();
                if (outstandingAmount != null && outstandingAmount.signum() != 0) {
                    // put in the map
                    Map invoiceMap = new HashMap();
                    invoiceMap.put("invoiceId", invoice.getInvoiceId());
                    invoiceMap.put("currencyUomId", invoice.getCurrencyUomId());
                    invoiceMap.put("amount", invoice.getInvoiceTotal());
                    invoiceMap.put("invoiceRefNum", invoice.getReferenceNumber());
                    invoiceMap.put("description",invoice.getDescription());
                    invoiceMap.put("invoiceDate", invoice.getInvoiceDate());
                    invoiceMap.put("amountApplied", invoice.getAppliedAmount());
                    invoiceMap.put("outstandingAmount", outstandingAmount);
                    if (balance.compareTo(outstandingAmount) < 0 ) {
                        invoiceMap.put("amountToApply", balance);
                    } else {
                        invoiceMap.put("amountToApply", outstandingAmount);
                    }
                    // used as default accounting tags
                    invoiceMap.put("firstItem", Entity.getFirst(invoice.getInvoiceItems()));
                    invoicesList.add(invoiceMap);
                }
            }
            context.put("invoices", invoicesList);
        }
    }
}
context.put("hasBalance", hasBalance);

//put to history
context{"history"} = UtilCommon.makeHistoryEntry(UtilMessage.expandLabel("FinancialsNavHistoryBillingAccount", locale, UtilMisc.toMap("billingAccountId", billingAccountId, "partyName", billingAccountMap.get("customerName"))), "viewCustomerBillAcct", UtilMisc.toList("billingAccountId"));
