/* 
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import com.opensourcestrategies.financials.accounts.AccountsHelper;
import java.util.*;
import java.math.BigDecimal;
import org.ofbiz.base.util.*;
import org.opentaps.common.util.UtilMessage;
import org.opentaps.common.util.UtilCommon;
import javolution.util.FastList;

timeZone = UtilCommon.getTimeZone(request);

String payeePartyId = parameters.get( "partyId" ) ;
String partyClassificationGroupId = parameters.get( "partyClassificationGroupId" );
String interestRateString = parameters.get( "interestRate" ) ;
String gracePeriodString = parameters.get( "gracePeriod" ) ;

context{"history"} = UtilCommon.makeHistoryEntry(UtilMessage.expandLabel("FinancialsNavHistoryAssessFinanceCharge", locale), null, FastList.newInstance());

try {
    interestRate = new BigDecimal(interestRateString);
} catch (Exception e) {
    interestRate = BigDecimal.ZERO;
}
try {
    gracePeriod = Integer.parseInt(gracePeriodString);
} catch (Exception e) {
    gracePeriod = 0 ;
}
invoiceData = new HashMap();
outstandingInvoices = AccountsHelper.calculateFinanceCharges(delegator, organizationPartyId, payeePartyId, partyClassificationGroupId, interestRate, gracePeriod, timeZone, locale);

// this code brought to you by the Form Widget(TM):
// we have to have a List of invoices as Maps to be passed below as invoices, otherwise the ReceivablesForms#ListInvoicesForInterest which uses invoices as the list will
// have a ClassCastException going from the new opentaps Invoice object to a Map (on ModelForm.java line 1167)

outstandingInvoiceKeys = new ArrayList();
for (invoice: outstandingInvoices.keySet()) {
    outstandingInvoiceKeys.add(invoice.toMap());
}

// now we iterate through the invoices, using Invoice object as the key, which is ok because invoiceData's key is invoiceId
for (invoice : outstandingInvoices.keySet()) {
    invoiceInfo = outstandingInvoices.get(invoice);
    partyIdToNameMap = dispatcher.runSync("getPartyNameForDate" ,UtilMisc.toMap("partyId", invoice.get("partyId"), "compareDate", invoice.get("invoiceDate"), "userLogin", session.getAttribute("userLogin")));
    toPartyName = partyIdToNameMap.get("fullName");
    if (toPartyName == null) {
        toPartyName = "";
    }
    toPartyName += " (" + invoice.get("partyId") + ")";
    invoiceInfo.put("toPartyName", toPartyName);

    invoiceData.put(invoice.get("invoiceId"), invoiceInfo);
}

context.put( "invoices" , outstandingInvoiceKeys);
context.put( "invoiceData" , invoiceData ) ;

context.put( "organizationPartyId" , organizationPartyId ) ;
context.put( "payeePartyId" , payeePartyId ) ;
context.put( "partyClassificationGroupId" , partyClassificationGroupId ) ;
context.put( "gracePeriod" , gracePeriod ) ;
context.put( "interestRate" , interestRate ) ;
