/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.util.EntityUtil;

import org.opentaps.domain.DomainsLoader;
import org.opentaps.foundation.infrastructure.Infrastructure;
import org.opentaps.foundation.infrastructure.User;
import com.opensourcestrategies.crmsfa.security.CrmsfaSecurity;

partyId = parameters.get("partyId");

hasAccountCustViewPermission = false;
hasAccountCustCreatePermission = false;
hasAccountCustUpdatePermission = false;
hasAccountCustDeletePermission = false;

if (security != null && userLogin != null) {
  if (CrmsfaSecurity.hasPartyRelationSecurity(security, "CRMSFA_ACCOUNT", "_CUST_VIEW", userLogin, partyId)) {
    hasAccountCustViewPermission = true;
  }
  if (CrmsfaSecurity.hasPartyRelationSecurity(security, "CRMSFA_ACCOUNT", "_CUST_CREATE", userLogin, partyId)) {
    hasAccountCustCreatePermission = true;
  }
  if (CrmsfaSecurity.hasPartyRelationSecurity(security, "CRMSFA_ACCOUNT", "_CUST_UPDATE", userLogin, partyId)) {
    hasAccountCustUpdatePermission = true;
  }
  if (CrmsfaSecurity.hasPartyRelationSecurity(security, "CRMSFA_ACCOUNT", "_CUST_DELETE", userLogin, partyId)) {
    hasAccountCustDeletePermission = true;
  }
}
context.put("hasAccountCustViewPermission", hasAccountCustViewPermission);
context.put("hasAccountCustCreatePermission", hasAccountCustCreatePermission);
context.put("hasAccountCustUpdatePermission", hasAccountCustUpdatePermission);
context.put("hasAccountCustDeletePermission", hasAccountCustDeletePermission);

dispatcher = request.getAttribute("dispatcher");
infrastructure = new Infrastructure(dispatcher);
session = infrastructure.getSession();
hql = "from PartyAttribute eo where eo.id.partyId = :partyId";
query = session.createQuery(hql);
query.setString("partyId", partyId);
partyAttributes = query.list();
if (UtilValidate.isNotEmpty(partyAttributes)) {
  context.put("partyAttributes", partyAttributes);
}