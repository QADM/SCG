/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.util.ArrayList;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.*;
import org.opentaps.common.util.UtilConfig;
import com.opensourcestrategies.crmsfa.party.PartyHelper;


// get list of my accounts and leads
activeAccountsAndLeads = PartyHelper.findActiveClientParties(delegator, dispatcher, UtilMisc.toMap("partyIdTo", userLogin.getString("partyId")), UtilMisc.toList("ACCOUNT", "PROSPECT"), new EntityExpr("partyRelationshipTypeId", EntityOperator.IN, UtilMisc.toList("RESPONSIBLE_FOR")));

partyIds = new ArrayList();
if (activeAccountsAndLeads != null) {
    activeAccountsAndLeadsList = activeAccountsAndLeads.getCompleteList();
    activeAccountsAndLeads.close();
    if (UtilValidate.isEmpty(activeAccountsAndLeadsList)) {
        Debug.logWarning("No active clients found.", "");
    } else {
        partyIds = EntityUtil.getFieldListFromEntityList(activeAccountsAndLeadsList, "partyId", true);
    }
}

// get orderBy from the parameters
quotesOrderBy = parameters.get("quotesOrderBy");
if (quotesOrderBy == null) {
    quotesOrderBy = "issueDate DESC";
}

pendingStatuses = UtilMisc.toList("QUO_CREATED", "QUO_APPROVED", "QUO_SENT", "QUO_FINALIZED");

// build the main condition
conditionList = new EntityConditionList(UtilMisc.toList(
                new EntityExpr(
                  new EntityExpr("createdByPartyId", EntityOperator.EQUALS, userLogin.get("partyId")),
                  EntityOperator.OR,
                  new EntityExpr("partyId", EntityOperator.IN, partyIds)),
                new EntityExpr("statusId", EntityOperator.IN, pendingStatuses)
                ), EntityOperator.AND);

listQuoteBuilder() {
    entityName = "Quote";
    orderBy = UtilMisc.toList(quotesOrderBy);
    where = conditionList;

    build(page) {
        newPage = new ArrayList();
        for (row : page) {
            crmQuote = row.getAllFields();
            partyId = row.getString("partyId");
            partyName = org.ofbiz.party.party.PartyHelper.getPartyName(delegator, partyId, false);
            if (partyName != null) {
                crmQuote{"partyName"} = partyName;
            }

            status = row.getRelatedOneCache("StatusItem");
            if (status != null) {
                statusDescription = status.get("description", locale);
                if (statusDescription != null) {
                    crmQuote{"statusDescription"} = statusDescription;
                }
            }

            quoteType = row.getRelatedOneCache("QuoteType");
            if (quoteType != null) {
                quoteTypeDescription = quoteType.get("description", locale);
                if (quoteTypeDescription != null) {
                    crmQuote{"quoteTypeDescription"} = quoteTypeDescription;
                }
            }

            newPage.add(crmQuote);
        }
        return newPage;
    }

    return this;
}

context.put("quotes", listQuoteBuilder());

