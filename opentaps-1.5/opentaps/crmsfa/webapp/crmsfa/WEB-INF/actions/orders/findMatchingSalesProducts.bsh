/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

// TODO: consolidate with java event, that way the logic of lookup product is uniform
import javolution.util.*;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.EntityUtil;
import org.ofbiz.product.store.ProductStoreWorker;
import org.opentaps.common.util.UtilCommon;
import com.opensourcestrategies.crmsfa.orders.CrmsfaOrderEvents;

// fetch the search string, which is inputted as productId
searchString = UtilCommon.getParameter(request, "productId");
if (searchString == null) return;

// fetch the cart
cart = session.getAttribute("shoppingCart");
if (cart == null) return;

// make a builder method and use <@paginate> to build the list
matchingSalesProducts(searchString, delegator) {
    entityName = "ProductAndGoodIdentification";
    fieldsToSelect = UtilMisc.toList("productId", "internalName", "idValue", "brandName");
    // this condition searches for non virtual and non aggregate products
    where = CrmsfaOrderEvents.getMatchingProductsCondition(searchString);

    // we also want to add what order item type each product should be set to
    build(page) {
        newPage = FastList.newInstance();
        for (iter = page.iterator(); iter.hasNext(); ) {
            product = iter.next();
            newRow = FastMap.newInstance();
            newRow.putAll( product.getAllFields() );

            // check if it has a survey
            surveys = ProductStoreWorker.getProductSurveys(delegator, cart.getProductStoreId(), product.getString("productId"), "CART_ADD");
            newRow.put("isSurvey", surveys != null && surveys.size() > 0);

            type = delegator.findByPrimaryKeyCache("ProductOrderItemType", UtilMisc.toMap("orderTypeId", "SALES_ORDER", "productTypeId", product.get("productTypeId")));
            if (type != null) {
                newRow.put("itemType", type.get("orderItemTypeId"));
            }
            newPage.add( newRow );
        }
        return newPage;
    }
    return this; // must return reference to this closure
}
context.put("matchingSalesProducts", matchingSalesProducts(searchString, delegator));
