/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.order.order.OrderReadHelper;
import java.math.BigDecimal;

// this script runs after viewReturn.bsh
returnHeader = context.get("returnHeader");
if (returnHeader == null) return;
if ("RETURN_CANCELLED".equals(returnHeader.get("statusId"))) return;

orderId = returnHeader.get("primaryOrderId");
context.put("orderId", orderId);

returnItems = returnHeader.getRelated("ReturnItem");
context.put("returnItems", returnItems);

// controls whether we show the list of return items or order items
returnItemsCreated = (returnItems.size() > 0);
context.put("returnItemsCreated", returnItemsCreated);

// these are just the adjustments not associated directly with a return item--the rest are gotten with a .getRelated on the returnItems in the .FTL
returnAdjustments = delegator.findByAnd("ReturnAdjustment", UtilMisc.toMap("returnId", returnId, "returnItemSeqId", "_NA_"), UtilMisc.toList("returnItemSeqId", "returnAdjustmentTypeId"));
context.put("returnAdjustments", returnAdjustments);

// I have read OFBIZ r 533746 and 533827 and could not figure out what the difference is between a cross-ship, wait, and regular replacement return
// Until somebody could find out, let's just support only these types which are known to work
returnTypes = delegator.findByAnd("ReturnType", UtilMisc.toList(new EntityExpr("returnTypeId", EntityOperator.IN, UtilMisc.toList("RTN_CREDIT", "RTN_REFUND", "RTN_REPLACE"))), UtilMisc.toList("sequenceId"));
context.put("returnTypes", returnTypes);

itemStatus = delegator.findByAnd("StatusItem", UtilMisc.toMap("statusTypeId", "INV_SERIALIZED_STTS"),
                       UtilMisc.toList("statusId", "description"));
context.put("itemStatus", itemStatus);

returnReasons = delegator.findAll("ReturnReason", UtilMisc.toList("sequenceId"));
context.put("returnReasons", returnReasons);

itemStts = delegator.findByAnd("StatusItem", UtilMisc.toMap("statusTypeId", "INV_SERIALIZED_STTS"), UtilMisc.toList("sequenceId"));
context.put("itemStts", itemStts);

returnItemTypeMap = delegator.findByAnd("ReturnItemTypeMap", UtilMisc.toMap("returnHeaderTypeId", "CUSTOMER_RETURN"));
iter = returnItemTypeMap.iterator();
typeMap = new HashMap();
while (iter.hasNext()) {
    value = iter.next();
    typeMap.put(value.getString("returnItemMapKey"), value.getString("returnItemTypeId"));
}
context.put("returnItemTypeMap", typeMap);

if (orderId != null) {
    order = delegator.findByPrimaryKey("OrderHeader", UtilMisc.toMap("orderId", orderId));
    Map returnRes = dispatcher.runSync("getReturnableItems", UtilMisc.toMap("orderId", orderId));
    context.put("returnableItems", returnRes.get("returnableItems"));

   orh = new OrderReadHelper(order);
   context.put("orh", orh);
   context.put("orderHeaderAdjustments", orh.getAvailableOrderHeaderAdjustments());

    // get the order shipping amount
    Map shipRes = dispatcher.runSync("getOrderShippingAmount", UtilMisc.toMap("orderId", orderId));
   shippingAmount = shipRes.get("shippingAmount");
    context.put("shippingAmount", shippingAmount);
}

partyOrders = delegator.findByAnd("OrderHeaderAndRoles", UtilMisc.toMap("roleTypeId", "PLACING_CUSTOMER", "partyId", returnHeader.getString("fromPartyId")), UtilMisc.toList("orderId"));
context.put("partyOrders", partyOrders);
