/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.util.EntityUtil;

import org.opentaps.common.util.UtilCommon;

import com.opensourcestrategies.crmsfa.security.CrmsfaSecurity;
import com.opensourcestrategies.crmsfa.party.PartyHelper;
import com.opensourcestrategies.crmsfa.content.ContentHelper;

/* finds all the information relevant to this lead and puts them in the context, so the various forms
and FTLs of this screen can display them correctly */

partyId = parameters.get("partyId");

hasViewPermission = CrmsfaSecurity.hasPartyRelationSecurity(request.getAttribute("security"), "CRMSFA_LEAD", "_VIEW", request.getAttribute("userLogin"), partyId);
if(!hasViewPermission) {
    context.put("validView", false);
    return;
}

//make sure that the partyId is actually a PROSPECT (i.e., a lead) before trying to display it as once
delegator = request.getAttribute("delegator");
validRoleTypeId = PartyHelper.getFirstValidRoleTypeId(partyId, UtilMisc.toList("PROSPECT"), delegator);
if ((validRoleTypeId == null) || !validRoleTypeId.equals("PROSPECT")) {
    context.put("validView", false);
    return;
}

// now get all data necessary for this page
dispatcher = request.getAttribute("dispatcher");

// lead summary data
partySummary = delegator.findByPrimaryKey("PartySummaryCRMView", UtilMisc.toMap("partyId", partyId));
if (partySummary == null) {
    context.put("validView", false);
    return;
}
context.put("partySummary", partySummary);

// put to history
historyDescr = partySummary.get("firstName") + " " + partySummary.get("lastName");
if (UtilValidate.isNotEmpty(partySummary.get("companyName"))) {
    historyDescr += (" (" + partySummary.get("companyName") + ")");
}
context{"history"} = UtilCommon.makeHistoryEntry(historyDescr, "viewLead", UtilMisc.toList("partyId"));

//if the lead has already been converted, then just put this in there and nothing
if (partySummary.get("statusId") != null && partySummary.getString("statusId").equals("PTYLEAD_CONVERTED")) {
    context.put("hasBeenConverted", true);
    context.put("validView", true);
    return;
} 

// who is currently responsible for lead
responsibleParty = PartyHelper.getCurrentResponsibleParty(partyId, "PROSPECT", delegator);
context.put("responsibleParty", responsibleParty);

// lead data sources
sources = delegator.findByAnd("PartyDataSource", UtilMisc.toMap("partyId", partyId), UtilMisc.toList("fromDate DESC"));
context.put("dataSources", sources);
dataSourcesAsString = new StringBuffer();
for (ds : sources) {
    dataSource = ds.getRelatedOne("DataSource");
    if (dataSource != null) {
        dataSourcesAsString.append(dataSource.get("description", locale));
        dataSourcesAsString.append(", ");
    }
}
if (dataSourceAsString != null && dataSourcesAsString.length() > 2) 
    context{"dataSourcesAsString"} = dataSourcesAsString.toString().substring(0, dataSourcesAsString.length()-2);

// lead marketing campaigns
campaignRoles = delegator.findByAnd("MarketingCampaignRole", UtilMisc.toMap("partyId", partyId, "roleTypeId", "PROSPECT"));
campaigns = EntityUtil.getRelated("MarketingCampaign", campaignRoles);
context.put("marketingCampaigns", campaigns);
if ((campaignsList = EntityUtil.getFieldListFromEntityList(campaigns, "campaignName", false)) != null) {
    marketingCampaignsAsString = StringUtil.join(campaignsList, ", ");
    if (marketingCampaignsAsString != null && marketingCampaignsAsString.length() > 2)
        context{"marketingCampaignsAsString"} = marketingCampaignsAsString;
}

// whether lead is qualified or not
context.put("isQualified", false);
if ("PTYLEAD_QUALIFIED".equals(partySummary.getString("statusId"))) {
    context.put("isQualified", true);

    // permission to create opportunities for lead
    if (CrmsfaSecurity.hasPartyRelationSecurity(request.getAttribute("security"), "CRMSFA_OPP", "_CREATE", request.getAttribute("userLogin"), partyId)) {
        context.put("hasCreateOppPermission", true);
    }
}

// lead notes
results = delegator.findByAnd("PartyNoteView", UtilMisc.toMap("targetPartyId", partyId), UtilMisc.toList("noteDateTime DESC"));
context.put("notesList", results);

// permission to update lead information, for generic view profile screen
if (CrmsfaSecurity.hasPartyRelationSecurity(request.getAttribute("security"), "CRMSFA_LEAD", "_UPDATE", request.getAttribute("userLogin"), partyId)) {
     context.put("hasUpdatePermission", true);

     // this also means activiites may be created, but only if user has CRMSFA_ACT_CREATE
     if (security.hasEntityPermission("CRMSFA_ACT", "_CREATE", userLogin)) {
         context.put("hasNewActivityPermission", true);
     }
}

// permission to update password
if (CrmsfaSecurity.hasPartyRelationSecurity(request.getAttribute("security"), "CRMSFA_PASS", "_UPDATE", request.getAttribute("userLogin"), partyId)) {
    context.put("hasPassPermission", true);
}

// permission to delete
if (CrmsfaSecurity.hasPartyRelationSecurity(request.getAttribute("security"), "CRMSFA_LEAD", "_DELETE", request.getAttribute("userLogin"), partyId)) {
    context.put("hasDeletePermission", true);
}

// permission to view opportunities
if (CrmsfaSecurity.hasPartyRelationSecurity(request.getAttribute("security"), "CRMSFA_OPP", "_VIEW", request.getAttribute("userLogin"), partyId)) {
    context.put("hasOpportunityViewPermission", true);
}

// permission to reassign leads
if (CrmsfaSecurity.hasPartyRelationSecurity(request.getAttribute("security"), "CRMSFA_LEAD", "_REASSIGN", request.getAttribute("userLogin"), partyId)) {
    context.put("hasReassignPermission", true);
}

// permission to use form letters
if (security.hasEntityPermission("CRMSFA_FORMLTR", "_VIEW", userLogin)) {
     context.put("hasFormLetterViewPermission", true);
}

// set this flag to allow contact mechs to be shown
request.setAttribute("displayContactMechs", "Y");

// get the generic content metadata for account
context.put("content", ContentHelper.getContentInfoForParty(partyId, "PROSPECT", delegator));

// so we can view activities, etc.
context.put("validView", true);

    
// Provide current PartyClassificationGroups as a list and a string
groups = org.opentaps.common.party.PartyHelper.getClassificationGroupsForParty(partyId, delegator);
context.put("partyClassificationGroups", groups);
descriptions = EntityUtil.getFieldListFromEntityList(groups, "description", false);
context.put("partyClassificationGroupsDisplay", StringUtil.join(descriptions, ", "));