/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */
/* Copyright (c) Open Source Strategies, Inc. */

/*
 * Retrieves catalog requests from the given partyId
 */
 
import org.ofbiz.base.util.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.EntityUtil;
import com.opensourcestrategies.crmsfa.party.PartyHelper;

// check permission first
if (!security.hasEntityPermission("CRMSFA_CATALOG", "_REQ", session)) {
    context.put("disableRequestCatalog", "Y");
    return;
}

partyId = parameters.get("partyId");
if (UtilValidate.isEmpty(partyId)) {
  return;
}

cond = new ArrayList();
cond.add(new EntityExpr("fromPartyId", EntityOperator.EQUALS, partyId));
cond.add(new EntityExpr("custRequestTypeId", EntityOperator.EQUALS, "RF_CATALOG"));
cond.add(new EntityExpr("statusId", EntityOperator.IN, UtilMisc.toList("CRQ_SUBMITTED", "CRQ_ACCEPTED", "CRQ_COMPLETED")));

custRequests = delegator.findByCondition("CustRequest", new EntityConditionList(cond, EntityOperator.AND), null, UtilMisc.toList("custRequestDate"));
catalogRequests = new ArrayList();
crit = custRequests.iterator();
while (crit.hasNext()) {
  custRequest = crit.next();
  catRequest = custRequest.getAllFields();
  if (UtilValidate.isNotEmpty(custRequest.getString("fulfillContactMechId"))) {
    postalAddress = delegator.findByPrimaryKey("PostalAddress", UtilMisc.toMap("contactMechId", custRequest.get("fulfillContactMechId")));
    if (UtilValidate.isNotEmpty(postalAddress)) {
      catRequest.putAll(postalAddress);
    }
    takerRole = EntityUtil.getFirst(delegator.findByAnd("CustRequestRole", UtilMisc.toMap("custRequestId", custRequest.get("custRequestId"), "roleTypeId", "REQ_TAKER")));
    if (UtilValidate.isNotEmpty(takerRole)) {
      takerPartyId = takerRole.get("partyId");
      takerName = PartyHelper.getCrmsfaPartyName(delegator, takerPartyId);
      catRequest.put("requestTakerPartyId", takerPartyId);
      catRequest.put("requestTakerPartyName", takerName);
    }
  }
  catalogRequests.add(catRequest);
}
context.put("catalogRequests", catalogRequests);