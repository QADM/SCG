/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */
/* Copyright (c) Open Source Strategies, Inc. */

/*
 *  Copyright (c) 2003-2005 The Open For Business Project - www.ofbiz.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included 
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 *  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
 *  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
 *  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *@author     Johan Isacsson
 *@author     Andy Zeneski
 *@author     David E. Jones
 *@version    $Rev: 314 $
 *@since      2.2
 */

import java.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;
import org.ofbiz.party.contact.*;
import org.ofbiz.webapp.control.*;
import org.opentaps.common.util.*;

Map mechMap = new HashMap();
ContactMechWorker.getContactMechAndRelated(request, null, mechMap);

// manual fix because the ofbiz code consider an empty string as a value
if ("createPostalAddressAndPurpose".equals(mechMap{"requestName"})) {
    if (UtilCommon.getParameter(request, "contactMechPurposeTypeId") == null && request.getAttribute("contactMechPurposeTypeId") == null) {
        mechMap{"requestName"} = "createPostalAddress";
    }
}
context.put("mechMap", mechMap);
// put contactMech directly in the context so that the ftl can see it
context.put("contactMech", mechMap.get("contactMech"));

// set the edit title label according to the current contact mech type
contactMechTypeId = mechMap.get("contactMechTypeId");
if (UtilValidate.isNotEmpty(contactMechTypeId)) {
    contactMechType = delegator.findByPrimaryKey("ContactMechType", UtilMisc.toMap("contactMechTypeId", contactMechTypeId));
    if (contactMechType != null) {
        editContactMechLabel = UtilMessage.expandLabel("CrmEditContactMechWithPurpose", locale, UtilMisc.toMap("contactMechPurposeTypeDescription", contactMechType.get("description")));
        context.put("editContactMechLabel", editContactMechLabel);
    }
}

String contactMechId = (String) mechMap.get("contactMechId");
context.put("contactMechId", contactMechId);

preContactMechTypeId = parameters.get("preContactMechTypeId");
context.put("preContactMechTypeId", preContactMechTypeId);
// set the create title label according to the pre contact mech type
if (UtilValidate.isNotEmpty(preContactMechTypeId)) {
    preContactMechType = delegator.findByPrimaryKey("ContactMechType", UtilMisc.toMap("contactMechTypeId", preContactMechTypeId));
    if (preContactMechType != null) {
        createContactMechLabel = UtilMessage.expandLabel("CrmNewContactMechWithPurpose", locale, UtilMisc.toMap("contactMechPurposeTypeDescription", preContactMechType.get("description")));
        context.put("createContactMechLabel", createContactMechLabel);
    }
}

cmNewPurposeTypeId = parameters.get("contactMechPurposeTypeId");
if (cmNewPurposeTypeId != null) {
    contactMechPurposeType = delegator.findByPrimaryKey("ContactMechPurposeType", UtilMisc.toMap("contactMechPurposeTypeId", cmNewPurposeTypeId));
    if (contactMechPurposeType != null) {
        context.put("contactMechPurposeType", contactMechPurposeType);
        // set the create title label according to the contact mech purpose
        createContactMechLabel = UtilMessage.expandLabel("CrmNewContactMechWithPurpose", locale, UtilMisc.toMap("contactMechPurposeTypeDescription", contactMechPurposeType.get("description")));
        context.put("createContactMechLabel", createContactMechLabel);
    } else {
        cmNewPurposeTypeId = null;
    }
    context.put("cmNewPurposeTypeId", cmNewPurposeTypeId);
}

context.put("donePageFull", parameters.get("DONE_PAGE"));
