/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import javolution.util.*;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.EntityUtil;
import org.opentaps.common.util.UtilCommon;

// fetch the search string, which is inputted as productId
searchString = UtilCommon.getParameter(request, "productId");
if (searchString == null) return;

// fetch the cart
cart = session.getAttribute("shoppingCart");
if (cart == null) return;

// make a builder method and use <@paginate> to build the list
matchingSupplierProducts(searchString, delegator) {
    entityName = "SupplierProductGoodIdentification";

    // this condition searches UPC-A as well (see purchasing entitymodel.xml for comments about how this might be made more generic)
    where = new EntityConditionList(
        UtilMisc.toList(
            new EntityConditionList(
                UtilMisc.toList(
                    new EntityExpr("productId", true, EntityOperator.LIKE, searchString + "%", true),
                    new EntityExpr("supplierProductId", true, EntityOperator.LIKE, searchString + "%", true),
                    new EntityExpr("idValue", true, EntityOperator.LIKE, searchString + "%", true)
                ), EntityOperator.OR
            ),
            new EntityExpr("partyId", EntityOperator.EQUALS, cart.getOrderPartyId()),
            EntityUtil.getFilterByDateExpr("availableFromDate", "availableThruDate")
        ), EntityOperator.AND
    );

    // we also want to add what order item type each product should be set to
    build(page) {
        newPage = FastList.newInstance();
        for (iter = page.iterator(); iter.hasNext(); ) {
            supplierProduct = iter.next();
            newRow = FastMap.newInstance();
            newRow.putAll( supplierProduct.getAllFields() );

            product = supplierProduct.getRelatedOneCache("Product");
            type = delegator.findByPrimaryKeyCache("ProductOrderItemType", UtilMisc.toMap("orderTypeId", "PURCHASE_ORDER", "productTypeId", product.get("productTypeId")));
            if (type != null) {
                newRow.put("itemType", type.get("orderItemTypeId"));
            }
            newPage.add( newRow );
        }
        return newPage;
    }

    return this; // must return reference to this closure
}
context.put("matchingSupplierProducts", matchingSupplierProducts(searchString, delegator));
