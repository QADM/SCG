/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.EntityUtil;
import org.opentaps.common.util.UtilCommon;
import javolution.util.FastList;
import javolution.util.FastMap;
import javolution.util.FastSet;

if (! security.hasEntityPermission("PRCH", "_WRHS_CONFIG", userLogin)) {
    context.put("allowed", false);
    return;
}

organizationPartyId = UtilCommon.getOrganizationPartyId(request);
warehouses = UtilCommon.getOrganizationReceivingFacilities(organizationPartyId, delegator);
context.put("warehouses", warehouses);

facilityId = UtilCommon.getParameter(request, "facilityId");

// if facilityIdTo is also in the request, we have returned from an update or create facility assoc, so we should use it instead
facilityIdTo = UtilCommon.getParameter(request, "facilityIdTo");
if (facilityIdTo != null) {
    facilityId = facilityIdTo;
    parameters.put("facilityId", facilityIdTo);
}
if (facilityId == null) return;

// get the active facility backups
facility = delegator.findByPrimaryKey("Facility", UtilMisc.toMap("facilityId", facilityId));
conditions = UtilMisc.toList(
    new EntityExpr("facilityIdTo", EntityOperator.EQUALS, facilityId),
    EntityUtil.getFilterByDateExpr()
);
backupAssocs = delegator.findByAnd("FacilityAssoc", conditions, UtilMisc.toList("sequenceNum"));

backups = FastList.newInstance();
for (assoc : backupAssocs) {
    backup = FastMap.newInstance();
    backup.putAll( assoc.getAllFields() );

    warehouse = assoc.getRelatedOne("FromFacility");
    backup.putAll( warehouse.getAllFields() );

    backups.add( backup );
}
context.put("backups", backups);
