/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.entity.condition.*;
import org.opentaps.common.util.UtilCommon;

// look for filter parameter
productId = UtilCommon.getParameter(request, "productId");
facilityId = UtilCommon.getParameter(request, "facilityId");
facilityIdTo = UtilCommon.getParameter(request, "facilityIdTo");

options = new EntityFindOptions(true, EntityFindOptions.TYPE_SCROLL_INSENSITIVE, EntityFindOptions.CONCUR_READ_ONLY, true);
orderBy = UtilMisc.toList("productId");
organizationFacilities = UtilCommon.getOrgReceivingFacilityIds(UtilCommon.getOrganizationPartyId(request), delegator);
exprListFacility = new ArrayList();
expr = new EntityExpr("facilityId", EntityOperator.IN, organizationFacilities);
exprListFacility.add(expr); 
expr = new EntityExpr("facilityIdTo", EntityOperator.IN, organizationFacilities);
exprListFacility.add(expr);
orCond = new EntityConditionList(exprListFacility, EntityOperator.OR);

conditions = UtilMisc.toList(
            new EntityExpr("statusId", EntityOperator.EQUALS, "REQ_APPROVED"),
            new EntityExpr("requirementTypeId", EntityOperator.EQUALS, "TRANSFER_REQUIREMENT"),
            orCond
            );

if (productId != null) {
    conditions.add(new EntityExpr("productId", EntityOperator.LIKE, productId + "%"));
}

if (facilityId != null) {
    conditions.add(new EntityExpr("facilityId", EntityOperator.EQUALS, facilityId));
}

if (facilityIdTo != null) {
    conditions.add(new EntityExpr("facilityIdTo", EntityOperator.EQUALS, facilityIdTo));
}

requirements = delegator.findByCondition("Requirement", new EntityConditionList(conditions, EntityOperator.AND), null, null, orderBy, options);
context.put("requirementList", requirements);
