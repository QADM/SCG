/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 import javolution.util.FastList;

 import org.ofbiz.base.util.UtilMisc;
 import org.ofbiz.base.util.UtilProperties;
 import org.ofbiz.entity.condition.*;
 import org.ofbiz.entity.util.EntityUtil;

 import org.opentaps.common.util.UtilCommon;
 import org.opentaps.common.util.UtilMessage;
 import org.opentaps.purchasing.security.PurchasingSecurity;

 import org.jfree.chart.axis.NumberAxis;
 import org.jfree.chart.axis.AxisLocation;
 import org.jfree.chart.ChartFactory;
 import org.jfree.chart.JFreeChart;
 import org.jfree.chart.plot.CategoryPlot;
 import org.jfree.chart.plot.PlotOrientation;
 import org.jfree.chart.servlet.ServletUtilities;
 import org.jfree.data.category.DefaultCategoryDataset;
 import org.jfree.ui.RectangleInsets;

 totalCreatedRequirements = 0;
 totalApprovedRequirements = 0;
 numberCreatedPoOrders = 0;
 numberApprovedPoOrders = 0;
 numberHeldPoOrders = 0;
 hasRequirementsViewPermissions = false;
 hasOrdersViewPermissions = false;
 
 organizationPartyId = UtilCommon.getOrganizationPartyId(request);
 userLogin = request.getAttribute("userLogin");
 
 if (organizationPartyId != null) {

     // Get permissions
     security = request.getAttribute("security");
     purchasingSecurity = new PurchasingSecurity(security, userLogin);
     hasRequirementsViewPermissions = purchasingSecurity.hasPartyRelationSecurity("PRCH_PLAN", "_VIEW", organizationPartyId);
     hasOrdersViewPermissions = purchasingSecurity.hasPartyRelationSecurity("PRCH_PO", "_VIEW", organizationPartyId);
     
     // Count open requirements
     if (hasRequirementsViewPermissions) {
         
         // Collecting facilities related to organizationPartyId 
         selectList = UtilMisc.toList("facilityId");
    
         facilityIds = delegator.findByCondition("Facility", new EntityExpr("ownerPartyId", EntityOperator.EQUALS, organizationPartyId), selectList, null);
         organizationFacilities = EntityUtil.getFieldListFromEntityList(facilityIds, "facilityId", true);
     
         // Do not lookup if internal organization has no facilities assigned to it
         if (organizationFacilities.size() > 0) {

             openRequirementsStatuses = UtilMisc.toList("REQ_CREATED", "REQ_PROPOSED");

             // count open Purchasing Requirements
             searchConditions = FastList.newInstance();
             searchConditions.add(new EntityExpr("statusId", EntityOperator.IN, openRequirementsStatuses));
             searchConditions.add(new EntityExpr("facilityId", EntityOperator.IN, organizationFacilities));
             searchConditions.add(new EntityExpr("requirementTypeId", EntityOperator.EQUALS, "PRODUCT_REQUIREMENT"));
             allConditions = new EntityConditionList(searchConditions, EntityOperator.AND);

             totalCreatedPurchasingRequirements = delegator.findCountByCondition("Requirement", allConditions, null);

             // count open Production Requirements
             searchConditions = FastList.newInstance();
             searchConditions.add(new EntityExpr("statusId", EntityOperator.IN, openRequirementsStatuses));
             searchConditions.add(new EntityExpr("facilityId", EntityOperator.IN, organizationFacilities));
             searchConditions.add(new EntityExpr("requirementTypeId", EntityOperator.IN, UtilMisc.toList("INTERNAL_REQUIREMENT", "PENDING_INTERNAL_REQ")));
             allConditions = new EntityConditionList(searchConditions, EntityOperator.AND);

             totalCreatedProductionRequirements = delegator.findCountByCondition("Requirement", allConditions, null);

             // count open Transfer Requirements
             searchConditions = FastList.newInstance();
             searchConditions.add(new EntityExpr("facilityId", EntityOperator.IN, organizationFacilities));
             searchConditions.add(new EntityExpr("statusId", EntityOperator.IN, openRequirementsStatuses));
             searchConditions.add(new EntityExpr("requirementTypeId", EntityOperator.EQUALS, "TRANSFER_REQUIREMENT"));
             allConditions = new EntityConditionList(searchConditions, EntityOperator.AND);
             
             totalNewTransferRequirements = delegator.findCountByCondition("Requirement", allConditions, null);

             // count approved Purchasing Requirements
             searchConditions = FastList.newInstance();
             searchConditions.add(new EntityExpr("requirementTypeId", EntityOperator.EQUALS, "PRODUCT_REQUIREMENT"));
             searchConditions.add(new EntityExpr("facilityId", EntityOperator.IN, organizationFacilities));
             searchConditions.add(new EntityExpr("statusId", EntityOperator.EQUALS, "REQ_APPROVED"));
             allConditions = new EntityConditionList(searchConditions, EntityOperator.AND);

             totalApprovedVendorRequirements = delegator.findCountByCondition("Requirement", allConditions, null);
             
             // count approved Production Requirements
             searchConditions = FastList.newInstance();
             searchConditions.add(new EntityExpr("requirementTypeId", EntityOperator.EQUALS, "PENDING_INTERNAL_REQ"));
             searchConditions.add(new EntityExpr("facilityId", EntityOperator.IN, organizationFacilities));
             searchConditions.add(new EntityExpr("statusId", EntityOperator.EQUALS, "REQ_APPROVED"));
             allConditions = new EntityConditionList(searchConditions, EntityOperator.AND);

             totalApprovedInternalRequirements = delegator.findCountByCondition("Requirement", allConditions, null);
             
             // count approved Transfer Requirements
             searchConditions = FastList.newInstance();
             searchConditions.add(new EntityExpr("requirementTypeId", EntityOperator.EQUALS, "TRANSFER_REQUIREMENT"));
             searchConditions.add(new EntityExpr("statusId", EntityOperator.EQUALS, "REQ_APPROVED"));
             exprListFacility = new ArrayList();
             expr = new EntityExpr("facilityId", EntityOperator.IN, organizationFacilities);
             exprListFacility.add(expr); 
             expr = new EntityExpr("facilityIdTo", EntityOperator.IN, organizationFacilities);
             exprListFacility.add(expr);
             orCond = new EntityConditionList(exprListFacility, EntityOperator.OR);
             searchConditions.add(orCond);
             
             allConditions = new EntityConditionList(searchConditions, EntityOperator.AND);

             totalApprovedTransferRequirements = delegator.findCountByCondition("Requirement", allConditions, null);
             
             context.put("totalCreatedPurchasingRequirements", totalCreatedPurchasingRequirements);
             context.put("totalCreatedProductionRequirements", totalCreatedProductionRequirements);
             context.put("totalApprovedVendorRequirements", totalApprovedVendorRequirements);
             context.put("totalApprovedInternalRequirements", totalApprovedInternalRequirements);
             context.put("totalApprovedTransferRequirements", totalApprovedTransferRequirements);
             context.put("totalNewTransferRequirements", totalNewTransferRequirements);
         }
     }

     // Count number of orders
     if (hasOrdersViewPermissions) {
         numberCreatedPoOrders = delegator.findCountByAnd("OrderHeader", UtilMisc.toMap("orderTypeId", "PURCHASE_ORDER", "statusId", "ORDER_CREATED", "billToPartyId", organizationPartyId));
         numberApprovedPoOrders = delegator.findCountByAnd("OrderHeader", UtilMisc.toMap("orderTypeId", "PURCHASE_ORDER", "statusId", "ORDER_APPROVED", "billToPartyId", organizationPartyId));
         numberHeldPoOrders = delegator.findCountByAnd("OrderHeader", UtilMisc.toMap("orderTypeId", "PURCHASE_ORDER", "statusId", "ORDER_HOLD", "billToPartyId", organizationPartyId));
     }

    context.put("hasRequirementsViewPermissions", hasRequirementsViewPermissions);
    context.put("hasOrdersViewPermissions", hasOrdersViewPermissions);
    context.put("numberCreatedPoOrders", numberCreatedPoOrders);
    context.put("numberApprovedPoOrders", numberApprovedPoOrders);
    context.put("numberHeldPoOrders", numberHeldPoOrders);
}

uiLabelMap = UtilMessage.getUiLabels(locale);

// create bar chart
DefaultCategoryDataset dataset = new DefaultCategoryDataset();
dataset.addValue(numberCreatedPoOrders, "", uiLabelMap.get("PurchCreatedOrders"));
dataset.addValue(numberApprovedPoOrders, "", uiLabelMap.get("PurchApprovedOrders"));
dataset.addValue(numberHeldPoOrders, "", uiLabelMap.get("PurchHeldOrders"));

JFreeChart chart = ChartFactory.createBarChart(uiLabelMap.get("OpentapsPurchaseOrders"), null, null, dataset, PlotOrientation.HORIZONTAL, false, true, false);
chart.setBackgroundPaint(Color.white);
chart.setBorderVisible(true);
chart.setPadding(new RectangleInsets(5.0, 5.0, 5.0, 5.0));

// get a reference to the plot for further customisation...
final CategoryPlot plot = chart.getCategoryPlot();
plot.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);

// change the auto tick unit selection to integer units only...
final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

chartImage = ServletUtilities.saveChartAsPNG(chart, 500, 200, null);
context{"chartImage"} = chartImage;
