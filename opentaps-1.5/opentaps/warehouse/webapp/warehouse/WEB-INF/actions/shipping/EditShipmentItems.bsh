/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;

import javolution.util.FastList;
import javolution.util.FastMap;

delegator = request.getAttribute("delegator");

shipmentId = request.getParameter("shipmentId");
if (UtilValidate.isEmpty(shipmentId)) {
    shipmentId = context.get("shipmentId");
}

shipment = null;
if (UtilValidate.isNotEmpty(shipmentId)) {
    shipment = delegator.findByPrimaryKey("Shipment", UtilMisc.toMap("shipmentId", shipmentId));
}

if (shipment != null) {
    shipmentItems = shipment.getRelated("ShipmentItem", null, UtilMisc.toList("shipmentItemSeqId"));
    shipmentItemDatas = new LinkedList();
    if (shipmentItems != null && shipmentItems.size() > 0) {
        shipmentItemIter = shipmentItems.iterator();
        while (shipmentItemIter.hasNext()) {
            shipmentItem = shipmentItemIter.next();
            shipmentPackageContents = shipmentItem.getRelated("ShipmentPackageContent");
            totalQuantityPackaged = 0;
            shipmentPackageContentIter = shipmentPackageContents.iterator();
            while (shipmentPackageContentIter.hasNext()) {
                shipmentPackageContent = shipmentPackageContentIter.next();
                if (shipmentPackageContent.get("quantity") != null) {
                    totalQuantityPackaged += shipmentPackageContent.getDouble("quantity");
                }
            }
            
            totalQuantityToPackage = 0;
            if (shipmentItem.get("quantity") != null) {
                totalQuantityToPackage = shipmentItem.getDouble("quantity") - totalQuantityPackaged;
            }

            itemIssuances = shipmentItem.getRelated("ItemIssuance");
            itemIssuanceIter = itemIssuances.iterator();

            itemIssuanceList = FastList.newInstance();

            while (itemIssuanceIter.hasNext()) {
                itemIssuance = itemIssuanceIter.next();

                itemIssuanceData = FastMap.newInstance();
                itemIssuanceData.putAll(itemIssuance.getAllFields());

                inventoryItem = itemIssuance.getRelatedOne("InventoryItem");

                if (inventoryItem != null) {
                    itemIssuanceData.put("lotId", inventoryItem.get("lotId"));
                    itemIssuanceData.put("serialNumber", inventoryItem.get("serialNumber"));
                }

                itemIssuanceList.add(itemIssuanceData);
            }

            shipmentItemData = new HashMap();
            shipmentItemData.put("shipmentItem", shipmentItem);
            shipmentItemData.put("shipmentPackageContents", shipmentPackageContents);
            shipmentItemData.put("itemIssuances", itemIssuanceList);
            shipmentItemData.put("orderShipments", shipmentItem.getRelated("OrderShipment"));
            shipmentItemData.put("product", shipmentItem.getRelatedOne("Product"));
            shipmentItemData.put("totalQuantityPackaged", totalQuantityPackaged);
            shipmentItemData.put("totalQuantityToPackage", totalQuantityToPackage);
            shipmentItemDatas.add(shipmentItemData);
        }
    }
    
    shipmentPackages = shipment.getRelated("ShipmentPackage", null, UtilMisc.toList("shipmentPackageSeqId"));
    
    context.put("shipment", shipment);
    context.put("shipmentItemDatas", shipmentItemDatas);
    context.put("shipmentPackages", shipmentPackages);
}

context.put("shipmentId", shipmentId);
