/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.order.order.OrderReadHelper;
import org.ofbiz.party.party.PartyHelper;
import org.opentaps.common.order.UtilOrder;
import org.opentaps.warehouse.security.WarehouseSecurity;
import org.opentaps.warehouse.facility.UtilWarehouse;

facilityId = parameters.get("facilityId");
if (UtilValidate.isEmpty(facilityId)) {
    facilityId = UtilWarehouse.getFacilityId(request);
}
warehouseSecurity = parameters.get("warehouseSecurity");
if (UtilValidate.isEmpty(warehouseSecurity)) {
    warehouseSecurity = session.getAttribute("warehouseSecurity");
    if (UtilValidate.isEmpty(warehouseSecurity)) {
        warehouseSecurity = new WarehouseSecurity(security, userLogin, facilityId);
    } 
}
hasViewPermission = warehouseSecurity.hasFacilityPermission(facilityId, userLogin, "WRHS_SHIP_PICK_VIEW");
context.put("hasViewPermission", hasViewPermission);
if (! hasViewPermission) return;

picklistId = parameters.get("picklistId");
if (UtilValidate.isEmpty(picklistId)) return;
context.put("picklistId", picklistId);

results = dispatcher.runSync("getPickAndPackReportInfo", UtilMisc.toMap("picklistId", picklistId, "userLogin", userLogin));
context.putAll(results);

// get the map generated by getPickAndPackReportInfo, then get the list of bin informations
picklistInfo = context.get("picklistInfo");
binList = (picklistInfo == null ? null : picklistInfo.get("picklistBinInfoList"));

// each bin has information about the order and ship groups, we will add more data based on them to the bin info
if (binList != null) {
    for (iter = binList.iterator(); iter.hasNext(); ) {
        binInfo = iter.next();
        order = binInfo.get("primaryOrderHeader");
        group = binInfo.get("primaryOrderItemShipGroup");

        orh = new OrderReadHelper(order);
        customerName = PartyHelper.getPartyName(orh.getBillToParty());
        address = group.getRelatedOne("PostalAddress");
        customerPoNumber = UtilOrder.getCustomerPoNumber(order);

        carrier = group.getRelatedOneCache("CarrierParty");
        shipmentMethodType = group.getRelatedOneCache("ShipmentMethodType");
        shipVia = new StringBuffer();
        if (carrier != null) {
            shipVia.append( PartyHelper.getPartyName(carrier) );
            shipVia.append(" ");
        }
        if (shipmentMethodType != null) shipVia.append(shipmentMethodType.get("description"));

        binInfo.put("customerName", customerName);
        binInfo.put("shippingAddress", address);
        binInfo.put("customerPoNumber", customerPoNumber);
        binInfo.put("shipVia", shipVia.toString());
    }
}

// get the facility owner party as the organizationPartyId, which will be used to render the company's header
facility = delegator.findByPrimaryKey("Facility", UtilMisc.toMap("facilityId", facilityId));
context.put("organizationPartyId", facility.get("ownerPartyId"));
