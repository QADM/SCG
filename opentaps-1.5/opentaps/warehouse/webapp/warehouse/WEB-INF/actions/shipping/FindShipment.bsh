/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.sql.Timestamp;

import javolution.util.FastList;
import javolution.util.FastMap;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.party.party.PartyHelper;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.domain.DomainsLoader;
import org.opentaps.base.entities.Shipment;
import org.opentaps.base.entities.ShipmentAndItemIssuanceAndInventory;
import org.opentaps.base.entities.ShipmentAndReceiptAndInventory;
import org.opentaps.domain.shipping.ShippingRepositoryInterface;
import org.opentaps.foundation.infrastructure.Infrastructure;
import org.opentaps.foundation.infrastructure.User;

facilityId = parameters.get("facilityId");

// get the search parameters
lookupFlag = UtilCommon.getParameter(request, "lookupFlag");
shipmentId = UtilCommon.getParameter(request, "shipmentId");
shipmentTypeId = UtilCommon.getParameter(request, "shipmentTypeId");
partyIdFrom = UtilCommon.getParameter(request, "partyIdFrom");
partyIdTo = UtilCommon.getParameter(request, "partyIdTo");
statusId = UtilCommon.getParameter(request, "statusId");
lotId = UtilCommon.getParameter(request, "lotId");
formShipmentTypeId = UtilCommon.getParameter(request, "formShipmentTypeId");

module = "FindShipment.bsh";

// =============== Prepare the Option Data for the Find Form =================


isIncomingShipment = "INCOMING_SHIPMENT".equals(formShipmentTypeId);
context.put("isIncomingShipment", isIncomingShipment);

if (isIncomingShipment) {
    shipmentTypes = delegator.findByAnd("ShipmentType", UtilMisc.toMap("parentTypeId", "INCOMING_SHIPMENT"), UtilMisc.toList("description"));
} else {
    shipmentTypes = delegator.findByAnd("ShipmentType", UtilMisc.toMap("parentTypeId", "OUTGOING_SHIPMENT"), UtilMisc.toList("description"));
}
context.put("shipmentTypes", shipmentTypes);

facilities = delegator.findAll("Facility", UtilMisc.toList("facilityName"));
context.put("facilities", facilities);

// since purchase and sales shipments have different status codes, we'll need to make two separate lists
if (isIncomingShipment) {
    context.put("shipmentStatusList", delegator.findByAnd("StatusItem", UtilMisc.toMap("statusTypeId", "PURCH_SHIP_STATUS"), UtilMisc.toList("sequenceId")));
} else {
    context.put("shipmentStatusList", delegator.findByAnd("StatusItem", UtilMisc.toMap("statusTypeId", "SHIPMENT_STATUS"), UtilMisc.toList("sequenceId")));
}

// =============== Lookup the Shipments according to the given parameters =================

if (!"Y".equals(lookupFlag)) {
    return;
}

// build search conditions
findShipmentExprs = FastList.newInstance();
if (UtilValidate.isNotEmpty(shipmentId)) {
    findShipmentExprs.add(new EntityExpr("shipmentId", EntityOperator.EQUALS, shipmentId));
}
if (UtilValidate.isNotEmpty(shipmentTypeId)) {
    findShipmentExprs.add(new EntityExpr("shipmentTypeId", EntityOperator.EQUALS, shipmentTypeId));

    currentShipmentType = delegator.findByPrimaryKeyCache("ShipmentType", UtilMisc.toMap("shipmentTypeId", shipmentTypeId));
    context.put("currentShipmentType", currentShipmentType);
}
if (UtilValidate.isNotEmpty(partyIdFrom)) {
    findShipmentExprs.add(new EntityExpr("partyIdFrom", EntityOperator.EQUALS, partyIdFrom));

    currentPartyIdFrom = delegator.findByPrimaryKeyCache("Party", UtilMisc.toMap("partyId", partyIdFrom));
    context.put("currentPartyIdFrom", currentPartyIdFrom);
}
if (UtilValidate.isNotEmpty(partyIdTo)) {
    findShipmentExprs.add(new EntityExpr("partyIdTo", EntityOperator.EQUALS, partyIdTo));

    currentPartyIdTo = delegator.findByPrimaryKeyCache("Party", UtilMisc.toMap("partyId", partyIdTo));
    context.put("currentPartyIdTo", currentPartyIdTo);
}
if (UtilValidate.isNotEmpty(lotId)) {
    findShipmentExprs.add(new EntityExpr("lotId", EntityOperator.LIKE, lotId + "%"));

    currentLot = delegator.findByPrimaryKeyCache("Lot", UtilMisc.toMap("lotId", lotId));
    context.put("currentLot", currentLot);
}
if (UtilValidate.isNotEmpty(statusId)) {
    findShipmentExprs.add(new EntityExpr("statusId", EntityOperator.EQUALS, statusId));

    currentStatus = delegator.findByPrimaryKeyCache("StatusItem", UtilMisc.toMap("statusId", statusId));
    context.put("currentStatus", currentStatus);
}

// this restricts the shipment lookup to those coming into or going out of the current facility
if (isIncomingShipment) {
    findShipmentExprs.add(new EntityExpr("destinationFacilityId", EntityOperator.EQUALS, facilityId));
} else {
    findShipmentExprs.add(new EntityExpr("originFacilityId", EntityOperator.EQUALS, facilityId));
}

condition = new EntityConditionList(findShipmentExprs, EntityOperator.AND);

if (isIncomingShipment) {
    searchEntity = ShipmentAndReceiptAndInventory.class;
} else if (UtilValidate.isEmpty(lotId)) {
    searchEntity = Shipment.class;
} else {
    searchEntity = ShipmentAndItemIssuanceAndInventory.class;
}

// Pagination
shipmentListBuilder(repo, searchEntity, condition) {
    entityClass = searchEntity;
    repository = repo;
    where = condition;
    orderBy = UtilMisc.toList("-estimatedShipDate");
    fieldsToSelect = Arrays.asList(new String[] {"shipmentId", "shipmentTypeId", "statusId", "partyIdFrom", "partyIdTo", "destinationContactMechId", "estimatedShipDate"});

    build(page) {
        newPage = FastList.newInstance();
        for (shipment : page) {
            newRow = FastMap.newInstance();
            newRow.putAll(shipment.toMap());
            
            status = shipment.getStatusItem();
            newRow{"statusDescription"} = status.get("description", locale);

            shipmentType = shipment.getShipmentType();
            newRow{"shipmentTypeDescription"} = shipmentType.get("description", locale);

            if (UtilValidate.isNotEmpty(shipment.getPartyIdFrom())) {
                fromPartyName = PartyHelper.getPartyName(delegator, shipment.getPartyIdFrom(), false);
                newRow{"fromParty"} = fromPartyName + " (" + shipment.getPartyIdFrom() + ")";
            }
            if (UtilValidate.isNotEmpty(shipment.getPartyIdTo())) {
                toPartyName = PartyHelper.getPartyName(delegator, shipment.getPartyIdTo(), false);
                newRow{"toParty"} = toPartyName + " (" + shipment.getPartyIdTo() + ")";
            }

            if (UtilValidate.isNotEmpty(shipment.getDestinationContactMechId())) {
                destinationPostalAddress = delegator.findByPrimaryKeyCache("PostalAddress", UtilMisc.toMap("contactMechId", shipment.getDestinationContactMechId()));
                newRow{"destinationAddress"} = destinationPostalAddress.get("address1") + " - " + destinationPostalAddress.get("city");
            }

            newPage.add(newRow);
        }
        return newPage;
    }

    return this;
}
ShippingRepositoryInterface repository = new DomainsLoader(new Infrastructure(dispatcher), new User(parameters.get("userLogin"))).loadDomainsDirectory().getShippingDomain().getShippingRepository();
context.put("shipmentListBuilder", shipmentListBuilder(repository, searchEntity, condition));
