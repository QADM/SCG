/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been altered from the version included with the Apache-licensed OFBiz product application */
/* This file has been modified by Open Source Strategies, Inc. */

import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.order.order.*;
import org.ofbiz.party.party.PartyHelper;
import org.ofbiz.entity.util.EntityUtil;

import org.opentaps.common.util.UtilMessage;
import org.opentaps.common.order.UtilOrder;
import org.opentaps.common.party.PartyReader;
import org.opentaps.warehouse.security.WarehouseSecurity;

facilityId = parameters.get("facilityId");
if (UtilValidate.isNotEmpty(facilityId)) {
    facility = delegator.findByPrimaryKey("Facility", UtilMisc.toMap("facilityId", facilityId));
    context.put("facilityId", facilityId);
    context.put("facility", facility);
}

wsecurity = new WarehouseSecurity(security, userLogin, facilityId);
if (wsecurity.hasFacilityPermission("WRHS_INVOICE_VIEW")) {
    context.put("hasInvoiceViewPermission", true);
}

orderId = parameters.get("orderId");
shipGroupSeqId = parameters.get("shipGroupSeqId");

// Allow users to input both orderId and shipGroupSeqId in the orderId field (for barcode reading)
if (UtilValidate.isNotEmpty(orderId)) {
    // in that case both fields are separated with a '/' character
    int idxSep = orderId.indexOf('/');
    if (idxSep > 0) {
        if (orderId.length() > (idxSep+1)) {
            shipGroupSeqId = orderId.substring(idxSep+1);
        }
        orderId = orderId.substring(0, idxSep);
    }
}

// Default to shipGroupSeqId 00001
if (UtilValidate.isEmpty(shipGroupSeqId)) {
    shipGroupSeqId = "00001";
} else {
    padding = "00000";
    paddingLength = padding.length() - shipGroupSeqId.length();
    if (paddingLength > 0) {
        shipGroupSeqId = padding.substring(0,paddingLength).concat(shipGroupSeqId);
    }
}

shipmentId = parameters.get("shipmentId");
if (shipmentId == null) {
    shipmentId = request.getAttribute("shipmentId");
}
context.put("shipmentId", shipmentId);

// If a shipment exists, provide the IDs of any related invoices
if (UtilValidate.isNotEmpty(shipmentId)) {

    // Get the primaryOrderId from the shipment
    shipment = delegator.findByPrimaryKey("Shipment", UtilMisc.toMap("shipmentId", shipmentId));
    if (shipment != null && shipment.getString("primaryOrderId") != null) {
        orderItemBillingList = delegator.findByAnd("OrderItemBilling", UtilMisc.toMap("orderId", shipment.getString("primaryOrderId")), UtilMisc.toList("invoiceId"));
        invoiceIds = EntityUtil.getFieldListFromEntityList(orderItemBillingList, "invoiceId", true);
        if (invoiceIds != null) {
            context.put("invoiceIds", invoiceIds);
        }
    }
}
if (UtilValidate.isNotEmpty(orderId) && UtilValidate.isEmpty(shipGroupSeqId) && orderId.indexOf("/") > -1) {
    // split the orderID/shipGroupSeqID
    idSplit = orderId.split("\\/");
    orderId = idSplit[0];
    shipGroupSeqId = idSplit[1];
}

packSession = session.getAttribute("packingSession");
if (packSession == null) {

    // Use a PackingSession object which extends the OFBiz PackingSession
    packSession = new org.opentaps.warehouse.shipment.packing.PackingSession(dispatcher, userLogin);
    session.setAttribute("packingSession", packSession);
    Debug.log("Created NEW packing session!!");
} else {
    if (packSession.getStatus() == 0) {
        packSession.clear();
        shipGroupSeqId = null;
        orderId = null;
    }
}

// make sure we always re-set the infos
packSession.setPrimaryShipGroupSeqId(shipGroupSeqId);
packSession.setPrimaryOrderId(orderId);
packSession.setFacilityId(facilityId);

context.put("packingSession", packSession);
context.put("orderId", orderId);
context.put("shipGroupSeqId", shipGroupSeqId);

if (UtilValidate.isNotEmpty(orderId)) {
    orderHeader = delegator.findByPrimaryKey("OrderHeader", UtilMisc.toMap("orderId", orderId));
    if (orderHeader != null) {
        OrderReadHelper orh = new OrderReadHelper(orderHeader);

        // check if customer is in do not ship group
        partyReader = new PartyReader(orh.getBillToParty());
        if (partyReader.hasClassification("DONOTSHIP_CUSTOMERS")) {
            UtilMessage.addError(request, "OpentapsDoNotShipCustomer");
            return;
        }

        if ("ORDER_APPROVED".equals(orderHeader.getString("statusId"))) {
            if (UtilValidate.isNotEmpty(shipGroupSeqId)) {
                orderItemShipGroup = orh.getOrderItemShipGroup(shipGroupSeqId);

                if (orderItemShipGroup != null) {
                    if ("_NA_".equals(orderItemShipGroup.getString("contactMechId"))) {
                        UtilMessage.addError(request, "WarehouseError_OrderHaveUnknownAddress", UtilMisc.toMap("orderId", orderId, "shipGroupSeqId", shipGroupSeqId));
                        return;
                    }
                    context.put("orderId", orderId);
                    context.put("orderHeader", orderHeader);
                    context.put("orderReadHelper", orh);
                    context.put("orderItemShipGroup", orderItemShipGroup);

                    // Generate the shipment cost estimate for the ship group
                    productStore = orh.getProductStore();
                    productStoreId = productStore.get("productStoreId");
                    prorateShipping = productStore.get("prorateShipping");
                    shippableItemInfo = UtilOrder.getShippableItems(orderHeader, facilityId, shipGroupSeqId);
                    orderShippingCharges = orh.getShippingTotal();
                    context.put("orderShippingCharges", orderShippingCharges);
                    context.put("productStoreId", productStoreId);
                    context.put("prorateShipping", prorateShipping);
                    context.put("itemInfos", shippableItemInfo);

                    // get the total available qty to pack
                    totalAvailableToPack = 0;
                    for (oi : shippableItemInfo) {
                        totalAvailableToPack += UtilOrder.getQuantityToPack(oi, shipGroupSeqId, facilityId, packSession).doubleValue();
                    }
                    context.put("totalAvailableToPack", totalAvailableToPack);
                    
                    // Provide the shipmentBoxTypes for the carrier
                    carrierPartyId = orderItemShipGroup.get("carrierPartyId");
                    shipmentBoxTypes = delegator.findByAnd("CarrierShipmentBoxAndType", UtilMisc.toMap("partyId", carrierPartyId), UtilMisc.toList("description"));
                    context.put("shipmentBoxTypes", shipmentBoxTypes);
                    
                    // QOH by productId
                    qohByProductId = new HashMap();
                    productIds = EntityUtil.getFieldListFromEntityList(shippableItemInfo, "productId", true);
                    piit = productIds.iterator();
                    while (piit.hasNext()) {
                        productId = piit.next();
                        outMap = dispatcher.runSync("getInventoryAvailableByFacility", UtilMisc.toMap("productId", productId, "facilityId", facilityId, "userLogin", userLogin));
                        if (outMap.containsKey("quantityOnHandTotal")) {
                            qohByProductId.put(productId, outMap.get("quantityOnHandTotal"));
                        }
                    }
                    context.put("qohByProductId", qohByProductId);
                } else {
                    request.setAttribute("errorMessageList", UtilMisc.toList("Invalid ship group sequence ID. Cannot process."));
                }
            } else {
                request.setAttribute("errorMessageList", UtilMisc.toList("No ship group sequence ID. Cannot process."));
            }
        } else {
            orderStatus = "";
            if (UtilValidate.isNotEmpty(orderHeader.getRelatedOne("StatusItem"))) {
                orderStatus = UtilMessage.expandLabel("WarehouseError_StatusIs", locale, UtilMisc.toMap("status", orderHeader.getRelatedOne("StatusItem").get("description",locale)));
            }
            UtilMessage.addError(request, "WarehouseError_OrderNotApprovedPacking", UtilMisc.toMap("orderId", orderId, "orderStatus", orderStatus));
        }

        // Provide the name of the ship-to party
        context.put("customerName", PartyHelper.getPartyName(orh.getShipToParty()));

        // Provide the PO number
        context.put("customerPoNumber", UtilOrder.getCustomerPoNumber(orderHeader));

        // Provide the order currency
        context.put("currencyUomId", orh.getCurrency());

    } else {
        request.setAttribute("errorMessageList", UtilMisc.toList("Order #" + orderId + " cannot be found."));
    }
}

// Try to get the defaultWeightUomId first from the facility, then from the shipment properties, and finally defaulting to kilos
defaultWeightUomId = null; 
if (! UtilValidate.isEmpty(facility)) {
    defaultWeightUomId = facility.getString("defaultWeightUomId");
}
if (UtilValidate.isEmpty(defaultWeightUomId)) {
    defaultWeightUomId = UtilProperties.getPropertyValue("shipment.properties", "shipment.default.weight.uom", "WT_kg");
}
context.put("defaultWeightUomId", defaultWeightUomId);

// Inventory Items
inventoryItems = new HashMap();
packedLines = packSession.getLines();
if (UtilValidate.isNotEmpty(packedLines)) {
    plit = packedLines.iterator();
    while (plit.hasNext()) {
        packedLine = plit.next();
        if (UtilValidate.isNotEmpty(packedLine.getInventoryItemId())) {
            inventoryItem = delegator.findByPrimaryKey("InventoryItem", UtilMisc.toMap("inventoryItemId", packedLine.getInventoryItemId()));
            inventoryItems.put(packedLine, inventoryItem);            
        }
    }
}
context.put("inventoryItems", inventoryItems);
