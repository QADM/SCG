/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */
        
import javolution.util.FastMap;
import org.ofbiz.base.util.UtilMisc;
import org.opentaps.warehouse.facility.UtilWarehouse;

facility = null;
facilityId = UtilWarehouse.getFacilityId(request);
if (facilityId != null) {
    facility = delegator.findByPrimaryKey("Facility", UtilMisc.toMap("facilityId", facilityId));
}
if (facility == null) facility = FastMap.newInstance(); // initiate a blank map, which simplifies the FTL
context.put("facility", facility);

facilityTypes = delegator.findAllCache("FacilityType", UtilMisc.toList("description"));
context.put("facilityTypes", facilityTypes);

//Facility types
Collection facilityTypes = delegator.findAll("FacilityType");
if (facilityTypes != null)
  context.put("facilityTypes", facilityTypes);

// all possible inventory item types
inventoryItemTypes = delegator.findAllCache("InventoryItemType", UtilMisc.toList("description"));
context.put("inventoryItemTypes", inventoryItemTypes);

// unit of measures
weightUomList = UtilMisc.toList(UtilMisc.toMap("description", "None", "uomId", ""));
weightUomList2 = delegator.findByAndCache("Uom", UtilMisc.toMap("uomTypeId", "WEIGHT_MEASURE"));
if (weightUomList2 != null) {
    weightUomList.addAll(weightUomList2);
}

context.put("weightUomList", weightUomList);
