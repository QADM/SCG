/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */
import org.ofbiz.base.util.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.service.GenericServiceException;
import org.opentaps.common.util.*;
import javolution.util.FastMap;
import javolution.util.FastList;
import org.opentaps.warehouse.domain.inventory.TraceInventoryService;
import org.opentaps.domain.DomainsLoader;
import org.opentaps.warehouse.domain.inventory.InventoryDomain;
import org.opentaps.warehouse.domain.inventory.InventoryRepository;
import org.opentaps.foundation.repository.ofbiz.Repository;
import org.opentaps.foundation.infrastructure.Infrastructure;
import org.opentaps.foundation.infrastructure.User;


performFind = UtilCommon.getParameter(request, "performFind");
if (performFind == void || UtilValidate.isEmpty(performFind) || "N".equals(performFind)) {
    return;
}

direction = UtilCommon.getParameter(request, "traceDirection");
context.put("direction", direction);

domainsLoader = new DomainsLoader(new Infrastructure(dispatcher), new User(userLogin));
inventoryDomain = domainsLoader.loadDomainsDirectory().getInventoryDomain();
inventoryRepository = inventoryDomain.getInventoryRepository();
if (inventoryRepository != null) {
    context.put("inventoryRepository", inventoryRepository);
}

inventoryItemId = UtilCommon.getParameter(request, "inventoryItemId");
if (UtilValidate.isEmpty(inventoryItemId)) {
    lotId = UtilCommon.getParameter(request, "lotId");
    if (UtilValidate.isEmpty(lotId)) {
        UtilMessage.addError(request, UtilMessage.expandLabel("WarehouseError_MissingAttributesForTrace", UtilHttp.getLocale(request)));
        return;
    }
}

findParameters = null;
if (UtilValidate.isNotEmpty(inventoryItemId)) {
   findParameters = UtilMisc.toMap("inventoryItemId", inventoryItemId, "userLogin", userLogin);
   messageTrail = "inventory item [" + inventoryItemId + "]";
} else {
    findParameters = UtilMisc.toMap("lotId", lotId, "userLogin", userLogin);
    messageTrail = "lot [" + lotId + "]";
}

ctxt = FastMap.newInstance();
ctxt.putAll(findParameters);
ctxt.put("traceDirection", direction);
results = dispatcher.runSync("warehouse.traceInventoryUsage", ctxt);

usageLog = results.get("usageLog");
if (UtilValidate.isEmpty(usageLog)) {
    // no usage history
    UtilMessage.addError(request, "There are no usage events for " + messageTrail);
    return;
}

traceLog = FastList.newInstance();

for (itemTraceDetails : usageLog) {

    trace = FastList.newInstance();

    for (event : itemTraceDetails) {

        // add all properties of InventoryItemTraceDetail
        Map usageMap = FastMap.newInstance();
        usageMap.putAll(event.toMap());

        // add usage type
        usageMap.put("usageType", event.getInventoryItemUsageType());

        // add source inventory item
        fromInventoryItem = event.getInventoryItem();
        if (fromInventoryItem != null) {
            usageMap.put("fromProductId", fromInventoryItem.getProductId());
            usageMap.put("fromLotId", fromInventoryItem.getLotId());
        }

        // add target inventory item
        toInventoryItem = event.getToInventoryItem();
        if (toInventoryItem != null) {
            usageMap.put("toProductId", toInventoryItem.getProductId());
            usageMap.put("toLotId", toInventoryItem.getLotId());
        }

        // order info
        issuance = event.getItemIssuance();
        if (UtilValidate.isNotEmpty(issuance)) {
            usageMap.put("orderId", issuance.getOrderId());
            orderItem = issuance.getOrderItem();
            if (orderItem != null) {
                usageMap.put("correspondingPoId", orderItem.getCorrespondingPoId());
            }
        }

        // production run info
        productionRunId = event.getProducedWorkEffortId();
        if (UtilValidate.isNotEmpty(productionRunId)) {
            usageMap.put("productionRunId", productionRunId);
        }

        // variance reason info
        s = event.getInventoryItemUsageTypeId();
        if (event.getInventoryItemUsageTypeId().equals("VARIANCE")) {
            varianceReason = event.getVarianceReason();
            usageMap.put("varianceReason", varianceReason);
        }

        trace.add(usageMap);
    }

    traceLog.add(trace);
}

if (UtilValidate.isNotEmpty(traceLog)) {
    context.put("traceLog", traceLog);
}
