<?xml version="1.0" encoding="UTF-8" ?>
<!--
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
-->
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<!-- This file has been modified by Open Source Strategies, Inc. -->


<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <!-- Warehouse -->
    <simple-method method-name="issueProductionRunTask" short-description="Issues the Inventory for a Production Run Task" login-required="false">
        <entity-one entity-name="WorkEffort" value-field="workEffort"/>

        <if-not-empty field="workEffort">
            <if-compare value="PRUN_CANCELLED" operator="not-equals" field="workEffort.currentStatusId">
                <set from-field="parameters.workEffortId" field="lookupComponentsMap.workEffortId"/>
                <set value="WEGS_CREATED" field="lookupComponentsMap.statusId"/>
                <set field="lookupComponentsMap.workEffortGoodStdTypeId" value="PRUNT_PROD_NEEDED"/>

                <find-by-and entity-name="WorkEffortGoodStandard" list="components" map="lookupComponentsMap" />
                <!-- now go through each work effort good standard and call a service to issue the inventory -->
                <iterate list="components" entry="component">
                    <if-not-empty field="component.productId">
                        <clear-field field="callSvcMap"/>
                        <set-service-fields to-map="callSvcMap" service-name="issueProductionRunTaskComponent" map="component"/>
                        <set from-field="workEffort" field="callSvcMap.workEffort"/>
                        <set from-field="component" field="callSvcMap.workEffortGoodStandard"/>
                        <set from-field="reserveOrderEnumId" field="callSvcMap.reserveOrderEnumId"/>
                        <set field="callSvcMap.description" value="BOM Part"/>
                        <call-service service-name="issueProductionRunTaskComponent" in-map-name="callSvcMap"/>

                        <set value="WEGS_COMPLETED" field="component.statusId"/>
                        <store-value value-field="component"/>
                    </if-not-empty>
                </iterate>
                <log level="info" message="Issued inventory for workEffortId ${workEffort.workEffortId}."/>
            </if-compare>
        </if-not-empty>
    </simple-method>  
    <simple-method method-name="issueProductionRunTaskComponent" short-description="Issues the Inventory for a Production Run Task Component" login-required="false">
        <log level="fatal" message="I'm running the opentaps issueProductionRunTaskComponent"/>
        <if-empty field="parameters.workEffortGoodStandard">
            <set from-field="parameters.productId" field="productId"/>
            <set from-field="parameters.quantity" field="estimatedQuantity" default-value="0.0" type="BigDecimal"/>
        <else>
            <set from-field="parameters.workEffortGoodStandard" field="workEffortGoodStandard"/>
            <set from-field="workEffortGoodStandard.productId" field="productId"/>
            <set from-field="workEffortGoodStandard.estimatedQuantity" field="estimatedQuantity"/>
        </else>
        </if-empty>

        
        <!-- kind of like the inventory reservation routine, find InventoryItems to issue from, but instead of doing the reservation just create an issuance and an inventory item detail for the change -->
        <if-not-empty field="productId">
            <now-timestamp field="nowTimestamp"/>

            <!-- NOTE: the inventory will be issued from the WorkEffort.facilityId -->
            <if-empty field="parameters.workEffort">
                <entity-one entity-name="WorkEffort" value-field="workEffort"/>
            <else>
                <set from-field="parameters.workEffort" field="workEffort"/>
            </else>
            </if-empty>
            
            <!-- before we do the find, put together the orderBy list based on which reserveOrderEnumId is specified -->
            <if-compare value="INVRO_FIFO_EXP" operator="equals" field="parameters.reserveOrderEnumId">
                <set value="+expireDate" field="orderByList[]"/>
                <set value="+inventoryItemId" field="orderByList[]"/>
            <else>
                <if-compare value="INVRO_LIFO_EXP" operator="equals" field="parameters.reserveOrderEnumId">
                    <set value="-expireDate" field="orderByList[]"/>
                    <set value="-inventoryItemId" field="orderByList[]"/>
                <else>
                    <if-compare value="INVRO_LIFO_REC" operator="equals" field="parameters.reserveOrderEnumId">
                        <set value="-datetimeReceived" field="orderByList[]"/>
                        <set value="-inventoryItemId" field="orderByList[]"/>
                    <else>
                        <!-- the default reserveOrderEnumId is INVRO_FIFO_REC, ie FIFO based on date received -->
                        <set value="+datetimeReceived" field="orderByList[]"/>
                        <set value="+inventoryItemId" field="orderByList[]"/>
                        <set value="INVRO_FIFO_REC" field="parameters.reserveOrderEnumId"/>
                    </else>
                    </if-compare>
                </else>
                </if-compare>
            </else>
            </if-compare>
            <set from-field="productId" field="lookupFieldMap.productId"/>
            <set from-field="workEffort.facilityId" field="lookupFieldMap.facilityId"/>
            <find-by-and entity-name="InventoryItem" map="lookupFieldMap" list="inventoryItemList" order-by-list="orderByList"/>
    
            <set from-field="estimatedQuantity" field="parameters.quantityNotIssued"/>

            <iterate entry="inventoryItem" list="inventoryItemList">
                <!-- this is a little trick to get the InventoryItem value object without doing a query, possible since all fields on InventoryItem are also on InventoryItemAndLocation with the same names -->
                <call-simple-method method-name="issueProductionRunTaskComponentInline"/>
            </iterate>

            <!-- if quantityNotIssued is not 0, then pull it from the last non-serialized inventory item found, in the quantityNotIssued field -->
            <if-compare field="parameters.quantityNotIssued" operator="not-equals" value="0" type="BigDecimal">
                <if-not-empty field="lastNonSerInventoryItem">
                    <!-- create ItemIssuance record -->
                    <set from-field="parameters.workEffortId" field="issuanceCreateMap.workEffortId"/>
                    <set from-field="lastNonSerInventoryItem.inventoryItemId" field="issuanceCreateMap.inventoryItemId"/>
                    <set from-field="parameters.quantityNotIssued" field="issuanceCreateMap.quantity"/>
                    <call-service service-name="assignInventoryToWorkEffort" in-map-name="issuanceCreateMap">
                    </call-service>

                    <!-- subtract from quantityNotIssued from the availableToPromise and quantityOnHand of existing inventory item -->
                    <!-- instead of updating InventoryItem, add an InventoryItemDetail -->
                    <set from-field="lastNonSerInventoryItem.inventoryItemId" field="createDetailMap.inventoryItemId"/>
                    <set from-field="parameters.workEffortId" field="createDetailMap.workEffortId"/>
                    <!--
                    <calculate field-name="createDetailMap.availableToPromiseDiff" type="BigDecimal">
                        <calcop field-name="parameters.quantityNotIssued" operator="negative"/>
                    </calculate>
                    -->
                    <calculate field="createDetailMap.quantityOnHandDiff" type="BigDecimal">
                        <calcop field="parameters.quantityNotIssued" operator="negative"/>
                    </calculate>
                    <set field="createDetailMap.reasonEnumId" from-field="parameters.reasonEnumId"/>
                    <set field="createDetailMap.description" from-field="parameters.description"/>
                    <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>
                    <clear-field field="createDetailMap"/>
                <else>
                    <!-- no non-ser inv item, create a non-ser InventoryItem with availableToPromise = -quantityNotIssued -->
                    <clear-field field="createInvItemInMap"/>
                    <clear-field field="createInvItemOutMap"/>
                    <set field="createInvItemInMap.productId" from-field="productId"/>
                    <set field="createInvItemInMap.facilityId" from-field="workEffort.facilityId"/>
                    <set field="createInvItemInMap.inventoryItemTypeId" value="NON_SERIAL_INV_ITEM"/>
                    <call-service service-name="createInventoryItem" in-map-name="createInvItemInMap">
                        <result-to-field result-name="inventoryItemId" field="createInvItemOutMap.inventoryItemId"/>
                    </call-service>
                    
                    <!-- create ItemIssuance record -->
                    <set field="issuanceCreateMap.workEffortId" from-field="parameters.workEffortId"/>
                    <set field="issuanceCreateMap.inventoryItemId" from-field="createInvItemOutMap.inventoryItemId"/>
                    <set field="issuanceCreateMap.quantity" from-field="parameters.quantityNotIssued"/>
                    <call-service service-name="assignInventoryToWorkEffort" in-map-name="issuanceCreateMap">
                    </call-service>

                    <!-- also create a detail record with the quantities -->
                    <set field="createDetailMap.inventoryItemId" from-field="createInvItemOutMap.inventoryItemId"/>
                    <set field="createDetailMap.workEffortId" from-field="parameters.workEffortId"/>
                    <!--
                    <calculate field-name="createDetailMap.availableToPromiseDiff" type="BigDecimal">
                        <calcop field-name="parameters.quantityNotIssued" operator="negative"/>
                    </calculate>
                    -->
                    <calculate field="createDetailMap.quantityOnHandDiff" type="BigDecimal">
                        <calcop field="parameters.quantityNotIssued" operator="negative"/>
                    </calculate>
                    <set field="createDetailMap.reasonEnumId" from-field="parameters.reasonEnumId"/>
                    <set field="createDetailMap.description" from-field="parameters.description"/>
                    <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>
                    <clear-field field="createDetailMap"/>
                </else>
                </if-not-empty>

                <calculate field="parameters.quantityNotIssued"><number value="0"/></calculate>
            </if-compare>
            <if-not-empty field="workEffortGoodStandard">
                <set value="WEGS_COMPLETED" field="workEffortGoodStandard.statusId"/>
                <store-value value-field="workEffortGoodStandard"/>
            </if-not-empty>
        </if-not-empty>
    </simple-method>
    <simple-method method-name="issueProductionRunTaskComponentInline" short-description="Does a issuance for one InventoryItem, meant to be called in-line">
        <!-- only do something with this inventoryItem if there is more inventory to issue -->
        <if-compare field="parameters.quantityNotIssued" operator="greater" value="0" type="BigDecimal">
            <if-compare value="SERIALIZED_INV_ITEM" operator="equals" field="inventoryItem.inventoryItemTypeId">
                <if-compare value="INV_AVAILABLE" operator="equals" field="inventoryItem.statusId">
                    <!-- change status on inventoryItem -->
                    <set value="INV_DELIVERED" field="inventoryItem.statusId"/>
                    <store-value value-field="inventoryItem"/>

                    <!-- create ItemIssuance record -->
                    <set from-field="parameters.workEffortId" field="issuanceCreateMap.workEffortId"/>
                    <set from-field="inventoryItem.inventoryItemId" field="issuanceCreateMap.inventoryItemId"/>
                    <calculate field="issuanceCreateMap.quantity"><number value="1"/></calculate>
                    <call-service service-name="assignInventoryToWorkEffort" in-map-name="issuanceCreateMap"/>
                    <clear-field field="issuanceCreateMap"/>

                    <calculate field="parameters.quantityNotIssued">
                        <calcop field="parameters.quantityNotIssued" operator="subtract"><number value="1.0"/></calcop>
                    </calculate>
                </if-compare>
            </if-compare>
            <if-compare field="inventoryItem.inventoryItemTypeId" operator="equals" value="NON_SERIAL_INV_ITEM">
                <if-not-empty field="inventoryItem.availableToPromiseTotal">
                    <!-- reduce atp on inventoryItem if availableToPromise greater than 0, if not the code at the end of this method will handle it -->
                    <if-compare field="inventoryItem.availableToPromiseTotal" operator="greater" value="0" type="BigDecimal">
                        <if-compare-field field="parameters.quantityNotIssued" operator="greater" to-field="inventoryItem.availableToPromiseTotal" type="BigDecimal">
                            <set from-field="inventoryItem.availableToPromiseTotal" field="parameters.deductAmount"/>
                        <else>
                            <set from-field="parameters.quantityNotIssued" field="parameters.deductAmount"/>
                        </else>
                        </if-compare-field>
                        
                        <!-- create WorkEffortInventoryAssign record -->
                        <set from-field="parameters.workEffortId" field="issuanceCreateMap.workEffortId"/>
                        <set from-field="inventoryItem.inventoryItemId" field="issuanceCreateMap.inventoryItemId"/>
                        <set from-field="parameters.deductAmount" field="issuanceCreateMap.quantity"/>
                        <call-service service-name="assignInventoryToWorkEffort" in-map-name="issuanceCreateMap">
                        </call-service>

                        <!-- instead of updating InventoryItem, add an InventoryItemDetail -->
                        <set from-field="inventoryItem.inventoryItemId" field="createDetailMap.inventoryItemId"/>
                        <set from-field="parameters.workEffortId" field="createDetailMap.workEffortId"/>
                        <!-- update availableToPromiseDiff AND quantityOnHandDiff since this is an issuance -->
                        <calculate field="createDetailMap.availableToPromiseDiff" type="BigDecimal">
                            <calcop field="parameters.deductAmount" operator="negative"/>
                        </calculate>
                        <calculate field="createDetailMap.quantityOnHandDiff" type="BigDecimal">
                            <calcop field="parameters.deductAmount" operator="negative"/>
                        </calculate>
                        <set field="createDetailMap.reasonEnumId" from-field="parameters.reasonEnumId"/>
                        <set field="createDetailMap.description" from-field="parameters.description"/>
                        <call-service service-name="createInventoryItemDetail" in-map-name="createDetailMap"/>
                        <clear-field field="createDetailMap"/>
                        
                        <calculate field="parameters.quantityNotIssued">
                            <calcop operator="subtract" field="parameters.quantityNotIssued">
                                <calcop operator="get" field="parameters.deductAmount"/>
                            </calcop>
                        </calculate>

                        <clear-field field="issuanceCreateMap"/>
                    </if-compare>
                </if-not-empty>

                <!-- keep track of the last non-serialized inventory item for use if inventory is not sufficient for amount already issued -->
                <!-- use env variable named lastNonSerInventoryItem -->
                <set from-field="inventoryItem" field="lastNonSerInventoryItem"/>
            </if-compare>
        </if-compare>
    </simple-method>   
</simple-methods>
